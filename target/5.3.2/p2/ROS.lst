
/Users/friedl/Desktop/Projects/ROS/target/5.3.2/p2/ROS.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .module_info  00000018  085fa000  085fa000  0000a000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000006c  085fa018  085fa018  0000a018  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .ARM.exidx    00000008  085fa084  085fa084  0000a084  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .dynalib      00000008  023fa960  085fa090  0000a960  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .psram_text   00005694  023fa968  085fa098  0000a968  2**3
                  CONTENTS, ALLOC, LOAD, CODE
  5 .data_alt     00000000  023ffffc  023ffffc  00020000  2**0
                  CONTENTS
  6 .bss_alt      00000000  023ffffc  023ffffc  00020000  2**0
                  CONTENTS
  7 .data         00000070  1007ad48  085ff72c  0001ad48  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .bss          00000230  1007adb8  1007adb8  0002adb8  2**2
                  ALLOC
  9 .secure_ram_text 00000000  1007e000  1007e000  00020000  2**0
                  CONTENTS
 10 .backup       00000004  1007b400  085ff79c  0001b400  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 11 .module_info_suffix_align 00000818  085ff7a0  085ff7a0  0001f7a0  2**0
                  ALLOC
 12 .module_info_product 00000006  085fffb8  085fffb8  0001f7a0  2**0
                  ALLOC
 13 .module_info_suffix 0000003e  085fffbe  085fffbe  0001ffbe  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
 14 .module_info_crc 00000004  085ffffc  085ffffc  0001fffc  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
 15 .debug_info   001603a7  00000000  00000000  00020000  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_abbrev 000179b6  00000000  00000000  001803a7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_loc    0004bbbb  00000000  00000000  00197d5d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_aranges 00003598  00000000  00000000  001e3918  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_ranges 0000c370  00000000  00000000  001e6eb0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_macro  0002deeb  00000000  00000000  001f3220  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line   00052b9e  00000000  00000000  0022110b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_str    000d223c  00000000  00000000  00273ca9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_frame  00009fe4  00000000  00000000  00345ee8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

085fa018 <module_user_pre_init>:
 * Initializes this user module. Returns the start of the heap.
 */
__attribute__((section(".xip.text"))) void* module_user_pre_init() {
    // NOTE: Must invoke APIs in ROM
    // Copy .data
    if ( (&link_global_data_start != &link_global_data_initial_values) && (link_global_data_size != 0))
 85fa018:	480e      	ldr	r0, [pc, #56]	; (85fa054 <module_user_pre_init+0x3c>)
 85fa01a:	490f      	ldr	r1, [pc, #60]	; (85fa058 <module_user_pre_init+0x40>)
__attribute__((section(".xip.text"))) void* module_user_pre_init() {
 85fa01c:	b508      	push	{r3, lr}
    if ( (&link_global_data_start != &link_global_data_initial_values) && (link_global_data_size != 0))
 85fa01e:	4288      	cmp	r0, r1
 85fa020:	d005      	beq.n	85fa02e <module_user_pre_init+0x16>
 85fa022:	4a0e      	ldr	r2, [pc, #56]	; (85fa05c <module_user_pre_init+0x44>)
 85fa024:	4282      	cmp	r2, r0
 85fa026:	d002      	beq.n	85fa02e <module_user_pre_init+0x16>
    {
        _memcpy(&link_global_data_start, &link_global_data_initial_values, link_global_data_size);
 85fa028:	4b0d      	ldr	r3, [pc, #52]	; (85fa060 <module_user_pre_init+0x48>)
 85fa02a:	1a12      	subs	r2, r2, r0
 85fa02c:	4798      	blx	r3
    }

    // Initialize .bss
    _memset(&link_bss_location, 0, link_bss_size );
 85fa02e:	480d      	ldr	r0, [pc, #52]	; (85fa064 <module_user_pre_init+0x4c>)
 85fa030:	4a0d      	ldr	r2, [pc, #52]	; (85fa068 <module_user_pre_init+0x50>)
 85fa032:	2100      	movs	r1, #0
 85fa034:	4b0d      	ldr	r3, [pc, #52]	; (85fa06c <module_user_pre_init+0x54>)
 85fa036:	1a12      	subs	r2, r2, r0
 85fa038:	4798      	blx	r3

    // Copy .psram_text
    if ( (&link_psram_code_start != &link_psram_code_flash_start) && (link_psram_code_size != 0))
 85fa03a:	480d      	ldr	r0, [pc, #52]	; (85fa070 <module_user_pre_init+0x58>)
 85fa03c:	490d      	ldr	r1, [pc, #52]	; (85fa074 <module_user_pre_init+0x5c>)
 85fa03e:	4288      	cmp	r0, r1
 85fa040:	d005      	beq.n	85fa04e <module_user_pre_init+0x36>
 85fa042:	4a0d      	ldr	r2, [pc, #52]	; (85fa078 <module_user_pre_init+0x60>)
 85fa044:	4282      	cmp	r2, r0
 85fa046:	d002      	beq.n	85fa04e <module_user_pre_init+0x36>
    {
        _memcpy(&link_psram_code_start, &link_psram_code_flash_start, link_psram_code_size);
 85fa048:	4b05      	ldr	r3, [pc, #20]	; (85fa060 <module_user_pre_init+0x48>)
 85fa04a:	1a12      	subs	r2, r2, r0
 85fa04c:	4798      	blx	r3
    }

    return &link_global_data_start;
}
 85fa04e:	4801      	ldr	r0, [pc, #4]	; (85fa054 <module_user_pre_init+0x3c>)
 85fa050:	bd08      	pop	{r3, pc}
 85fa052:	bf00      	nop
 85fa054:	1007ad48 	.word	0x1007ad48
 85fa058:	085ff72c 	.word	0x085ff72c
 85fa05c:	1007adb8 	.word	0x1007adb8
 85fa060:	10110d2d 	.word	0x10110d2d
 85fa064:	1007adb8 	.word	0x1007adb8
 85fa068:	1007afe8 	.word	0x1007afe8
 85fa06c:	10110ea1 	.word	0x10110ea1
 85fa070:	023fa960 	.word	0x023fa960
 85fa074:	085fa090 	.word	0x085fa090
 85fa078:	023ffffc 	.word	0x023ffffc

085fa07c <dynalib_preinit>:
 85fa07c:	085fa019 00000000                       .._.....

Disassembly of section .psram_text:

023fa968 <__aeabi_drsub>:
 23fa968:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 23fa96c:	e002      	b.n	23fa974 <__adddf3>
 23fa96e:	bf00      	nop

023fa970 <__aeabi_dsub>:
 23fa970:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

023fa974 <__adddf3>:
 23fa974:	b530      	push	{r4, r5, lr}
 23fa976:	ea4f 0441 	mov.w	r4, r1, lsl #1
 23fa97a:	ea4f 0543 	mov.w	r5, r3, lsl #1
 23fa97e:	ea94 0f05 	teq	r4, r5
 23fa982:	bf08      	it	eq
 23fa984:	ea90 0f02 	teqeq	r0, r2
 23fa988:	bf1f      	itttt	ne
 23fa98a:	ea54 0c00 	orrsne.w	ip, r4, r0
 23fa98e:	ea55 0c02 	orrsne.w	ip, r5, r2
 23fa992:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 23fa996:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 23fa99a:	f000 80e2 	beq.w	23fab62 <__adddf3+0x1ee>
 23fa99e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 23fa9a2:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 23fa9a6:	bfb8      	it	lt
 23fa9a8:	426d      	neglt	r5, r5
 23fa9aa:	dd0c      	ble.n	23fa9c6 <__adddf3+0x52>
 23fa9ac:	442c      	add	r4, r5
 23fa9ae:	ea80 0202 	eor.w	r2, r0, r2
 23fa9b2:	ea81 0303 	eor.w	r3, r1, r3
 23fa9b6:	ea82 0000 	eor.w	r0, r2, r0
 23fa9ba:	ea83 0101 	eor.w	r1, r3, r1
 23fa9be:	ea80 0202 	eor.w	r2, r0, r2
 23fa9c2:	ea81 0303 	eor.w	r3, r1, r3
 23fa9c6:	2d36      	cmp	r5, #54	; 0x36
 23fa9c8:	bf88      	it	hi
 23fa9ca:	bd30      	pophi	{r4, r5, pc}
 23fa9cc:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 23fa9d0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 23fa9d4:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 23fa9d8:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 23fa9dc:	d002      	beq.n	23fa9e4 <__adddf3+0x70>
 23fa9de:	4240      	negs	r0, r0
 23fa9e0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 23fa9e4:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 23fa9e8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 23fa9ec:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 23fa9f0:	d002      	beq.n	23fa9f8 <__adddf3+0x84>
 23fa9f2:	4252      	negs	r2, r2
 23fa9f4:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 23fa9f8:	ea94 0f05 	teq	r4, r5
 23fa9fc:	f000 80a7 	beq.w	23fab4e <__adddf3+0x1da>
 23faa00:	f1a4 0401 	sub.w	r4, r4, #1
 23faa04:	f1d5 0e20 	rsbs	lr, r5, #32
 23faa08:	db0d      	blt.n	23faa26 <__adddf3+0xb2>
 23faa0a:	fa02 fc0e 	lsl.w	ip, r2, lr
 23faa0e:	fa22 f205 	lsr.w	r2, r2, r5
 23faa12:	1880      	adds	r0, r0, r2
 23faa14:	f141 0100 	adc.w	r1, r1, #0
 23faa18:	fa03 f20e 	lsl.w	r2, r3, lr
 23faa1c:	1880      	adds	r0, r0, r2
 23faa1e:	fa43 f305 	asr.w	r3, r3, r5
 23faa22:	4159      	adcs	r1, r3
 23faa24:	e00e      	b.n	23faa44 <__adddf3+0xd0>
 23faa26:	f1a5 0520 	sub.w	r5, r5, #32
 23faa2a:	f10e 0e20 	add.w	lr, lr, #32
 23faa2e:	2a01      	cmp	r2, #1
 23faa30:	fa03 fc0e 	lsl.w	ip, r3, lr
 23faa34:	bf28      	it	cs
 23faa36:	f04c 0c02 	orrcs.w	ip, ip, #2
 23faa3a:	fa43 f305 	asr.w	r3, r3, r5
 23faa3e:	18c0      	adds	r0, r0, r3
 23faa40:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 23faa44:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 23faa48:	d507      	bpl.n	23faa5a <__adddf3+0xe6>
 23faa4a:	f04f 0e00 	mov.w	lr, #0
 23faa4e:	f1dc 0c00 	rsbs	ip, ip, #0
 23faa52:	eb7e 0000 	sbcs.w	r0, lr, r0
 23faa56:	eb6e 0101 	sbc.w	r1, lr, r1
 23faa5a:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 23faa5e:	d31b      	bcc.n	23faa98 <__adddf3+0x124>
 23faa60:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 23faa64:	d30c      	bcc.n	23faa80 <__adddf3+0x10c>
 23faa66:	0849      	lsrs	r1, r1, #1
 23faa68:	ea5f 0030 	movs.w	r0, r0, rrx
 23faa6c:	ea4f 0c3c 	mov.w	ip, ip, rrx
 23faa70:	f104 0401 	add.w	r4, r4, #1
 23faa74:	ea4f 5244 	mov.w	r2, r4, lsl #21
 23faa78:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 23faa7c:	f080 809a 	bcs.w	23fabb4 <__adddf3+0x240>
 23faa80:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 23faa84:	bf08      	it	eq
 23faa86:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 23faa8a:	f150 0000 	adcs.w	r0, r0, #0
 23faa8e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 23faa92:	ea41 0105 	orr.w	r1, r1, r5
 23faa96:	bd30      	pop	{r4, r5, pc}
 23faa98:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 23faa9c:	4140      	adcs	r0, r0
 23faa9e:	eb41 0101 	adc.w	r1, r1, r1
 23faaa2:	3c01      	subs	r4, #1
 23faaa4:	bf28      	it	cs
 23faaa6:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 23faaaa:	d2e9      	bcs.n	23faa80 <__adddf3+0x10c>
 23faaac:	f091 0f00 	teq	r1, #0
 23faab0:	bf04      	itt	eq
 23faab2:	4601      	moveq	r1, r0
 23faab4:	2000      	moveq	r0, #0
 23faab6:	fab1 f381 	clz	r3, r1
 23faaba:	bf08      	it	eq
 23faabc:	3320      	addeq	r3, #32
 23faabe:	f1a3 030b 	sub.w	r3, r3, #11
 23faac2:	f1b3 0220 	subs.w	r2, r3, #32
 23faac6:	da0c      	bge.n	23faae2 <__adddf3+0x16e>
 23faac8:	320c      	adds	r2, #12
 23faaca:	dd08      	ble.n	23faade <__adddf3+0x16a>
 23faacc:	f102 0c14 	add.w	ip, r2, #20
 23faad0:	f1c2 020c 	rsb	r2, r2, #12
 23faad4:	fa01 f00c 	lsl.w	r0, r1, ip
 23faad8:	fa21 f102 	lsr.w	r1, r1, r2
 23faadc:	e00c      	b.n	23faaf8 <__adddf3+0x184>
 23faade:	f102 0214 	add.w	r2, r2, #20
 23faae2:	bfd8      	it	le
 23faae4:	f1c2 0c20 	rsble	ip, r2, #32
 23faae8:	fa01 f102 	lsl.w	r1, r1, r2
 23faaec:	fa20 fc0c 	lsr.w	ip, r0, ip
 23faaf0:	bfdc      	itt	le
 23faaf2:	ea41 010c 	orrle.w	r1, r1, ip
 23faaf6:	4090      	lslle	r0, r2
 23faaf8:	1ae4      	subs	r4, r4, r3
 23faafa:	bfa2      	ittt	ge
 23faafc:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 23fab00:	4329      	orrge	r1, r5
 23fab02:	bd30      	popge	{r4, r5, pc}
 23fab04:	ea6f 0404 	mvn.w	r4, r4
 23fab08:	3c1f      	subs	r4, #31
 23fab0a:	da1c      	bge.n	23fab46 <__adddf3+0x1d2>
 23fab0c:	340c      	adds	r4, #12
 23fab0e:	dc0e      	bgt.n	23fab2e <__adddf3+0x1ba>
 23fab10:	f104 0414 	add.w	r4, r4, #20
 23fab14:	f1c4 0220 	rsb	r2, r4, #32
 23fab18:	fa20 f004 	lsr.w	r0, r0, r4
 23fab1c:	fa01 f302 	lsl.w	r3, r1, r2
 23fab20:	ea40 0003 	orr.w	r0, r0, r3
 23fab24:	fa21 f304 	lsr.w	r3, r1, r4
 23fab28:	ea45 0103 	orr.w	r1, r5, r3
 23fab2c:	bd30      	pop	{r4, r5, pc}
 23fab2e:	f1c4 040c 	rsb	r4, r4, #12
 23fab32:	f1c4 0220 	rsb	r2, r4, #32
 23fab36:	fa20 f002 	lsr.w	r0, r0, r2
 23fab3a:	fa01 f304 	lsl.w	r3, r1, r4
 23fab3e:	ea40 0003 	orr.w	r0, r0, r3
 23fab42:	4629      	mov	r1, r5
 23fab44:	bd30      	pop	{r4, r5, pc}
 23fab46:	fa21 f004 	lsr.w	r0, r1, r4
 23fab4a:	4629      	mov	r1, r5
 23fab4c:	bd30      	pop	{r4, r5, pc}
 23fab4e:	f094 0f00 	teq	r4, #0
 23fab52:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 23fab56:	bf06      	itte	eq
 23fab58:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 23fab5c:	3401      	addeq	r4, #1
 23fab5e:	3d01      	subne	r5, #1
 23fab60:	e74e      	b.n	23faa00 <__adddf3+0x8c>
 23fab62:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 23fab66:	bf18      	it	ne
 23fab68:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 23fab6c:	d029      	beq.n	23fabc2 <__adddf3+0x24e>
 23fab6e:	ea94 0f05 	teq	r4, r5
 23fab72:	bf08      	it	eq
 23fab74:	ea90 0f02 	teqeq	r0, r2
 23fab78:	d005      	beq.n	23fab86 <__adddf3+0x212>
 23fab7a:	ea54 0c00 	orrs.w	ip, r4, r0
 23fab7e:	bf04      	itt	eq
 23fab80:	4619      	moveq	r1, r3
 23fab82:	4610      	moveq	r0, r2
 23fab84:	bd30      	pop	{r4, r5, pc}
 23fab86:	ea91 0f03 	teq	r1, r3
 23fab8a:	bf1e      	ittt	ne
 23fab8c:	2100      	movne	r1, #0
 23fab8e:	2000      	movne	r0, #0
 23fab90:	bd30      	popne	{r4, r5, pc}
 23fab92:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 23fab96:	d105      	bne.n	23faba4 <__adddf3+0x230>
 23fab98:	0040      	lsls	r0, r0, #1
 23fab9a:	4149      	adcs	r1, r1
 23fab9c:	bf28      	it	cs
 23fab9e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 23faba2:	bd30      	pop	{r4, r5, pc}
 23faba4:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 23faba8:	bf3c      	itt	cc
 23fabaa:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 23fabae:	bd30      	popcc	{r4, r5, pc}
 23fabb0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 23fabb4:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 23fabb8:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 23fabbc:	f04f 0000 	mov.w	r0, #0
 23fabc0:	bd30      	pop	{r4, r5, pc}
 23fabc2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 23fabc6:	bf1a      	itte	ne
 23fabc8:	4619      	movne	r1, r3
 23fabca:	4610      	movne	r0, r2
 23fabcc:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 23fabd0:	bf1c      	itt	ne
 23fabd2:	460b      	movne	r3, r1
 23fabd4:	4602      	movne	r2, r0
 23fabd6:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 23fabda:	bf06      	itte	eq
 23fabdc:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 23fabe0:	ea91 0f03 	teqeq	r1, r3
 23fabe4:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 23fabe8:	bd30      	pop	{r4, r5, pc}
 23fabea:	bf00      	nop

023fabec <__aeabi_ui2d>:
 23fabec:	f090 0f00 	teq	r0, #0
 23fabf0:	bf04      	itt	eq
 23fabf2:	2100      	moveq	r1, #0
 23fabf4:	4770      	bxeq	lr
 23fabf6:	b530      	push	{r4, r5, lr}
 23fabf8:	f44f 6480 	mov.w	r4, #1024	; 0x400
 23fabfc:	f104 0432 	add.w	r4, r4, #50	; 0x32
 23fac00:	f04f 0500 	mov.w	r5, #0
 23fac04:	f04f 0100 	mov.w	r1, #0
 23fac08:	e750      	b.n	23faaac <__adddf3+0x138>
 23fac0a:	bf00      	nop

023fac0c <__aeabi_i2d>:
 23fac0c:	f090 0f00 	teq	r0, #0
 23fac10:	bf04      	itt	eq
 23fac12:	2100      	moveq	r1, #0
 23fac14:	4770      	bxeq	lr
 23fac16:	b530      	push	{r4, r5, lr}
 23fac18:	f44f 6480 	mov.w	r4, #1024	; 0x400
 23fac1c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 23fac20:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 23fac24:	bf48      	it	mi
 23fac26:	4240      	negmi	r0, r0
 23fac28:	f04f 0100 	mov.w	r1, #0
 23fac2c:	e73e      	b.n	23faaac <__adddf3+0x138>
 23fac2e:	bf00      	nop

023fac30 <__aeabi_f2d>:
 23fac30:	0042      	lsls	r2, r0, #1
 23fac32:	ea4f 01e2 	mov.w	r1, r2, asr #3
 23fac36:	ea4f 0131 	mov.w	r1, r1, rrx
 23fac3a:	ea4f 7002 	mov.w	r0, r2, lsl #28
 23fac3e:	bf1f      	itttt	ne
 23fac40:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 23fac44:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 23fac48:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 23fac4c:	4770      	bxne	lr
 23fac4e:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 23fac52:	bf08      	it	eq
 23fac54:	4770      	bxeq	lr
 23fac56:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 23fac5a:	bf04      	itt	eq
 23fac5c:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 23fac60:	4770      	bxeq	lr
 23fac62:	b530      	push	{r4, r5, lr}
 23fac64:	f44f 7460 	mov.w	r4, #896	; 0x380
 23fac68:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 23fac6c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 23fac70:	e71c      	b.n	23faaac <__adddf3+0x138>
 23fac72:	bf00      	nop

023fac74 <__aeabi_ul2d>:
 23fac74:	ea50 0201 	orrs.w	r2, r0, r1
 23fac78:	bf08      	it	eq
 23fac7a:	4770      	bxeq	lr
 23fac7c:	b530      	push	{r4, r5, lr}
 23fac7e:	f04f 0500 	mov.w	r5, #0
 23fac82:	e00a      	b.n	23fac9a <__aeabi_l2d+0x16>

023fac84 <__aeabi_l2d>:
 23fac84:	ea50 0201 	orrs.w	r2, r0, r1
 23fac88:	bf08      	it	eq
 23fac8a:	4770      	bxeq	lr
 23fac8c:	b530      	push	{r4, r5, lr}
 23fac8e:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 23fac92:	d502      	bpl.n	23fac9a <__aeabi_l2d+0x16>
 23fac94:	4240      	negs	r0, r0
 23fac96:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 23fac9a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 23fac9e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 23faca2:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 23faca6:	f43f aed8 	beq.w	23faa5a <__adddf3+0xe6>
 23facaa:	f04f 0203 	mov.w	r2, #3
 23facae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 23facb2:	bf18      	it	ne
 23facb4:	3203      	addne	r2, #3
 23facb6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 23facba:	bf18      	it	ne
 23facbc:	3203      	addne	r2, #3
 23facbe:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 23facc2:	f1c2 0320 	rsb	r3, r2, #32
 23facc6:	fa00 fc03 	lsl.w	ip, r0, r3
 23facca:	fa20 f002 	lsr.w	r0, r0, r2
 23facce:	fa01 fe03 	lsl.w	lr, r1, r3
 23facd2:	ea40 000e 	orr.w	r0, r0, lr
 23facd6:	fa21 f102 	lsr.w	r1, r1, r2
 23facda:	4414      	add	r4, r2
 23facdc:	e6bd      	b.n	23faa5a <__adddf3+0xe6>
 23facde:	bf00      	nop

023face0 <__aeabi_dmul>:
 23face0:	b570      	push	{r4, r5, r6, lr}
 23face2:	f04f 0cff 	mov.w	ip, #255	; 0xff
 23face6:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 23facea:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 23facee:	bf1d      	ittte	ne
 23facf0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 23facf4:	ea94 0f0c 	teqne	r4, ip
 23facf8:	ea95 0f0c 	teqne	r5, ip
 23facfc:	f000 f8de 	bleq	23faebc <__aeabi_dmul+0x1dc>
 23fad00:	442c      	add	r4, r5
 23fad02:	ea81 0603 	eor.w	r6, r1, r3
 23fad06:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 23fad0a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 23fad0e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 23fad12:	bf18      	it	ne
 23fad14:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 23fad18:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 23fad1c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 23fad20:	d038      	beq.n	23fad94 <__aeabi_dmul+0xb4>
 23fad22:	fba0 ce02 	umull	ip, lr, r0, r2
 23fad26:	f04f 0500 	mov.w	r5, #0
 23fad2a:	fbe1 e502 	umlal	lr, r5, r1, r2
 23fad2e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 23fad32:	fbe0 e503 	umlal	lr, r5, r0, r3
 23fad36:	f04f 0600 	mov.w	r6, #0
 23fad3a:	fbe1 5603 	umlal	r5, r6, r1, r3
 23fad3e:	f09c 0f00 	teq	ip, #0
 23fad42:	bf18      	it	ne
 23fad44:	f04e 0e01 	orrne.w	lr, lr, #1
 23fad48:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 23fad4c:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 23fad50:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 23fad54:	d204      	bcs.n	23fad60 <__aeabi_dmul+0x80>
 23fad56:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 23fad5a:	416d      	adcs	r5, r5
 23fad5c:	eb46 0606 	adc.w	r6, r6, r6
 23fad60:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 23fad64:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 23fad68:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 23fad6c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 23fad70:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 23fad74:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 23fad78:	bf88      	it	hi
 23fad7a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 23fad7e:	d81e      	bhi.n	23fadbe <__aeabi_dmul+0xde>
 23fad80:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 23fad84:	bf08      	it	eq
 23fad86:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 23fad8a:	f150 0000 	adcs.w	r0, r0, #0
 23fad8e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 23fad92:	bd70      	pop	{r4, r5, r6, pc}
 23fad94:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 23fad98:	ea46 0101 	orr.w	r1, r6, r1
 23fad9c:	ea40 0002 	orr.w	r0, r0, r2
 23fada0:	ea81 0103 	eor.w	r1, r1, r3
 23fada4:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 23fada8:	bfc2      	ittt	gt
 23fadaa:	ebd4 050c 	rsbsgt	r5, r4, ip
 23fadae:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 23fadb2:	bd70      	popgt	{r4, r5, r6, pc}
 23fadb4:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 23fadb8:	f04f 0e00 	mov.w	lr, #0
 23fadbc:	3c01      	subs	r4, #1
 23fadbe:	f300 80ab 	bgt.w	23faf18 <__aeabi_dmul+0x238>
 23fadc2:	f114 0f36 	cmn.w	r4, #54	; 0x36
 23fadc6:	bfde      	ittt	le
 23fadc8:	2000      	movle	r0, #0
 23fadca:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 23fadce:	bd70      	pople	{r4, r5, r6, pc}
 23fadd0:	f1c4 0400 	rsb	r4, r4, #0
 23fadd4:	3c20      	subs	r4, #32
 23fadd6:	da35      	bge.n	23fae44 <__aeabi_dmul+0x164>
 23fadd8:	340c      	adds	r4, #12
 23fadda:	dc1b      	bgt.n	23fae14 <__aeabi_dmul+0x134>
 23faddc:	f104 0414 	add.w	r4, r4, #20
 23fade0:	f1c4 0520 	rsb	r5, r4, #32
 23fade4:	fa00 f305 	lsl.w	r3, r0, r5
 23fade8:	fa20 f004 	lsr.w	r0, r0, r4
 23fadec:	fa01 f205 	lsl.w	r2, r1, r5
 23fadf0:	ea40 0002 	orr.w	r0, r0, r2
 23fadf4:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 23fadf8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 23fadfc:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 23fae00:	fa21 f604 	lsr.w	r6, r1, r4
 23fae04:	eb42 0106 	adc.w	r1, r2, r6
 23fae08:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 23fae0c:	bf08      	it	eq
 23fae0e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 23fae12:	bd70      	pop	{r4, r5, r6, pc}
 23fae14:	f1c4 040c 	rsb	r4, r4, #12
 23fae18:	f1c4 0520 	rsb	r5, r4, #32
 23fae1c:	fa00 f304 	lsl.w	r3, r0, r4
 23fae20:	fa20 f005 	lsr.w	r0, r0, r5
 23fae24:	fa01 f204 	lsl.w	r2, r1, r4
 23fae28:	ea40 0002 	orr.w	r0, r0, r2
 23fae2c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 23fae30:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 23fae34:	f141 0100 	adc.w	r1, r1, #0
 23fae38:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 23fae3c:	bf08      	it	eq
 23fae3e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 23fae42:	bd70      	pop	{r4, r5, r6, pc}
 23fae44:	f1c4 0520 	rsb	r5, r4, #32
 23fae48:	fa00 f205 	lsl.w	r2, r0, r5
 23fae4c:	ea4e 0e02 	orr.w	lr, lr, r2
 23fae50:	fa20 f304 	lsr.w	r3, r0, r4
 23fae54:	fa01 f205 	lsl.w	r2, r1, r5
 23fae58:	ea43 0302 	orr.w	r3, r3, r2
 23fae5c:	fa21 f004 	lsr.w	r0, r1, r4
 23fae60:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 23fae64:	fa21 f204 	lsr.w	r2, r1, r4
 23fae68:	ea20 0002 	bic.w	r0, r0, r2
 23fae6c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 23fae70:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 23fae74:	bf08      	it	eq
 23fae76:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 23fae7a:	bd70      	pop	{r4, r5, r6, pc}
 23fae7c:	f094 0f00 	teq	r4, #0
 23fae80:	d10f      	bne.n	23faea2 <__aeabi_dmul+0x1c2>
 23fae82:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 23fae86:	0040      	lsls	r0, r0, #1
 23fae88:	eb41 0101 	adc.w	r1, r1, r1
 23fae8c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 23fae90:	bf08      	it	eq
 23fae92:	3c01      	subeq	r4, #1
 23fae94:	d0f7      	beq.n	23fae86 <__aeabi_dmul+0x1a6>
 23fae96:	ea41 0106 	orr.w	r1, r1, r6
 23fae9a:	f095 0f00 	teq	r5, #0
 23fae9e:	bf18      	it	ne
 23faea0:	4770      	bxne	lr
 23faea2:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 23faea6:	0052      	lsls	r2, r2, #1
 23faea8:	eb43 0303 	adc.w	r3, r3, r3
 23faeac:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 23faeb0:	bf08      	it	eq
 23faeb2:	3d01      	subeq	r5, #1
 23faeb4:	d0f7      	beq.n	23faea6 <__aeabi_dmul+0x1c6>
 23faeb6:	ea43 0306 	orr.w	r3, r3, r6
 23faeba:	4770      	bx	lr
 23faebc:	ea94 0f0c 	teq	r4, ip
 23faec0:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 23faec4:	bf18      	it	ne
 23faec6:	ea95 0f0c 	teqne	r5, ip
 23faeca:	d00c      	beq.n	23faee6 <__aeabi_dmul+0x206>
 23faecc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 23faed0:	bf18      	it	ne
 23faed2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 23faed6:	d1d1      	bne.n	23fae7c <__aeabi_dmul+0x19c>
 23faed8:	ea81 0103 	eor.w	r1, r1, r3
 23faedc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 23faee0:	f04f 0000 	mov.w	r0, #0
 23faee4:	bd70      	pop	{r4, r5, r6, pc}
 23faee6:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 23faeea:	bf06      	itte	eq
 23faeec:	4610      	moveq	r0, r2
 23faeee:	4619      	moveq	r1, r3
 23faef0:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 23faef4:	d019      	beq.n	23faf2a <__aeabi_dmul+0x24a>
 23faef6:	ea94 0f0c 	teq	r4, ip
 23faefa:	d102      	bne.n	23faf02 <__aeabi_dmul+0x222>
 23faefc:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 23faf00:	d113      	bne.n	23faf2a <__aeabi_dmul+0x24a>
 23faf02:	ea95 0f0c 	teq	r5, ip
 23faf06:	d105      	bne.n	23faf14 <__aeabi_dmul+0x234>
 23faf08:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 23faf0c:	bf1c      	itt	ne
 23faf0e:	4610      	movne	r0, r2
 23faf10:	4619      	movne	r1, r3
 23faf12:	d10a      	bne.n	23faf2a <__aeabi_dmul+0x24a>
 23faf14:	ea81 0103 	eor.w	r1, r1, r3
 23faf18:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 23faf1c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 23faf20:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 23faf24:	f04f 0000 	mov.w	r0, #0
 23faf28:	bd70      	pop	{r4, r5, r6, pc}
 23faf2a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 23faf2e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 23faf32:	bd70      	pop	{r4, r5, r6, pc}

023faf34 <__aeabi_ddiv>:
 23faf34:	b570      	push	{r4, r5, r6, lr}
 23faf36:	f04f 0cff 	mov.w	ip, #255	; 0xff
 23faf3a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 23faf3e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 23faf42:	bf1d      	ittte	ne
 23faf44:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 23faf48:	ea94 0f0c 	teqne	r4, ip
 23faf4c:	ea95 0f0c 	teqne	r5, ip
 23faf50:	f000 f8a7 	bleq	23fb0a2 <__aeabi_ddiv+0x16e>
 23faf54:	eba4 0405 	sub.w	r4, r4, r5
 23faf58:	ea81 0e03 	eor.w	lr, r1, r3
 23faf5c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 23faf60:	ea4f 3101 	mov.w	r1, r1, lsl #12
 23faf64:	f000 8088 	beq.w	23fb078 <__aeabi_ddiv+0x144>
 23faf68:	ea4f 3303 	mov.w	r3, r3, lsl #12
 23faf6c:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 23faf70:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 23faf74:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 23faf78:	ea4f 2202 	mov.w	r2, r2, lsl #8
 23faf7c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 23faf80:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 23faf84:	ea4f 2600 	mov.w	r6, r0, lsl #8
 23faf88:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 23faf8c:	429d      	cmp	r5, r3
 23faf8e:	bf08      	it	eq
 23faf90:	4296      	cmpeq	r6, r2
 23faf92:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 23faf96:	f504 7440 	add.w	r4, r4, #768	; 0x300
 23faf9a:	d202      	bcs.n	23fafa2 <__aeabi_ddiv+0x6e>
 23faf9c:	085b      	lsrs	r3, r3, #1
 23faf9e:	ea4f 0232 	mov.w	r2, r2, rrx
 23fafa2:	1ab6      	subs	r6, r6, r2
 23fafa4:	eb65 0503 	sbc.w	r5, r5, r3
 23fafa8:	085b      	lsrs	r3, r3, #1
 23fafaa:	ea4f 0232 	mov.w	r2, r2, rrx
 23fafae:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 23fafb2:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 23fafb6:	ebb6 0e02 	subs.w	lr, r6, r2
 23fafba:	eb75 0e03 	sbcs.w	lr, r5, r3
 23fafbe:	bf22      	ittt	cs
 23fafc0:	1ab6      	subcs	r6, r6, r2
 23fafc2:	4675      	movcs	r5, lr
 23fafc4:	ea40 000c 	orrcs.w	r0, r0, ip
 23fafc8:	085b      	lsrs	r3, r3, #1
 23fafca:	ea4f 0232 	mov.w	r2, r2, rrx
 23fafce:	ebb6 0e02 	subs.w	lr, r6, r2
 23fafd2:	eb75 0e03 	sbcs.w	lr, r5, r3
 23fafd6:	bf22      	ittt	cs
 23fafd8:	1ab6      	subcs	r6, r6, r2
 23fafda:	4675      	movcs	r5, lr
 23fafdc:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 23fafe0:	085b      	lsrs	r3, r3, #1
 23fafe2:	ea4f 0232 	mov.w	r2, r2, rrx
 23fafe6:	ebb6 0e02 	subs.w	lr, r6, r2
 23fafea:	eb75 0e03 	sbcs.w	lr, r5, r3
 23fafee:	bf22      	ittt	cs
 23faff0:	1ab6      	subcs	r6, r6, r2
 23faff2:	4675      	movcs	r5, lr
 23faff4:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 23faff8:	085b      	lsrs	r3, r3, #1
 23faffa:	ea4f 0232 	mov.w	r2, r2, rrx
 23faffe:	ebb6 0e02 	subs.w	lr, r6, r2
 23fb002:	eb75 0e03 	sbcs.w	lr, r5, r3
 23fb006:	bf22      	ittt	cs
 23fb008:	1ab6      	subcs	r6, r6, r2
 23fb00a:	4675      	movcs	r5, lr
 23fb00c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 23fb010:	ea55 0e06 	orrs.w	lr, r5, r6
 23fb014:	d018      	beq.n	23fb048 <__aeabi_ddiv+0x114>
 23fb016:	ea4f 1505 	mov.w	r5, r5, lsl #4
 23fb01a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 23fb01e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 23fb022:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 23fb026:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 23fb02a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 23fb02e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 23fb032:	d1c0      	bne.n	23fafb6 <__aeabi_ddiv+0x82>
 23fb034:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 23fb038:	d10b      	bne.n	23fb052 <__aeabi_ddiv+0x11e>
 23fb03a:	ea41 0100 	orr.w	r1, r1, r0
 23fb03e:	f04f 0000 	mov.w	r0, #0
 23fb042:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 23fb046:	e7b6      	b.n	23fafb6 <__aeabi_ddiv+0x82>
 23fb048:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 23fb04c:	bf04      	itt	eq
 23fb04e:	4301      	orreq	r1, r0
 23fb050:	2000      	moveq	r0, #0
 23fb052:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 23fb056:	bf88      	it	hi
 23fb058:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 23fb05c:	f63f aeaf 	bhi.w	23fadbe <__aeabi_dmul+0xde>
 23fb060:	ebb5 0c03 	subs.w	ip, r5, r3
 23fb064:	bf04      	itt	eq
 23fb066:	ebb6 0c02 	subseq.w	ip, r6, r2
 23fb06a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 23fb06e:	f150 0000 	adcs.w	r0, r0, #0
 23fb072:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 23fb076:	bd70      	pop	{r4, r5, r6, pc}
 23fb078:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 23fb07c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 23fb080:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 23fb084:	bfc2      	ittt	gt
 23fb086:	ebd4 050c 	rsbsgt	r5, r4, ip
 23fb08a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 23fb08e:	bd70      	popgt	{r4, r5, r6, pc}
 23fb090:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 23fb094:	f04f 0e00 	mov.w	lr, #0
 23fb098:	3c01      	subs	r4, #1
 23fb09a:	e690      	b.n	23fadbe <__aeabi_dmul+0xde>
 23fb09c:	ea45 0e06 	orr.w	lr, r5, r6
 23fb0a0:	e68d      	b.n	23fadbe <__aeabi_dmul+0xde>
 23fb0a2:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 23fb0a6:	ea94 0f0c 	teq	r4, ip
 23fb0aa:	bf08      	it	eq
 23fb0ac:	ea95 0f0c 	teqeq	r5, ip
 23fb0b0:	f43f af3b 	beq.w	23faf2a <__aeabi_dmul+0x24a>
 23fb0b4:	ea94 0f0c 	teq	r4, ip
 23fb0b8:	d10a      	bne.n	23fb0d0 <__aeabi_ddiv+0x19c>
 23fb0ba:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 23fb0be:	f47f af34 	bne.w	23faf2a <__aeabi_dmul+0x24a>
 23fb0c2:	ea95 0f0c 	teq	r5, ip
 23fb0c6:	f47f af25 	bne.w	23faf14 <__aeabi_dmul+0x234>
 23fb0ca:	4610      	mov	r0, r2
 23fb0cc:	4619      	mov	r1, r3
 23fb0ce:	e72c      	b.n	23faf2a <__aeabi_dmul+0x24a>
 23fb0d0:	ea95 0f0c 	teq	r5, ip
 23fb0d4:	d106      	bne.n	23fb0e4 <__aeabi_ddiv+0x1b0>
 23fb0d6:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 23fb0da:	f43f aefd 	beq.w	23faed8 <__aeabi_dmul+0x1f8>
 23fb0de:	4610      	mov	r0, r2
 23fb0e0:	4619      	mov	r1, r3
 23fb0e2:	e722      	b.n	23faf2a <__aeabi_dmul+0x24a>
 23fb0e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 23fb0e8:	bf18      	it	ne
 23fb0ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 23fb0ee:	f47f aec5 	bne.w	23fae7c <__aeabi_dmul+0x19c>
 23fb0f2:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 23fb0f6:	f47f af0d 	bne.w	23faf14 <__aeabi_dmul+0x234>
 23fb0fa:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 23fb0fe:	f47f aeeb 	bne.w	23faed8 <__aeabi_dmul+0x1f8>
 23fb102:	e712      	b.n	23faf2a <__aeabi_dmul+0x24a>

023fb104 <__gedf2>:
 23fb104:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 23fb108:	e006      	b.n	23fb118 <__cmpdf2+0x4>
 23fb10a:	bf00      	nop

023fb10c <__ledf2>:
 23fb10c:	f04f 0c01 	mov.w	ip, #1
 23fb110:	e002      	b.n	23fb118 <__cmpdf2+0x4>
 23fb112:	bf00      	nop

023fb114 <__cmpdf2>:
 23fb114:	f04f 0c01 	mov.w	ip, #1
 23fb118:	f84d cd04 	str.w	ip, [sp, #-4]!
 23fb11c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 23fb120:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 23fb124:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 23fb128:	bf18      	it	ne
 23fb12a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 23fb12e:	d01b      	beq.n	23fb168 <__cmpdf2+0x54>
 23fb130:	b001      	add	sp, #4
 23fb132:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 23fb136:	bf0c      	ite	eq
 23fb138:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 23fb13c:	ea91 0f03 	teqne	r1, r3
 23fb140:	bf02      	ittt	eq
 23fb142:	ea90 0f02 	teqeq	r0, r2
 23fb146:	2000      	moveq	r0, #0
 23fb148:	4770      	bxeq	lr
 23fb14a:	f110 0f00 	cmn.w	r0, #0
 23fb14e:	ea91 0f03 	teq	r1, r3
 23fb152:	bf58      	it	pl
 23fb154:	4299      	cmppl	r1, r3
 23fb156:	bf08      	it	eq
 23fb158:	4290      	cmpeq	r0, r2
 23fb15a:	bf2c      	ite	cs
 23fb15c:	17d8      	asrcs	r0, r3, #31
 23fb15e:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 23fb162:	f040 0001 	orr.w	r0, r0, #1
 23fb166:	4770      	bx	lr
 23fb168:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 23fb16c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 23fb170:	d102      	bne.n	23fb178 <__cmpdf2+0x64>
 23fb172:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 23fb176:	d107      	bne.n	23fb188 <__cmpdf2+0x74>
 23fb178:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 23fb17c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 23fb180:	d1d6      	bne.n	23fb130 <__cmpdf2+0x1c>
 23fb182:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 23fb186:	d0d3      	beq.n	23fb130 <__cmpdf2+0x1c>
 23fb188:	f85d 0b04 	ldr.w	r0, [sp], #4
 23fb18c:	4770      	bx	lr
 23fb18e:	bf00      	nop

023fb190 <__aeabi_cdrcmple>:
 23fb190:	4684      	mov	ip, r0
 23fb192:	4610      	mov	r0, r2
 23fb194:	4662      	mov	r2, ip
 23fb196:	468c      	mov	ip, r1
 23fb198:	4619      	mov	r1, r3
 23fb19a:	4663      	mov	r3, ip
 23fb19c:	e000      	b.n	23fb1a0 <__aeabi_cdcmpeq>
 23fb19e:	bf00      	nop

023fb1a0 <__aeabi_cdcmpeq>:
 23fb1a0:	b501      	push	{r0, lr}
 23fb1a2:	f7ff ffb7 	bl	23fb114 <__cmpdf2>
 23fb1a6:	2800      	cmp	r0, #0
 23fb1a8:	bf48      	it	mi
 23fb1aa:	f110 0f00 	cmnmi.w	r0, #0
 23fb1ae:	bd01      	pop	{r0, pc}

023fb1b0 <__aeabi_dcmpeq>:
 23fb1b0:	f84d ed08 	str.w	lr, [sp, #-8]!
 23fb1b4:	f7ff fff4 	bl	23fb1a0 <__aeabi_cdcmpeq>
 23fb1b8:	bf0c      	ite	eq
 23fb1ba:	2001      	moveq	r0, #1
 23fb1bc:	2000      	movne	r0, #0
 23fb1be:	f85d fb08 	ldr.w	pc, [sp], #8
 23fb1c2:	bf00      	nop

023fb1c4 <__aeabi_dcmplt>:
 23fb1c4:	f84d ed08 	str.w	lr, [sp, #-8]!
 23fb1c8:	f7ff ffea 	bl	23fb1a0 <__aeabi_cdcmpeq>
 23fb1cc:	bf34      	ite	cc
 23fb1ce:	2001      	movcc	r0, #1
 23fb1d0:	2000      	movcs	r0, #0
 23fb1d2:	f85d fb08 	ldr.w	pc, [sp], #8
 23fb1d6:	bf00      	nop

023fb1d8 <__aeabi_dcmple>:
 23fb1d8:	f84d ed08 	str.w	lr, [sp, #-8]!
 23fb1dc:	f7ff ffe0 	bl	23fb1a0 <__aeabi_cdcmpeq>
 23fb1e0:	bf94      	ite	ls
 23fb1e2:	2001      	movls	r0, #1
 23fb1e4:	2000      	movhi	r0, #0
 23fb1e6:	f85d fb08 	ldr.w	pc, [sp], #8
 23fb1ea:	bf00      	nop

023fb1ec <__aeabi_dcmpge>:
 23fb1ec:	f84d ed08 	str.w	lr, [sp, #-8]!
 23fb1f0:	f7ff ffce 	bl	23fb190 <__aeabi_cdrcmple>
 23fb1f4:	bf94      	ite	ls
 23fb1f6:	2001      	movls	r0, #1
 23fb1f8:	2000      	movhi	r0, #0
 23fb1fa:	f85d fb08 	ldr.w	pc, [sp], #8
 23fb1fe:	bf00      	nop

023fb200 <__aeabi_dcmpgt>:
 23fb200:	f84d ed08 	str.w	lr, [sp, #-8]!
 23fb204:	f7ff ffc4 	bl	23fb190 <__aeabi_cdrcmple>
 23fb208:	bf34      	ite	cc
 23fb20a:	2001      	movcc	r0, #1
 23fb20c:	2000      	movcs	r0, #0
 23fb20e:	f85d fb08 	ldr.w	pc, [sp], #8
 23fb212:	bf00      	nop

023fb214 <__aeabi_d2uiz>:
 23fb214:	004a      	lsls	r2, r1, #1
 23fb216:	d211      	bcs.n	23fb23c <__aeabi_d2uiz+0x28>
 23fb218:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 23fb21c:	d211      	bcs.n	23fb242 <__aeabi_d2uiz+0x2e>
 23fb21e:	d50d      	bpl.n	23fb23c <__aeabi_d2uiz+0x28>
 23fb220:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 23fb224:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 23fb228:	d40e      	bmi.n	23fb248 <__aeabi_d2uiz+0x34>
 23fb22a:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 23fb22e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 23fb232:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 23fb236:	fa23 f002 	lsr.w	r0, r3, r2
 23fb23a:	4770      	bx	lr
 23fb23c:	f04f 0000 	mov.w	r0, #0
 23fb240:	4770      	bx	lr
 23fb242:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 23fb246:	d102      	bne.n	23fb24e <__aeabi_d2uiz+0x3a>
 23fb248:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 23fb24c:	4770      	bx	lr
 23fb24e:	f04f 0000 	mov.w	r0, #0
 23fb252:	4770      	bx	lr

023fb254 <__aeabi_uldivmod>:
 23fb254:	b953      	cbnz	r3, 23fb26c <__aeabi_uldivmod+0x18>
 23fb256:	b94a      	cbnz	r2, 23fb26c <__aeabi_uldivmod+0x18>
 23fb258:	2900      	cmp	r1, #0
 23fb25a:	bf08      	it	eq
 23fb25c:	2800      	cmpeq	r0, #0
 23fb25e:	bf1c      	itt	ne
 23fb260:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 23fb264:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 23fb268:	f000 b9a0 	b.w	23fb5ac <__aeabi_idiv0>
 23fb26c:	f1ad 0c08 	sub.w	ip, sp, #8
 23fb270:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 23fb274:	f000 f824 	bl	23fb2c0 <__udivmoddi4>
 23fb278:	f8dd e004 	ldr.w	lr, [sp, #4]
 23fb27c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 23fb280:	b004      	add	sp, #16
 23fb282:	4770      	bx	lr

023fb284 <__aeabi_d2ulz>:
 23fb284:	b5d0      	push	{r4, r6, r7, lr}
 23fb286:	2200      	movs	r2, #0
 23fb288:	4b0b      	ldr	r3, [pc, #44]	; (23fb2b8 <__aeabi_d2ulz+0x34>)
 23fb28a:	4606      	mov	r6, r0
 23fb28c:	460f      	mov	r7, r1
 23fb28e:	f7ff fd27 	bl	23face0 <__aeabi_dmul>
 23fb292:	f7ff ffbf 	bl	23fb214 <__aeabi_d2uiz>
 23fb296:	4604      	mov	r4, r0
 23fb298:	f7ff fca8 	bl	23fabec <__aeabi_ui2d>
 23fb29c:	2200      	movs	r2, #0
 23fb29e:	4b07      	ldr	r3, [pc, #28]	; (23fb2bc <__aeabi_d2ulz+0x38>)
 23fb2a0:	f7ff fd1e 	bl	23face0 <__aeabi_dmul>
 23fb2a4:	4602      	mov	r2, r0
 23fb2a6:	460b      	mov	r3, r1
 23fb2a8:	4630      	mov	r0, r6
 23fb2aa:	4639      	mov	r1, r7
 23fb2ac:	f7ff fb60 	bl	23fa970 <__aeabi_dsub>
 23fb2b0:	f7ff ffb0 	bl	23fb214 <__aeabi_d2uiz>
 23fb2b4:	4621      	mov	r1, r4
 23fb2b6:	bdd0      	pop	{r4, r6, r7, pc}
 23fb2b8:	3df00000 	.word	0x3df00000
 23fb2bc:	41f00000 	.word	0x41f00000

023fb2c0 <__udivmoddi4>:
 23fb2c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 23fb2c4:	9d09      	ldr	r5, [sp, #36]	; 0x24
 23fb2c6:	4604      	mov	r4, r0
 23fb2c8:	460f      	mov	r7, r1
 23fb2ca:	2b00      	cmp	r3, #0
 23fb2cc:	d148      	bne.n	23fb360 <__udivmoddi4+0xa0>
 23fb2ce:	428a      	cmp	r2, r1
 23fb2d0:	4694      	mov	ip, r2
 23fb2d2:	d961      	bls.n	23fb398 <__udivmoddi4+0xd8>
 23fb2d4:	fab2 f382 	clz	r3, r2
 23fb2d8:	b143      	cbz	r3, 23fb2ec <__udivmoddi4+0x2c>
 23fb2da:	f1c3 0120 	rsb	r1, r3, #32
 23fb2de:	409f      	lsls	r7, r3
 23fb2e0:	fa02 fc03 	lsl.w	ip, r2, r3
 23fb2e4:	409c      	lsls	r4, r3
 23fb2e6:	fa20 f101 	lsr.w	r1, r0, r1
 23fb2ea:	430f      	orrs	r7, r1
 23fb2ec:	ea4f 411c 	mov.w	r1, ip, lsr #16
 23fb2f0:	fa1f fe8c 	uxth.w	lr, ip
 23fb2f4:	0c22      	lsrs	r2, r4, #16
 23fb2f6:	fbb7 f6f1 	udiv	r6, r7, r1
 23fb2fa:	fb01 7716 	mls	r7, r1, r6, r7
 23fb2fe:	fb06 f00e 	mul.w	r0, r6, lr
 23fb302:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 23fb306:	4290      	cmp	r0, r2
 23fb308:	d908      	bls.n	23fb31c <__udivmoddi4+0x5c>
 23fb30a:	eb1c 0202 	adds.w	r2, ip, r2
 23fb30e:	f106 37ff 	add.w	r7, r6, #4294967295	; 0xffffffff
 23fb312:	d202      	bcs.n	23fb31a <__udivmoddi4+0x5a>
 23fb314:	4290      	cmp	r0, r2
 23fb316:	f200 8137 	bhi.w	23fb588 <__udivmoddi4+0x2c8>
 23fb31a:	463e      	mov	r6, r7
 23fb31c:	1a12      	subs	r2, r2, r0
 23fb31e:	b2a4      	uxth	r4, r4
 23fb320:	fbb2 f0f1 	udiv	r0, r2, r1
 23fb324:	fb01 2210 	mls	r2, r1, r0, r2
 23fb328:	fb00 fe0e 	mul.w	lr, r0, lr
 23fb32c:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 23fb330:	45a6      	cmp	lr, r4
 23fb332:	d908      	bls.n	23fb346 <__udivmoddi4+0x86>
 23fb334:	eb1c 0404 	adds.w	r4, ip, r4
 23fb338:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 23fb33c:	d202      	bcs.n	23fb344 <__udivmoddi4+0x84>
 23fb33e:	45a6      	cmp	lr, r4
 23fb340:	f200 811c 	bhi.w	23fb57c <__udivmoddi4+0x2bc>
 23fb344:	4610      	mov	r0, r2
 23fb346:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 23fb34a:	eba4 040e 	sub.w	r4, r4, lr
 23fb34e:	2600      	movs	r6, #0
 23fb350:	b11d      	cbz	r5, 23fb35a <__udivmoddi4+0x9a>
 23fb352:	40dc      	lsrs	r4, r3
 23fb354:	2300      	movs	r3, #0
 23fb356:	e9c5 4300 	strd	r4, r3, [r5]
 23fb35a:	4631      	mov	r1, r6
 23fb35c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 23fb360:	428b      	cmp	r3, r1
 23fb362:	d909      	bls.n	23fb378 <__udivmoddi4+0xb8>
 23fb364:	2d00      	cmp	r5, #0
 23fb366:	f000 80fd 	beq.w	23fb564 <__udivmoddi4+0x2a4>
 23fb36a:	2600      	movs	r6, #0
 23fb36c:	e9c5 0100 	strd	r0, r1, [r5]
 23fb370:	4630      	mov	r0, r6
 23fb372:	4631      	mov	r1, r6
 23fb374:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 23fb378:	fab3 f683 	clz	r6, r3
 23fb37c:	2e00      	cmp	r6, #0
 23fb37e:	d14b      	bne.n	23fb418 <__udivmoddi4+0x158>
 23fb380:	428b      	cmp	r3, r1
 23fb382:	f0c0 80f2 	bcc.w	23fb56a <__udivmoddi4+0x2aa>
 23fb386:	4282      	cmp	r2, r0
 23fb388:	f240 80ef 	bls.w	23fb56a <__udivmoddi4+0x2aa>
 23fb38c:	4630      	mov	r0, r6
 23fb38e:	2d00      	cmp	r5, #0
 23fb390:	d0e3      	beq.n	23fb35a <__udivmoddi4+0x9a>
 23fb392:	e9c5 4700 	strd	r4, r7, [r5]
 23fb396:	e7e0      	b.n	23fb35a <__udivmoddi4+0x9a>
 23fb398:	b902      	cbnz	r2, 23fb39c <__udivmoddi4+0xdc>
 23fb39a:	deff      	udf	#255	; 0xff
 23fb39c:	fab2 f382 	clz	r3, r2
 23fb3a0:	2b00      	cmp	r3, #0
 23fb3a2:	f040 809d 	bne.w	23fb4e0 <__udivmoddi4+0x220>
 23fb3a6:	1a89      	subs	r1, r1, r2
 23fb3a8:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 23fb3ac:	b297      	uxth	r7, r2
 23fb3ae:	2601      	movs	r6, #1
 23fb3b0:	0c20      	lsrs	r0, r4, #16
 23fb3b2:	fbb1 f2fe 	udiv	r2, r1, lr
 23fb3b6:	fb0e 1112 	mls	r1, lr, r2, r1
 23fb3ba:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 23fb3be:	fb07 f002 	mul.w	r0, r7, r2
 23fb3c2:	4288      	cmp	r0, r1
 23fb3c4:	d90f      	bls.n	23fb3e6 <__udivmoddi4+0x126>
 23fb3c6:	eb1c 0101 	adds.w	r1, ip, r1
 23fb3ca:	f102 38ff 	add.w	r8, r2, #4294967295	; 0xffffffff
 23fb3ce:	bf2c      	ite	cs
 23fb3d0:	f04f 0901 	movcs.w	r9, #1
 23fb3d4:	f04f 0900 	movcc.w	r9, #0
 23fb3d8:	4288      	cmp	r0, r1
 23fb3da:	d903      	bls.n	23fb3e4 <__udivmoddi4+0x124>
 23fb3dc:	f1b9 0f00 	cmp.w	r9, #0
 23fb3e0:	f000 80cf 	beq.w	23fb582 <__udivmoddi4+0x2c2>
 23fb3e4:	4642      	mov	r2, r8
 23fb3e6:	1a09      	subs	r1, r1, r0
 23fb3e8:	b2a4      	uxth	r4, r4
 23fb3ea:	fbb1 f0fe 	udiv	r0, r1, lr
 23fb3ee:	fb0e 1110 	mls	r1, lr, r0, r1
 23fb3f2:	fb00 f707 	mul.w	r7, r0, r7
 23fb3f6:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 23fb3fa:	42a7      	cmp	r7, r4
 23fb3fc:	d908      	bls.n	23fb410 <__udivmoddi4+0x150>
 23fb3fe:	eb1c 0404 	adds.w	r4, ip, r4
 23fb402:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 23fb406:	d202      	bcs.n	23fb40e <__udivmoddi4+0x14e>
 23fb408:	42a7      	cmp	r7, r4
 23fb40a:	f200 80b4 	bhi.w	23fb576 <__udivmoddi4+0x2b6>
 23fb40e:	4608      	mov	r0, r1
 23fb410:	1be4      	subs	r4, r4, r7
 23fb412:	ea40 4002 	orr.w	r0, r0, r2, lsl #16
 23fb416:	e79b      	b.n	23fb350 <__udivmoddi4+0x90>
 23fb418:	f1c6 0720 	rsb	r7, r6, #32
 23fb41c:	40b3      	lsls	r3, r6
 23fb41e:	fa01 f406 	lsl.w	r4, r1, r6
 23fb422:	fa22 fc07 	lsr.w	ip, r2, r7
 23fb426:	40f9      	lsrs	r1, r7
 23fb428:	40b2      	lsls	r2, r6
 23fb42a:	ea4c 0c03 	orr.w	ip, ip, r3
 23fb42e:	fa20 f307 	lsr.w	r3, r0, r7
 23fb432:	ea4f 491c 	mov.w	r9, ip, lsr #16
 23fb436:	431c      	orrs	r4, r3
 23fb438:	fa1f fe8c 	uxth.w	lr, ip
 23fb43c:	fa00 f306 	lsl.w	r3, r0, r6
 23fb440:	0c20      	lsrs	r0, r4, #16
 23fb442:	fbb1 f8f9 	udiv	r8, r1, r9
 23fb446:	fb09 1118 	mls	r1, r9, r8, r1
 23fb44a:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 23fb44e:	fb08 f00e 	mul.w	r0, r8, lr
 23fb452:	4288      	cmp	r0, r1
 23fb454:	d90f      	bls.n	23fb476 <__udivmoddi4+0x1b6>
 23fb456:	eb1c 0101 	adds.w	r1, ip, r1
 23fb45a:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 23fb45e:	bf2c      	ite	cs
 23fb460:	f04f 0b01 	movcs.w	fp, #1
 23fb464:	f04f 0b00 	movcc.w	fp, #0
 23fb468:	4288      	cmp	r0, r1
 23fb46a:	d903      	bls.n	23fb474 <__udivmoddi4+0x1b4>
 23fb46c:	f1bb 0f00 	cmp.w	fp, #0
 23fb470:	f000 808d 	beq.w	23fb58e <__udivmoddi4+0x2ce>
 23fb474:	46d0      	mov	r8, sl
 23fb476:	1a09      	subs	r1, r1, r0
 23fb478:	b2a4      	uxth	r4, r4
 23fb47a:	fbb1 f0f9 	udiv	r0, r1, r9
 23fb47e:	fb09 1110 	mls	r1, r9, r0, r1
 23fb482:	fb00 fe0e 	mul.w	lr, r0, lr
 23fb486:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 23fb48a:	458e      	cmp	lr, r1
 23fb48c:	d907      	bls.n	23fb49e <__udivmoddi4+0x1de>
 23fb48e:	eb1c 0101 	adds.w	r1, ip, r1
 23fb492:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 23fb496:	d201      	bcs.n	23fb49c <__udivmoddi4+0x1dc>
 23fb498:	458e      	cmp	lr, r1
 23fb49a:	d87f      	bhi.n	23fb59c <__udivmoddi4+0x2dc>
 23fb49c:	4620      	mov	r0, r4
 23fb49e:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 23fb4a2:	eba1 010e 	sub.w	r1, r1, lr
 23fb4a6:	fba0 9802 	umull	r9, r8, r0, r2
 23fb4aa:	4541      	cmp	r1, r8
 23fb4ac:	464c      	mov	r4, r9
 23fb4ae:	46c6      	mov	lr, r8
 23fb4b0:	d302      	bcc.n	23fb4b8 <__udivmoddi4+0x1f8>
 23fb4b2:	d106      	bne.n	23fb4c2 <__udivmoddi4+0x202>
 23fb4b4:	454b      	cmp	r3, r9
 23fb4b6:	d204      	bcs.n	23fb4c2 <__udivmoddi4+0x202>
 23fb4b8:	3801      	subs	r0, #1
 23fb4ba:	ebb9 0402 	subs.w	r4, r9, r2
 23fb4be:	eb68 0e0c 	sbc.w	lr, r8, ip
 23fb4c2:	2d00      	cmp	r5, #0
 23fb4c4:	d070      	beq.n	23fb5a8 <__udivmoddi4+0x2e8>
 23fb4c6:	1b1a      	subs	r2, r3, r4
 23fb4c8:	eb61 010e 	sbc.w	r1, r1, lr
 23fb4cc:	fa22 f306 	lsr.w	r3, r2, r6
 23fb4d0:	fa01 f707 	lsl.w	r7, r1, r7
 23fb4d4:	40f1      	lsrs	r1, r6
 23fb4d6:	2600      	movs	r6, #0
 23fb4d8:	431f      	orrs	r7, r3
 23fb4da:	e9c5 7100 	strd	r7, r1, [r5]
 23fb4de:	e73c      	b.n	23fb35a <__udivmoddi4+0x9a>
 23fb4e0:	fa02 fc03 	lsl.w	ip, r2, r3
 23fb4e4:	f1c3 0020 	rsb	r0, r3, #32
 23fb4e8:	fa01 f203 	lsl.w	r2, r1, r3
 23fb4ec:	fa21 f600 	lsr.w	r6, r1, r0
 23fb4f0:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 23fb4f4:	fa24 f100 	lsr.w	r1, r4, r0
 23fb4f8:	fa1f f78c 	uxth.w	r7, ip
 23fb4fc:	409c      	lsls	r4, r3
 23fb4fe:	4311      	orrs	r1, r2
 23fb500:	fbb6 f0fe 	udiv	r0, r6, lr
 23fb504:	0c0a      	lsrs	r2, r1, #16
 23fb506:	fb0e 6610 	mls	r6, lr, r0, r6
 23fb50a:	ea42 4206 	orr.w	r2, r2, r6, lsl #16
 23fb50e:	fb00 f607 	mul.w	r6, r0, r7
 23fb512:	4296      	cmp	r6, r2
 23fb514:	d90e      	bls.n	23fb534 <__udivmoddi4+0x274>
 23fb516:	eb1c 0202 	adds.w	r2, ip, r2
 23fb51a:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 23fb51e:	bf2c      	ite	cs
 23fb520:	f04f 0901 	movcs.w	r9, #1
 23fb524:	f04f 0900 	movcc.w	r9, #0
 23fb528:	4296      	cmp	r6, r2
 23fb52a:	d902      	bls.n	23fb532 <__udivmoddi4+0x272>
 23fb52c:	f1b9 0f00 	cmp.w	r9, #0
 23fb530:	d031      	beq.n	23fb596 <__udivmoddi4+0x2d6>
 23fb532:	4640      	mov	r0, r8
 23fb534:	1b92      	subs	r2, r2, r6
 23fb536:	b289      	uxth	r1, r1
 23fb538:	fbb2 f6fe 	udiv	r6, r2, lr
 23fb53c:	fb0e 2216 	mls	r2, lr, r6, r2
 23fb540:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 23fb544:	fb06 f207 	mul.w	r2, r6, r7
 23fb548:	428a      	cmp	r2, r1
 23fb54a:	d907      	bls.n	23fb55c <__udivmoddi4+0x29c>
 23fb54c:	eb1c 0101 	adds.w	r1, ip, r1
 23fb550:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 23fb554:	d201      	bcs.n	23fb55a <__udivmoddi4+0x29a>
 23fb556:	428a      	cmp	r2, r1
 23fb558:	d823      	bhi.n	23fb5a2 <__udivmoddi4+0x2e2>
 23fb55a:	4646      	mov	r6, r8
 23fb55c:	1a89      	subs	r1, r1, r2
 23fb55e:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 23fb562:	e725      	b.n	23fb3b0 <__udivmoddi4+0xf0>
 23fb564:	462e      	mov	r6, r5
 23fb566:	4628      	mov	r0, r5
 23fb568:	e6f7      	b.n	23fb35a <__udivmoddi4+0x9a>
 23fb56a:	1a84      	subs	r4, r0, r2
 23fb56c:	eb61 0303 	sbc.w	r3, r1, r3
 23fb570:	2001      	movs	r0, #1
 23fb572:	461f      	mov	r7, r3
 23fb574:	e70b      	b.n	23fb38e <__udivmoddi4+0xce>
 23fb576:	4464      	add	r4, ip
 23fb578:	3802      	subs	r0, #2
 23fb57a:	e749      	b.n	23fb410 <__udivmoddi4+0x150>
 23fb57c:	4464      	add	r4, ip
 23fb57e:	3802      	subs	r0, #2
 23fb580:	e6e1      	b.n	23fb346 <__udivmoddi4+0x86>
 23fb582:	3a02      	subs	r2, #2
 23fb584:	4461      	add	r1, ip
 23fb586:	e72e      	b.n	23fb3e6 <__udivmoddi4+0x126>
 23fb588:	3e02      	subs	r6, #2
 23fb58a:	4462      	add	r2, ip
 23fb58c:	e6c6      	b.n	23fb31c <__udivmoddi4+0x5c>
 23fb58e:	f1a8 0802 	sub.w	r8, r8, #2
 23fb592:	4461      	add	r1, ip
 23fb594:	e76f      	b.n	23fb476 <__udivmoddi4+0x1b6>
 23fb596:	3802      	subs	r0, #2
 23fb598:	4462      	add	r2, ip
 23fb59a:	e7cb      	b.n	23fb534 <__udivmoddi4+0x274>
 23fb59c:	3802      	subs	r0, #2
 23fb59e:	4461      	add	r1, ip
 23fb5a0:	e77d      	b.n	23fb49e <__udivmoddi4+0x1de>
 23fb5a2:	3e02      	subs	r6, #2
 23fb5a4:	4461      	add	r1, ip
 23fb5a6:	e7d9      	b.n	23fb55c <__udivmoddi4+0x29c>
 23fb5a8:	462e      	mov	r6, r5
 23fb5aa:	e6d6      	b.n	23fb35a <__udivmoddi4+0x9a>

023fb5ac <__aeabi_idiv0>:
 23fb5ac:	4770      	bx	lr
 23fb5ae:	bf00      	nop

023fb5b0 <strlen>:
 23fb5b0:	4603      	mov	r3, r0
 23fb5b2:	f813 2b01 	ldrb.w	r2, [r3], #1
 23fb5b6:	2a00      	cmp	r2, #0
 23fb5b8:	d1fb      	bne.n	23fb5b2 <strlen+0x2>
 23fb5ba:	1a18      	subs	r0, r3, r0
 23fb5bc:	3801      	subs	r0, #1
 23fb5be:	4770      	bx	lr

023fb5c0 <module_user_init>:
extern constructor_ptr_t link_constructors_location[];
extern constructor_ptr_t link_constructors_end;
#define link_constructors_size   ((unsigned long)&link_constructors_end  -  (unsigned long)&link_constructors_location )

void module_user_init()
{
 23fb5c0:	b570      	push	{r4, r5, r6, lr}
    module_user_init_hook();
 23fb5c2:	f003 fdcb 	bl	23ff15c <module_user_init_hook>

    // invoke constructors
    unsigned ctor_num;
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
 23fb5c6:	2500      	movs	r5, #0
 23fb5c8:	4e05      	ldr	r6, [pc, #20]	; (23fb5e0 <module_user_init+0x20>)
 23fb5ca:	4c06      	ldr	r4, [pc, #24]	; (23fb5e4 <module_user_init+0x24>)
 23fb5cc:	1ba4      	subs	r4, r4, r6
 23fb5ce:	08a4      	lsrs	r4, r4, #2
 23fb5d0:	42ac      	cmp	r4, r5
 23fb5d2:	d100      	bne.n	23fb5d6 <module_user_init+0x16>
    {
        link_constructors_location[ctor_num]();
    }
}
 23fb5d4:	bd70      	pop	{r4, r5, r6, pc}
        link_constructors_location[ctor_num]();
 23fb5d6:	f856 3b04 	ldr.w	r3, [r6], #4
 23fb5da:	4798      	blx	r3
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
 23fb5dc:	3501      	adds	r5, #1
 23fb5de:	e7f7      	b.n	23fb5d0 <module_user_init+0x10>
 23fb5e0:	023fffd8 	.word	0x023fffd8
 23fb5e4:	023ffffc 	.word	0x023ffffc

023fb5e8 <module_user_setup>:

/**
 * Export these functions with a fuller name so they don't clash with the setup/loop wrappers in the system module.
 */
void module_user_setup() {
    setup();
 23fb5e8:	f000 b948 	b.w	23fb87c <setup>

023fb5ec <module_user_loop>:
}

void module_user_loop() {
 23fb5ec:	b508      	push	{r3, lr}
    loop();
 23fb5ee:	f000 fc25 	bl	23fbe3c <loop>
    _post_loop();
}
 23fb5f2:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    _post_loop();
 23fb5f6:	f003 bd69 	b.w	23ff0cc <_post_loop>

023fb5fa <_Znwj>:
 * Implement C++ new/delete operators using the heap
 */

void *operator new(size_t size)
{
	return malloc(size);
 23fb5fa:	f002 bc3f 	b.w	23fde7c <malloc>

023fb5fe <_Znaj>:
 23fb5fe:	f002 bc3d 	b.w	23fde7c <malloc>

023fb602 <_ZdlPvj>:
	free(p);
}

void operator delete(void *p, size_t size)
{
	free(p);
 23fb602:	f002 bc49 	b.w	23fde98 <free>
	...

023fb608 <__cxa_pure_virtual>:
    return -1;
}

/* Default implementation for call made to pure virtual function. */
void __cxa_pure_virtual() {
  PANIC(PureVirtualCall,"Call on pure virtual");
 23fb608:	200c      	movs	r0, #12
void __cxa_pure_virtual() {
 23fb60a:	b508      	push	{r3, lr}
  PANIC(PureVirtualCall,"Call on pure virtual");
 23fb60c:	4a02      	ldr	r2, [pc, #8]	; (23fb618 <__cxa_pure_virtual+0x10>)
 23fb60e:	4903      	ldr	r1, [pc, #12]	; (23fb61c <__cxa_pure_virtual+0x14>)
 23fb610:	f002 fb00 	bl	23fdc14 <panic_>
  while (1);
 23fb614:	e7fe      	b.n	23fb614 <__cxa_pure_virtual+0xc>
 23fb616:	bf00      	nop
 23fb618:	023fd77d 	.word	0x023fd77d
 23fb61c:	023ff658 	.word	0x023ff658

023fb620 <__cxa_guard_acquire>:

/* Provide default implemenation for __cxa_guard_acquire() and
 * __cxa_guard_release(). Note: these must be revisited if a multitasking
 * OS is ported to this platform. */
__extension__ typedef int __guard __attribute__((mode (__DI__)));
int __cxa_guard_acquire(__guard *g) {return !*(char *)(g);};
 23fb620:	7800      	ldrb	r0, [r0, #0]
 23fb622:	fab0 f080 	clz	r0, r0
 23fb626:	0940      	lsrs	r0, r0, #5
 23fb628:	4770      	bx	lr

023fb62a <__cxa_guard_release>:
void __cxa_guard_release (__guard *g) {*(char *)g = 1;};
 23fb62a:	2301      	movs	r3, #1
 23fb62c:	7003      	strb	r3, [r0, #0]
 23fb62e:	4770      	bx	lr

023fb630 <_Z3TFTv>:
  @brief  Set whether text that is too long for the screen width should
          automatically wrap around to the next line (else clip right).
  @param  w  true for wrapping, false for clipping
  */
  /**********************************************************************/
  void setTextWrap(boolean w) { wrap = w; }
 23fb630:	2100      	movs	r1, #0

  measure_zones();

}

  void TFT() {
 23fb632:	b538      	push	{r3, r4, r5, lr}
 23fb634:	4d11      	ldr	r5, [pc, #68]	; (23fb67c <_Z3TFTv+0x4c>)
  tft.setTextWrap(false);
  tft.fillScreen(ST77XX_BLACK);
 23fb636:	4628      	mov	r0, r5
 23fb638:	76e9      	strb	r1, [r5, #27]
 23fb63a:	f000 fd05 	bl	23fc048 <_ZN12Adafruit_GFX10fillScreenEt>
  void setTextColor(uint16_t c) { textcolor = textbgcolor = c; }
 23fb63e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 23fb642:	f04f 121e 	mov.w	r2, #1966110	; 0x1e001e
  tft.setCursor(30, 30);
  tft.setTextColor(ST77XX_WHITE);
  tft.setTextSize(36);
 23fb646:	2124      	movs	r1, #36	; 0x24
 23fb648:	4628      	mov	r0, r5
 23fb64a:	e9c5 2304 	strd	r2, r3, [r5, #16]
 23fb64e:	f000 ff9e 	bl	23fc58e <_ZN12Adafruit_GFX11setTextSizeEh>
  tft.print(counter);
 23fb652:	4b0b      	ldr	r3, [pc, #44]	; (23fb680 <_Z3TFTv+0x50>)
 23fb654:	681c      	ldr	r4, [r3, #0]
// FIXME: avoids 'comparison of constant '0' with boolean expression is always false'
#if __GNUC__ >= 9
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wbool-compare"
#endif // __GNUC__ >= 9
        if (n < 0 && base == 10) {
 23fb656:	2c00      	cmp	r4, #0
 23fb658:	da0e      	bge.n	23fb678 <_Z3TFTv+0x48>
            t = print('-');
 23fb65a:	212d      	movs	r1, #45	; 0x2d
 23fb65c:	4628      	mov	r0, r5
 23fb65e:	f003 f95f 	bl	23fe920 <_ZN5Print5printEc>
            val = -n;
 23fb662:	4261      	negs	r1, r4
            val = n;
        }
#if __GNUC__ >= 9
#pragma GCC diagnostic pop
#endif // __GNUC__ >= 9
        return printNumber(val, base) + t;
 23fb664:	220a      	movs	r2, #10
 23fb666:	4805      	ldr	r0, [pc, #20]	; (23fb67c <_Z3TFTv+0x4c>)
 23fb668:	f003 f95d 	bl	23fe926 <_ZN5Print11printNumberEmh>
  //delay(1500);
  delay(1500);
}
 23fb66c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  delay(1500);
 23fb670:	f240 50dc 	movw	r0, #1500	; 0x5dc
 23fb674:	f002 bc64 	b.w	23fdf40 <delay>
            val = n;
 23fb678:	4621      	mov	r1, r4
 23fb67a:	e7f3      	b.n	23fb664 <_Z3TFTv+0x34>
 23fb67c:	1007ae30 	.word	0x1007ae30
 23fb680:	1007ae08 	.word	0x1007ae08

023fb684 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      explicit __shared_count(const __weak_count<_Lp>& __r);

      // Does not throw if __r._M_get_use_count() == 0, caller must check.
      explicit __shared_count(const __weak_count<_Lp>& __r, std::nothrow_t);

      ~__shared_count() noexcept
 23fb684:	b538      	push	{r3, r4, r5, lr}
      {
	if (_M_pi != nullptr)
 23fb686:	6804      	ldr	r4, [r0, #0]
      ~__shared_count() noexcept
 23fb688:	4605      	mov	r5, r0
	if (_M_pi != nullptr)
 23fb68a:	b17c      	cbz	r4, 23fb6ac <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>
      if (--_M_use_count == 0)
 23fb68c:	6863      	ldr	r3, [r4, #4]
 23fb68e:	3b01      	subs	r3, #1
 23fb690:	6063      	str	r3, [r4, #4]
 23fb692:	b95b      	cbnz	r3, 23fb6ac <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>
          _M_dispose();
 23fb694:	6823      	ldr	r3, [r4, #0]
 23fb696:	4620      	mov	r0, r4
 23fb698:	689b      	ldr	r3, [r3, #8]
 23fb69a:	4798      	blx	r3
          if (--_M_weak_count == 0)
 23fb69c:	68a3      	ldr	r3, [r4, #8]
 23fb69e:	3b01      	subs	r3, #1
 23fb6a0:	60a3      	str	r3, [r4, #8]
 23fb6a2:	b91b      	cbnz	r3, 23fb6ac <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>
            _M_destroy();
 23fb6a4:	6823      	ldr	r3, [r4, #0]
 23fb6a6:	4620      	mov	r0, r4
 23fb6a8:	68db      	ldr	r3, [r3, #12]
 23fb6aa:	4798      	blx	r3
	  _M_pi->_M_release();
      }
 23fb6ac:	4628      	mov	r0, r5
 23fb6ae:	bd38      	pop	{r3, r4, r5, pc}

023fb6b0 <_Z17zones_calibrationv>:
  center[1] = 167; //231 
 23fb6b0:	22e7      	movs	r2, #231	; 0xe7
 23fb6b2:	23a7      	movs	r3, #167	; 0xa7
void zones_calibration() {
 23fb6b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  center[0] = 231; //167
 23fb6b8:	f8df 91b4 	ldr.w	r9, [pc, #436]	; 23fb870 <_Z17zones_calibrationv+0x1c0>
  ROI_width = 8;
 23fb6bc:	f8df b1b4 	ldr.w	fp, [pc, #436]	; 23fb874 <_Z17zones_calibrationv+0x1c4>
  center[1] = 167; //231 
 23fb6c0:	e9c9 2300 	strd	r2, r3, [r9]
  ROI_height = 8;
 23fb6c4:	2308      	movs	r3, #8
 23fb6c6:	4a5f      	ldr	r2, [pc, #380]	; (23fb844 <_Z17zones_calibrationv+0x194>)
  delay(500);
 23fb6c8:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
void zones_calibration() {
 23fb6cc:	b091      	sub	sp, #68	; 0x44
  ROI_height = 8;
 23fb6ce:	6013      	str	r3, [r2, #0]
  ROI_width = 8;
 23fb6d0:	f8cb 3000 	str.w	r3, [fp]
  delay(500);
 23fb6d4:	f002 fc34 	bl	23fdf40 <delay>
  Zone = 0;
 23fb6d8:	2300      	movs	r3, #0
  number_attempts = 20;
 23fb6da:	2214      	movs	r2, #20
  for (int i=0; i<number_attempts; i++){
 23fb6dc:	469a      	mov	sl, r3
  Zone = 0;
 23fb6de:	4d5a      	ldr	r5, [pc, #360]	; (23fb848 <_Z17zones_calibrationv+0x198>)
  sum_zone_0 = 0;
 23fb6e0:	f8df 8194 	ldr.w	r8, [pc, #404]	; 23fb878 <_Z17zones_calibrationv+0x1c8>
  sum_zone_1 = 0;
 23fb6e4:	4f59      	ldr	r7, [pc, #356]	; (23fb84c <_Z17zones_calibrationv+0x19c>)
  distance = 0;
 23fb6e6:	4e5a      	ldr	r6, [pc, #360]	; (23fb850 <_Z17zones_calibrationv+0x1a0>)
  number_attempts = 20;
 23fb6e8:	495a      	ldr	r1, [pc, #360]	; (23fb854 <_Z17zones_calibrationv+0x1a4>)
      distanceSensor.setIntermeasurementPeriod(55);
 23fb6ea:	4c5b      	ldr	r4, [pc, #364]	; (23fb858 <_Z17zones_calibrationv+0x1a8>)
  Zone = 0;
 23fb6ec:	602b      	str	r3, [r5, #0]
  sum_zone_0 = 0;
 23fb6ee:	f8c8 3000 	str.w	r3, [r8]
  sum_zone_1 = 0;
 23fb6f2:	603b      	str	r3, [r7, #0]
  distance = 0;
 23fb6f4:	8033      	strh	r3, [r6, #0]
  number_attempts = 20;
 23fb6f6:	600a      	str	r2, [r1, #0]
  for (int i=0; i<number_attempts; i++){
 23fb6f8:	4b56      	ldr	r3, [pc, #344]	; (23fb854 <_Z17zones_calibrationv+0x1a4>)
 23fb6fa:	681a      	ldr	r2, [r3, #0]
 23fb6fc:	4552      	cmp	r2, sl
 23fb6fe:	dd5c      	ble.n	23fb7ba <_Z17zones_calibrationv+0x10a>
      distanceSensor.setIntermeasurementPeriod(55);
 23fb700:	2137      	movs	r1, #55	; 0x37
 23fb702:	4620      	mov	r0, r4
 23fb704:	f001 fd2b 	bl	23fd15e <_ZN10SFEVL53L1X25setIntermeasurementPeriodEt>
      distanceSensor.setDistanceModeLong();
 23fb708:	4620      	mov	r0, r4
 23fb70a:	f001 fd24 	bl	23fd156 <_ZN10SFEVL53L1X19setDistanceModeLongEv>
      distanceSensor.setROI(ROI_height, ROI_width, center[0]);  // first value: height of the zone, second value: width of the zone
 23fb70e:	494d      	ldr	r1, [pc, #308]	; (23fb844 <_Z17zones_calibrationv+0x194>)
 23fb710:	f899 3000 	ldrb.w	r3, [r9]
 23fb714:	f89b 2000 	ldrb.w	r2, [fp]
 23fb718:	7809      	ldrb	r1, [r1, #0]
 23fb71a:	4620      	mov	r0, r4
 23fb71c:	f001 fd2d 	bl	23fd17a <_ZN10SFEVL53L1X6setROIEhhh>
      delay(50);
 23fb720:	2032      	movs	r0, #50	; 0x32
 23fb722:	f002 fc0d 	bl	23fdf40 <delay>
      distanceSensor.setTimingBudgetInMs(50);
 23fb726:	2132      	movs	r1, #50	; 0x32
 23fb728:	4620      	mov	r0, r4
 23fb72a:	f001 fd11 	bl	23fd150 <_ZN10SFEVL53L1X19setTimingBudgetInMsEt>
      distanceSensor.startRanging();                            //Write configuration bytes to initiate measurement
 23fb72e:	4620      	mov	r0, r4
 23fb730:	f001 fd08 	bl	23fd144 <_ZN10SFEVL53L1X12startRangingEv>
      distance = distanceSensor.getDistance();                  //Get the result of the measurement from the sensor
 23fb734:	4620      	mov	r0, r4
 23fb736:	f001 fd15 	bl	23fd164 <_ZN10SFEVL53L1X11getDistanceEv>
 23fb73a:	8030      	strh	r0, [r6, #0]
      distanceSensor.stopRanging();      
 23fb73c:	4620      	mov	r0, r4
 23fb73e:	f001 fd04 	bl	23fd14a <_ZN10SFEVL53L1X11stopRangingEv>
      sum_zone_0 = sum_zone_0 + distance;
 23fb742:	f8d8 2000 	ldr.w	r2, [r8]
 23fb746:	8833      	ldrh	r3, [r6, #0]
      distanceSensor.setIntermeasurementPeriod(55);
 23fb748:	2137      	movs	r1, #55	; 0x37
      sum_zone_0 = sum_zone_0 + distance;
 23fb74a:	4413      	add	r3, r2
 23fb74c:	f8c8 3000 	str.w	r3, [r8]
      Zone++;
 23fb750:	682b      	ldr	r3, [r5, #0]
      distanceSensor.setIntermeasurementPeriod(55);
 23fb752:	4620      	mov	r0, r4
      Zone = Zone%2;
 23fb754:	3301      	adds	r3, #1
 23fb756:	f003 0301 	and.w	r3, r3, #1
 23fb75a:	bf48      	it	mi
 23fb75c:	425b      	negmi	r3, r3
 23fb75e:	602b      	str	r3, [r5, #0]
      distanceSensor.setIntermeasurementPeriod(55);
 23fb760:	f001 fcfd 	bl	23fd15e <_ZN10SFEVL53L1X25setIntermeasurementPeriodEt>
      distanceSensor.setDistanceModeLong();
 23fb764:	4620      	mov	r0, r4
 23fb766:	f001 fcf6 	bl	23fd156 <_ZN10SFEVL53L1X19setDistanceModeLongEv>
      distanceSensor.setROI(ROI_height, ROI_width, center[1]);  // first value: height of the zone, second value: width of the zone
 23fb76a:	4936      	ldr	r1, [pc, #216]	; (23fb844 <_Z17zones_calibrationv+0x194>)
 23fb76c:	f899 3004 	ldrb.w	r3, [r9, #4]
 23fb770:	f89b 2000 	ldrb.w	r2, [fp]
 23fb774:	7809      	ldrb	r1, [r1, #0]
 23fb776:	4620      	mov	r0, r4
 23fb778:	f001 fcff 	bl	23fd17a <_ZN10SFEVL53L1X6setROIEhhh>
      delay(50);
 23fb77c:	2032      	movs	r0, #50	; 0x32
 23fb77e:	f002 fbdf 	bl	23fdf40 <delay>
      distanceSensor.setTimingBudgetInMs(50);
 23fb782:	2132      	movs	r1, #50	; 0x32
 23fb784:	4620      	mov	r0, r4
 23fb786:	f001 fce3 	bl	23fd150 <_ZN10SFEVL53L1X19setTimingBudgetInMsEt>
      distanceSensor.startRanging();                            //Write configuration bytes to initiate measurement
 23fb78a:	4620      	mov	r0, r4
 23fb78c:	f001 fcda 	bl	23fd144 <_ZN10SFEVL53L1X12startRangingEv>
      distance = distanceSensor.getDistance();                  //Get the result of the measurement from the sensor
 23fb790:	4620      	mov	r0, r4
 23fb792:	f001 fce7 	bl	23fd164 <_ZN10SFEVL53L1X11getDistanceEv>
 23fb796:	8030      	strh	r0, [r6, #0]
      distanceSensor.stopRanging();      
 23fb798:	4620      	mov	r0, r4
 23fb79a:	f001 fcd6 	bl	23fd14a <_ZN10SFEVL53L1X11stopRangingEv>
      sum_zone_1 = sum_zone_1 + distance;
 23fb79e:	683a      	ldr	r2, [r7, #0]
 23fb7a0:	8833      	ldrh	r3, [r6, #0]
  for (int i=0; i<number_attempts; i++){
 23fb7a2:	f10a 0a01 	add.w	sl, sl, #1
      sum_zone_1 = sum_zone_1 + distance;
 23fb7a6:	4413      	add	r3, r2
 23fb7a8:	603b      	str	r3, [r7, #0]
      Zone++;
 23fb7aa:	682b      	ldr	r3, [r5, #0]
      Zone = Zone%2;
 23fb7ac:	3301      	adds	r3, #1
 23fb7ae:	f003 0301 	and.w	r3, r3, #1
 23fb7b2:	bf48      	it	mi
 23fb7b4:	425b      	negmi	r3, r3
 23fb7b6:	602b      	str	r3, [r5, #0]
  for (int i=0; i<number_attempts; i++){
 23fb7b8:	e79e      	b.n	23fb6f8 <_Z17zones_calibrationv+0x48>
  calibrated_zone_0 = sum_zone_0 / number_attempts;
 23fb7ba:	f8d8 3000 	ldr.w	r3, [r8]
  calibrated_zone_1 = sum_zone_1 / number_attempts;
 23fb7be:	4d27      	ldr	r5, [pc, #156]	; (23fb85c <_Z17zones_calibrationv+0x1ac>)
  calibrated_zone_0 = sum_zone_0 / number_attempts;
 23fb7c0:	fb93 f3f2 	sdiv	r3, r3, r2
 23fb7c4:	ee00 3a10 	vmov	s0, r3
 23fb7c8:	eeb8 0ac0 	vcvt.f32.s32	s0, s0
 23fb7cc:	4b24      	ldr	r3, [pc, #144]	; (23fb860 <_Z17zones_calibrationv+0x1b0>)
  Particle.publish("Zones_C: ", String(calibrated_zone_0) + " & " + String(calibrated_zone_1), PRIVATE);
 23fb7ce:	2106      	movs	r1, #6
  calibrated_zone_0 = sum_zone_0 / number_attempts;
 23fb7d0:	ed83 0a00 	vstr	s0, [r3]
  calibrated_zone_1 = sum_zone_1 / number_attempts;
 23fb7d4:	683b      	ldr	r3, [r7, #0]
  Particle.publish("Zones_C: ", String(calibrated_zone_0) + " & " + String(calibrated_zone_1), PRIVATE);
 23fb7d6:	a804      	add	r0, sp, #16
  calibrated_zone_1 = sum_zone_1 / number_attempts;
 23fb7d8:	fb93 f3f2 	sdiv	r3, r3, r2
 23fb7dc:	ee07 3a90 	vmov	s15, r3
 23fb7e0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 23fb7e4:	edc5 7a00 	vstr	s15, [r5]
  Particle.publish("Zones_C: ", String(calibrated_zone_0) + " & " + String(calibrated_zone_1), PRIVATE);
 23fb7e8:	f003 fa72 	bl	23fecd0 <_ZN6StringC1Efi>
};

class StringSumHelper : public String
{
public:
	StringSumHelper(const String &s) : String(s) {}
 23fb7ec:	a904      	add	r1, sp, #16
 23fb7ee:	a808      	add	r0, sp, #32
 23fb7f0:	f003 fa3e 	bl	23fec70 <_ZN6StringC1ERKS_>
 23fb7f4:	491b      	ldr	r1, [pc, #108]	; (23fb864 <_Z17zones_calibrationv+0x1b4>)
 23fb7f6:	a808      	add	r0, sp, #32
 23fb7f8:	f003 faa7 	bl	23fed4a <_ZplRK15StringSumHelperPKc>
 23fb7fc:	4604      	mov	r4, r0
 23fb7fe:	ed95 0a00 	vldr	s0, [r5]
 23fb802:	2106      	movs	r1, #6
 23fb804:	a80c      	add	r0, sp, #48	; 0x30
 23fb806:	f003 fa63 	bl	23fecd0 <_ZN6StringC1Efi>
 23fb80a:	a90c      	add	r1, sp, #48	; 0x30
 23fb80c:	4620      	mov	r0, r4
 23fb80e:	f003 fa90 	bl	23fed32 <_ZplRK15StringSumHelperRK6String>
	const char * c_str() const { return buffer; }
 23fb812:	4b15      	ldr	r3, [pc, #84]	; (23fb868 <_Z17zones_calibrationv+0x1b8>)
 23fb814:	6802      	ldr	r2, [r0, #0]
inline particle::Flags<TagT, ValueT>::Flags(Flag<TagT, ValueT> flag) :
        val_(flag.value()) {
}

template<typename TagT, typename ValueT>
inline particle::Flags<TagT, ValueT>::Flags(ValueT val) :
 23fb816:	781b      	ldrb	r3, [r3, #0]
        return publish(eventName, eventData, DEFAULT_CLOUD_EVENT_TTL, flags1, flags2);
    }

    inline particle::Future<bool> publish(const char *eventName, const char *eventData, int ttl, PublishFlags flags1, PublishFlags flags2 = PublishFlags())
    {
        return publish_event(eventName, eventData, ttl, flags1 | flags2);
 23fb818:	4914      	ldr	r1, [pc, #80]	; (23fb86c <_Z17zones_calibrationv+0x1bc>)
 23fb81a:	f88d 3000 	strb.w	r3, [sp]
 23fb81e:	a802      	add	r0, sp, #8
 23fb820:	233c      	movs	r3, #60	; 0x3c
 23fb822:	f002 fcf3 	bl	23fe20c <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>
	  __r._M_ptr = 0;
	}

      __shared_ptr(const __shared_ptr&) noexcept = default;
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
 23fb826:	a803      	add	r0, sp, #12
 23fb828:	f7ff ff2c 	bl	23fb684 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 23fb82c:	a80c      	add	r0, sp, #48	; 0x30
 23fb82e:	f003 f9b1 	bl	23feb94 <_ZN6StringD1Ev>
class StringSumHelper : public String
 23fb832:	a808      	add	r0, sp, #32
 23fb834:	f003 f9ae 	bl	23feb94 <_ZN6StringD1Ev>
 23fb838:	a804      	add	r0, sp, #16
 23fb83a:	f003 f9ab 	bl	23feb94 <_ZN6StringD1Ev>
}
 23fb83e:	b011      	add	sp, #68	; 0x44
 23fb840:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 23fb844:	1007add8 	.word	0x1007add8
 23fb848:	1007adec 	.word	0x1007adec
 23fb84c:	1007ae2c 	.word	0x1007ae2c
 23fb850:	1007ae0c 	.word	0x1007ae0c
 23fb854:	1007ae24 	.word	0x1007ae24
 23fb858:	1007ae10 	.word	0x1007ae10
 23fb85c:	1007ae04 	.word	0x1007ae04
 23fb860:	1007ae00 	.word	0x1007ae00
 23fb864:	023ff66d 	.word	0x023ff66d
 23fb868:	1007adfc 	.word	0x1007adfc
 23fb86c:	023ff671 	.word	0x023ff671
 23fb870:	1007adf4 	.word	0x1007adf4
 23fb874:	1007addc 	.word	0x1007addc
 23fb878:	1007ae28 	.word	0x1007ae28

023fb87c <setup>:
void setup(void) {
 23fb87c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  Serial.begin(9600);
 23fb87e:	f003 fb49 	bl	23fef14 <_Z16_fetch_usbserialv>
 23fb882:	f44f 5116 	mov.w	r1, #9600	; 0x2580
 23fb886:	f003 fb39 	bl	23feefc <_ZN9USBSerial5beginEl>
  tft.init(240, 320);                                               // Init ST7789 320x240
 23fb88a:	f44f 72a0 	mov.w	r2, #320	; 0x140
 23fb88e:	21f0      	movs	r1, #240	; 0xf0
 23fb890:	4826      	ldr	r0, [pc, #152]	; (23fb92c <setup+0xb0>)
 23fb892:	f001 fae9 	bl	23fce68 <_ZN15Adafruit_ST77894initEtt>

#ifdef __cplusplus
extern "C" {
#endif

inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
 23fb896:	f001 ff7f 	bl	23fd798 <HAL_Timer_Get_Milli_Seconds>
  tft.fillScreen(ST77XX_BLACK);
 23fb89a:	2100      	movs	r1, #0
 23fb89c:	4823      	ldr	r0, [pc, #140]	; (23fb92c <setup+0xb0>)
 23fb89e:	f000 fbd3 	bl	23fc048 <_ZN12Adafruit_GFX10fillScreenEt>
 23fb8a2:	f001 ff79 	bl	23fd798 <HAL_Timer_Get_Milli_Seconds>
  Wire.begin();
 23fb8a6:	f003 fd0f 	bl	23ff2c8 <_Z19__fetch_global_Wirev>
 23fb8aa:	f002 fea1 	bl	23fe5f0 <_ZN7TwoWire5beginEv>
  zones_calibration();
 23fb8ae:	f7ff feff 	bl	23fb6b0 <_Z17zones_calibrationv>
  if (distanceSensor.init() == false)
 23fb8b2:	481f      	ldr	r0, [pc, #124]	; (23fb930 <setup+0xb4>)
 23fb8b4:	f001 fc3e 	bl	23fd134 <_ZN10SFEVL53L1X4initEv>
 23fb8b8:	4602      	mov	r2, r0
 23fb8ba:	b958      	cbnz	r0, 23fb8d4 <setup+0x58>
 23fb8bc:	4b1d      	ldr	r3, [pc, #116]	; (23fb934 <setup+0xb8>)
 23fb8be:	a802      	add	r0, sp, #8
 23fb8c0:	781b      	ldrb	r3, [r3, #0]
 23fb8c2:	491d      	ldr	r1, [pc, #116]	; (23fb938 <setup+0xbc>)
 23fb8c4:	f88d 3000 	strb.w	r3, [sp]
 23fb8c8:	233c      	movs	r3, #60	; 0x3c
 23fb8ca:	f002 fc9f 	bl	23fe20c <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>
 23fb8ce:	a803      	add	r0, sp, #12
 23fb8d0:	f7ff fed8 	bl	23fb684 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
    delay(2000);
 23fb8d4:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 23fb8d8:	f002 fb32 	bl	23fdf40 <delay>
 23fb8dc:	4b17      	ldr	r3, [pc, #92]	; (23fb93c <setup+0xc0>)
 23fb8de:	2200      	movs	r2, #0
 23fb8e0:	781b      	ldrb	r3, [r3, #0]
 23fb8e2:	4917      	ldr	r1, [pc, #92]	; (23fb940 <setup+0xc4>)
 23fb8e4:	f88d 3000 	strb.w	r3, [sp]
 23fb8e8:	a802      	add	r0, sp, #8
 23fb8ea:	233c      	movs	r3, #60	; 0x3c
 23fb8ec:	f002 fc8e 	bl	23fe20c <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>
 23fb8f0:	a803      	add	r0, sp, #12
 23fb8f2:	f7ff fec7 	bl	23fb684 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
  void setTextWrap(boolean w) { wrap = w; }
 23fb8f6:	2100      	movs	r1, #0
 23fb8f8:	4c0c      	ldr	r4, [pc, #48]	; (23fb92c <setup+0xb0>)
    tft.fillScreen(ST77XX_BLACK);
 23fb8fa:	4620      	mov	r0, r4
 23fb8fc:	76e1      	strb	r1, [r4, #27]
 23fb8fe:	f000 fba3 	bl	23fc048 <_ZN12Adafruit_GFX10fillScreenEt>
  void setTextColor(uint16_t c) { textcolor = textbgcolor = c; }
 23fb902:	f04f 121e 	mov.w	r2, #1966110	; 0x1e001e
 23fb906:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    tft.setTextSize(36);
 23fb90a:	4620      	mov	r0, r4
 23fb90c:	2124      	movs	r1, #36	; 0x24
 23fb90e:	e9c4 2304 	strd	r2, r3, [r4, #16]
 23fb912:	f000 fe3c 	bl	23fc58e <_ZN12Adafruit_GFX11setTextSizeEh>
    tft.print("0");
 23fb916:	4620      	mov	r0, r4
 23fb918:	490a      	ldr	r1, [pc, #40]	; (23fb944 <setup+0xc8>)
 23fb91a:	f002 fffd 	bl	23fe918 <_ZN5Print5printEPKc>
    delay(50);
 23fb91e:	2032      	movs	r0, #50	; 0x32
}
 23fb920:	b004      	add	sp, #16
 23fb922:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    delay(50);
 23fb926:	f002 bb0b 	b.w	23fdf40 <delay>
 23fb92a:	bf00      	nop
 23fb92c:	1007ae30 	.word	0x1007ae30
 23fb930:	1007ae10 	.word	0x1007ae10
 23fb934:	1007adf0 	.word	0x1007adf0
 23fb938:	023ff67b 	.word	0x023ff67b
 23fb93c:	1007adfc 	.word	0x1007adfc
 23fb940:	023ff68d 	.word	0x023ff68d
 23fb944:	023ff698 	.word	0x023ff698

023fb948 <_Z5countv>:
void count() {
 23fb948:	b570      	push	{r4, r5, r6, lr}
    if ((Entry_state == 1) && (Exit_state == 0)) { 
 23fb94a:	4e32      	ldr	r6, [pc, #200]	; (23fba14 <_Z5countv+0xcc>)
 23fb94c:	4c32      	ldr	r4, [pc, #200]	; (23fba18 <_Z5countv+0xd0>)
 23fb94e:	6833      	ldr	r3, [r6, #0]
void count() {
 23fb950:	b08c      	sub	sp, #48	; 0x30
    if ((Entry_state == 1) && (Exit_state == 0)) { 
 23fb952:	2b01      	cmp	r3, #1
 23fb954:	d155      	bne.n	23fba02 <_Z5countv+0xba>
 23fb956:	4b31      	ldr	r3, [pc, #196]	; (23fba1c <_Z5countv+0xd4>)
 23fb958:	681d      	ldr	r5, [r3, #0]
 23fb95a:	2d00      	cmp	r5, #0
 23fb95c:	d153      	bne.n	23fba06 <_Z5countv+0xbe>
        counter = counter + 1;
 23fb95e:	6823      	ldr	r3, [r4, #0]
	StringSumHelper(const char *p) : String(p) {}
 23fb960:	492f      	ldr	r1, [pc, #188]	; (23fba20 <_Z5countv+0xd8>)
 23fb962:	3301      	adds	r3, #1
 23fb964:	a808      	add	r0, sp, #32
 23fb966:	6023      	str	r3, [r4, #0]
 23fb968:	f003 f95f 	bl	23fec2a <_ZN6StringC1EPK19__FlashStringHelper>
        Particle.publish("Counter: " + String(counter), PRIVATE);
 23fb96c:	220a      	movs	r2, #10
 23fb96e:	6821      	ldr	r1, [r4, #0]
 23fb970:	a804      	add	r0, sp, #16
 23fb972:	f003 f99a 	bl	23fecaa <_ZN6StringC1Eih>
 23fb976:	a904      	add	r1, sp, #16
 23fb978:	a808      	add	r0, sp, #32
 23fb97a:	f003 f9da 	bl	23fed32 <_ZplRK15StringSumHelperRK6String>
	const char * c_str() const { return buffer; }
 23fb97e:	4b29      	ldr	r3, [pc, #164]	; (23fba24 <_Z5countv+0xdc>)
 23fb980:	6801      	ldr	r1, [r0, #0]
 23fb982:	781b      	ldrb	r3, [r3, #0]
 23fb984:	462a      	mov	r2, r5
 23fb986:	f88d 3000 	strb.w	r3, [sp]
 23fb98a:	a802      	add	r0, sp, #8
 23fb98c:	233c      	movs	r3, #60	; 0x3c
 23fb98e:	f002 fc3d 	bl	23fe20c <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>
 23fb992:	a803      	add	r0, sp, #12
 23fb994:	f7ff fe76 	bl	23fb684 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 23fb998:	a804      	add	r0, sp, #16
 23fb99a:	f003 f8fb 	bl	23feb94 <_ZN6StringD1Ev>
class StringSumHelper : public String
 23fb99e:	a808      	add	r0, sp, #32
 23fb9a0:	f003 f8f8 	bl	23feb94 <_ZN6StringD1Ev>
        TFT();
 23fb9a4:	f7ff fe44 	bl	23fb630 <_Z3TFTv>
        Entry_state = 0;
 23fb9a8:	6035      	str	r5, [r6, #0]
    if ((Entry_state == 0) && (Exit_state == 1)) { 
 23fb9aa:	4d1c      	ldr	r5, [pc, #112]	; (23fba1c <_Z5countv+0xd4>)
 23fb9ac:	682b      	ldr	r3, [r5, #0]
 23fb9ae:	2b01      	cmp	r3, #1
 23fb9b0:	d129      	bne.n	23fba06 <_Z5countv+0xbe>
        counter = counter - 1;    
 23fb9b2:	6823      	ldr	r3, [r4, #0]
	StringSumHelper(const char *p) : String(p) {}
 23fb9b4:	491a      	ldr	r1, [pc, #104]	; (23fba20 <_Z5countv+0xd8>)
 23fb9b6:	3b01      	subs	r3, #1
 23fb9b8:	a808      	add	r0, sp, #32
 23fb9ba:	6023      	str	r3, [r4, #0]
 23fb9bc:	f003 f935 	bl	23fec2a <_ZN6StringC1EPK19__FlashStringHelper>
        Particle.publish("Counter: " + String(counter), PRIVATE);
 23fb9c0:	220a      	movs	r2, #10
 23fb9c2:	6821      	ldr	r1, [r4, #0]
 23fb9c4:	a804      	add	r0, sp, #16
 23fb9c6:	f003 f970 	bl	23fecaa <_ZN6StringC1Eih>
 23fb9ca:	a904      	add	r1, sp, #16
 23fb9cc:	a808      	add	r0, sp, #32
 23fb9ce:	f003 f9b0 	bl	23fed32 <_ZplRK15StringSumHelperRK6String>
	const char * c_str() const { return buffer; }
 23fb9d2:	4b14      	ldr	r3, [pc, #80]	; (23fba24 <_Z5countv+0xdc>)
 23fb9d4:	6801      	ldr	r1, [r0, #0]
 23fb9d6:	781b      	ldrb	r3, [r3, #0]
 23fb9d8:	2200      	movs	r2, #0
 23fb9da:	f88d 3000 	strb.w	r3, [sp]
 23fb9de:	a802      	add	r0, sp, #8
 23fb9e0:	233c      	movs	r3, #60	; 0x3c
 23fb9e2:	f002 fc13 	bl	23fe20c <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>
 23fb9e6:	a803      	add	r0, sp, #12
 23fb9e8:	f7ff fe4c 	bl	23fb684 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 23fb9ec:	a804      	add	r0, sp, #16
 23fb9ee:	f003 f8d1 	bl	23feb94 <_ZN6StringD1Ev>
class StringSumHelper : public String
 23fb9f2:	a808      	add	r0, sp, #32
 23fb9f4:	f003 f8ce 	bl	23feb94 <_ZN6StringD1Ev>
        TFT();
 23fb9f8:	f7ff fe1a 	bl	23fb630 <_Z3TFTv>
        Exit_state = 0;
 23fb9fc:	2300      	movs	r3, #0
 23fb9fe:	602b      	str	r3, [r5, #0]
 23fba00:	e001      	b.n	23fba06 <_Z5countv+0xbe>
    if ((Entry_state == 0) && (Exit_state == 1)) { 
 23fba02:	2b00      	cmp	r3, #0
 23fba04:	d0d1      	beq.n	23fb9aa <_Z5countv+0x62>
    if (counter <= 0) {
 23fba06:	6823      	ldr	r3, [r4, #0]
 23fba08:	2b00      	cmp	r3, #0
        counter = 0;
 23fba0a:	bfdc      	itt	le
 23fba0c:	2300      	movle	r3, #0
 23fba0e:	6023      	strle	r3, [r4, #0]
}
 23fba10:	b00c      	add	sp, #48	; 0x30
 23fba12:	bd70      	pop	{r4, r5, r6, pc}
 23fba14:	1007adb8 	.word	0x1007adb8
 23fba18:	1007ae08 	.word	0x1007ae08
 23fba1c:	1007adbc 	.word	0x1007adbc
 23fba20:	023ff69a 	.word	0x023ff69a
 23fba24:	1007adfc 	.word	0x1007adfc

023fba28 <_Z20people_counter_arrayv>:
void people_counter_array() {
 23fba28:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    if (PathTrack[0][0] < PathTrack[0][1]) {
 23fba2a:	4b29      	ldr	r3, [pc, #164]	; (23fbad0 <_Z20people_counter_arrayv+0xa8>)
 23fba2c:	4d29      	ldr	r5, [pc, #164]	; (23fbad4 <_Z20people_counter_arrayv+0xac>)
 23fba2e:	e9d3 2100 	ldrd	r2, r1, [r3]
    if (PathTrack[1][0] > PathTrack[1][1]) {
 23fba32:	e9d3 0402 	ldrd	r0, r4, [r3, #8]
        ROUTE[0] = 2;
 23fba36:	428a      	cmp	r2, r1
 23fba38:	bfb4      	ite	lt
 23fba3a:	2201      	movlt	r2, #1
 23fba3c:	2202      	movge	r2, #2
        ROUTE[1] = 1;
 23fba3e:	42a0      	cmp	r0, r4
 23fba40:	bfd4      	ite	le
 23fba42:	2102      	movle	r1, #2
 23fba44:	2101      	movgt	r1, #1
    if ((PathTrack[2][0] > PathTrack[1][0]) &&  (PathTrack[2][1] > PathTrack[1][1])) {
 23fba46:	691e      	ldr	r6, [r3, #16]
 23fba48:	602a      	str	r2, [r5, #0]
 23fba4a:	42b0      	cmp	r0, r6
 23fba4c:	6069      	str	r1, [r5, #4]
 23fba4e:	da26      	bge.n	23fba9e <_Z20people_counter_arrayv+0x76>
 23fba50:	695b      	ldr	r3, [r3, #20]
        ROUTE[2] = 1;
 23fba52:	429c      	cmp	r4, r3
 23fba54:	bfac      	ite	ge
 23fba56:	2402      	movge	r4, #2
 23fba58:	2401      	movlt	r4, #1
    if ((ROUTE[0] == 1) && (ROUTE[1] == 1) && (ROUTE[2] == 1))  {
 23fba5a:	2a01      	cmp	r2, #1
 23fba5c:	60ac      	str	r4, [r5, #8]
 23fba5e:	d120      	bne.n	23fbaa2 <_Z20people_counter_arrayv+0x7a>
 23fba60:	2901      	cmp	r1, #1
 23fba62:	d113      	bne.n	23fba8c <_Z20people_counter_arrayv+0x64>
 23fba64:	2c01      	cmp	r4, #1
 23fba66:	d111      	bne.n	23fba8c <_Z20people_counter_arrayv+0x64>
 23fba68:	4b1b      	ldr	r3, [pc, #108]	; (23fbad8 <_Z20people_counter_arrayv+0xb0>)
 23fba6a:	2200      	movs	r2, #0
 23fba6c:	781b      	ldrb	r3, [r3, #0]
 23fba6e:	491b      	ldr	r1, [pc, #108]	; (23fbadc <_Z20people_counter_arrayv+0xb4>)
 23fba70:	f88d 3000 	strb.w	r3, [sp]
 23fba74:	a802      	add	r0, sp, #8
 23fba76:	233c      	movs	r3, #60	; 0x3c
 23fba78:	f002 fbc8 	bl	23fe20c <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>
 23fba7c:	a803      	add	r0, sp, #12
 23fba7e:	f7ff fe01 	bl	23fb684 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
        Exit_state = 0;
 23fba82:	2200      	movs	r2, #0
        Entry_state = 1;
 23fba84:	4b16      	ldr	r3, [pc, #88]	; (23fbae0 <_Z20people_counter_arrayv+0xb8>)
 23fba86:	601c      	str	r4, [r3, #0]
        Exit_state = 0;
 23fba88:	4b16      	ldr	r3, [pc, #88]	; (23fbae4 <_Z20people_counter_arrayv+0xbc>)
 23fba8a:	601a      	str	r2, [r3, #0]
    ROUTE[0] = 0;
 23fba8c:	2300      	movs	r3, #0
    ROUTE[1] = 0;
 23fba8e:	e9c5 3300 	strd	r3, r3, [r5]
    ROUTE[2] = 0;
 23fba92:	60ab      	str	r3, [r5, #8]
}
 23fba94:	b004      	add	sp, #16
 23fba96:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    count();
 23fba9a:	f7ff bf55 	b.w	23fb948 <_Z5countv>
        ROUTE[2] = 2;
 23fba9e:	2402      	movs	r4, #2
 23fbaa0:	e7db      	b.n	23fba5a <_Z20people_counter_arrayv+0x32>
    } else if ((ROUTE[0] == 2) && (ROUTE[1] == 2) && (ROUTE[2] == 1)) {
 23fbaa2:	2902      	cmp	r1, #2
 23fbaa4:	d1f2      	bne.n	23fba8c <_Z20people_counter_arrayv+0x64>
 23fbaa6:	2c01      	cmp	r4, #1
 23fbaa8:	d1f0      	bne.n	23fba8c <_Z20people_counter_arrayv+0x64>
 23fbaaa:	4b0b      	ldr	r3, [pc, #44]	; (23fbad8 <_Z20people_counter_arrayv+0xb0>)
 23fbaac:	2200      	movs	r2, #0
 23fbaae:	781b      	ldrb	r3, [r3, #0]
 23fbab0:	490d      	ldr	r1, [pc, #52]	; (23fbae8 <_Z20people_counter_arrayv+0xc0>)
 23fbab2:	f88d 3000 	strb.w	r3, [sp]
 23fbab6:	a802      	add	r0, sp, #8
 23fbab8:	233c      	movs	r3, #60	; 0x3c
 23fbaba:	f002 fba7 	bl	23fe20c <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>
 23fbabe:	a803      	add	r0, sp, #12
 23fbac0:	f7ff fde0 	bl	23fb684 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
        Entry_state = 0;
 23fbac4:	2200      	movs	r2, #0
 23fbac6:	4b06      	ldr	r3, [pc, #24]	; (23fbae0 <_Z20people_counter_arrayv+0xb8>)
 23fbac8:	601a      	str	r2, [r3, #0]
        Exit_state = 1;
 23fbaca:	4b06      	ldr	r3, [pc, #24]	; (23fbae4 <_Z20people_counter_arrayv+0xbc>)
 23fbacc:	601c      	str	r4, [r3, #0]
 23fbace:	e7dd      	b.n	23fba8c <_Z20people_counter_arrayv+0x64>
 23fbad0:	1007adc0 	.word	0x1007adc0
 23fbad4:	1007ade0 	.word	0x1007ade0
 23fbad8:	1007adfc 	.word	0x1007adfc
 23fbadc:	023ff6a4 	.word	0x023ff6a4
 23fbae0:	1007adb8 	.word	0x1007adb8
 23fbae4:	1007adbc 	.word	0x1007adbc
 23fbae8:	023ff6ab 	.word	0x023ff6ab

023fbaec <_Z4Pathv>:
    number_attempts = 2;
 23fbaec:	2302      	movs	r3, #2
void Path() {
 23fbaee:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    distance = 0;
 23fbaf2:	2500      	movs	r5, #0
    number_attempts = 2;
 23fbaf4:	f8df 91ac 	ldr.w	r9, [pc, #428]	; 23fbca4 <_Z4Pathv+0x1b8>
    distance = 0;
 23fbaf8:	4e62      	ldr	r6, [pc, #392]	; (23fbc84 <_Z4Pathv+0x198>)
    number_attempts = 2;
 23fbafa:	f8c9 3000 	str.w	r3, [r9]
    Zone = 0;
 23fbafe:	4b62      	ldr	r3, [pc, #392]	; (23fbc88 <_Z4Pathv+0x19c>)
            sum_zone_0 = 0;
 23fbb00:	4f62      	ldr	r7, [pc, #392]	; (23fbc8c <_Z4Pathv+0x1a0>)
    Zone = 0;
 23fbb02:	601d      	str	r5, [r3, #0]
 23fbb04:	4b62      	ldr	r3, [pc, #392]	; (23fbc90 <_Z4Pathv+0x1a4>)
            sum_zone_1 = 0;
 23fbb06:	f8df a1a0 	ldr.w	sl, [pc, #416]	; 23fbca8 <_Z4Pathv+0x1bc>
    distance = 0;
 23fbb0a:	8035      	strh	r5, [r6, #0]
    for (int k=0; k<3; k++) {  
 23fbb0c:	9300      	str	r3, [sp, #0]
            sum_zone_0 = 0;
 23fbb0e:	2300      	movs	r3, #0
            distanceSensor.setIntermeasurementPeriod(35);
 23fbb10:	4c60      	ldr	r4, [pc, #384]	; (23fbc94 <_Z4Pathv+0x1a8>)
            sum_zone_0 = 0;
 23fbb12:	603b      	str	r3, [r7, #0]
            sum_zone_1 = 0;
 23fbb14:	f8ca 3000 	str.w	r3, [sl]
        for (int i=0; i<number_attempts; i++) {
 23fbb18:	9301      	str	r3, [sp, #4]
 23fbb1a:	f8d9 3000 	ldr.w	r3, [r9]
 23fbb1e:	9a01      	ldr	r2, [sp, #4]
 23fbb20:	4293      	cmp	r3, r2
 23fbb22:	f340 80a2 	ble.w	23fbc6a <_Z4Pathv+0x17e>
            distanceSensor.setIntermeasurementPeriod(35);
 23fbb26:	2123      	movs	r1, #35	; 0x23
 23fbb28:	4620      	mov	r0, r4
 23fbb2a:	f001 fb18 	bl	23fd15e <_ZN10SFEVL53L1X25setIntermeasurementPeriodEt>
            distanceSensor.setDistanceModeLong();
 23fbb2e:	4620      	mov	r0, r4
 23fbb30:	f001 fb11 	bl	23fd156 <_ZN10SFEVL53L1X19setDistanceModeLongEv>
            distanceSensor.setROI(ROI_height, ROI_width, center[0]);    // first value: height of the zone, second value: width of the zone
 23fbb34:	f8df b174 	ldr.w	fp, [pc, #372]	; 23fbcac <_Z4Pathv+0x1c0>
 23fbb38:	4b57      	ldr	r3, [pc, #348]	; (23fbc98 <_Z4Pathv+0x1ac>)
 23fbb3a:	4a58      	ldr	r2, [pc, #352]	; (23fbc9c <_Z4Pathv+0x1b0>)
 23fbb3c:	781b      	ldrb	r3, [r3, #0]
 23fbb3e:	7812      	ldrb	r2, [r2, #0]
 23fbb40:	f89b 1000 	ldrb.w	r1, [fp]
 23fbb44:	4620      	mov	r0, r4
 23fbb46:	f001 fb18 	bl	23fd17a <_ZN10SFEVL53L1X6setROIEhhh>
            delay(30);
 23fbb4a:	201e      	movs	r0, #30
 23fbb4c:	f002 f9f8 	bl	23fdf40 <delay>
            distanceSensor.setTimingBudgetInMs(33);
 23fbb50:	2121      	movs	r1, #33	; 0x21
 23fbb52:	4620      	mov	r0, r4
 23fbb54:	f001 fafc 	bl	23fd150 <_ZN10SFEVL53L1X19setTimingBudgetInMsEt>
            distanceSensor.startRanging();                              //Write configuration bytes to initiate measurement
 23fbb58:	4620      	mov	r0, r4
 23fbb5a:	f001 faf3 	bl	23fd144 <_ZN10SFEVL53L1X12startRangingEv>
            distance = distanceSensor.getDistance();                    //Get the result of the measurement from the sensor
 23fbb5e:	4620      	mov	r0, r4
 23fbb60:	f001 fb00 	bl	23fd164 <_ZN10SFEVL53L1X11getDistanceEv>
 23fbb64:	8030      	strh	r0, [r6, #0]
            distanceSensor.stopRanging();      
 23fbb66:	4620      	mov	r0, r4
 23fbb68:	f001 faef 	bl	23fd14a <_ZN10SFEVL53L1X11stopRangingEv>
            sum_zone_0 = sum_zone_0 + distance;
 23fbb6c:	683a      	ldr	r2, [r7, #0]
 23fbb6e:	8833      	ldrh	r3, [r6, #0]
            Zone = Zone%2;
 23fbb70:	f8df 8114 	ldr.w	r8, [pc, #276]	; 23fbc88 <_Z4Pathv+0x19c>
            sum_zone_0 = sum_zone_0 + distance;
 23fbb74:	4413      	add	r3, r2
 23fbb76:	603b      	str	r3, [r7, #0]
            Zone++;
 23fbb78:	f8d8 3000 	ldr.w	r3, [r8]
            delay(10);
 23fbb7c:	200a      	movs	r0, #10
            Zone = Zone%2;
 23fbb7e:	3301      	adds	r3, #1
 23fbb80:	f003 0301 	and.w	r3, r3, #1
 23fbb84:	bf48      	it	mi
 23fbb86:	425b      	negmi	r3, r3
 23fbb88:	f8c8 3000 	str.w	r3, [r8]
            delay(10);
 23fbb8c:	f002 f9d8 	bl	23fdf40 <delay>
            distanceSensor.setIntermeasurementPeriod(35);
 23fbb90:	2123      	movs	r1, #35	; 0x23
 23fbb92:	4620      	mov	r0, r4
 23fbb94:	f001 fae3 	bl	23fd15e <_ZN10SFEVL53L1X25setIntermeasurementPeriodEt>
            distanceSensor.setDistanceModeLong();
 23fbb98:	4620      	mov	r0, r4
 23fbb9a:	f001 fadc 	bl	23fd156 <_ZN10SFEVL53L1X19setDistanceModeLongEv>
            distanceSensor.setROI(ROI_height, ROI_width, center[1]);    // first value: height of the zone, second value: width of the zone
 23fbb9e:	4b3e      	ldr	r3, [pc, #248]	; (23fbc98 <_Z4Pathv+0x1ac>)
 23fbba0:	4a3e      	ldr	r2, [pc, #248]	; (23fbc9c <_Z4Pathv+0x1b0>)
 23fbba2:	791b      	ldrb	r3, [r3, #4]
 23fbba4:	7812      	ldrb	r2, [r2, #0]
 23fbba6:	f89b 1000 	ldrb.w	r1, [fp]
 23fbbaa:	4620      	mov	r0, r4
 23fbbac:	f001 fae5 	bl	23fd17a <_ZN10SFEVL53L1X6setROIEhhh>
            delay(30);
 23fbbb0:	201e      	movs	r0, #30
 23fbbb2:	f002 f9c5 	bl	23fdf40 <delay>
            distanceSensor.setTimingBudgetInMs(33);
 23fbbb6:	2121      	movs	r1, #33	; 0x21
 23fbbb8:	4620      	mov	r0, r4
 23fbbba:	f001 fac9 	bl	23fd150 <_ZN10SFEVL53L1X19setTimingBudgetInMsEt>
            distanceSensor.startRanging();                              //Write configuration bytes to initiate measurement
 23fbbbe:	4620      	mov	r0, r4
 23fbbc0:	f001 fac0 	bl	23fd144 <_ZN10SFEVL53L1X12startRangingEv>
            distance = distanceSensor.getDistance();                    //Get the result of the measurement from the sensor
 23fbbc4:	4620      	mov	r0, r4
 23fbbc6:	f001 facd 	bl	23fd164 <_ZN10SFEVL53L1X11getDistanceEv>
 23fbbca:	8030      	strh	r0, [r6, #0]
            distanceSensor.stopRanging();      
 23fbbcc:	4620      	mov	r0, r4
 23fbbce:	f001 fabc 	bl	23fd14a <_ZN10SFEVL53L1X11stopRangingEv>
            sum_zone_1 = sum_zone_1 + distance;
 23fbbd2:	f8da 3000 	ldr.w	r3, [sl]
 23fbbd6:	8832      	ldrh	r2, [r6, #0]
            PathTrack[k][0] = sum_zone_0 / number_attempts;
 23fbbd8:	f8d9 1000 	ldr.w	r1, [r9]
            sum_zone_1 = sum_zone_1 + distance;
 23fbbdc:	441a      	add	r2, r3
            Zone++;
 23fbbde:	f8d8 3000 	ldr.w	r3, [r8]
            sum_zone_1 = sum_zone_1 + distance;
 23fbbe2:	f8ca 2000 	str.w	r2, [sl]
            Zone = Zone%2;
 23fbbe6:	3301      	adds	r3, #1
 23fbbe8:	f003 0301 	and.w	r3, r3, #1
 23fbbec:	bf48      	it	mi
 23fbbee:	425b      	negmi	r3, r3
 23fbbf0:	f8c8 3000 	str.w	r3, [r8]
            PathTrack[k][0] = sum_zone_0 / number_attempts;
 23fbbf4:	683b      	ldr	r3, [r7, #0]
            PathTrack[k][1] = sum_zone_1 / number_attempts;
 23fbbf6:	fb92 f2f1 	sdiv	r2, r2, r1
            PathTrack[k][0] = sum_zone_0 / number_attempts;
 23fbbfa:	fb93 fcf1 	sdiv	ip, r3, r1
 23fbbfe:	9800      	ldr	r0, [sp, #0]
            if (sum_zone_0 < 20) { 
 23fbc00:	2b13      	cmp	r3, #19
            PathTrack[k][0] = sum_zone_0 / number_attempts;
 23fbc02:	f8c0 c000 	str.w	ip, [r0]
            PathTrack[k][1] = sum_zone_1 / number_attempts;
 23fbc06:	6042      	str	r2, [r0, #4]
            if (sum_zone_0 < 20) { 
 23fbc08:	dc29      	bgt.n	23fbc5e <_Z4Pathv+0x172>
            counter = 0;
 23fbc0a:	2300      	movs	r3, #0
  void setTextWrap(boolean w) { wrap = w; }
 23fbc0c:	f8df b090 	ldr.w	fp, [pc, #144]	; 23fbca0 <_Z4Pathv+0x1b4>
 23fbc10:	f8df 809c 	ldr.w	r8, [pc, #156]	; 23fbcb0 <_Z4Pathv+0x1c4>
            tft.fillScreen(ST77XX_BLACK);
 23fbc14:	2100      	movs	r1, #0
 23fbc16:	4658      	mov	r0, fp
 23fbc18:	f88b 301b 	strb.w	r3, [fp, #27]
            counter = 0;
 23fbc1c:	f8c8 3000 	str.w	r3, [r8]
            tft.fillScreen(ST77XX_BLACK);
 23fbc20:	f000 fa12 	bl	23fc048 <_ZN12Adafruit_GFX10fillScreenEt>
  void setTextColor(uint16_t c) { textcolor = textbgcolor = c; }
 23fbc24:	f04f 121e 	mov.w	r2, #1966110	; 0x1e001e
 23fbc28:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
            tft.setTextSize(36);
 23fbc2c:	2124      	movs	r1, #36	; 0x24
 23fbc2e:	4658      	mov	r0, fp
 23fbc30:	e9cb 2304 	strd	r2, r3, [fp, #16]
 23fbc34:	f000 fcab 	bl	23fc58e <_ZN12Adafruit_GFX11setTextSizeEh>
            tft.print(counter);
 23fbc38:	f8d8 8000 	ldr.w	r8, [r8]
        if (n < 0 && base == 10) {
 23fbc3c:	f1b8 0f00 	cmp.w	r8, #0
 23fbc40:	da11      	bge.n	23fbc66 <_Z4Pathv+0x17a>
            t = print('-');
 23fbc42:	212d      	movs	r1, #45	; 0x2d
 23fbc44:	4658      	mov	r0, fp
 23fbc46:	f002 fe6b 	bl	23fe920 <_ZN5Print5printEc>
            val = -n;
 23fbc4a:	f1c8 0100 	rsb	r1, r8, #0
        return printNumber(val, base) + t;
 23fbc4e:	220a      	movs	r2, #10
 23fbc50:	4813      	ldr	r0, [pc, #76]	; (23fbca0 <_Z4Pathv+0x1b4>)
 23fbc52:	f002 fe68 	bl	23fe926 <_ZN5Print11printNumberEmh>
            delay(1500);
 23fbc56:	f240 50dc 	movw	r0, #1500	; 0x5dc
 23fbc5a:	f002 f971 	bl	23fdf40 <delay>
        for (int i=0; i<number_attempts; i++) {
 23fbc5e:	9b01      	ldr	r3, [sp, #4]
 23fbc60:	3301      	adds	r3, #1
 23fbc62:	9301      	str	r3, [sp, #4]
 23fbc64:	e759      	b.n	23fbb1a <_Z4Pathv+0x2e>
            val = n;
 23fbc66:	4641      	mov	r1, r8
 23fbc68:	e7f1      	b.n	23fbc4e <_Z4Pathv+0x162>
    for (int k=0; k<3; k++) {  
 23fbc6a:	9b00      	ldr	r3, [sp, #0]
 23fbc6c:	3501      	adds	r5, #1
 23fbc6e:	3308      	adds	r3, #8
 23fbc70:	2d03      	cmp	r5, #3
 23fbc72:	9300      	str	r3, [sp, #0]
 23fbc74:	f47f af4b 	bne.w	23fbb0e <_Z4Pathv+0x22>
}    
 23fbc78:	b003      	add	sp, #12
 23fbc7a:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
      people_counter_array();   
 23fbc7e:	f7ff bed3 	b.w	23fba28 <_Z20people_counter_arrayv>
 23fbc82:	bf00      	nop
 23fbc84:	1007ae0c 	.word	0x1007ae0c
 23fbc88:	1007adec 	.word	0x1007adec
 23fbc8c:	1007ae28 	.word	0x1007ae28
 23fbc90:	1007adc0 	.word	0x1007adc0
 23fbc94:	1007ae10 	.word	0x1007ae10
 23fbc98:	1007adf4 	.word	0x1007adf4
 23fbc9c:	1007addc 	.word	0x1007addc
 23fbca0:	1007ae30 	.word	0x1007ae30
 23fbca4:	1007ae24 	.word	0x1007ae24
 23fbca8:	1007ae2c 	.word	0x1007ae2c
 23fbcac:	1007add8 	.word	0x1007add8
 23fbcb0:	1007ae08 	.word	0x1007ae08

023fbcb4 <_Z13measure_zonesv>:
void measure_zones() {
 23fbcb4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    distance = 0;
 23fbcb8:	2500      	movs	r5, #0
    number_attempts = 1;
 23fbcba:	2301      	movs	r3, #1
    distance = 0;
 23fbcbc:	4f53      	ldr	r7, [pc, #332]	; (23fbe0c <_Z13measure_zonesv+0x158>)
    sum_zone_0 = 0;
 23fbcbe:	f8df 916c 	ldr.w	r9, [pc, #364]	; 23fbe2c <_Z13measure_zonesv+0x178>
    sum_zone_1 = 0;
 23fbcc2:	f8df a16c 	ldr.w	sl, [pc, #364]	; 23fbe30 <_Z13measure_zonesv+0x17c>
    number_attempts = 1;
 23fbcc6:	f8df b16c 	ldr.w	fp, [pc, #364]	; 23fbe34 <_Z13measure_zonesv+0x180>
    Zone = 0;
 23fbcca:	4e51      	ldr	r6, [pc, #324]	; (23fbe10 <_Z13measure_zonesv+0x15c>)
      distanceSensor.setIntermeasurementPeriod(35);
 23fbccc:	4c51      	ldr	r4, [pc, #324]	; (23fbe14 <_Z13measure_zonesv+0x160>)
    distance = 0;
 23fbcce:	803d      	strh	r5, [r7, #0]
    sum_zone_0 = 0;
 23fbcd0:	f8c9 5000 	str.w	r5, [r9]
    sum_zone_1 = 0;
 23fbcd4:	f8ca 5000 	str.w	r5, [sl]
    number_attempts = 1;
 23fbcd8:	f8cb 3000 	str.w	r3, [fp]
    Zone = 0;
 23fbcdc:	6035      	str	r5, [r6, #0]
      distanceSensor.setIntermeasurementPeriod(35);
 23fbcde:	2123      	movs	r1, #35	; 0x23
 23fbce0:	4620      	mov	r0, r4
 23fbce2:	f001 fa3c 	bl	23fd15e <_ZN10SFEVL53L1X25setIntermeasurementPeriodEt>
      distanceSensor.setDistanceModeLong();
 23fbce6:	4620      	mov	r0, r4
 23fbce8:	f001 fa35 	bl	23fd156 <_ZN10SFEVL53L1X19setDistanceModeLongEv>
      distanceSensor.setROI(ROI_height, ROI_width, center[0]);  // first value: height of the zone, second value: width of the zone
 23fbcec:	f8df 8148 	ldr.w	r8, [pc, #328]	; 23fbe38 <_Z13measure_zonesv+0x184>
 23fbcf0:	4b49      	ldr	r3, [pc, #292]	; (23fbe18 <_Z13measure_zonesv+0x164>)
 23fbcf2:	494a      	ldr	r1, [pc, #296]	; (23fbe1c <_Z13measure_zonesv+0x168>)
 23fbcf4:	f898 2000 	ldrb.w	r2, [r8]
 23fbcf8:	781b      	ldrb	r3, [r3, #0]
 23fbcfa:	7809      	ldrb	r1, [r1, #0]
 23fbcfc:	4620      	mov	r0, r4
 23fbcfe:	f001 fa3c 	bl	23fd17a <_ZN10SFEVL53L1X6setROIEhhh>
      delay(25);
 23fbd02:	2019      	movs	r0, #25
 23fbd04:	f002 f91c 	bl	23fdf40 <delay>
      distanceSensor.setTimingBudgetInMs(33);
 23fbd08:	2121      	movs	r1, #33	; 0x21
 23fbd0a:	4620      	mov	r0, r4
 23fbd0c:	f001 fa20 	bl	23fd150 <_ZN10SFEVL53L1X19setTimingBudgetInMsEt>
      distanceSensor.startRanging();                            //Write configuration bytes to initiate measurement
 23fbd10:	4620      	mov	r0, r4
 23fbd12:	f001 fa17 	bl	23fd144 <_ZN10SFEVL53L1X12startRangingEv>
      distance = distanceSensor.getDistance();                  //Get the result of the measurement from the sensor
 23fbd16:	4620      	mov	r0, r4
 23fbd18:	f001 fa24 	bl	23fd164 <_ZN10SFEVL53L1X11getDistanceEv>
 23fbd1c:	8038      	strh	r0, [r7, #0]
      distanceSensor.stopRanging();      
 23fbd1e:	4620      	mov	r0, r4
 23fbd20:	f001 fa13 	bl	23fd14a <_ZN10SFEVL53L1X11stopRangingEv>
      sum_zone_0 = sum_zone_0 + distance;
 23fbd24:	f8d9 2000 	ldr.w	r2, [r9]
 23fbd28:	883b      	ldrh	r3, [r7, #0]
      distanceSensor.setIntermeasurementPeriod(35);
 23fbd2a:	2123      	movs	r1, #35	; 0x23
      sum_zone_0 = sum_zone_0 + distance;
 23fbd2c:	4413      	add	r3, r2
 23fbd2e:	f8c9 3000 	str.w	r3, [r9]
      Zone++;
 23fbd32:	6833      	ldr	r3, [r6, #0]
      distanceSensor.setIntermeasurementPeriod(35);
 23fbd34:	4620      	mov	r0, r4
      Zone = Zone%2;
 23fbd36:	3301      	adds	r3, #1
 23fbd38:	f003 0301 	and.w	r3, r3, #1
 23fbd3c:	bf48      	it	mi
 23fbd3e:	425b      	negmi	r3, r3
 23fbd40:	6033      	str	r3, [r6, #0]
      distanceSensor.setIntermeasurementPeriod(35);
 23fbd42:	f001 fa0c 	bl	23fd15e <_ZN10SFEVL53L1X25setIntermeasurementPeriodEt>
      distanceSensor.setDistanceModeLong();
 23fbd46:	4620      	mov	r0, r4
 23fbd48:	f001 fa05 	bl	23fd156 <_ZN10SFEVL53L1X19setDistanceModeLongEv>
      distanceSensor.setROI(ROI_height, ROI_width, center[1]);  // first value: height of the zone, second value: width of the zone
 23fbd4c:	4b32      	ldr	r3, [pc, #200]	; (23fbe18 <_Z13measure_zonesv+0x164>)
 23fbd4e:	4933      	ldr	r1, [pc, #204]	; (23fbe1c <_Z13measure_zonesv+0x168>)
 23fbd50:	791b      	ldrb	r3, [r3, #4]
 23fbd52:	f898 2000 	ldrb.w	r2, [r8]
 23fbd56:	7809      	ldrb	r1, [r1, #0]
 23fbd58:	4620      	mov	r0, r4
 23fbd5a:	f001 fa0e 	bl	23fd17a <_ZN10SFEVL53L1X6setROIEhhh>
      delay(25);
 23fbd5e:	2019      	movs	r0, #25
 23fbd60:	f002 f8ee 	bl	23fdf40 <delay>
      distanceSensor.setTimingBudgetInMs(33);
 23fbd64:	2121      	movs	r1, #33	; 0x21
 23fbd66:	4620      	mov	r0, r4
 23fbd68:	f001 f9f2 	bl	23fd150 <_ZN10SFEVL53L1X19setTimingBudgetInMsEt>
      distanceSensor.startRanging();                            //Write configuration bytes to initiate measurement
 23fbd6c:	4620      	mov	r0, r4
 23fbd6e:	f001 f9e9 	bl	23fd144 <_ZN10SFEVL53L1X12startRangingEv>
      distance = distanceSensor.getDistance();                  //Get the result of the measurement from the sensor
 23fbd72:	4620      	mov	r0, r4
 23fbd74:	f001 f9f6 	bl	23fd164 <_ZN10SFEVL53L1X11getDistanceEv>
 23fbd78:	8038      	strh	r0, [r7, #0]
      distanceSensor.stopRanging();      
 23fbd7a:	4620      	mov	r0, r4
 23fbd7c:	f001 f9e5 	bl	23fd14a <_ZN10SFEVL53L1X11stopRangingEv>
      sum_zone_1 = sum_zone_1 + distance;
 23fbd80:	f8da 3000 	ldr.w	r3, [sl]
 23fbd84:	f8b7 8000 	ldrh.w	r8, [r7]
    for (int i=0; i<number_attempts; i++) {
 23fbd88:	3501      	adds	r5, #1
      sum_zone_1 = sum_zone_1 + distance;
 23fbd8a:	4498      	add	r8, r3
      Zone++;
 23fbd8c:	6833      	ldr	r3, [r6, #0]
      sum_zone_1 = sum_zone_1 + distance;
 23fbd8e:	f8ca 8000 	str.w	r8, [sl]
      Zone = Zone%2;
 23fbd92:	3301      	adds	r3, #1
 23fbd94:	f003 0301 	and.w	r3, r3, #1
 23fbd98:	bf48      	it	mi
 23fbd9a:	425b      	negmi	r3, r3
 23fbd9c:	6033      	str	r3, [r6, #0]
    for (int i=0; i<number_attempts; i++) {
 23fbd9e:	f8db 3000 	ldr.w	r3, [fp]
 23fbda2:	42ab      	cmp	r3, r5
 23fbda4:	dc9b      	bgt.n	23fbcde <_Z13measure_zonesv+0x2a>
    if ((sum_zone_0 <= (calibrated_zone_0 * 0.75)) || (sum_zone_1 <= (calibrated_zone_1 * 0.75))) {
 23fbda6:	f8d9 0000 	ldr.w	r0, [r9]
 23fbdaa:	f7fe ff2f 	bl	23fac0c <__aeabi_i2d>
 23fbdae:	4b1c      	ldr	r3, [pc, #112]	; (23fbe20 <_Z13measure_zonesv+0x16c>)
 23fbdb0:	4604      	mov	r4, r0
 23fbdb2:	6818      	ldr	r0, [r3, #0]
 23fbdb4:	460d      	mov	r5, r1
 23fbdb6:	f7fe ff3b 	bl	23fac30 <__aeabi_f2d>
 23fbdba:	2200      	movs	r2, #0
 23fbdbc:	4b19      	ldr	r3, [pc, #100]	; (23fbe24 <_Z13measure_zonesv+0x170>)
 23fbdbe:	f7fe ff8f 	bl	23face0 <__aeabi_dmul>
 23fbdc2:	4602      	mov	r2, r0
 23fbdc4:	460b      	mov	r3, r1
 23fbdc6:	4620      	mov	r0, r4
 23fbdc8:	4629      	mov	r1, r5
 23fbdca:	f7ff fa05 	bl	23fb1d8 <__aeabi_dcmple>
 23fbdce:	b998      	cbnz	r0, 23fbdf8 <_Z13measure_zonesv+0x144>
 23fbdd0:	4640      	mov	r0, r8
 23fbdd2:	f7fe ff1b 	bl	23fac0c <__aeabi_i2d>
 23fbdd6:	4b14      	ldr	r3, [pc, #80]	; (23fbe28 <_Z13measure_zonesv+0x174>)
 23fbdd8:	4604      	mov	r4, r0
 23fbdda:	6818      	ldr	r0, [r3, #0]
 23fbddc:	460d      	mov	r5, r1
 23fbdde:	f7fe ff27 	bl	23fac30 <__aeabi_f2d>
 23fbde2:	2200      	movs	r2, #0
 23fbde4:	4b0f      	ldr	r3, [pc, #60]	; (23fbe24 <_Z13measure_zonesv+0x170>)
 23fbde6:	f7fe ff7b 	bl	23face0 <__aeabi_dmul>
 23fbdea:	4602      	mov	r2, r0
 23fbdec:	460b      	mov	r3, r1
 23fbdee:	4620      	mov	r0, r4
 23fbdf0:	4629      	mov	r1, r5
 23fbdf2:	f7ff f9f1 	bl	23fb1d8 <__aeabi_dcmple>
 23fbdf6:	b130      	cbz	r0, 23fbe06 <_Z13measure_zonesv+0x152>
        delay(10);
 23fbdf8:	200a      	movs	r0, #10
 23fbdfa:	f002 f8a1 	bl	23fdf40 <delay>
}
 23fbdfe:	e8bd 4ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
        Path();
 23fbe02:	f7ff be73 	b.w	23fbaec <_Z4Pathv>
}
 23fbe06:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 23fbe0a:	bf00      	nop
 23fbe0c:	1007ae0c 	.word	0x1007ae0c
 23fbe10:	1007adec 	.word	0x1007adec
 23fbe14:	1007ae10 	.word	0x1007ae10
 23fbe18:	1007adf4 	.word	0x1007adf4
 23fbe1c:	1007add8 	.word	0x1007add8
 23fbe20:	1007ae00 	.word	0x1007ae00
 23fbe24:	3fe80000 	.word	0x3fe80000
 23fbe28:	1007ae04 	.word	0x1007ae04
 23fbe2c:	1007ae28 	.word	0x1007ae28
 23fbe30:	1007ae2c 	.word	0x1007ae2c
 23fbe34:	1007ae24 	.word	0x1007ae24
 23fbe38:	1007addc 	.word	0x1007addc

023fbe3c <loop>:
  measure_zones();
 23fbe3c:	f7ff bf3a 	b.w	23fbcb4 <_Z13measure_zonesv>

023fbe40 <_GLOBAL__sub_I_distanceSensor>:
        val_(val) {
 23fbe40:	2200      	movs	r2, #0
 23fbe42:	4b0b      	ldr	r3, [pc, #44]	; (23fbe70 <_GLOBAL__sub_I_distanceSensor+0x30>)
}
 23fbe44:	b510      	push	{r4, lr}
 23fbe46:	701a      	strb	r2, [r3, #0]
 23fbe48:	2201      	movs	r2, #1
 23fbe4a:	4b0a      	ldr	r3, [pc, #40]	; (23fbe74 <_GLOBAL__sub_I_distanceSensor+0x34>)
 23fbe4c:	701a      	strb	r2, [r3, #0]
SFEVL53L1X distanceSensor(Wire);
 23fbe4e:	f003 fa3b 	bl	23ff2c8 <_Z19__fetch_global_Wirev>
 23fbe52:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 23fbe56:	4601      	mov	r1, r0
 23fbe58:	461a      	mov	r2, r3
 23fbe5a:	4807      	ldr	r0, [pc, #28]	; (23fbe78 <_GLOBAL__sub_I_distanceSensor+0x38>)
 23fbe5c:	f001 f940 	bl	23fd0e0 <_ZN10SFEVL53L1XC1ER7TwoWireii>
}
 23fbe60:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
Adafruit_ST7789 tft = Adafruit_ST7789(TFT_CS, TFT_DC, TFT_RST);     // Hardware SPI
 23fbe64:	2306      	movs	r3, #6
 23fbe66:	2205      	movs	r2, #5
 23fbe68:	2112      	movs	r1, #18
 23fbe6a:	4804      	ldr	r0, [pc, #16]	; (23fbe7c <_GLOBAL__sub_I_distanceSensor+0x3c>)
 23fbe6c:	f000 bff2 	b.w	23fce54 <_ZN15Adafruit_ST7789C1Eaaa>
 23fbe70:	1007adf0 	.word	0x1007adf0
 23fbe74:	1007adfc 	.word	0x1007adfc
 23fbe78:	1007ae10 	.word	0x1007ae10
 23fbe7c:	1007ae30 	.word	0x1007ae30

023fbe80 <_ZN12Adafruit_GFX9writeLineEsssst>:
    @param    y1  End point y coordinate
    @param    color 16-bit 5-6-5 Color to draw with
*/
/**************************************************************************/
void Adafruit_GFX::writeLine(int16_t x0, int16_t y0, int16_t x1, int16_t y1,
        uint16_t color) {
 23fbe80:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 23fbe84:	461f      	mov	r7, r3
 23fbe86:	b085      	sub	sp, #20
 23fbe88:	f9bd 8038 	ldrsh.w	r8, [sp, #56]	; 0x38
#if defined(ESP8266)
    yield();
#endif
    int16_t steep = abs(y1 - y0) > abs(x1 - x0);
 23fbe8c:	eba7 0a01 	sub.w	sl, r7, r1
 23fbe90:	eba8 0902 	sub.w	r9, r8, r2
 23fbe94:	f1b9 0f00 	cmp.w	r9, #0
 23fbe98:	bfb8      	it	lt
 23fbe9a:	f1c9 0900 	rsblt	r9, r9, #0
 23fbe9e:	f1ba 0f00 	cmp.w	sl, #0
 23fbea2:	bfb8      	it	lt
 23fbea4:	f1ca 0a00 	rsblt	sl, sl, #0
    if (steep) {
 23fbea8:	45d1      	cmp	r9, sl
        uint16_t color) {
 23fbeaa:	4683      	mov	fp, r0
 23fbeac:	460c      	mov	r4, r1
 23fbeae:	4615      	mov	r5, r2
 23fbeb0:	f8bd 303c 	ldrh.w	r3, [sp, #60]	; 0x3c
    if (steep) {
 23fbeb4:	dd04      	ble.n	23fbec0 <_ZN12Adafruit_GFX9writeLineEsssst+0x40>
 23fbeb6:	463a      	mov	r2, r7
        _swap_int16_t(x0, y0);
 23fbeb8:	462c      	mov	r4, r5
        _swap_int16_t(x1, y1);
 23fbeba:	4647      	mov	r7, r8
        _swap_int16_t(x0, y0);
 23fbebc:	460d      	mov	r5, r1
        _swap_int16_t(x1, y1);
 23fbebe:	4690      	mov	r8, r2
    }

    if (x0 > x1) {
 23fbec0:	42bc      	cmp	r4, r7
 23fbec2:	dd05      	ble.n	23fbed0 <_ZN12Adafruit_GFX9writeLineEsssst+0x50>
 23fbec4:	462a      	mov	r2, r5
        _swap_int16_t(x0, x1);
        _swap_int16_t(y0, y1);
 23fbec6:	4645      	mov	r5, r8
 23fbec8:	4690      	mov	r8, r2
    if (x0 > x1) {
 23fbeca:	4622      	mov	r2, r4
 23fbecc:	463c      	mov	r4, r7
 23fbece:	4617      	mov	r7, r2
    }

    int16_t dx, dy;
    dx = x1 - x0;
 23fbed0:	1b3e      	subs	r6, r7, r4
 23fbed2:	b2b2      	uxth	r2, r6
 23fbed4:	9200      	str	r2, [sp, #0]
    dy = abs(y1 - y0);
 23fbed6:	eba8 0205 	sub.w	r2, r8, r5
 23fbeda:	ea82 71e2 	eor.w	r1, r2, r2, asr #31
 23fbede:	eba1 71e2 	sub.w	r1, r1, r2, asr #31

    int16_t err = dx / 2;
 23fbee2:	f3c6 32c0 	ubfx	r2, r6, #15, #1
 23fbee6:	fa02 f686 	sxtah	r6, r2, r6
    int16_t ystep;

    if (y0 < y1) {
        ystep = 1;
    } else {
        ystep = -1;
 23fbeea:	4545      	cmp	r5, r8
 23fbeec:	bfb4      	ite	lt
 23fbeee:	2201      	movlt	r2, #1
 23fbef0:	f04f 32ff 	movge.w	r2, #4294967295	; 0xffffffff
    dy = abs(y1 - y0);
 23fbef4:	9101      	str	r1, [sp, #4]
    int16_t err = dx / 2;
 23fbef6:	1076      	asrs	r6, r6, #1
        ystep = -1;
 23fbef8:	9202      	str	r2, [sp, #8]
    }

    for (; x0<=x1; x0++) {
 23fbefa:	42bc      	cmp	r4, r7
 23fbefc:	dc1c      	bgt.n	23fbf38 <_ZN12Adafruit_GFX9writeLineEsssst+0xb8>
        if (steep) {
            writePixel(y0, x0, color);
 23fbefe:	f8db 2000 	ldr.w	r2, [fp]
        if (steep) {
 23fbf02:	45d1      	cmp	r9, sl
            writePixel(y0, x0, color);
 23fbf04:	f8d2 8018 	ldr.w	r8, [r2, #24]
 23fbf08:	bfc7      	ittee	gt
 23fbf0a:	4629      	movgt	r1, r5
 23fbf0c:	4622      	movgt	r2, r4
        } else {
            writePixel(x0, y0, color);
 23fbf0e:	462a      	movle	r2, r5
 23fbf10:	4621      	movle	r1, r4
            writePixel(y0, x0, color);
 23fbf12:	9303      	str	r3, [sp, #12]
            writePixel(x0, y0, color);
 23fbf14:	4658      	mov	r0, fp
 23fbf16:	47c0      	blx	r8
        }
        err -= dy;
 23fbf18:	9a01      	ldr	r2, [sp, #4]
            writePixel(x0, y0, color);
 23fbf1a:	9b03      	ldr	r3, [sp, #12]
        err -= dy;
 23fbf1c:	1ab6      	subs	r6, r6, r2
 23fbf1e:	b2b1      	uxth	r1, r6
 23fbf20:	b236      	sxth	r6, r6
        if (err < 0) {
 23fbf22:	2e00      	cmp	r6, #0
 23fbf24:	da05      	bge.n	23fbf32 <_ZN12Adafruit_GFX9writeLineEsssst+0xb2>
            y0 += ystep;
 23fbf26:	9a02      	ldr	r2, [sp, #8]
 23fbf28:	4415      	add	r5, r2
            err += dx;
 23fbf2a:	9a00      	ldr	r2, [sp, #0]
            y0 += ystep;
 23fbf2c:	b22d      	sxth	r5, r5
            err += dx;
 23fbf2e:	1856      	adds	r6, r2, r1
 23fbf30:	b236      	sxth	r6, r6
    for (; x0<=x1; x0++) {
 23fbf32:	3401      	adds	r4, #1
 23fbf34:	b224      	sxth	r4, r4
 23fbf36:	e7e0      	b.n	23fbefa <_ZN12Adafruit_GFX9writeLineEsssst+0x7a>
        }
    }
}
 23fbf38:	b005      	add	sp, #20
 23fbf3a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

023fbf3e <_ZN12Adafruit_GFX10startWriteEv>:
/*!
   @brief    Start a display-writing routine, overwrite in subclasses.
*/
/**************************************************************************/
void Adafruit_GFX::startWrite(){
}
 23fbf3e:	4770      	bx	lr

023fbf40 <_ZN12Adafruit_GFX10writePixelEsst>:
    @param   x   x coordinate
    @param   y   y coordinate
   @param    color 16-bit 5-6-5 Color to fill with
*/
/**************************************************************************/
void Adafruit_GFX::writePixel(int16_t x, int16_t y, uint16_t color){
 23fbf40:	b410      	push	{r4}
    drawPixel(x, y, color);
 23fbf42:	6804      	ldr	r4, [r0, #0]
 23fbf44:	6924      	ldr	r4, [r4, #16]
 23fbf46:	46a4      	mov	ip, r4
}
 23fbf48:	f85d 4b04 	ldr.w	r4, [sp], #4
    drawPixel(x, y, color);
 23fbf4c:	4760      	bx	ip

023fbf4e <_ZN12Adafruit_GFX14writeFastVLineEssst>:
    @param    h   Height in pixels
   @param    color 16-bit 5-6-5 Color to fill with
*/
/**************************************************************************/
void Adafruit_GFX::writeFastVLine(int16_t x, int16_t y,
        int16_t h, uint16_t color) {
 23fbf4e:	b430      	push	{r4, r5}
 23fbf50:	f8bd 5008 	ldrh.w	r5, [sp, #8]
    // Overwrite in subclasses if startWrite is defined!
    // Can be just writeLine(x, y, x, y+h-1, color);
    // or writeFillRect(x, y, 1, h, color);
    drawFastVLine(x, y, h, color);
 23fbf54:	6804      	ldr	r4, [r0, #0]
 23fbf56:	9502      	str	r5, [sp, #8]
 23fbf58:	6ba4      	ldr	r4, [r4, #56]	; 0x38
 23fbf5a:	46a4      	mov	ip, r4
}
 23fbf5c:	bc30      	pop	{r4, r5}
    drawFastVLine(x, y, h, color);
 23fbf5e:	4760      	bx	ip

023fbf60 <_ZN12Adafruit_GFX14writeFastHLineEssst>:
    @param    w   Width in pixels
   @param    color 16-bit 5-6-5 Color to fill with
*/
/**************************************************************************/
void Adafruit_GFX::writeFastHLine(int16_t x, int16_t y,
        int16_t w, uint16_t color) {
 23fbf60:	b430      	push	{r4, r5}
 23fbf62:	f8bd 5008 	ldrh.w	r5, [sp, #8]
    // Overwrite in subclasses if startWrite is defined!
    // Example: writeLine(x, y, x+w-1, y, color);
    // or writeFillRect(x, y, w, 1, color);
    drawFastHLine(x, y, w, color);
 23fbf66:	6804      	ldr	r4, [r0, #0]
 23fbf68:	9502      	str	r5, [sp, #8]
 23fbf6a:	6be4      	ldr	r4, [r4, #60]	; 0x3c
 23fbf6c:	46a4      	mov	ip, r4
}
 23fbf6e:	bc30      	pop	{r4, r5}
    drawFastHLine(x, y, w, color);
 23fbf70:	4760      	bx	ip

023fbf72 <_ZN12Adafruit_GFX13writeFillRectEsssst>:
    @param    h   Height in pixels
   @param    color 16-bit 5-6-5 Color to fill with
*/
/**************************************************************************/
void Adafruit_GFX::writeFillRect(int16_t x, int16_t y, int16_t w, int16_t h,
        uint16_t color) {
 23fbf72:	b470      	push	{r4, r5, r6}
 23fbf74:	f9bd 500c 	ldrsh.w	r5, [sp, #12]
 23fbf78:	f8bd 6010 	ldrh.w	r6, [sp, #16]
    // Overwrite in subclasses if desired!
    fillRect(x,y,w,h,color);
 23fbf7c:	6804      	ldr	r4, [r0, #0]
 23fbf7e:	e9cd 5603 	strd	r5, r6, [sp, #12]
 23fbf82:	6c24      	ldr	r4, [r4, #64]	; 0x40
 23fbf84:	46a4      	mov	ip, r4
}
 23fbf86:	bc70      	pop	{r4, r5, r6}
    fillRect(x,y,w,h,color);
 23fbf88:	4760      	bx	ip

023fbf8a <_ZN12Adafruit_GFX13drawFastVLineEssst>:
    @param    h   Height in pixels
   @param    color 16-bit 5-6-5 Color to fill with
*/
/**************************************************************************/
void Adafruit_GFX::drawFastVLine(int16_t x, int16_t y,
        int16_t h, uint16_t color) {
 23fbf8a:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 23fbf8e:	461c      	mov	r4, r3
 23fbf90:	4616      	mov	r6, r2
 23fbf92:	4605      	mov	r5, r0
 23fbf94:	460f      	mov	r7, r1
    startWrite();
 23fbf96:	6803      	ldr	r3, [r0, #0]
    writeLine(x, y, x, y+h-1, color);
 23fbf98:	3c01      	subs	r4, #1
        int16_t h, uint16_t color) {
 23fbf9a:	f8bd 8020 	ldrh.w	r8, [sp, #32]
    startWrite();
 23fbf9e:	695b      	ldr	r3, [r3, #20]
    writeLine(x, y, x, y+h-1, color);
 23fbfa0:	4434      	add	r4, r6
    startWrite();
 23fbfa2:	4798      	blx	r3
    writeLine(x, y, x, y+h-1, color);
 23fbfa4:	b224      	sxth	r4, r4
 23fbfa6:	682b      	ldr	r3, [r5, #0]
 23fbfa8:	f8cd 8004 	str.w	r8, [sp, #4]
 23fbfac:	9400      	str	r4, [sp, #0]
 23fbfae:	4628      	mov	r0, r5
 23fbfb0:	6a9c      	ldr	r4, [r3, #40]	; 0x28
 23fbfb2:	4632      	mov	r2, r6
 23fbfb4:	463b      	mov	r3, r7
 23fbfb6:	4639      	mov	r1, r7
 23fbfb8:	47a0      	blx	r4
    endWrite();
 23fbfba:	4628      	mov	r0, r5
 23fbfbc:	682b      	ldr	r3, [r5, #0]
 23fbfbe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
}
 23fbfc0:	b002      	add	sp, #8
 23fbfc2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    endWrite();
 23fbfc6:	4718      	bx	r3

023fbfc8 <_ZN12Adafruit_GFX13drawFastHLineEssst>:
    @param    w   Width in pixels
   @param    color 16-bit 5-6-5 Color to fill with
*/
/**************************************************************************/
void Adafruit_GFX::drawFastHLine(int16_t x, int16_t y,
        int16_t w, uint16_t color) {
 23fbfc8:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 23fbfcc:	4617      	mov	r7, r2
 23fbfce:	4604      	mov	r4, r0
 23fbfd0:	461d      	mov	r5, r3
 23fbfd2:	460e      	mov	r6, r1
    startWrite();
 23fbfd4:	6803      	ldr	r3, [r0, #0]
        int16_t w, uint16_t color) {
 23fbfd6:	f8bd 8020 	ldrh.w	r8, [sp, #32]
    startWrite();
 23fbfda:	695b      	ldr	r3, [r3, #20]
 23fbfdc:	4798      	blx	r3
    writeLine(x, y, x+w-1, y, color);
 23fbfde:	e9cd 7800 	strd	r7, r8, [sp]
 23fbfe2:	6822      	ldr	r2, [r4, #0]
 23fbfe4:	1e6b      	subs	r3, r5, #1
 23fbfe6:	4433      	add	r3, r6
 23fbfe8:	4620      	mov	r0, r4
 23fbfea:	6a95      	ldr	r5, [r2, #40]	; 0x28
 23fbfec:	4631      	mov	r1, r6
 23fbfee:	463a      	mov	r2, r7
 23fbff0:	b21b      	sxth	r3, r3
 23fbff2:	47a8      	blx	r5
    endWrite();
 23fbff4:	4620      	mov	r0, r4
 23fbff6:	6823      	ldr	r3, [r4, #0]
 23fbff8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
}
 23fbffa:	b002      	add	sp, #8
 23fbffc:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    endWrite();
 23fc000:	4718      	bx	r3

023fc002 <_ZN12Adafruit_GFX8fillRectEsssst>:
    @param    h   Height in pixels
   @param    color 16-bit 5-6-5 Color to fill with
*/
/**************************************************************************/
void Adafruit_GFX::fillRect(int16_t x, int16_t y, int16_t w, int16_t h,
        uint16_t color) {
 23fc002:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
 23fc006:	461e      	mov	r6, r3
    startWrite();
 23fc008:	6803      	ldr	r3, [r0, #0]
        uint16_t color) {
 23fc00a:	460c      	mov	r4, r1
    startWrite();
 23fc00c:	695b      	ldr	r3, [r3, #20]
        uint16_t color) {
 23fc00e:	4605      	mov	r5, r0
 23fc010:	4617      	mov	r7, r2
 23fc012:	f9bd 9028 	ldrsh.w	r9, [sp, #40]	; 0x28
 23fc016:	f8bd 802c 	ldrh.w	r8, [sp, #44]	; 0x2c
    startWrite();
 23fc01a:	4798      	blx	r3
    for (int16_t i=x; i<x+w; i++) {
 23fc01c:	4426      	add	r6, r4
 23fc01e:	42b4      	cmp	r4, r6
        writeFastVLine(i, y, h, color);
 23fc020:	682b      	ldr	r3, [r5, #0]
    for (int16_t i=x; i<x+w; i++) {
 23fc022:	da0b      	bge.n	23fc03c <_ZN12Adafruit_GFX8fillRectEsssst+0x3a>
        writeFastVLine(i, y, h, color);
 23fc024:	f8cd 8000 	str.w	r8, [sp]
 23fc028:	4621      	mov	r1, r4
 23fc02a:	f8d3 a020 	ldr.w	sl, [r3, #32]
 23fc02e:	463a      	mov	r2, r7
 23fc030:	464b      	mov	r3, r9
 23fc032:	4628      	mov	r0, r5
 23fc034:	3401      	adds	r4, #1
 23fc036:	47d0      	blx	sl
    for (int16_t i=x; i<x+w; i++) {
 23fc038:	b224      	sxth	r4, r4
 23fc03a:	e7f0      	b.n	23fc01e <_ZN12Adafruit_GFX8fillRectEsssst+0x1c>
    }
    endWrite();
 23fc03c:	4628      	mov	r0, r5
 23fc03e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
}
 23fc040:	b002      	add	sp, #8
 23fc042:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    endWrite();
 23fc046:	4718      	bx	r3

023fc048 <_ZN12Adafruit_GFX10fillScreenEt>:
/*!
   @brief    Fill the screen completely with one color. Update in subclasses if desired!
    @param    color 16-bit 5-6-5 Color to fill with
*/
/**************************************************************************/
void Adafruit_GFX::fillScreen(uint16_t color) {
 23fc048:	b513      	push	{r0, r1, r4, lr}
    fillRect(0, 0, _width, _height, color);
 23fc04a:	9101      	str	r1, [sp, #4]
 23fc04c:	f9b0 100e 	ldrsh.w	r1, [r0, #14]
 23fc050:	6802      	ldr	r2, [r0, #0]
 23fc052:	9100      	str	r1, [sp, #0]
 23fc054:	6c14      	ldr	r4, [r2, #64]	; 0x40
 23fc056:	2200      	movs	r2, #0
 23fc058:	f9b0 300c 	ldrsh.w	r3, [r0, #12]
 23fc05c:	4611      	mov	r1, r2
 23fc05e:	47a0      	blx	r4
}
 23fc060:	b002      	add	sp, #8
 23fc062:	bd10      	pop	{r4, pc}

023fc064 <_ZN12Adafruit_GFX8drawLineEsssst>:
    @param    y1  End point y coordinate
    @param    color 16-bit 5-6-5 Color to draw with
*/
/**************************************************************************/
void Adafruit_GFX::drawLine(int16_t x0, int16_t y0, int16_t x1, int16_t y1,
        uint16_t color) {
 23fc064:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
    // Update in subclasses if desired!
    if(x0 == x1){
 23fc068:	4299      	cmp	r1, r3
        uint16_t color) {
 23fc06a:	4616      	mov	r6, r2
 23fc06c:	4680      	mov	r8, r0
 23fc06e:	460d      	mov	r5, r1
 23fc070:	461c      	mov	r4, r3
 23fc072:	f9bd 7028 	ldrsh.w	r7, [sp, #40]	; 0x28
 23fc076:	f8bd 902c 	ldrh.w	r9, [sp, #44]	; 0x2c
        if(y0 > y1) _swap_int16_t(y0, y1);
        drawFastVLine(x0, y0, y1 - y0 + 1, color);
 23fc07a:	6802      	ldr	r2, [r0, #0]
    if(x0 == x1){
 23fc07c:	d112      	bne.n	23fc0a4 <_ZN12Adafruit_GFX8drawLineEsssst+0x40>
        if(y0 > y1) _swap_int16_t(y0, y1);
 23fc07e:	42be      	cmp	r6, r7
 23fc080:	bfc2      	ittt	gt
 23fc082:	4633      	movgt	r3, r6
 23fc084:	463e      	movgt	r6, r7
 23fc086:	461f      	movgt	r7, r3
        drawFastVLine(x0, y0, y1 - y0 + 1, color);
 23fc088:	f8cd 9028 	str.w	r9, [sp, #40]	; 0x28
 23fc08c:	1c7b      	adds	r3, r7, #1
 23fc08e:	6b94      	ldr	r4, [r2, #56]	; 0x38
 23fc090:	1b9b      	subs	r3, r3, r6
    } else if(y0 == y1){
        if(x0 > x1) _swap_int16_t(x0, x1);
        drawFastHLine(x0, y0, x1 - x0 + 1, color);
 23fc092:	4632      	mov	r2, r6
 23fc094:	4629      	mov	r1, r5
 23fc096:	4640      	mov	r0, r8
 23fc098:	46a4      	mov	ip, r4
 23fc09a:	b21b      	sxth	r3, r3
    } else {
        startWrite();
        writeLine(x0, y0, x1, y1, color);
        endWrite();
    }
}
 23fc09c:	b003      	add	sp, #12
 23fc09e:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
        drawFastHLine(x0, y0, x1 - x0 + 1, color);
 23fc0a2:	4760      	bx	ip
    } else if(y0 == y1){
 23fc0a4:	42be      	cmp	r6, r7
 23fc0a6:	d10a      	bne.n	23fc0be <_ZN12Adafruit_GFX8drawLineEsssst+0x5a>
        if(x0 > x1) _swap_int16_t(x0, x1);
 23fc0a8:	4299      	cmp	r1, r3
 23fc0aa:	bfc2      	ittt	gt
 23fc0ac:	460b      	movgt	r3, r1
 23fc0ae:	4625      	movgt	r5, r4
 23fc0b0:	461c      	movgt	r4, r3
        drawFastHLine(x0, y0, x1 - x0 + 1, color);
 23fc0b2:	f8cd 9028 	str.w	r9, [sp, #40]	; 0x28
 23fc0b6:	1c63      	adds	r3, r4, #1
 23fc0b8:	1b5b      	subs	r3, r3, r5
 23fc0ba:	6bd4      	ldr	r4, [r2, #60]	; 0x3c
 23fc0bc:	e7e9      	b.n	23fc092 <_ZN12Adafruit_GFX8drawLineEsssst+0x2e>
        startWrite();
 23fc0be:	6953      	ldr	r3, [r2, #20]
 23fc0c0:	4798      	blx	r3
        writeLine(x0, y0, x1, y1, color);
 23fc0c2:	e9cd 7900 	strd	r7, r9, [sp]
 23fc0c6:	f8d8 3000 	ldr.w	r3, [r8]
 23fc0ca:	4640      	mov	r0, r8
 23fc0cc:	6a9f      	ldr	r7, [r3, #40]	; 0x28
 23fc0ce:	4632      	mov	r2, r6
 23fc0d0:	4623      	mov	r3, r4
 23fc0d2:	4629      	mov	r1, r5
 23fc0d4:	47b8      	blx	r7
        endWrite();
 23fc0d6:	4640      	mov	r0, r8
 23fc0d8:	f8d8 3000 	ldr.w	r3, [r8]
 23fc0dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
}
 23fc0de:	b003      	add	sp, #12
 23fc0e0:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
        endWrite();
 23fc0e4:	4718      	bx	r3

023fc0e6 <_ZN12Adafruit_GFX8drawRectEsssst>:
    @param    h   Height in pixels
    @param    color 16-bit 5-6-5 Color to draw with
*/
/**************************************************************************/
void Adafruit_GFX::drawRect(int16_t x, int16_t y, int16_t w, int16_t h,
        uint16_t color) {
 23fc0e6:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
 23fc0ea:	4604      	mov	r4, r0
 23fc0ec:	460f      	mov	r7, r1
 23fc0ee:	4616      	mov	r6, r2
 23fc0f0:	461d      	mov	r5, r3
    startWrite();
 23fc0f2:	6803      	ldr	r3, [r0, #0]
        uint16_t color) {
 23fc0f4:	f8bd 802c 	ldrh.w	r8, [sp, #44]	; 0x2c
    startWrite();
 23fc0f8:	695b      	ldr	r3, [r3, #20]
        uint16_t color) {
 23fc0fa:	f9bd 9028 	ldrsh.w	r9, [sp, #40]	; 0x28
    startWrite();
 23fc0fe:	4798      	blx	r3
    writeFastHLine(x, y, w, color);
 23fc100:	6823      	ldr	r3, [r4, #0]
 23fc102:	f8cd 8000 	str.w	r8, [sp]
 23fc106:	4632      	mov	r2, r6
 23fc108:	4639      	mov	r1, r7
 23fc10a:	4620      	mov	r0, r4
 23fc10c:	f8d3 a024 	ldr.w	sl, [r3, #36]	; 0x24
 23fc110:	462b      	mov	r3, r5
 23fc112:	47d0      	blx	sl
    writeFastHLine(x, y+h-1, w, color);
 23fc114:	6823      	ldr	r3, [r4, #0]
 23fc116:	f109 32ff 	add.w	r2, r9, #4294967295	; 0xffffffff
 23fc11a:	f8cd 8000 	str.w	r8, [sp]
 23fc11e:	4432      	add	r2, r6
 23fc120:	4639      	mov	r1, r7
 23fc122:	4620      	mov	r0, r4
 23fc124:	f8d3 a024 	ldr.w	sl, [r3, #36]	; 0x24
 23fc128:	b212      	sxth	r2, r2
 23fc12a:	462b      	mov	r3, r5
 23fc12c:	47d0      	blx	sl
    writeFastVLine(x, y, h, color);
 23fc12e:	6823      	ldr	r3, [r4, #0]
 23fc130:	f8cd 8000 	str.w	r8, [sp]
 23fc134:	4632      	mov	r2, r6
 23fc136:	4639      	mov	r1, r7
 23fc138:	4620      	mov	r0, r4
 23fc13a:	f8d3 a020 	ldr.w	sl, [r3, #32]
 23fc13e:	464b      	mov	r3, r9
 23fc140:	47d0      	blx	sl
    writeFastVLine(x+w-1, y, h, color);
 23fc142:	1e6b      	subs	r3, r5, #1
 23fc144:	19d9      	adds	r1, r3, r7
 23fc146:	6823      	ldr	r3, [r4, #0]
 23fc148:	f8cd 8000 	str.w	r8, [sp]
 23fc14c:	4620      	mov	r0, r4
 23fc14e:	6a1d      	ldr	r5, [r3, #32]
 23fc150:	4632      	mov	r2, r6
 23fc152:	464b      	mov	r3, r9
 23fc154:	b209      	sxth	r1, r1
 23fc156:	47a8      	blx	r5
    endWrite();
 23fc158:	4620      	mov	r0, r4
 23fc15a:	6823      	ldr	r3, [r4, #0]
 23fc15c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
}
 23fc15e:	b002      	add	sp, #8
 23fc160:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    endWrite();
 23fc164:	4718      	bx	r3

023fc166 <_ZN12Adafruit_GFX13invertDisplayEb>:
    @param   i  True if you want to invert, false to make 'normal'
*/
/**************************************************************************/
void Adafruit_GFX::invertDisplay(boolean i) {
    // Do nothing, must be subclassed if supported by hardware
}
 23fc166:	4770      	bx	lr

023fc168 <_ZN12Adafruit_GFX11setRotationEh>:
    rotation = (x & 3);
 23fc168:	f001 0303 	and.w	r3, r1, #3
            _height = HEIGHT;
 23fc16c:	f9b0 200a 	ldrsh.w	r2, [r0, #10]
    rotation = (x & 3);
 23fc170:	7683      	strb	r3, [r0, #26]
            _width  = WIDTH;
 23fc172:	f9b0 3008 	ldrsh.w	r3, [r0, #8]
    switch(rotation) {
 23fc176:	07c9      	lsls	r1, r1, #31
            _width  = WIDTH;
 23fc178:	bf59      	ittee	pl
 23fc17a:	8183      	strhpl	r3, [r0, #12]
            _height = HEIGHT;
 23fc17c:	81c2      	strhpl	r2, [r0, #14]
            _width  = HEIGHT;
 23fc17e:	8182      	strhmi	r2, [r0, #12]
            _height = WIDTH;
 23fc180:	81c3      	strhmi	r3, [r0, #14]
}
 23fc182:	4770      	bx	lr

023fc184 <_ZN12Adafruit_GFXC1Ess>:
Adafruit_GFX::Adafruit_GFX(int16_t w, int16_t h):
 23fc184:	b530      	push	{r4, r5, lr}
WIDTH(w), HEIGHT(h)
 23fc186:	8101      	strh	r1, [r0, #8]
    Print() : write_error(0) {}
 23fc188:	2400      	movs	r4, #0
    _width    = WIDTH;
 23fc18a:	8181      	strh	r1, [r0, #12]
    textsize_x = textsize_y  = 1;
 23fc18c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
WIDTH(w), HEIGHT(h)
 23fc190:	4d05      	ldr	r5, [pc, #20]	; (23fc1a8 <_ZN12Adafruit_GFXC1Ess+0x24>)
 23fc192:	8142      	strh	r2, [r0, #10]
    _height   = HEIGHT;
 23fc194:	81c2      	strh	r2, [r0, #14]
    textsize_x = textsize_y  = 1;
 23fc196:	4a05      	ldr	r2, [pc, #20]	; (23fc1ac <_ZN12Adafruit_GFXC1Ess+0x28>)
 23fc198:	6044      	str	r4, [r0, #4]
 23fc19a:	e9c0 1205 	strd	r1, r2, [r0, #20]
WIDTH(w), HEIGHT(h)
 23fc19e:	6005      	str	r5, [r0, #0]
    cursor_y  = cursor_x    = 0;
 23fc1a0:	6104      	str	r4, [r0, #16]
    _cp437    = false;
 23fc1a2:	7704      	strb	r4, [r0, #28]
    gfxFont   = NULL;
 23fc1a4:	6204      	str	r4, [r0, #32]
}
 23fc1a6:	bd30      	pop	{r4, r5, pc}
 23fc1a8:	023ffbbc 	.word	0x023ffbbc
 23fc1ac:	01000101 	.word	0x01000101

023fc1b0 <_ZN12Adafruit_GFX8drawCharEsshtthh>:
  uint16_t color, uint16_t bg, uint8_t size_x, uint8_t size_y) {
 23fc1b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 23fc1b4:	ed2d 8b02 	vpush	{d8}
 23fc1b8:	b091      	sub	sp, #68	; 0x44
 23fc1ba:	4616      	mov	r6, r2
 23fc1bc:	461f      	mov	r7, r3
    if(!gfxFont) { // 'Classic' built-in font
 23fc1be:	6a02      	ldr	r2, [r0, #32]
  uint16_t color, uint16_t bg, uint8_t size_x, uint8_t size_y) {
 23fc1c0:	f8bd 3070 	ldrh.w	r3, [sp, #112]	; 0x70
 23fc1c4:	4683      	mov	fp, r0
 23fc1c6:	f8bd 8074 	ldrh.w	r8, [sp, #116]	; 0x74
 23fc1ca:	f89d 5078 	ldrb.w	r5, [sp, #120]	; 0x78
 23fc1ce:	f89d 407c 	ldrb.w	r4, [sp, #124]	; 0x7c
 23fc1d2:	9103      	str	r1, [sp, #12]
 23fc1d4:	9304      	str	r3, [sp, #16]
    if(!gfxFont) { // 'Classic' built-in font
 23fc1d6:	2a00      	cmp	r2, #0
 23fc1d8:	f040 80c5 	bne.w	23fc366 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x1b6>
        if((x >= _width)            || // Clip right
 23fc1dc:	f9b0 300c 	ldrsh.w	r3, [r0, #12]
 23fc1e0:	428b      	cmp	r3, r1
 23fc1e2:	f340 814c 	ble.w	23fc47e <_ZN12Adafruit_GFX8drawCharEsshtthh+0x2ce>
 23fc1e6:	f9b0 300e 	ldrsh.w	r3, [r0, #14]
 23fc1ea:	42b3      	cmp	r3, r6
 23fc1ec:	f340 8147 	ble.w	23fc47e <_ZN12Adafruit_GFX8drawCharEsshtthh+0x2ce>
           ((x + 6 * size_x - 1) < 0) || // Clip left
 23fc1f0:	2306      	movs	r3, #6
 23fc1f2:	fb13 1305 	smlabb	r3, r3, r5, r1
           (y >= _height)           || // Clip bottom
 23fc1f6:	2b00      	cmp	r3, #0
 23fc1f8:	f340 8141 	ble.w	23fc47e <_ZN12Adafruit_GFX8drawCharEsshtthh+0x2ce>
           ((y + 8 * size_y - 1) < 0))   // Clip top
 23fc1fc:	eb06 03c4 	add.w	r3, r6, r4, lsl #3
           ((x + 6 * size_x - 1) < 0) || // Clip left
 23fc200:	2b00      	cmp	r3, #0
 23fc202:	f340 813c 	ble.w	23fc47e <_ZN12Adafruit_GFX8drawCharEsshtthh+0x2ce>
        if(!_cp437 && (c >= 176)) c++; // Handle 'classic' charset behavior
 23fc206:	7f03      	ldrb	r3, [r0, #28]
 23fc208:	b91b      	cbnz	r3, 23fc212 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x62>
 23fc20a:	2faf      	cmp	r7, #175	; 0xaf
 23fc20c:	bf84      	itt	hi
 23fc20e:	3701      	addhi	r7, #1
 23fc210:	b2ff      	uxtbhi	r7, r7
        startWrite();
 23fc212:	f8db 3000 	ldr.w	r3, [fp]
 23fc216:	4658      	mov	r0, fp
 23fc218:	695b      	ldr	r3, [r3, #20]
 23fc21a:	4798      	blx	r3
            uint8_t line = pgm_read_byte(&font[c * 5 + i]);
 23fc21c:	2205      	movs	r2, #5
 23fc21e:	9209      	str	r2, [sp, #36]	; 0x24
        for(int8_t i=0; i<5; i++ ) { // Char bitmap = 5 columns
 23fc220:	2200      	movs	r2, #0
 23fc222:	9205      	str	r2, [sp, #20]
            uint8_t line = pgm_read_byte(&font[c * 5 + i]);
 23fc224:	4a98      	ldr	r2, [pc, #608]	; (23fc488 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x2d8>)
 23fc226:	eb07 0387 	add.w	r3, r7, r7, lsl #2
 23fc22a:	18d3      	adds	r3, r2, r3
 23fc22c:	930c      	str	r3, [sp, #48]	; 0x30
                        writePixel(x+i, y+j, color);
 23fc22e:	b2b3      	uxth	r3, r6
 23fc230:	9306      	str	r3, [sp, #24]
            uint8_t line = pgm_read_byte(&font[c * 5 + i]);
 23fc232:	9a05      	ldr	r2, [sp, #20]
 23fc234:	9b0c      	ldr	r3, [sp, #48]	; 0x30
                        writeFillRect(x+i*size_x, y+j*size_y, size_x, size_y, bg);
 23fc236:	fb02 f905 	mul.w	r9, r2, r5
            uint8_t line = pgm_read_byte(&font[c * 5 + i]);
 23fc23a:	5c9b      	ldrb	r3, [r3, r2]
 23fc23c:	9307      	str	r3, [sp, #28]
                        writeFillRect(x+i*size_x, y+j*size_y, size_x, size_y, bg);
 23fc23e:	b2ab      	uxth	r3, r5
 23fc240:	930b      	str	r3, [sp, #44]	; 0x2c
 23fc242:	f8bd 300c 	ldrh.w	r3, [sp, #12]
 23fc246:	9308      	str	r3, [sp, #32]
 23fc248:	9b03      	ldr	r3, [sp, #12]
 23fc24a:	fa19 f983 	uxtah	r9, r9, r3
 23fc24e:	fa0f f389 	sxth.w	r3, r9
 23fc252:	ee08 3a10 	vmov	s16, r3
 23fc256:	2308      	movs	r3, #8
            for(int8_t j=0; j<8; j++, line >>= 1) {
 23fc258:	f04f 0900 	mov.w	r9, #0
                        writeFillRect(x+i*size_x, y+j*size_y, size_x, size_y, bg);
 23fc25c:	930a      	str	r3, [sp, #40]	; 0x28
                        writePixel(x+i, y+j, bg);
 23fc25e:	9b03      	ldr	r3, [sp, #12]
 23fc260:	eb02 0a03 	add.w	sl, r2, r3
 23fc264:	fa0f fa8a 	sxth.w	sl, sl
                if(line & 1) {
 23fc268:	9a07      	ldr	r2, [sp, #28]
                        writePixel(x+i, y+j, color);
 23fc26a:	f8db 3000 	ldr.w	r3, [fp]
                if(line & 1) {
 23fc26e:	07d2      	lsls	r2, r2, #31
 23fc270:	d552      	bpl.n	23fc318 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x168>
                    if(size_x == 1 && size_y == 1)
 23fc272:	2d01      	cmp	r5, #1
                        writePixel(x+i, y+j, color);
 23fc274:	fa1f f289 	uxth.w	r2, r9
                    if(size_x == 1 && size_y == 1)
 23fc278:	d13e      	bne.n	23fc2f8 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x148>
 23fc27a:	2c01      	cmp	r4, #1
 23fc27c:	d13c      	bne.n	23fc2f8 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x148>
                        writePixel(x+i, y+j, color);
 23fc27e:	699b      	ldr	r3, [r3, #24]
 23fc280:	9906      	ldr	r1, [sp, #24]
 23fc282:	461f      	mov	r7, r3
 23fc284:	9b04      	ldr	r3, [sp, #16]
 23fc286:	440a      	add	r2, r1
                        writePixel(x+i, y+j, bg);
 23fc288:	4651      	mov	r1, sl
 23fc28a:	4658      	mov	r0, fp
 23fc28c:	b212      	sxth	r2, r2
 23fc28e:	47b8      	blx	r7
            for(int8_t j=0; j<8; j++, line >>= 1) {
 23fc290:	f109 0301 	add.w	r3, r9, #1
 23fc294:	fa4f f983 	sxtb.w	r9, r3
 23fc298:	9b07      	ldr	r3, [sp, #28]
 23fc29a:	085b      	lsrs	r3, r3, #1
 23fc29c:	9307      	str	r3, [sp, #28]
 23fc29e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 23fc2a0:	3b01      	subs	r3, #1
 23fc2a2:	f013 03ff 	ands.w	r3, r3, #255	; 0xff
 23fc2a6:	930a      	str	r3, [sp, #40]	; 0x28
 23fc2a8:	d1de      	bne.n	23fc268 <_ZN12Adafruit_GFX8drawCharEsshtthh+0xb8>
        for(int8_t i=0; i<5; i++ ) { // Char bitmap = 5 columns
 23fc2aa:	9f05      	ldr	r7, [sp, #20]
 23fc2ac:	3701      	adds	r7, #1
 23fc2ae:	b27b      	sxtb	r3, r7
 23fc2b0:	9305      	str	r3, [sp, #20]
 23fc2b2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 23fc2b4:	3b01      	subs	r3, #1
 23fc2b6:	f013 03ff 	ands.w	r3, r3, #255	; 0xff
 23fc2ba:	9309      	str	r3, [sp, #36]	; 0x24
 23fc2bc:	d1b9      	bne.n	23fc232 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x82>
        if(bg != color) { // If opaque, draw vertical line for last column
 23fc2be:	9b04      	ldr	r3, [sp, #16]
 23fc2c0:	4543      	cmp	r3, r8
 23fc2c2:	d00f      	beq.n	23fc2e4 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x134>
            if(size_x == 1 && size_y == 1) writeFastVLine(x+5, y, 8, bg);
 23fc2c4:	2d01      	cmp	r5, #1
 23fc2c6:	f8db 3000 	ldr.w	r3, [fp]
 23fc2ca:	d13b      	bne.n	23fc344 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x194>
 23fc2cc:	2c01      	cmp	r4, #1
 23fc2ce:	d139      	bne.n	23fc344 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x194>
 23fc2d0:	9908      	ldr	r1, [sp, #32]
 23fc2d2:	f8cd 8000 	str.w	r8, [sp]
 23fc2d6:	3105      	adds	r1, #5
 23fc2d8:	6a1c      	ldr	r4, [r3, #32]
 23fc2da:	4632      	mov	r2, r6
 23fc2dc:	2308      	movs	r3, #8
 23fc2de:	4658      	mov	r0, fp
 23fc2e0:	b209      	sxth	r1, r1
 23fc2e2:	47a0      	blx	r4
        endWrite();
 23fc2e4:	4658      	mov	r0, fp
 23fc2e6:	f8db 3000 	ldr.w	r3, [fp]
 23fc2ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
}
 23fc2ec:	b011      	add	sp, #68	; 0x44
 23fc2ee:	ecbd 8b02 	vpop	{d8}
 23fc2f2:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
        endWrite();
 23fc2f6:	4718      	bx	r3
                        writeFillRect(x+i*size_x, y+j*size_y, size_x, size_y, color);
 23fc2f8:	fb14 f202 	smulbb	r2, r4, r2
 23fc2fc:	9906      	ldr	r1, [sp, #24]
 23fc2fe:	440a      	add	r2, r1
 23fc300:	9904      	ldr	r1, [sp, #16]
 23fc302:	9101      	str	r1, [sp, #4]
                        writeFillRect(x+i*size_x, y+j*size_y, size_x, size_y, bg);
 23fc304:	9400      	str	r4, [sp, #0]
 23fc306:	69db      	ldr	r3, [r3, #28]
 23fc308:	ee18 1a10 	vmov	r1, s16
 23fc30c:	461f      	mov	r7, r3
 23fc30e:	4658      	mov	r0, fp
 23fc310:	462b      	mov	r3, r5
 23fc312:	b212      	sxth	r2, r2
 23fc314:	47b8      	blx	r7
 23fc316:	e7bb      	b.n	23fc290 <_ZN12Adafruit_GFX8drawCharEsshtthh+0xe0>
                } else if(bg != color) {
 23fc318:	9a04      	ldr	r2, [sp, #16]
 23fc31a:	4542      	cmp	r2, r8
 23fc31c:	d0b8      	beq.n	23fc290 <_ZN12Adafruit_GFX8drawCharEsshtthh+0xe0>
                    if(size_x == 1 && size_y == 1)
 23fc31e:	2d01      	cmp	r5, #1
                        writePixel(x+i, y+j, color);
 23fc320:	fa1f f289 	uxth.w	r2, r9
                    if(size_x == 1 && size_y == 1)
 23fc324:	d107      	bne.n	23fc336 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x186>
 23fc326:	2c01      	cmp	r4, #1
 23fc328:	d105      	bne.n	23fc336 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x186>
                        writePixel(x+i, y+j, bg);
 23fc32a:	699b      	ldr	r3, [r3, #24]
 23fc32c:	9906      	ldr	r1, [sp, #24]
 23fc32e:	461f      	mov	r7, r3
 23fc330:	440a      	add	r2, r1
 23fc332:	4643      	mov	r3, r8
 23fc334:	e7a8      	b.n	23fc288 <_ZN12Adafruit_GFX8drawCharEsshtthh+0xd8>
                        writeFillRect(x+i*size_x, y+j*size_y, size_x, size_y, bg);
 23fc336:	fb14 f202 	smulbb	r2, r4, r2
 23fc33a:	9906      	ldr	r1, [sp, #24]
 23fc33c:	f8cd 8004 	str.w	r8, [sp, #4]
 23fc340:	440a      	add	r2, r1
 23fc342:	e7df      	b.n	23fc304 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x154>
            else          writeFillRect(x+5*size_x, y, size_x, 8*size_y, bg);
 23fc344:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 23fc346:	00e4      	lsls	r4, r4, #3
 23fc348:	eb02 0182 	add.w	r1, r2, r2, lsl #2
 23fc34c:	9a08      	ldr	r2, [sp, #32]
 23fc34e:	f8cd 8004 	str.w	r8, [sp, #4]
 23fc352:	440a      	add	r2, r1
 23fc354:	4611      	mov	r1, r2
 23fc356:	9400      	str	r4, [sp, #0]
 23fc358:	69dc      	ldr	r4, [r3, #28]
 23fc35a:	4632      	mov	r2, r6
 23fc35c:	462b      	mov	r3, r5
 23fc35e:	4658      	mov	r0, fp
 23fc360:	b209      	sxth	r1, r1
 23fc362:	47a0      	blx	r4
        endWrite();
 23fc364:	e7be      	b.n	23fc2e4 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x134>
        c -= (uint8_t)pgm_read_byte(&gfxFont->first);
 23fc366:	7a13      	ldrb	r3, [r2, #8]
    return gfxFont->glyph + c;
 23fc368:	6851      	ldr	r1, [r2, #4]
        c -= (uint8_t)pgm_read_byte(&gfxFont->first);
 23fc36a:	1aff      	subs	r7, r7, r3
    return gfxFont->bitmap;
 23fc36c:	6812      	ldr	r2, [r2, #0]
    return gfxFont->glyph + c;
 23fc36e:	b2ff      	uxtb	r7, r7
    return gfxFont->bitmap;
 23fc370:	920b      	str	r2, [sp, #44]	; 0x2c
        uint16_t bo = pgm_read_word(&glyph->bitmapOffset);
 23fc372:	f831 2037 	ldrh.w	r2, [r1, r7, lsl #3]
    return gfxFont->glyph + c;
 23fc376:	eb01 03c7 	add.w	r3, r1, r7, lsl #3
        uint16_t bo = pgm_read_word(&glyph->bitmapOffset);
 23fc37a:	9206      	str	r2, [sp, #24]
        uint8_t  w  = pgm_read_byte(&glyph->width),
 23fc37c:	789a      	ldrb	r2, [r3, #2]
        if(size_x > 1 || size_y > 1) {
 23fc37e:	2d01      	cmp	r5, #1
        uint8_t  w  = pgm_read_byte(&glyph->width),
 23fc380:	9209      	str	r2, [sp, #36]	; 0x24
                 h  = pgm_read_byte(&glyph->height);
 23fc382:	78da      	ldrb	r2, [r3, #3]
                 yo = pgm_read_byte(&glyph->yOffset);
 23fc384:	f993 a006 	ldrsb.w	sl, [r3, #6]
                 h  = pgm_read_byte(&glyph->height);
 23fc388:	920c      	str	r2, [sp, #48]	; 0x30
        int8_t   xo = pgm_read_byte(&glyph->xOffset),
 23fc38a:	f993 2005 	ldrsb.w	r2, [r3, #5]
 23fc38e:	920a      	str	r2, [sp, #40]	; 0x28
        if(size_x > 1 || size_y > 1) {
 23fc390:	d801      	bhi.n	23fc396 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x1e6>
 23fc392:	2c01      	cmp	r4, #1
 23fc394:	d957      	bls.n	23fc446 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x296>
            xo16 = xo;
 23fc396:	f9bd 3028 	ldrsh.w	r3, [sp, #40]	; 0x28
 23fc39a:	9308      	str	r3, [sp, #32]
            yo16 = yo;
 23fc39c:	fa0f f38a 	sxth.w	r3, sl
 23fc3a0:	9307      	str	r3, [sp, #28]
        uint8_t  xx, yy, bits = 0, bit = 0;
 23fc3a2:	f04f 0800 	mov.w	r8, #0
 23fc3a6:	46c1      	mov	r9, r8
        for(yy=0; yy<h; yy++) {
 23fc3a8:	4647      	mov	r7, r8
        startWrite();
 23fc3aa:	f8db 3000 	ldr.w	r3, [fp]
 23fc3ae:	4658      	mov	r0, fp
 23fc3b0:	695b      	ldr	r3, [r3, #20]
 23fc3b2:	4798      	blx	r3
                        writeFillRect(x+(xo16+xx)*size_x, y+(yo16+yy)*size_y,
 23fc3b4:	b2b3      	uxth	r3, r6
 23fc3b6:	930e      	str	r3, [sp, #56]	; 0x38
                        writePixel(x+xo+xx, y+yo+yy, color);
 23fc3b8:	fa1a f386 	uxtah	r3, sl, r6
 23fc3bc:	930f      	str	r3, [sp, #60]	; 0x3c
        for(yy=0; yy<h; yy++) {
 23fc3be:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 23fc3c0:	429f      	cmp	r7, r3
 23fc3c2:	d28f      	bcs.n	23fc2e4 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x134>
                        writeFillRect(x+(xo16+xx)*size_x, y+(yo16+yy)*size_y,
 23fc3c4:	9b07      	ldr	r3, [sp, #28]
 23fc3c6:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 23fc3c8:	443b      	add	r3, r7
 23fc3ca:	fb03 2304 	mla	r3, r3, r4, r2
            for(xx=0; xx<w; xx++) {
 23fc3ce:	2200      	movs	r2, #0
                        writeFillRect(x+(xo16+xx)*size_x, y+(yo16+yy)*size_y,
 23fc3d0:	b21b      	sxth	r3, r3
 23fc3d2:	ee08 3a10 	vmov	s16, r3
 23fc3d6:	4643      	mov	r3, r8
            for(xx=0; xx<w; xx++) {
 23fc3d8:	9205      	str	r2, [sp, #20]
                        writePixel(x+xo+xx, y+yo+yy, color);
 23fc3da:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 23fc3dc:	eb02 0a07 	add.w	sl, r2, r7
 23fc3e0:	fa0f fa8a 	sxth.w	sl, sl
            for(xx=0; xx<w; xx++) {
 23fc3e4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 23fc3e6:	9905      	ldr	r1, [sp, #20]
 23fc3e8:	4291      	cmp	r1, r2
 23fc3ea:	d241      	bcs.n	23fc470 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x2c0>
                if(!(bit++ & 7)) {
 23fc3ec:	1c5a      	adds	r2, r3, #1
 23fc3ee:	b2d2      	uxtb	r2, r2
 23fc3f0:	075b      	lsls	r3, r3, #29
 23fc3f2:	920d      	str	r2, [sp, #52]	; 0x34
 23fc3f4:	d107      	bne.n	23fc406 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x256>
                    bits = pgm_read_byte(&bitmap[bo++]);
 23fc3f6:	9b06      	ldr	r3, [sp, #24]
 23fc3f8:	9906      	ldr	r1, [sp, #24]
 23fc3fa:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 23fc3fc:	3301      	adds	r3, #1
 23fc3fe:	b29b      	uxth	r3, r3
 23fc400:	f812 9001 	ldrb.w	r9, [r2, r1]
 23fc404:	9306      	str	r3, [sp, #24]
                if(bits & 0x80) {
 23fc406:	f019 0f80 	tst.w	r9, #128	; 0x80
 23fc40a:	d012      	beq.n	23fc432 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x282>
                    if(size_x == 1 && size_y == 1) {
 23fc40c:	2d01      	cmp	r5, #1
                        writePixel(x+xo+xx, y+yo+yy, color);
 23fc40e:	f8db 3000 	ldr.w	r3, [fp]
                        writeFillRect(x+i*size_x, y+j*size_y, size_x, size_y, bg);
 23fc412:	f8bd 100c 	ldrh.w	r1, [sp, #12]
                    if(size_x == 1 && size_y == 1) {
 23fc416:	d11a      	bne.n	23fc44e <_ZN12Adafruit_GFX8drawCharEsshtthh+0x29e>
 23fc418:	2c01      	cmp	r4, #1
 23fc41a:	d118      	bne.n	23fc44e <_ZN12Adafruit_GFX8drawCharEsshtthh+0x29e>
                        writePixel(x+xo+xx, y+yo+yy, color);
 23fc41c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 23fc41e:	699b      	ldr	r3, [r3, #24]
 23fc420:	4411      	add	r1, r2
 23fc422:	9a05      	ldr	r2, [sp, #20]
 23fc424:	461e      	mov	r6, r3
 23fc426:	4411      	add	r1, r2
 23fc428:	4658      	mov	r0, fp
 23fc42a:	4652      	mov	r2, sl
 23fc42c:	9b04      	ldr	r3, [sp, #16]
 23fc42e:	b209      	sxth	r1, r1
 23fc430:	47b0      	blx	r6
            for(xx=0; xx<w; xx++) {
 23fc432:	9e05      	ldr	r6, [sp, #20]
                bits <<= 1;
 23fc434:	ea4f 0949 	mov.w	r9, r9, lsl #1
            for(xx=0; xx<w; xx++) {
 23fc438:	3601      	adds	r6, #1
 23fc43a:	b2f3      	uxtb	r3, r6
 23fc43c:	9305      	str	r3, [sp, #20]
                bits <<= 1;
 23fc43e:	fa5f f989 	uxtb.w	r9, r9
                if(!(bit++ & 7)) {
 23fc442:	9b0d      	ldr	r3, [sp, #52]	; 0x34
            for(xx=0; xx<w; xx++) {
 23fc444:	e7ce      	b.n	23fc3e4 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x234>
        int16_t  xo16 = 0, yo16 = 0;
 23fc446:	2300      	movs	r3, #0
 23fc448:	e9cd 3307 	strd	r3, r3, [sp, #28]
 23fc44c:	e7a9      	b.n	23fc3a2 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x1f2>
                        writeFillRect(x+(xo16+xx)*size_x, y+(yo16+yy)*size_y,
 23fc44e:	9805      	ldr	r0, [sp, #20]
 23fc450:	9a08      	ldr	r2, [sp, #32]
 23fc452:	4402      	add	r2, r0
 23fc454:	fb02 1105 	mla	r1, r2, r5, r1
 23fc458:	9a04      	ldr	r2, [sp, #16]
 23fc45a:	4658      	mov	r0, fp
 23fc45c:	e9cd 4200 	strd	r4, r2, [sp]
 23fc460:	69db      	ldr	r3, [r3, #28]
 23fc462:	ee18 2a10 	vmov	r2, s16
 23fc466:	461e      	mov	r6, r3
 23fc468:	b209      	sxth	r1, r1
 23fc46a:	462b      	mov	r3, r5
 23fc46c:	47b0      	blx	r6
 23fc46e:	e7e0      	b.n	23fc432 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x282>
 23fc470:	9b09      	ldr	r3, [sp, #36]	; 0x24
        for(yy=0; yy<h; yy++) {
 23fc472:	3701      	adds	r7, #1
 23fc474:	4498      	add	r8, r3
 23fc476:	fa5f f888 	uxtb.w	r8, r8
 23fc47a:	b2ff      	uxtb	r7, r7
 23fc47c:	e79f      	b.n	23fc3be <_ZN12Adafruit_GFX8drawCharEsshtthh+0x20e>
}
 23fc47e:	b011      	add	sp, #68	; 0x44
 23fc480:	ecbd 8b02 	vpop	{d8}
 23fc484:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 23fc488:	023ff6b1 	.word	0x023ff6b1

023fc48c <_ZN12Adafruit_GFX5writeEh>:
size_t Adafruit_GFX::write(uint8_t c) {
 23fc48c:	b5f0      	push	{r4, r5, r6, r7, lr}
    if(!gfxFont) { // 'Classic' built-in font
 23fc48e:	6a02      	ldr	r2, [r0, #32]
size_t Adafruit_GFX::write(uint8_t c) {
 23fc490:	4604      	mov	r4, r0
 23fc492:	460b      	mov	r3, r1
 23fc494:	b085      	sub	sp, #20
    if(!gfxFont) { // 'Classic' built-in font
 23fc496:	2a00      	cmp	r2, #0
 23fc498:	d134      	bne.n	23fc504 <_ZN12Adafruit_GFX5writeEh+0x78>
        if(c == '\n') {                        // Newline?
 23fc49a:	290a      	cmp	r1, #10
 23fc49c:	d108      	bne.n	23fc4b0 <_ZN12Adafruit_GFX5writeEh+0x24>
            cursor_y += textsize_y * 8;        // advance y one line
 23fc49e:	8a43      	ldrh	r3, [r0, #18]
            cursor_x  = 0;                     // Reset x to zero,
 23fc4a0:	8202      	strh	r2, [r0, #16]
            cursor_y += textsize_y * 8;        // advance y one line
 23fc4a2:	7e42      	ldrb	r2, [r0, #25]
 23fc4a4:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
            cursor_y += (int16_t)textsize_y *
 23fc4a8:	8263      	strh	r3, [r4, #18]
}
 23fc4aa:	2001      	movs	r0, #1
 23fc4ac:	b005      	add	sp, #20
 23fc4ae:	bdf0      	pop	{r4, r5, r6, r7, pc}
        } else if(c != '\r') {                 // Ignore carriage returns
 23fc4b0:	290d      	cmp	r1, #13
 23fc4b2:	d0fa      	beq.n	23fc4aa <_ZN12Adafruit_GFX5writeEh+0x1e>
            if(wrap && ((cursor_x + textsize_x * 6) > _width)) { // Off right?
 23fc4b4:	7ee1      	ldrb	r1, [r4, #27]
 23fc4b6:	7e00      	ldrb	r0, [r0, #24]
            cursor_y += textsize_y * 8;        // advance y one line
 23fc4b8:	7e65      	ldrb	r5, [r4, #25]
            if(wrap && ((cursor_x + textsize_x * 6) > _width)) { // Off right?
 23fc4ba:	b171      	cbz	r1, 23fc4da <_ZN12Adafruit_GFX5writeEh+0x4e>
 23fc4bc:	2106      	movs	r1, #6
 23fc4be:	f9b4 6010 	ldrsh.w	r6, [r4, #16]
 23fc4c2:	fb11 6100 	smlabb	r1, r1, r0, r6
 23fc4c6:	f9b4 600c 	ldrsh.w	r6, [r4, #12]
 23fc4ca:	42b1      	cmp	r1, r6
            cursor_y += textsize_y * 8;        // advance y one line
 23fc4cc:	bfc1      	itttt	gt
 23fc4ce:	f9b4 1012 	ldrshgt.w	r1, [r4, #18]
                cursor_x  = 0;                 // Reset x to zero,
 23fc4d2:	8222      	strhgt	r2, [r4, #16]
                cursor_y += textsize_y * 8;    // advance y one line
 23fc4d4:	eb01 02c5 	addgt.w	r2, r1, r5, lsl #3
 23fc4d8:	8262      	strhgt	r2, [r4, #18]
            drawChar(cursor_x, cursor_y, c, textcolor, textbgcolor, textsize_x, textsize_y);
 23fc4da:	8ae2      	ldrh	r2, [r4, #22]
 23fc4dc:	e9cd 0502 	strd	r0, r5, [sp, #8]
 23fc4e0:	9201      	str	r2, [sp, #4]
 23fc4e2:	8aa2      	ldrh	r2, [r4, #20]
 23fc4e4:	4620      	mov	r0, r4
 23fc4e6:	9200      	str	r2, [sp, #0]
 23fc4e8:	f9b4 1010 	ldrsh.w	r1, [r4, #16]
 23fc4ec:	f9b4 2012 	ldrsh.w	r2, [r4, #18]
 23fc4f0:	f7ff fe5e 	bl	23fc1b0 <_ZN12Adafruit_GFX8drawCharEsshtthh>
            cursor_x += textsize_x * 6;          // Advance x one char
 23fc4f4:	7e23      	ldrb	r3, [r4, #24]
 23fc4f6:	8a22      	ldrh	r2, [r4, #16]
 23fc4f8:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 23fc4fc:	eb02 0343 	add.w	r3, r2, r3, lsl #1
                cursor_x += (uint8_t)pgm_read_byte(&glyph->xAdvance) * (int16_t)textsize_x;
 23fc500:	8223      	strh	r3, [r4, #16]
 23fc502:	e7d2      	b.n	23fc4aa <_ZN12Adafruit_GFX5writeEh+0x1e>
        if(c == '\n') {
 23fc504:	290a      	cmp	r1, #10
 23fc506:	d107      	bne.n	23fc518 <_ZN12Adafruit_GFX5writeEh+0x8c>
            cursor_x  = 0;
 23fc508:	2300      	movs	r3, #0
 23fc50a:	8203      	strh	r3, [r0, #16]
            cursor_y += (int16_t)textsize_y *
 23fc50c:	7e41      	ldrb	r1, [r0, #25]
                        (uint8_t)pgm_read_byte(&gfxFont->yAdvance);
 23fc50e:	7a92      	ldrb	r2, [r2, #10]
            cursor_y += (int16_t)textsize_y *
 23fc510:	8a43      	ldrh	r3, [r0, #18]
 23fc512:	fb01 3302 	mla	r3, r1, r2, r3
 23fc516:	e7c7      	b.n	23fc4a8 <_ZN12Adafruit_GFX5writeEh+0x1c>
        } else if(c != '\r') {
 23fc518:	290d      	cmp	r1, #13
 23fc51a:	d0c6      	beq.n	23fc4aa <_ZN12Adafruit_GFX5writeEh+0x1e>
            uint8_t first = pgm_read_byte(&gfxFont->first);
 23fc51c:	7a15      	ldrb	r5, [r2, #8]
            if((c >= first) && (c <= (uint8_t)pgm_read_byte(&gfxFont->last))) {
 23fc51e:	42a9      	cmp	r1, r5
 23fc520:	d3c3      	bcc.n	23fc4aa <_ZN12Adafruit_GFX5writeEh+0x1e>
 23fc522:	7a51      	ldrb	r1, [r2, #9]
 23fc524:	4299      	cmp	r1, r3
 23fc526:	d3c0      	bcc.n	23fc4aa <_ZN12Adafruit_GFX5writeEh+0x1e>
    return gfxFont->glyph + c;
 23fc528:	6851      	ldr	r1, [r2, #4]
                GFXglyph *glyph  = pgm_read_glyph_ptr(gfxFont, c - first);
 23fc52a:	1b5d      	subs	r5, r3, r5
    return gfxFont->glyph + c;
 23fc52c:	b2ed      	uxtb	r5, r5
 23fc52e:	eb01 05c5 	add.w	r5, r1, r5, lsl #3
                uint8_t   w     = pgm_read_byte(&glyph->width),
 23fc532:	78a8      	ldrb	r0, [r5, #2]
                if((w > 0) && (h > 0)) { // Is there an associated bitmap?
 23fc534:	b328      	cbz	r0, 23fc582 <_ZN12Adafruit_GFX5writeEh+0xf6>
 23fc536:	78e9      	ldrb	r1, [r5, #3]
 23fc538:	b319      	cbz	r1, 23fc582 <_ZN12Adafruit_GFX5writeEh+0xf6>
                    if(wrap && ((cursor_x + textsize_x * (xo + w)) > _width)) {
 23fc53a:	7ee1      	ldrb	r1, [r4, #27]
            if(wrap && ((cursor_x + textsize_x * 6) > _width)) { // Off right?
 23fc53c:	7e26      	ldrb	r6, [r4, #24]
            cursor_y += textsize_y * 8;        // advance y one line
 23fc53e:	7e67      	ldrb	r7, [r4, #25]
                    if(wrap && ((cursor_x + textsize_x * (xo + w)) > _width)) {
 23fc540:	b191      	cbz	r1, 23fc568 <_ZN12Adafruit_GFX5writeEh+0xdc>
 23fc542:	f995 1005 	ldrsb.w	r1, [r5, #5]
 23fc546:	4408      	add	r0, r1
 23fc548:	f9b4 1010 	ldrsh.w	r1, [r4, #16]
 23fc54c:	fb06 1100 	mla	r1, r6, r0, r1
 23fc550:	f9b4 000c 	ldrsh.w	r0, [r4, #12]
 23fc554:	4281      	cmp	r1, r0
 23fc556:	dd07      	ble.n	23fc568 <_ZN12Adafruit_GFX5writeEh+0xdc>
                        cursor_x  = 0;
 23fc558:	2000      	movs	r0, #0
 23fc55a:	8220      	strh	r0, [r4, #16]
            cursor_y += textsize_y * 8;        // advance y one line
 23fc55c:	f9b4 1012 	ldrsh.w	r1, [r4, #18]
                          (uint8_t)pgm_read_byte(&gfxFont->yAdvance);
 23fc560:	7a92      	ldrb	r2, [r2, #10]
                        cursor_y += (int16_t)textsize_y *
 23fc562:	fb02 1207 	mla	r2, r2, r7, r1
 23fc566:	8262      	strh	r2, [r4, #18]
                    drawChar(cursor_x, cursor_y, c, textcolor, textbgcolor, textsize_x, textsize_y);
 23fc568:	8ae2      	ldrh	r2, [r4, #22]
 23fc56a:	4620      	mov	r0, r4
 23fc56c:	9201      	str	r2, [sp, #4]
 23fc56e:	8aa2      	ldrh	r2, [r4, #20]
 23fc570:	e9cd 6702 	strd	r6, r7, [sp, #8]
 23fc574:	9200      	str	r2, [sp, #0]
 23fc576:	f9b4 1010 	ldrsh.w	r1, [r4, #16]
 23fc57a:	f9b4 2012 	ldrsh.w	r2, [r4, #18]
 23fc57e:	f7ff fe17 	bl	23fc1b0 <_ZN12Adafruit_GFX8drawCharEsshtthh>
                cursor_x += (uint8_t)pgm_read_byte(&glyph->xAdvance) * (int16_t)textsize_x;
 23fc582:	7929      	ldrb	r1, [r5, #4]
 23fc584:	7e22      	ldrb	r2, [r4, #24]
 23fc586:	8a23      	ldrh	r3, [r4, #16]
 23fc588:	fb01 3302 	mla	r3, r1, r2, r3
 23fc58c:	e7b8      	b.n	23fc500 <_ZN12Adafruit_GFX5writeEh+0x74>

023fc58e <_ZN12Adafruit_GFX11setTextSizeEh>:
    textsize_x = (s_x > 0) ? s_x : 1;
 23fc58e:	2901      	cmp	r1, #1
 23fc590:	bf38      	it	cc
 23fc592:	2101      	movcc	r1, #1
 23fc594:	7601      	strb	r1, [r0, #24]
    textsize_y = (s_y > 0) ? s_y : 1;
 23fc596:	7641      	strb	r1, [r0, #25]
}
 23fc598:	4770      	bx	lr

023fc59a <_ZN15Adafruit_SPITFT11SPI_SCK_LOWEv.isra.0>:
  #endif
 #else  // !HAS_PORT_SET_CLR
    *swspi.sckPort   &= swspi.sckPinMaskClr;
 #endif // end !HAS_PORT_SET_CLR
#else  // !USE_FAST_PINIO
    digitalWrite(swspi._sck, LOW);
 23fc59a:	2100      	movs	r1, #0
 23fc59c:	b280      	uxth	r0, r0
 23fc59e:	f002 be5e 	b.w	23ff25e <digitalWrite>

023fc5a2 <_ZN15Adafruit_SPITFT12SPI_SCK_HIGHEv.isra.0>:
    digitalWrite(swspi._sck, HIGH);
 23fc5a2:	2101      	movs	r1, #1
 23fc5a4:	b280      	uxth	r0, r0
 23fc5a6:	f002 be5a 	b.w	23ff25e <digitalWrite>

023fc5aa <_ZN15Adafruit_SPITFT12SPI_MOSI_LOWEv.isra.0>:
    digitalWrite(swspi._mosi, LOW);
 23fc5aa:	2100      	movs	r1, #0
 23fc5ac:	b280      	uxth	r0, r0
 23fc5ae:	f002 be56 	b.w	23ff25e <digitalWrite>

023fc5b2 <_ZN15Adafruit_SPITFT13SPI_MOSI_HIGHEv.isra.0>:
    digitalWrite(swspi._mosi, HIGH);
 23fc5b2:	2101      	movs	r1, #1
 23fc5b4:	b280      	uxth	r0, r0
 23fc5b6:	f002 be52 	b.w	23ff25e <digitalWrite>

023fc5ba <_ZN15Adafruit_SPITFT10SPI_DC_LOWEv.isra.0>:
      #endif // end !KINETISK
     #else  // !HAS_PORT_SET_CLR
        *dcPort   &= dcPinMaskClr;
     #endif // end !HAS_PORT_SET_CLR
    #else  // !USE_FAST_PINIO
        digitalWrite(_dc, LOW);
 23fc5ba:	2100      	movs	r1, #0
 23fc5bc:	b280      	uxth	r0, r0
 23fc5be:	f002 be4e 	b.w	23ff25e <digitalWrite>

023fc5c2 <_ZN15Adafruit_SPITFT11SPI_DC_HIGHEv.isra.0>:
        digitalWrite(_dc, HIGH);
 23fc5c2:	2101      	movs	r1, #1
 23fc5c4:	b280      	uxth	r0, r0
 23fc5c6:	f002 be4a 	b.w	23ff25e <digitalWrite>
	...

023fc5cc <_ZN15Adafruit_SPITFTC1EttP8SPIClassaaa>:
Adafruit_SPITFT::Adafruit_SPITFT(uint16_t w, uint16_t h, SPIClass *spiClass,
 23fc5cc:	b538      	push	{r3, r4, r5, lr}
 23fc5ce:	4604      	mov	r4, r0
  connection(TFT_HARD_SPI), _rst(rst), _cs(cs), _dc(dc) {
 23fc5d0:	b212      	sxth	r2, r2
 23fc5d2:	b209      	sxth	r1, r1
Adafruit_SPITFT::Adafruit_SPITFT(uint16_t w, uint16_t h, SPIClass *spiClass,
 23fc5d4:	461d      	mov	r5, r3
  connection(TFT_HARD_SPI), _rst(rst), _cs(cs), _dc(dc) {
 23fc5d6:	f7ff fdd5 	bl	23fc184 <_ZN12Adafruit_GFXC1Ess>
 23fc5da:	2200      	movs	r2, #0
 23fc5dc:	4b0b      	ldr	r3, [pc, #44]	; (23fc60c <_ZN15Adafruit_SPITFTC1EttP8SPIClassaaa+0x40>)
}
 23fc5de:	4620      	mov	r0, r4
  connection(TFT_HARD_SPI), _rst(rst), _cs(cs), _dc(dc) {
 23fc5e0:	6023      	str	r3, [r4, #0]
 23fc5e2:	f99d 3018 	ldrsb.w	r3, [sp, #24]
 23fc5e6:	f884 203c 	strb.w	r2, [r4, #60]	; 0x3c
 23fc5ea:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
 23fc5ee:	f99d 3010 	ldrsb.w	r3, [sp, #16]
 23fc5f2:	6422      	str	r2, [r4, #64]	; 0x40
 23fc5f4:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
 23fc5f8:	f99d 3014 	ldrsb.w	r3, [sp, #20]
 23fc5fc:	f8a4 2044 	strh.w	r2, [r4, #68]	; 0x44
 23fc600:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
 23fc604:	64a2      	str	r2, [r4, #72]	; 0x48
    hwspi._spi = spiClass;
 23fc606:	6265      	str	r5, [r4, #36]	; 0x24
}
 23fc608:	bd38      	pop	{r3, r4, r5, pc}
 23fc60a:	bf00      	nop
 23fc60c:	023ffc14 	.word	0x023ffc14

023fc610 <_ZN15Adafruit_SPITFTC1Ettaaa>:
Adafruit_SPITFT::Adafruit_SPITFT(uint16_t w, uint16_t h, int8_t cs,
 23fc610:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 23fc614:	4604      	mov	r4, r0
 23fc616:	460d      	mov	r5, r1
 23fc618:	4616      	mov	r6, r2
 23fc61a:	461f      	mov	r7, r3

template <hal_spi_interface_t Interface>
class SpiProxy {
public:
    static SPIClass& instance() {
        static SPIClass instance(Interface);
 23fc61c:	f8df 804c 	ldr.w	r8, [pc, #76]	; 23fc66c <_ZN15Adafruit_SPITFTC1Ettaaa+0x5c>
 23fc620:	b086      	sub	sp, #24
 23fc622:	e8d8 0f8f 	ldab	r0, [r8]
 23fc626:	f010 0101 	ands.w	r1, r0, #1
 23fc62a:	d10b      	bne.n	23fc644 <_ZN15Adafruit_SPITFTC1Ettaaa+0x34>
 23fc62c:	4640      	mov	r0, r8
 23fc62e:	9105      	str	r1, [sp, #20]
 23fc630:	f7fe fff6 	bl	23fb620 <__cxa_guard_acquire>
 23fc634:	9905      	ldr	r1, [sp, #20]
 23fc636:	b128      	cbz	r0, 23fc644 <_ZN15Adafruit_SPITFTC1Ettaaa+0x34>
 23fc638:	480b      	ldr	r0, [pc, #44]	; (23fc668 <_ZN15Adafruit_SPITFTC1Ettaaa+0x58>)
 23fc63a:	f002 f99f 	bl	23fe97c <_ZN8SPIClassC1E19hal_spi_interface_t>
 23fc63e:	4640      	mov	r0, r8
 23fc640:	f7fe fff3 	bl	23fb62a <__cxa_guard_release>
  int8_t dc, int8_t rst) : Adafruit_SPITFT(w, h, &SPI, cs, dc, rst) {
 23fc644:	f99d 3034 	ldrsb.w	r3, [sp, #52]	; 0x34
 23fc648:	4632      	mov	r2, r6
 23fc64a:	9302      	str	r3, [sp, #8]
 23fc64c:	f99d 3030 	ldrsb.w	r3, [sp, #48]	; 0x30
 23fc650:	4629      	mov	r1, r5
 23fc652:	e9cd 7300 	strd	r7, r3, [sp]
 23fc656:	4620      	mov	r0, r4
 23fc658:	4b03      	ldr	r3, [pc, #12]	; (23fc668 <_ZN15Adafruit_SPITFTC1Ettaaa+0x58>)
 23fc65a:	f7ff ffb7 	bl	23fc5cc <_ZN15Adafruit_SPITFTC1EttP8SPIClassaaa>
}
 23fc65e:	4620      	mov	r0, r4
 23fc660:	b006      	add	sp, #24
 23fc662:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 23fc666:	bf00      	nop
 23fc668:	1007ae84 	.word	0x1007ae84
 23fc66c:	1007ae80 	.word	0x1007ae80

023fc670 <_ZN15Adafruit_SPITFT7initSPIEmh>:
void Adafruit_SPITFT::initSPI(uint32_t freq, uint8_t spiMode) {
 23fc670:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 23fc672:	4604      	mov	r4, r0
    if(!freq) freq = DEFAULT_SPI_FREQ; // If no freq specified, use default
 23fc674:	4f48      	ldr	r7, [pc, #288]	; (23fc798 <_ZN15Adafruit_SPITFT7initSPIEmh+0x128>)
    if(_cs >= 0) {
 23fc676:	f990 003e 	ldrsb.w	r0, [r0, #62]	; 0x3e
    if(!freq) freq = DEFAULT_SPI_FREQ; // If no freq specified, use default
 23fc67a:	2900      	cmp	r1, #0
 23fc67c:	bf18      	it	ne
 23fc67e:	460f      	movne	r7, r1
    if(_cs >= 0) {
 23fc680:	2800      	cmp	r0, #0
void Adafruit_SPITFT::initSPI(uint32_t freq, uint8_t spiMode) {
 23fc682:	4616      	mov	r6, r2
    if(_cs >= 0) {
 23fc684:	db09      	blt.n	23fc69a <_ZN15Adafruit_SPITFT7initSPIEmh+0x2a>
        pinMode(_cs, OUTPUT);
 23fc686:	2101      	movs	r1, #1
 23fc688:	b280      	uxth	r0, r0
 23fc68a:	f002 fdd7 	bl	23ff23c <pinMode>
        digitalWrite(_cs, HIGH); // Deselect
 23fc68e:	f994 003e 	ldrsb.w	r0, [r4, #62]	; 0x3e
 23fc692:	2101      	movs	r1, #1
 23fc694:	b280      	uxth	r0, r0
 23fc696:	f002 fde2 	bl	23ff25e <digitalWrite>
    pinMode(_dc, OUTPUT);
 23fc69a:	f994 003f 	ldrsb.w	r0, [r4, #63]	; 0x3f
 23fc69e:	2101      	movs	r1, #1
 23fc6a0:	b280      	uxth	r0, r0
 23fc6a2:	f002 fdcb 	bl	23ff23c <pinMode>
    digitalWrite(_dc, HIGH); // Data mode
 23fc6a6:	f994 003f 	ldrsb.w	r0, [r4, #63]	; 0x3f
 23fc6aa:	2101      	movs	r1, #1
 23fc6ac:	b280      	uxth	r0, r0
 23fc6ae:	f002 fdd6 	bl	23ff25e <digitalWrite>
    if(connection == TFT_HARD_SPI) {
 23fc6b2:	f894 503c 	ldrb.w	r5, [r4, #60]	; 0x3c
 23fc6b6:	bb85      	cbnz	r5, 23fc71a <_ZN15Adafruit_SPITFT7initSPIEmh+0xaa>
    SPI_CLK_SYSTEM = 0,         // represents the system clock speed
    SPI_CLK_ARDUINO = 16*MHZ,
};

namespace particle {
class SPISettings : public Printable {
 23fc6b8:	2301      	movs	r3, #1
            hwspi._spi->begin();
 23fc6ba:	6a60      	ldr	r0, [r4, #36]	; 0x24
 23fc6bc:	f884 502c 	strb.w	r5, [r4, #44]	; 0x2c
 23fc6c0:	6327      	str	r7, [r4, #48]	; 0x30
 23fc6c2:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
 23fc6c6:	f884 6035 	strb.w	r6, [r4, #53]	; 0x35
        hwspi._mode    = spiMode; // Save spiMode value for later
 23fc6ca:	63a6      	str	r6, [r4, #56]	; 0x38
            hwspi._spi->begin();
 23fc6cc:	f002 f960 	bl	23fe990 <_ZN8SPIClass5beginEv>
    if(_rst >= 0) {
 23fc6d0:	f994 003d 	ldrsb.w	r0, [r4, #61]	; 0x3d
 23fc6d4:	2800      	cmp	r0, #0
 23fc6d6:	db5e      	blt.n	23fc796 <_ZN15Adafruit_SPITFT7initSPIEmh+0x126>
        pinMode(_rst, OUTPUT);
 23fc6d8:	2101      	movs	r1, #1
 23fc6da:	b280      	uxth	r0, r0
 23fc6dc:	f002 fdae 	bl	23ff23c <pinMode>
        digitalWrite(_rst, HIGH);
 23fc6e0:	f994 003d 	ldrsb.w	r0, [r4, #61]	; 0x3d
 23fc6e4:	2101      	movs	r1, #1
 23fc6e6:	b280      	uxth	r0, r0
 23fc6e8:	f002 fdb9 	bl	23ff25e <digitalWrite>
        delay(100);
 23fc6ec:	2064      	movs	r0, #100	; 0x64
 23fc6ee:	f001 fc27 	bl	23fdf40 <delay>
        digitalWrite(_rst, LOW);
 23fc6f2:	f994 003d 	ldrsb.w	r0, [r4, #61]	; 0x3d
 23fc6f6:	2100      	movs	r1, #0
 23fc6f8:	b280      	uxth	r0, r0
 23fc6fa:	f002 fdb0 	bl	23ff25e <digitalWrite>
        delay(100);
 23fc6fe:	2064      	movs	r0, #100	; 0x64
 23fc700:	f001 fc1e 	bl	23fdf40 <delay>
        digitalWrite(_rst, HIGH);
 23fc704:	f994 003d 	ldrsb.w	r0, [r4, #61]	; 0x3d
 23fc708:	2101      	movs	r1, #1
 23fc70a:	b280      	uxth	r0, r0
 23fc70c:	f002 fda7 	bl	23ff25e <digitalWrite>
}
 23fc710:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
        delay(200);
 23fc714:	20c8      	movs	r0, #200	; 0xc8
 23fc716:	f001 bc13 	b.w	23fdf40 <delay>
    } else if(connection == TFT_SOFT_SPI) {
 23fc71a:	2d01      	cmp	r5, #1
 23fc71c:	d120      	bne.n	23fc760 <_ZN15Adafruit_SPITFT7initSPIEmh+0xf0>
        pinMode(swspi._mosi, OUTPUT);
 23fc71e:	f994 0024 	ldrsb.w	r0, [r4, #36]	; 0x24
 23fc722:	4629      	mov	r1, r5
 23fc724:	b280      	uxth	r0, r0
 23fc726:	f002 fd89 	bl	23ff23c <pinMode>
        digitalWrite(swspi._mosi, LOW);
 23fc72a:	f994 0024 	ldrsb.w	r0, [r4, #36]	; 0x24
 23fc72e:	2100      	movs	r1, #0
 23fc730:	b280      	uxth	r0, r0
 23fc732:	f002 fd94 	bl	23ff25e <digitalWrite>
        pinMode(swspi._sck, OUTPUT);
 23fc736:	f994 0026 	ldrsb.w	r0, [r4, #38]	; 0x26
 23fc73a:	4629      	mov	r1, r5
 23fc73c:	b280      	uxth	r0, r0
 23fc73e:	f002 fd7d 	bl	23ff23c <pinMode>
        digitalWrite(swspi._sck, LOW);
 23fc742:	f994 0026 	ldrsb.w	r0, [r4, #38]	; 0x26
 23fc746:	2100      	movs	r1, #0
 23fc748:	b280      	uxth	r0, r0
 23fc74a:	f002 fd88 	bl	23ff25e <digitalWrite>
        if(swspi._miso >= 0) {
 23fc74e:	f994 0025 	ldrsb.w	r0, [r4, #37]	; 0x25
 23fc752:	2800      	cmp	r0, #0
 23fc754:	dbbc      	blt.n	23fc6d0 <_ZN15Adafruit_SPITFT7initSPIEmh+0x60>
            pinMode(swspi._miso, INPUT);
 23fc756:	2100      	movs	r1, #0
 23fc758:	b280      	uxth	r0, r0
 23fc75a:	f002 fd6f 	bl	23ff23c <pinMode>
 23fc75e:	e7b7      	b.n	23fc6d0 <_ZN15Adafruit_SPITFT7initSPIEmh+0x60>
        pinMode(tft8._wr, OUTPUT);
 23fc760:	f994 0025 	ldrsb.w	r0, [r4, #37]	; 0x25
 23fc764:	2101      	movs	r1, #1
 23fc766:	b280      	uxth	r0, r0
 23fc768:	f002 fd68 	bl	23ff23c <pinMode>
        digitalWrite(tft8._wr, HIGH);
 23fc76c:	f994 0025 	ldrsb.w	r0, [r4, #37]	; 0x25
 23fc770:	2101      	movs	r1, #1
 23fc772:	b280      	uxth	r0, r0
 23fc774:	f002 fd73 	bl	23ff25e <digitalWrite>
        if(tft8._rd >= 0) {
 23fc778:	f994 0026 	ldrsb.w	r0, [r4, #38]	; 0x26
 23fc77c:	2800      	cmp	r0, #0
 23fc77e:	dba7      	blt.n	23fc6d0 <_ZN15Adafruit_SPITFT7initSPIEmh+0x60>
            pinMode(tft8._rd, OUTPUT);
 23fc780:	2101      	movs	r1, #1
 23fc782:	b280      	uxth	r0, r0
 23fc784:	f002 fd5a 	bl	23ff23c <pinMode>
            digitalWrite(tft8._rd, HIGH);
 23fc788:	f994 0026 	ldrsb.w	r0, [r4, #38]	; 0x26
 23fc78c:	2101      	movs	r1, #1
 23fc78e:	b280      	uxth	r0, r0
 23fc790:	f002 fd65 	bl	23ff25e <digitalWrite>
 23fc794:	e79c      	b.n	23fc6d0 <_ZN15Adafruit_SPITFT7initSPIEmh+0x60>
}
 23fc796:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 23fc798:	00f42400 	.word	0x00f42400

023fc79c <_ZN15Adafruit_SPITFT21SPI_BEGIN_TRANSACTIONEv>:
    if(connection == TFT_HARD_SPI) {
 23fc79c:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 23fc7a0:	b923      	cbnz	r3, 23fc7ac <_ZN15Adafruit_SPITFT21SPI_BEGIN_TRANSACTIONEv+0x10>
        hwspi._spi->beginTransaction(hwspi.settings);
 23fc7a2:	f100 0128 	add.w	r1, r0, #40	; 0x28
 23fc7a6:	6a40      	ldr	r0, [r0, #36]	; 0x24
 23fc7a8:	f002 b920 	b.w	23fe9ec <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE>
}
 23fc7ac:	4770      	bx	lr

023fc7ae <_ZN15Adafruit_SPITFT10startWriteEv>:
void Adafruit_SPITFT::startWrite(void) {
 23fc7ae:	b510      	push	{r4, lr}
 23fc7b0:	4604      	mov	r4, r0
    SPI_BEGIN_TRANSACTION();
 23fc7b2:	f7ff fff3 	bl	23fc79c <_ZN15Adafruit_SPITFT21SPI_BEGIN_TRANSACTIONEv>
    if(_cs >= 0) SPI_CS_LOW();
 23fc7b6:	f994 003e 	ldrsb.w	r0, [r4, #62]	; 0x3e
 23fc7ba:	2800      	cmp	r0, #0
 23fc7bc:	db05      	blt.n	23fc7ca <_ZN15Adafruit_SPITFT10startWriteEv+0x1c>
}
 23fc7be:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        digitalWrite(_cs, LOW);
 23fc7c2:	2100      	movs	r1, #0
 23fc7c4:	b280      	uxth	r0, r0
 23fc7c6:	f002 bd4a 	b.w	23ff25e <digitalWrite>
 23fc7ca:	bd10      	pop	{r4, pc}

023fc7cc <_ZN15Adafruit_SPITFT19SPI_END_TRANSACTIONEv>:
    if(connection == TFT_HARD_SPI) {
 23fc7cc:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 23fc7d0:	b913      	cbnz	r3, 23fc7d8 <_ZN15Adafruit_SPITFT19SPI_END_TRANSACTIONEv+0xc>
        hwspi._spi->endTransaction();
 23fc7d2:	6a40      	ldr	r0, [r0, #36]	; 0x24
 23fc7d4:	f002 b8f0 	b.w	23fe9b8 <_ZN8SPIClass14endTransactionEv>
}
 23fc7d8:	4770      	bx	lr

023fc7da <_ZN15Adafruit_SPITFT8endWriteEv>:
void Adafruit_SPITFT::endWrite(void) {
 23fc7da:	b510      	push	{r4, lr}
 23fc7dc:	4604      	mov	r4, r0
    if(_cs >= 0) SPI_CS_HIGH();
 23fc7de:	f990 003e 	ldrsb.w	r0, [r0, #62]	; 0x3e
 23fc7e2:	2800      	cmp	r0, #0
 23fc7e4:	db03      	blt.n	23fc7ee <_ZN15Adafruit_SPITFT8endWriteEv+0x14>
        digitalWrite(_cs, HIGH);
 23fc7e6:	2101      	movs	r1, #1
 23fc7e8:	b280      	uxth	r0, r0
 23fc7ea:	f002 fd38 	bl	23ff25e <digitalWrite>
    SPI_END_TRANSACTION();
 23fc7ee:	4620      	mov	r0, r4
 23fc7f0:	f7ff ffec 	bl	23fc7cc <_ZN15Adafruit_SPITFT19SPI_END_TRANSACTIONEv>
}
 23fc7f4:	bd10      	pop	{r4, pc}

023fc7f6 <_ZN15Adafruit_SPITFT13TFT_WR_STROBEEv>:

/*!
    @brief  Set the WR line LOW, then HIGH. Used for parallel-connected
            interfaces when writing data.
*/
inline void Adafruit_SPITFT::TFT_WR_STROBE(void) {
 23fc7f6:	b510      	push	{r4, lr}
 23fc7f8:	4604      	mov	r4, r0
 #else  // !HAS_PORT_SET_CLR
    *tft8.wrPort   &= tft8.wrPinMaskClr;
    *tft8.wrPort   |= tft8.wrPinMaskSet;
 #endif // end !HAS_PORT_SET_CLR
#else  // !USE_FAST_PINIO
    digitalWrite(tft8._wr, LOW);
 23fc7fa:	f990 0025 	ldrsb.w	r0, [r0, #37]	; 0x25
 23fc7fe:	2100      	movs	r1, #0
 23fc800:	b280      	uxth	r0, r0
 23fc802:	f002 fd2c 	bl	23ff25e <digitalWrite>
    digitalWrite(tft8._wr, HIGH);
 23fc806:	f994 0025 	ldrsb.w	r0, [r4, #37]	; 0x25
 23fc80a:	2101      	movs	r1, #1
#endif // end !USE_FAST_PINIO
}
 23fc80c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    digitalWrite(tft8._wr, HIGH);
 23fc810:	b280      	uxth	r0, r0
 23fc812:	f002 bd24 	b.w	23ff25e <digitalWrite>

023fc816 <_ZN15Adafruit_SPITFT10writeColorEtm>:
void Adafruit_SPITFT::writeColor(uint16_t color, uint32_t len) {
 23fc816:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 23fc81a:	4605      	mov	r5, r0
 23fc81c:	460e      	mov	r6, r1
    if(!len) return; // Avoid 0-byte transfers
 23fc81e:	4614      	mov	r4, r2
 23fc820:	b17a      	cbz	r2, 23fc842 <_ZN15Adafruit_SPITFT10writeColorEtm+0x2c>
    if(connection == TFT_HARD_SPI) {
 23fc822:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
    uint8_t hi = color >> 8, lo = color;
 23fc826:	ea4f 2811 	mov.w	r8, r1, lsr #8
 23fc82a:	b2cf      	uxtb	r7, r1
    if(connection == TFT_HARD_SPI) {
 23fc82c:	b95b      	cbnz	r3, 23fc846 <_ZN15Adafruit_SPITFT10writeColorEtm+0x30>
            hwspi._spi->transfer(hi);
 23fc82e:	4641      	mov	r1, r8
 23fc830:	6a68      	ldr	r0, [r5, #36]	; 0x24
 23fc832:	f002 f949 	bl	23feac8 <_ZN8SPIClass8transferEh>
            hwspi._spi->transfer(lo);
 23fc836:	4639      	mov	r1, r7
 23fc838:	6a68      	ldr	r0, [r5, #36]	; 0x24
 23fc83a:	f002 f945 	bl	23feac8 <_ZN8SPIClass8transferEh>
        while(len--) {
 23fc83e:	3c01      	subs	r4, #1
 23fc840:	d1f5      	bne.n	23fc82e <_ZN15Adafruit_SPITFT10writeColorEtm+0x18>
}
 23fc842:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    } else if(connection == TFT_SOFT_SPI) {
 23fc846:	2b01      	cmp	r3, #1
 23fc848:	d11e      	bne.n	23fc888 <_ZN15Adafruit_SPITFT10writeColorEtm+0x72>
            for(uint16_t bit=0, x=color; bit<16; bit++) {
 23fc84a:	46b0      	mov	r8, r6
 23fc84c:	2710      	movs	r7, #16
                if(x & 0x8000) SPI_MOSI_HIGH();
 23fc84e:	f418 4f00 	tst.w	r8, #32768	; 0x8000
 23fc852:	f995 0024 	ldrsb.w	r0, [r5, #36]	; 0x24
 23fc856:	d014      	beq.n	23fc882 <_ZN15Adafruit_SPITFT10writeColorEtm+0x6c>
 23fc858:	f7ff feab 	bl	23fc5b2 <_ZN15Adafruit_SPITFT13SPI_MOSI_HIGHEv.isra.0>
                SPI_SCK_HIGH();
 23fc85c:	f995 0026 	ldrsb.w	r0, [r5, #38]	; 0x26
            for(uint16_t bit=0, x=color; bit<16; bit++) {
 23fc860:	3f01      	subs	r7, #1
                SPI_SCK_HIGH();
 23fc862:	f7ff fe9e 	bl	23fc5a2 <_ZN15Adafruit_SPITFT12SPI_SCK_HIGHEv.isra.0>
                x <<= 1;
 23fc866:	ea4f 0848 	mov.w	r8, r8, lsl #1
                SPI_SCK_LOW();
 23fc86a:	f995 0026 	ldrsb.w	r0, [r5, #38]	; 0x26
            for(uint16_t bit=0, x=color; bit<16; bit++) {
 23fc86e:	b2bf      	uxth	r7, r7
                SPI_SCK_LOW();
 23fc870:	f7ff fe93 	bl	23fc59a <_ZN15Adafruit_SPITFT11SPI_SCK_LOWEv.isra.0>
                x <<= 1;
 23fc874:	fa1f f888 	uxth.w	r8, r8
            for(uint16_t bit=0, x=color; bit<16; bit++) {
 23fc878:	2f00      	cmp	r7, #0
 23fc87a:	d1e8      	bne.n	23fc84e <_ZN15Adafruit_SPITFT10writeColorEtm+0x38>
        while(len--) {
 23fc87c:	3c01      	subs	r4, #1
 23fc87e:	d1e4      	bne.n	23fc84a <_ZN15Adafruit_SPITFT10writeColorEtm+0x34>
 23fc880:	e7df      	b.n	23fc842 <_ZN15Adafruit_SPITFT10writeColorEtm+0x2c>
                else           SPI_MOSI_LOW();
 23fc882:	f7ff fe92 	bl	23fc5aa <_ZN15Adafruit_SPITFT12SPI_MOSI_LOWEv.isra.0>
 23fc886:	e7e9      	b.n	23fc85c <_ZN15Adafruit_SPITFT10writeColorEtm+0x46>
        if(hi == lo) {
 23fc888:	45b8      	cmp	r8, r7
 23fc88a:	d0da      	beq.n	23fc842 <_ZN15Adafruit_SPITFT10writeColorEtm+0x2c>
                TFT_WR_STROBE();
 23fc88c:	4628      	mov	r0, r5
 23fc88e:	f7ff ffb2 	bl	23fc7f6 <_ZN15Adafruit_SPITFT13TFT_WR_STROBEEv>
            while(len--) {
 23fc892:	3c01      	subs	r4, #1
 23fc894:	d1fa      	bne.n	23fc88c <_ZN15Adafruit_SPITFT10writeColorEtm+0x76>
 23fc896:	e7d4      	b.n	23fc842 <_ZN15Adafruit_SPITFT10writeColorEtm+0x2c>

023fc898 <_ZN15Adafruit_SPITFT23writeFillRectPreclippedEsssst>:
  int16_t w, int16_t h, uint16_t color) {
 23fc898:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 23fc89c:	461d      	mov	r5, r3
 23fc89e:	4604      	mov	r4, r0
    setAddrWindow(x, y, w, h);
 23fc8a0:	f8bd 3020 	ldrh.w	r3, [sp, #32]
  int16_t w, int16_t h, uint16_t color) {
 23fc8a4:	f8bd 6024 	ldrh.w	r6, [sp, #36]	; 0x24
    setAddrWindow(x, y, w, h);
 23fc8a8:	9300      	str	r3, [sp, #0]
 23fc8aa:	6803      	ldr	r3, [r0, #0]
 23fc8ac:	b292      	uxth	r2, r2
 23fc8ae:	f8d3 8054 	ldr.w	r8, [r3, #84]	; 0x54
 23fc8b2:	b289      	uxth	r1, r1
 23fc8b4:	b2ab      	uxth	r3, r5
  int16_t w, int16_t h, uint16_t color) {
 23fc8b6:	f9bd 7020 	ldrsh.w	r7, [sp, #32]
    setAddrWindow(x, y, w, h);
 23fc8ba:	47c0      	blx	r8
    writeColor(color, (uint32_t)w * h);
 23fc8bc:	4631      	mov	r1, r6
 23fc8be:	4620      	mov	r0, r4
 23fc8c0:	fb05 f207 	mul.w	r2, r5, r7
}
 23fc8c4:	b002      	add	sp, #8
 23fc8c6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    writeColor(color, (uint32_t)w * h);
 23fc8ca:	f7ff bfa4 	b.w	23fc816 <_ZN15Adafruit_SPITFT10writeColorEtm>

023fc8ce <_ZN15Adafruit_SPITFT13writeFillRectEsssst>:
  int16_t w, int16_t h, uint16_t color) {
 23fc8ce:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 23fc8d2:	f9bd 4020 	ldrsh.w	r4, [sp, #32]
    if(w && h) {                            // Nonzero width and height?
 23fc8d6:	2b00      	cmp	r3, #0
 23fc8d8:	d046      	beq.n	23fc968 <_ZN15Adafruit_SPITFT13writeFillRectEsssst+0x9a>
 23fc8da:	2c00      	cmp	r4, #0
 23fc8dc:	d044      	beq.n	23fc968 <_ZN15Adafruit_SPITFT13writeFillRectEsssst+0x9a>
        if(w < 0) {                         // If negative width...
 23fc8de:	2b00      	cmp	r3, #0
 23fc8e0:	da05      	bge.n	23fc8ee <_ZN15Adafruit_SPITFT13writeFillRectEsssst+0x20>
            x +=  w + 1;                    //   Move X to left edge
 23fc8e2:	3101      	adds	r1, #1
 23fc8e4:	fa11 f183 	uxtah	r1, r1, r3
            w  = -w;                        //   Use positive width
 23fc8e8:	425b      	negs	r3, r3
            x +=  w + 1;                    //   Move X to left edge
 23fc8ea:	b209      	sxth	r1, r1
            w  = -w;                        //   Use positive width
 23fc8ec:	b21b      	sxth	r3, r3
        if(x < _width) {                    // Not off right
 23fc8ee:	f9b0 600c 	ldrsh.w	r6, [r0, #12]
 23fc8f2:	428e      	cmp	r6, r1
 23fc8f4:	dd38      	ble.n	23fc968 <_ZN15Adafruit_SPITFT13writeFillRectEsssst+0x9a>
            if(h < 0) {                     // If negative height...
 23fc8f6:	2c00      	cmp	r4, #0
 23fc8f8:	da05      	bge.n	23fc906 <_ZN15Adafruit_SPITFT13writeFillRectEsssst+0x38>
                y +=  h + 1;                //   Move Y to top edge
 23fc8fa:	3201      	adds	r2, #1
 23fc8fc:	fa12 f284 	uxtah	r2, r2, r4
                h  = -h;                    //   Use positive height
 23fc900:	4264      	negs	r4, r4
                y +=  h + 1;                //   Move Y to top edge
 23fc902:	b212      	sxth	r2, r2
                h  = -h;                    //   Use positive height
 23fc904:	b224      	sxth	r4, r4
            if(y < _height) {               // Not off bottom
 23fc906:	f9b0 500e 	ldrsh.w	r5, [r0, #14]
 23fc90a:	4295      	cmp	r5, r2
 23fc90c:	dd2c      	ble.n	23fc968 <_ZN15Adafruit_SPITFT13writeFillRectEsssst+0x9a>
                int16_t x2 = x + w - 1;
 23fc90e:	eb01 0803 	add.w	r8, r1, r3
 23fc912:	fa1f f888 	uxth.w	r8, r8
 23fc916:	f108 3cff 	add.w	ip, r8, #4294967295	; 0xffffffff
 23fc91a:	fa0f fc8c 	sxth.w	ip, ip
                if(x2 >= 0) {               // Not off left
 23fc91e:	f1bc 0f00 	cmp.w	ip, #0
 23fc922:	db21      	blt.n	23fc968 <_ZN15Adafruit_SPITFT13writeFillRectEsssst+0x9a>
                    int16_t y2 = y + h - 1;
 23fc924:	eb02 0e04 	add.w	lr, r2, r4
 23fc928:	fa1f fe8e 	uxth.w	lr, lr
 23fc92c:	f10e 37ff 	add.w	r7, lr, #4294967295	; 0xffffffff
 23fc930:	b23f      	sxth	r7, r7
                    if(y2 >= 0) {           // Not off top
 23fc932:	2f00      	cmp	r7, #0
 23fc934:	db18      	blt.n	23fc968 <_ZN15Adafruit_SPITFT13writeFillRectEsssst+0x9a>
                        if(x  <  0)       { x = 0; w = x2 + 1; } // Clip left
 23fc936:	2900      	cmp	r1, #0
 23fc938:	bfbc      	itt	lt
 23fc93a:	2100      	movlt	r1, #0
 23fc93c:	fa0f f388 	sxthlt.w	r3, r8
                        if(y  <  0)       { y = 0; h = y2 + 1; } // Clip top
 23fc940:	2a00      	cmp	r2, #0
 23fc942:	bfbc      	itt	lt
 23fc944:	2200      	movlt	r2, #0
 23fc946:	fa0f f48e 	sxthlt.w	r4, lr
                        if(x2 >= _width)  { w = _width  - x;   } // Clip right
 23fc94a:	4566      	cmp	r6, ip
 23fc94c:	bfdc      	itt	le
 23fc94e:	1a73      	suble	r3, r6, r1
 23fc950:	b21b      	sxthle	r3, r3
                        if(y2 >= _height) { h = _height - y;   } // Clip bottom
 23fc952:	42bd      	cmp	r5, r7
 23fc954:	bfd8      	it	le
 23fc956:	1aac      	suble	r4, r5, r2
                        writeFillRectPreclipped(x, y, w, h, color);
 23fc958:	f8bd 5024 	ldrh.w	r5, [sp, #36]	; 0x24
                        if(y2 >= _height) { h = _height - y;   } // Clip bottom
 23fc95c:	bfd8      	it	le
 23fc95e:	b224      	sxthle	r4, r4
                        writeFillRectPreclipped(x, y, w, h, color);
 23fc960:	e9cd 4500 	strd	r4, r5, [sp]
 23fc964:	f7ff ff98 	bl	23fc898 <_ZN15Adafruit_SPITFT23writeFillRectPreclippedEsssst>
}
 23fc968:	b002      	add	sp, #8
 23fc96a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

023fc96e <_ZN15Adafruit_SPITFT8fillRectEsssst>:
  uint16_t color) {
 23fc96e:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 23fc972:	4680      	mov	r8, r0
 23fc974:	460c      	mov	r4, r1
 23fc976:	4615      	mov	r5, r2
    if(w && h) {                            // Nonzero width and height?
 23fc978:	461e      	mov	r6, r3
  uint16_t color) {
 23fc97a:	f9bd 7028 	ldrsh.w	r7, [sp, #40]	; 0x28
 23fc97e:	f8bd 902c 	ldrh.w	r9, [sp, #44]	; 0x2c
    if(w && h) {                            // Nonzero width and height?
 23fc982:	2b00      	cmp	r3, #0
 23fc984:	d052      	beq.n	23fca2c <_ZN15Adafruit_SPITFT8fillRectEsssst+0xbe>
 23fc986:	2f00      	cmp	r7, #0
 23fc988:	d050      	beq.n	23fca2c <_ZN15Adafruit_SPITFT8fillRectEsssst+0xbe>
        if(w < 0) {                         // If negative width...
 23fc98a:	2b00      	cmp	r3, #0
 23fc98c:	da05      	bge.n	23fc99a <_ZN15Adafruit_SPITFT8fillRectEsssst+0x2c>
            x +=  w + 1;                    //   Move X to left edge
 23fc98e:	3401      	adds	r4, #1
 23fc990:	fa14 f483 	uxtah	r4, r4, r3
            w  = -w;                        //   Use positive width
 23fc994:	425e      	negs	r6, r3
            x +=  w + 1;                    //   Move X to left edge
 23fc996:	b224      	sxth	r4, r4
            w  = -w;                        //   Use positive width
 23fc998:	b236      	sxth	r6, r6
        if(x < _width) {                    // Not off right
 23fc99a:	f9b8 300c 	ldrsh.w	r3, [r8, #12]
 23fc99e:	42a3      	cmp	r3, r4
 23fc9a0:	dd44      	ble.n	23fca2c <_ZN15Adafruit_SPITFT8fillRectEsssst+0xbe>
            if(h < 0) {                     // If negative height...
 23fc9a2:	2f00      	cmp	r7, #0
 23fc9a4:	da05      	bge.n	23fc9b2 <_ZN15Adafruit_SPITFT8fillRectEsssst+0x44>
                y +=  h + 1;                //   Move Y to top edge
 23fc9a6:	3501      	adds	r5, #1
 23fc9a8:	fa15 f587 	uxtah	r5, r5, r7
                h  = -h;                    //   Use positive height
 23fc9ac:	427f      	negs	r7, r7
                y +=  h + 1;                //   Move Y to top edge
 23fc9ae:	b22d      	sxth	r5, r5
                h  = -h;                    //   Use positive height
 23fc9b0:	b23f      	sxth	r7, r7
            if(y < _height) {               // Not off bottom
 23fc9b2:	f9b8 200e 	ldrsh.w	r2, [r8, #14]
 23fc9b6:	42aa      	cmp	r2, r5
 23fc9b8:	dd38      	ble.n	23fca2c <_ZN15Adafruit_SPITFT8fillRectEsssst+0xbe>
                int16_t x2 = x + w - 1;
 23fc9ba:	eb04 0e06 	add.w	lr, r4, r6
 23fc9be:	fa1f fe8e 	uxth.w	lr, lr
 23fc9c2:	f10e 30ff 	add.w	r0, lr, #4294967295	; 0xffffffff
 23fc9c6:	b200      	sxth	r0, r0
                if(x2 >= 0) {               // Not off left
 23fc9c8:	2800      	cmp	r0, #0
 23fc9ca:	db2f      	blt.n	23fca2c <_ZN15Adafruit_SPITFT8fillRectEsssst+0xbe>
                    int16_t y2 = y + h - 1;
 23fc9cc:	eb05 0c07 	add.w	ip, r5, r7
 23fc9d0:	fa1f fc8c 	uxth.w	ip, ip
 23fc9d4:	f10c 31ff 	add.w	r1, ip, #4294967295	; 0xffffffff
 23fc9d8:	b209      	sxth	r1, r1
                    if(y2 >= 0) {           // Not off top
 23fc9da:	2900      	cmp	r1, #0
 23fc9dc:	db26      	blt.n	23fca2c <_ZN15Adafruit_SPITFT8fillRectEsssst+0xbe>
                        if(x  <  0)       { x = 0; w = x2 + 1; } // Clip left
 23fc9de:	2c00      	cmp	r4, #0
 23fc9e0:	bfbc      	itt	lt
 23fc9e2:	2400      	movlt	r4, #0
 23fc9e4:	fa0f f68e 	sxthlt.w	r6, lr
                        if(y  <  0)       { y = 0; h = y2 + 1; } // Clip top
 23fc9e8:	2d00      	cmp	r5, #0
 23fc9ea:	bfbc      	itt	lt
 23fc9ec:	2500      	movlt	r5, #0
 23fc9ee:	fa0f f78c 	sxthlt.w	r7, ip
                        if(x2 >= _width)  { w = _width  - x;   } // Clip right
 23fc9f2:	4283      	cmp	r3, r0
 23fc9f4:	bfdc      	itt	le
 23fc9f6:	1b1b      	suble	r3, r3, r4
 23fc9f8:	b21e      	sxthle	r6, r3
                        if(y2 >= _height) { h = _height - y;   } // Clip bottom
 23fc9fa:	428a      	cmp	r2, r1
                        startWrite();
 23fc9fc:	f8d8 3000 	ldr.w	r3, [r8]
                        if(y2 >= _height) { h = _height - y;   } // Clip bottom
 23fca00:	bfdc      	itt	le
 23fca02:	1b52      	suble	r2, r2, r5
 23fca04:	b217      	sxthle	r7, r2
                        startWrite();
 23fca06:	4640      	mov	r0, r8
 23fca08:	695b      	ldr	r3, [r3, #20]
 23fca0a:	4798      	blx	r3
                        writeFillRectPreclipped(x, y, w, h, color);
 23fca0c:	4633      	mov	r3, r6
 23fca0e:	4640      	mov	r0, r8
 23fca10:	462a      	mov	r2, r5
 23fca12:	4621      	mov	r1, r4
 23fca14:	e9cd 7900 	strd	r7, r9, [sp]
 23fca18:	f7ff ff3e 	bl	23fc898 <_ZN15Adafruit_SPITFT23writeFillRectPreclippedEsssst>
                        endWrite();
 23fca1c:	4640      	mov	r0, r8
 23fca1e:	f8d8 3000 	ldr.w	r3, [r8]
 23fca22:	6adb      	ldr	r3, [r3, #44]	; 0x2c
}
 23fca24:	b003      	add	sp, #12
 23fca26:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
                        endWrite();
 23fca2a:	4718      	bx	r3
}
 23fca2c:	b003      	add	sp, #12
 23fca2e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

023fca32 <_ZN15Adafruit_SPITFT13drawFastHLineEssst>:
  uint16_t color) {
 23fca32:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
    if((y >= 0) && (y < _height) && w) { // Y on screen, nonzero width
 23fca36:	1e17      	subs	r7, r2, #0
  uint16_t color) {
 23fca38:	4606      	mov	r6, r0
 23fca3a:	460c      	mov	r4, r1
 23fca3c:	461d      	mov	r5, r3
 23fca3e:	f8bd 8020 	ldrh.w	r8, [sp, #32]
    if((y >= 0) && (y < _height) && w) { // Y on screen, nonzero width
 23fca42:	db33      	blt.n	23fcaac <_ZN15Adafruit_SPITFT13drawFastHLineEssst+0x7a>
 23fca44:	f9b0 300e 	ldrsh.w	r3, [r0, #14]
 23fca48:	42bb      	cmp	r3, r7
 23fca4a:	dd2f      	ble.n	23fcaac <_ZN15Adafruit_SPITFT13drawFastHLineEssst+0x7a>
 23fca4c:	2d00      	cmp	r5, #0
 23fca4e:	d02d      	beq.n	23fcaac <_ZN15Adafruit_SPITFT13drawFastHLineEssst+0x7a>
        if(w < 0) {                      // If negative width...
 23fca50:	da05      	bge.n	23fca5e <_ZN15Adafruit_SPITFT13drawFastHLineEssst+0x2c>
            x +=  w + 1;                 //   Move X to left edge
 23fca52:	3401      	adds	r4, #1
 23fca54:	fa14 f485 	uxtah	r4, r4, r5
            w  = -w;                     //   Use positive width
 23fca58:	426d      	negs	r5, r5
            x +=  w + 1;                 //   Move X to left edge
 23fca5a:	b224      	sxth	r4, r4
            w  = -w;                     //   Use positive width
 23fca5c:	b22d      	sxth	r5, r5
        if(x < _width) {                 // Not off right
 23fca5e:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 23fca62:	42a3      	cmp	r3, r4
 23fca64:	dd22      	ble.n	23fcaac <_ZN15Adafruit_SPITFT13drawFastHLineEssst+0x7a>
            int16_t x2 = x + w - 1;
 23fca66:	1961      	adds	r1, r4, r5
 23fca68:	b289      	uxth	r1, r1
 23fca6a:	1e4a      	subs	r2, r1, #1
 23fca6c:	b212      	sxth	r2, r2
            if(x2 >= 0) {                // Not off left
 23fca6e:	2a00      	cmp	r2, #0
 23fca70:	db1c      	blt.n	23fcaac <_ZN15Adafruit_SPITFT13drawFastHLineEssst+0x7a>
                if(x  <  0)       { x = 0; w = x2 + 1; } // Clip left
 23fca72:	2c00      	cmp	r4, #0
 23fca74:	bfbc      	itt	lt
 23fca76:	2400      	movlt	r4, #0
 23fca78:	b20d      	sxthlt	r5, r1
                if(x2 >= _width)  { w = _width  - x;   } // Clip right
 23fca7a:	4293      	cmp	r3, r2
 23fca7c:	bfdc      	itt	le
 23fca7e:	1b1b      	suble	r3, r3, r4
 23fca80:	b21d      	sxthle	r5, r3
                startWrite();
 23fca82:	6833      	ldr	r3, [r6, #0]
 23fca84:	4630      	mov	r0, r6
 23fca86:	695b      	ldr	r3, [r3, #20]
 23fca88:	4798      	blx	r3
                writeFillRectPreclipped(x, y, w, 1, color);
 23fca8a:	2301      	movs	r3, #1
 23fca8c:	4630      	mov	r0, r6
 23fca8e:	9300      	str	r3, [sp, #0]
 23fca90:	463a      	mov	r2, r7
 23fca92:	462b      	mov	r3, r5
 23fca94:	4621      	mov	r1, r4
 23fca96:	f8cd 8004 	str.w	r8, [sp, #4]
 23fca9a:	f7ff fefd 	bl	23fc898 <_ZN15Adafruit_SPITFT23writeFillRectPreclippedEsssst>
                endWrite();
 23fca9e:	4630      	mov	r0, r6
 23fcaa0:	6833      	ldr	r3, [r6, #0]
 23fcaa2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
}
 23fcaa4:	b002      	add	sp, #8
 23fcaa6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
                endWrite();
 23fcaaa:	4718      	bx	r3
}
 23fcaac:	b002      	add	sp, #8
 23fcaae:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

023fcab2 <_ZN15Adafruit_SPITFT13drawFastVLineEssst>:
  uint16_t color) {
 23fcab2:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
    if((x >= 0) && (x < _width) && h) { // X on screen, nonzero height
 23fcab6:	1e0f      	subs	r7, r1, #0
  uint16_t color) {
 23fcab8:	4606      	mov	r6, r0
 23fcaba:	4614      	mov	r4, r2
 23fcabc:	461d      	mov	r5, r3
 23fcabe:	f8bd 8020 	ldrh.w	r8, [sp, #32]
    if((x >= 0) && (x < _width) && h) { // X on screen, nonzero height
 23fcac2:	db31      	blt.n	23fcb28 <_ZN15Adafruit_SPITFT13drawFastVLineEssst+0x76>
 23fcac4:	f9b0 300c 	ldrsh.w	r3, [r0, #12]
 23fcac8:	42bb      	cmp	r3, r7
 23fcaca:	dd2d      	ble.n	23fcb28 <_ZN15Adafruit_SPITFT13drawFastVLineEssst+0x76>
 23fcacc:	2d00      	cmp	r5, #0
 23fcace:	d02b      	beq.n	23fcb28 <_ZN15Adafruit_SPITFT13drawFastVLineEssst+0x76>
        if(h < 0) {                     // If negative height...
 23fcad0:	da05      	bge.n	23fcade <_ZN15Adafruit_SPITFT13drawFastVLineEssst+0x2c>
            y +=  h + 1;                //   Move Y to top edge
 23fcad2:	3401      	adds	r4, #1
 23fcad4:	fa14 f485 	uxtah	r4, r4, r5
            h  = -h;                    //   Use positive height
 23fcad8:	426d      	negs	r5, r5
            y +=  h + 1;                //   Move Y to top edge
 23fcada:	b224      	sxth	r4, r4
            h  = -h;                    //   Use positive height
 23fcadc:	b22d      	sxth	r5, r5
        if(y < _height) {               // Not off bottom
 23fcade:	f9b6 300e 	ldrsh.w	r3, [r6, #14]
 23fcae2:	42a3      	cmp	r3, r4
 23fcae4:	dd20      	ble.n	23fcb28 <_ZN15Adafruit_SPITFT13drawFastVLineEssst+0x76>
            int16_t y2 = y + h - 1;
 23fcae6:	1961      	adds	r1, r4, r5
 23fcae8:	b289      	uxth	r1, r1
 23fcaea:	1e4a      	subs	r2, r1, #1
 23fcaec:	b212      	sxth	r2, r2
            if(y2 >= 0) {               // Not off top
 23fcaee:	2a00      	cmp	r2, #0
 23fcaf0:	db1a      	blt.n	23fcb28 <_ZN15Adafruit_SPITFT13drawFastVLineEssst+0x76>
                if(y  <  0)       { y = 0; h = y2 + 1; } // Clip top
 23fcaf2:	2c00      	cmp	r4, #0
 23fcaf4:	bfbc      	itt	lt
 23fcaf6:	2400      	movlt	r4, #0
 23fcaf8:	b20d      	sxthlt	r5, r1
                if(y2 >= _height) { h = _height - y;   } // Clip bottom
 23fcafa:	4293      	cmp	r3, r2
 23fcafc:	bfdc      	itt	le
 23fcafe:	1b1b      	suble	r3, r3, r4
 23fcb00:	b21d      	sxthle	r5, r3
                startWrite();
 23fcb02:	6833      	ldr	r3, [r6, #0]
 23fcb04:	4630      	mov	r0, r6
 23fcb06:	695b      	ldr	r3, [r3, #20]
 23fcb08:	4798      	blx	r3
                writeFillRectPreclipped(x, y, 1, h, color);
 23fcb0a:	4630      	mov	r0, r6
 23fcb0c:	2301      	movs	r3, #1
 23fcb0e:	4622      	mov	r2, r4
 23fcb10:	4639      	mov	r1, r7
 23fcb12:	e9cd 5800 	strd	r5, r8, [sp]
 23fcb16:	f7ff febf 	bl	23fc898 <_ZN15Adafruit_SPITFT23writeFillRectPreclippedEsssst>
                endWrite();
 23fcb1a:	4630      	mov	r0, r6
 23fcb1c:	6833      	ldr	r3, [r6, #0]
 23fcb1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
}
 23fcb20:	b002      	add	sp, #8
 23fcb22:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
                endWrite();
 23fcb26:	4718      	bx	r3
}
 23fcb28:	b002      	add	sp, #8
 23fcb2a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

023fcb2e <_ZN15Adafruit_SPITFT14writeFastHLineEssst>:
    if((y >= 0) && (y < _height) && w) { // Y on screen, nonzero width
 23fcb2e:	2a00      	cmp	r2, #0
  uint16_t color) {
 23fcb30:	b573      	push	{r0, r1, r4, r5, r6, lr}
    if((y >= 0) && (y < _height) && w) { // Y on screen, nonzero width
 23fcb32:	db26      	blt.n	23fcb82 <_ZN15Adafruit_SPITFT14writeFastHLineEssst+0x54>
 23fcb34:	f9b0 400e 	ldrsh.w	r4, [r0, #14]
 23fcb38:	4294      	cmp	r4, r2
 23fcb3a:	dd22      	ble.n	23fcb82 <_ZN15Adafruit_SPITFT14writeFastHLineEssst+0x54>
 23fcb3c:	2b00      	cmp	r3, #0
 23fcb3e:	d020      	beq.n	23fcb82 <_ZN15Adafruit_SPITFT14writeFastHLineEssst+0x54>
        if(w < 0) {                      // If negative width...
 23fcb40:	da05      	bge.n	23fcb4e <_ZN15Adafruit_SPITFT14writeFastHLineEssst+0x20>
            x +=  w + 1;                 //   Move X to left edge
 23fcb42:	3101      	adds	r1, #1
 23fcb44:	fa11 f183 	uxtah	r1, r1, r3
            w  = -w;                     //   Use positive width
 23fcb48:	425b      	negs	r3, r3
            x +=  w + 1;                 //   Move X to left edge
 23fcb4a:	b209      	sxth	r1, r1
            w  = -w;                     //   Use positive width
 23fcb4c:	b21b      	sxth	r3, r3
        if(x < _width) {                 // Not off right
 23fcb4e:	f9b0 400c 	ldrsh.w	r4, [r0, #12]
 23fcb52:	428c      	cmp	r4, r1
 23fcb54:	dd15      	ble.n	23fcb82 <_ZN15Adafruit_SPITFT14writeFastHLineEssst+0x54>
            int16_t x2 = x + w - 1;
 23fcb56:	18ce      	adds	r6, r1, r3
 23fcb58:	b2b6      	uxth	r6, r6
 23fcb5a:	1e75      	subs	r5, r6, #1
 23fcb5c:	b22d      	sxth	r5, r5
            if(x2 >= 0) {                // Not off left
 23fcb5e:	2d00      	cmp	r5, #0
 23fcb60:	db0f      	blt.n	23fcb82 <_ZN15Adafruit_SPITFT14writeFastHLineEssst+0x54>
                if(x  <  0)       { x = 0; w = x2 + 1; } // Clip left
 23fcb62:	2900      	cmp	r1, #0
 23fcb64:	bfbc      	itt	lt
 23fcb66:	2100      	movlt	r1, #0
 23fcb68:	b233      	sxthlt	r3, r6
                if(x2 >= _width)  { w = _width  - x;   } // Clip right
 23fcb6a:	42ac      	cmp	r4, r5
 23fcb6c:	bfd8      	it	le
 23fcb6e:	1a63      	suble	r3, r4, r1
                writeFillRectPreclipped(x, y, w, 1, color);
 23fcb70:	f8bd 4018 	ldrh.w	r4, [sp, #24]
                if(x2 >= _width)  { w = _width  - x;   } // Clip right
 23fcb74:	bfd8      	it	le
 23fcb76:	b21b      	sxthle	r3, r3
                writeFillRectPreclipped(x, y, w, 1, color);
 23fcb78:	9401      	str	r4, [sp, #4]
 23fcb7a:	2401      	movs	r4, #1
 23fcb7c:	9400      	str	r4, [sp, #0]
 23fcb7e:	f7ff fe8b 	bl	23fc898 <_ZN15Adafruit_SPITFT23writeFillRectPreclippedEsssst>
}
 23fcb82:	b002      	add	sp, #8
 23fcb84:	bd70      	pop	{r4, r5, r6, pc}

023fcb86 <_ZN15Adafruit_SPITFT14writeFastVLineEssst>:
  uint16_t color) {
 23fcb86:	b573      	push	{r0, r1, r4, r5, r6, lr}
    if((x >= 0) && (x < _width) && h) { // X on screen, nonzero height
 23fcb88:	2900      	cmp	r1, #0
 23fcb8a:	db26      	blt.n	23fcbda <_ZN15Adafruit_SPITFT14writeFastVLineEssst+0x54>
 23fcb8c:	f9b0 400c 	ldrsh.w	r4, [r0, #12]
 23fcb90:	428c      	cmp	r4, r1
 23fcb92:	dd22      	ble.n	23fcbda <_ZN15Adafruit_SPITFT14writeFastVLineEssst+0x54>
 23fcb94:	2b00      	cmp	r3, #0
 23fcb96:	d020      	beq.n	23fcbda <_ZN15Adafruit_SPITFT14writeFastVLineEssst+0x54>
        if(h < 0) {                     // If negative height...
 23fcb98:	da05      	bge.n	23fcba6 <_ZN15Adafruit_SPITFT14writeFastVLineEssst+0x20>
            y +=  h + 1;                //   Move Y to top edge
 23fcb9a:	3201      	adds	r2, #1
 23fcb9c:	fa12 f283 	uxtah	r2, r2, r3
            h  = -h;                    //   Use positive height
 23fcba0:	425b      	negs	r3, r3
            y +=  h + 1;                //   Move Y to top edge
 23fcba2:	b212      	sxth	r2, r2
            h  = -h;                    //   Use positive height
 23fcba4:	b21b      	sxth	r3, r3
        if(y < _height) {               // Not off bottom
 23fcba6:	f9b0 400e 	ldrsh.w	r4, [r0, #14]
 23fcbaa:	4294      	cmp	r4, r2
 23fcbac:	dd15      	ble.n	23fcbda <_ZN15Adafruit_SPITFT14writeFastVLineEssst+0x54>
            int16_t y2 = y + h - 1;
 23fcbae:	18d6      	adds	r6, r2, r3
 23fcbb0:	b2b6      	uxth	r6, r6
 23fcbb2:	1e75      	subs	r5, r6, #1
 23fcbb4:	b22d      	sxth	r5, r5
            if(y2 >= 0) {               // Not off top
 23fcbb6:	2d00      	cmp	r5, #0
 23fcbb8:	db0f      	blt.n	23fcbda <_ZN15Adafruit_SPITFT14writeFastVLineEssst+0x54>
                if(y  <  0)       { y = 0; h = y2 + 1; } // Clip top
 23fcbba:	2a00      	cmp	r2, #0
 23fcbbc:	bfbc      	itt	lt
 23fcbbe:	2200      	movlt	r2, #0
 23fcbc0:	b233      	sxthlt	r3, r6
                if(y2 >= _height) { h = _height - y;   } // Clip bottom
 23fcbc2:	42ac      	cmp	r4, r5
 23fcbc4:	bfd8      	it	le
 23fcbc6:	1aa3      	suble	r3, r4, r2
                writeFillRectPreclipped(x, y, 1, h, color);
 23fcbc8:	f8bd 4018 	ldrh.w	r4, [sp, #24]
                if(y2 >= _height) { h = _height - y;   } // Clip bottom
 23fcbcc:	bfd8      	it	le
 23fcbce:	b21b      	sxthle	r3, r3
                writeFillRectPreclipped(x, y, 1, h, color);
 23fcbd0:	e9cd 3400 	strd	r3, r4, [sp]
 23fcbd4:	2301      	movs	r3, #1
 23fcbd6:	f7ff fe5f 	bl	23fc898 <_ZN15Adafruit_SPITFT23writeFillRectPreclippedEsssst>
}
 23fcbda:	b002      	add	sp, #8
 23fcbdc:	bd70      	pop	{r4, r5, r6, pc}

023fcbde <_ZN15Adafruit_SPITFT8spiWriteEh>:
void Adafruit_SPITFT::spiWrite(uint8_t b) {
 23fcbde:	b570      	push	{r4, r5, r6, lr}
    if(connection == TFT_HARD_SPI) {
 23fcbe0:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
void Adafruit_SPITFT::spiWrite(uint8_t b) {
 23fcbe4:	4604      	mov	r4, r0
 23fcbe6:	460d      	mov	r5, r1
    if(connection == TFT_HARD_SPI) {
 23fcbe8:	b923      	cbnz	r3, 23fcbf4 <_ZN15Adafruit_SPITFT8spiWriteEh+0x16>
}
 23fcbea:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        hwspi._spi->transfer(b);
 23fcbee:	6a40      	ldr	r0, [r0, #36]	; 0x24
 23fcbf0:	f001 bf6a 	b.w	23feac8 <_ZN8SPIClass8transferEh>
    } else if(connection == TFT_SOFT_SPI) {
 23fcbf4:	2b01      	cmp	r3, #1
 23fcbf6:	d118      	bne.n	23fcc2a <_ZN15Adafruit_SPITFT8spiWriteEh+0x4c>
 23fcbf8:	2608      	movs	r6, #8
            if(b & 0x80) SPI_MOSI_HIGH();
 23fcbfa:	062b      	lsls	r3, r5, #24
 23fcbfc:	f994 0024 	ldrsb.w	r0, [r4, #36]	; 0x24
 23fcc00:	d510      	bpl.n	23fcc24 <_ZN15Adafruit_SPITFT8spiWriteEh+0x46>
 23fcc02:	f7ff fcd6 	bl	23fc5b2 <_ZN15Adafruit_SPITFT13SPI_MOSI_HIGHEv.isra.0>
            SPI_SCK_HIGH();
 23fcc06:	f994 0026 	ldrsb.w	r0, [r4, #38]	; 0x26
 23fcc0a:	f7ff fcca 	bl	23fc5a2 <_ZN15Adafruit_SPITFT12SPI_SCK_HIGHEv.isra.0>
        for(uint8_t bit=0; bit<8; bit++) {
 23fcc0e:	3e01      	subs	r6, #1
            SPI_SCK_LOW();
 23fcc10:	f994 0026 	ldrsb.w	r0, [r4, #38]	; 0x26
 23fcc14:	f7ff fcc1 	bl	23fc59a <_ZN15Adafruit_SPITFT11SPI_SCK_LOWEv.isra.0>
            b <<= 1;
 23fcc18:	006d      	lsls	r5, r5, #1
        for(uint8_t bit=0; bit<8; bit++) {
 23fcc1a:	f016 06ff 	ands.w	r6, r6, #255	; 0xff
            b <<= 1;
 23fcc1e:	b2ed      	uxtb	r5, r5
        for(uint8_t bit=0; bit<8; bit++) {
 23fcc20:	d1eb      	bne.n	23fcbfa <_ZN15Adafruit_SPITFT8spiWriteEh+0x1c>
}
 23fcc22:	bd70      	pop	{r4, r5, r6, pc}
            else         SPI_MOSI_LOW();
 23fcc24:	f7ff fcc1 	bl	23fc5aa <_ZN15Adafruit_SPITFT12SPI_MOSI_LOWEv.isra.0>
 23fcc28:	e7ed      	b.n	23fcc06 <_ZN15Adafruit_SPITFT8spiWriteEh+0x28>
        TFT_WR_STROBE();
 23fcc2a:	f7ff fde4 	bl	23fc7f6 <_ZN15Adafruit_SPITFT13TFT_WR_STROBEEv>
}
 23fcc2e:	e7f8      	b.n	23fcc22 <_ZN15Adafruit_SPITFT8spiWriteEh+0x44>

023fcc30 <_ZN15Adafruit_SPITFT12writeCommandEh>:
void Adafruit_SPITFT::writeCommand(uint8_t cmd) {
 23fcc30:	b513      	push	{r0, r1, r4, lr}
 23fcc32:	4604      	mov	r4, r0
    SPI_DC_LOW();
 23fcc34:	f990 003f 	ldrsb.w	r0, [r0, #63]	; 0x3f
void Adafruit_SPITFT::writeCommand(uint8_t cmd) {
 23fcc38:	9101      	str	r1, [sp, #4]
    SPI_DC_LOW();
 23fcc3a:	f7ff fcbe 	bl	23fc5ba <_ZN15Adafruit_SPITFT10SPI_DC_LOWEv.isra.0>
    spiWrite(cmd);
 23fcc3e:	4620      	mov	r0, r4
 23fcc40:	9901      	ldr	r1, [sp, #4]
 23fcc42:	f7ff ffcc 	bl	23fcbde <_ZN15Adafruit_SPITFT8spiWriteEh>
    SPI_DC_HIGH();
 23fcc46:	f994 003f 	ldrsb.w	r0, [r4, #63]	; 0x3f
}
 23fcc4a:	b002      	add	sp, #8
 23fcc4c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    SPI_DC_HIGH();
 23fcc50:	f7ff bcb7 	b.w	23fc5c2 <_ZN15Adafruit_SPITFT11SPI_DC_HIGHEv.isra.0>

023fcc54 <_ZN15Adafruit_SPITFT13invertDisplayEb>:
void Adafruit_SPITFT::invertDisplay(bool i) {
 23fcc54:	b570      	push	{r4, r5, r6, lr}
 23fcc56:	460d      	mov	r5, r1
    startWrite();
 23fcc58:	6803      	ldr	r3, [r0, #0]
void Adafruit_SPITFT::invertDisplay(bool i) {
 23fcc5a:	4604      	mov	r4, r0
    startWrite();
 23fcc5c:	695b      	ldr	r3, [r3, #20]
 23fcc5e:	4798      	blx	r3
    writeCommand(i ? invertOnCommand : invertOffCommand);
 23fcc60:	b155      	cbz	r5, 23fcc78 <_ZN15Adafruit_SPITFT13invertDisplayEb+0x24>
 23fcc62:	f894 1044 	ldrb.w	r1, [r4, #68]	; 0x44
 23fcc66:	4620      	mov	r0, r4
 23fcc68:	f7ff ffe2 	bl	23fcc30 <_ZN15Adafruit_SPITFT12writeCommandEh>
    endWrite();
 23fcc6c:	6823      	ldr	r3, [r4, #0]
 23fcc6e:	4620      	mov	r0, r4
}
 23fcc70:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    endWrite();
 23fcc74:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 23fcc76:	4718      	bx	r3
    writeCommand(i ? invertOnCommand : invertOffCommand);
 23fcc78:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 23fcc7c:	e7f3      	b.n	23fcc66 <_ZN15Adafruit_SPITFT13invertDisplayEb+0x12>

023fcc7e <_ZN15Adafruit_SPITFT11SPI_WRITE16Et>:
void Adafruit_SPITFT::SPI_WRITE16(uint16_t w) {
 23fcc7e:	b570      	push	{r4, r5, r6, lr}
    if(connection == TFT_HARD_SPI) {
 23fcc80:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
void Adafruit_SPITFT::SPI_WRITE16(uint16_t w) {
 23fcc84:	4605      	mov	r5, r0
 23fcc86:	460c      	mov	r4, r1
    if(connection == TFT_HARD_SPI) {
 23fcc88:	b94b      	cbnz	r3, 23fcc9e <_ZN15Adafruit_SPITFT11SPI_WRITE16Et+0x20>
        hwspi._spi->transfer(w >> 8);
 23fcc8a:	0a09      	lsrs	r1, r1, #8
 23fcc8c:	6a40      	ldr	r0, [r0, #36]	; 0x24
 23fcc8e:	f001 ff1b 	bl	23feac8 <_ZN8SPIClass8transferEh>
        hwspi._spi->transfer(w);
 23fcc92:	6a68      	ldr	r0, [r5, #36]	; 0x24
 23fcc94:	b2e1      	uxtb	r1, r4
}
 23fcc96:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        hwspi._spi->transfer(w);
 23fcc9a:	f001 bf15 	b.w	23feac8 <_ZN8SPIClass8transferEh>
    } else if(connection == TFT_SOFT_SPI) {
 23fcc9e:	2b01      	cmp	r3, #1
 23fcca0:	d118      	bne.n	23fccd4 <_ZN15Adafruit_SPITFT11SPI_WRITE16Et+0x56>
 23fcca2:	2610      	movs	r6, #16
            if(w & 0x8000) SPI_MOSI_HIGH();
 23fcca4:	0423      	lsls	r3, r4, #16
 23fcca6:	f995 0024 	ldrsb.w	r0, [r5, #36]	; 0x24
 23fccaa:	d510      	bpl.n	23fccce <_ZN15Adafruit_SPITFT11SPI_WRITE16Et+0x50>
 23fccac:	f7ff fc81 	bl	23fc5b2 <_ZN15Adafruit_SPITFT13SPI_MOSI_HIGHEv.isra.0>
            SPI_SCK_HIGH();
 23fccb0:	f995 0026 	ldrsb.w	r0, [r5, #38]	; 0x26
 23fccb4:	f7ff fc75 	bl	23fc5a2 <_ZN15Adafruit_SPITFT12SPI_SCK_HIGHEv.isra.0>
        for(uint8_t bit=0; bit<16; bit++) {
 23fccb8:	3e01      	subs	r6, #1
            SPI_SCK_LOW();
 23fccba:	f995 0026 	ldrsb.w	r0, [r5, #38]	; 0x26
 23fccbe:	f7ff fc6c 	bl	23fc59a <_ZN15Adafruit_SPITFT11SPI_SCK_LOWEv.isra.0>
            w <<= 1;
 23fccc2:	0064      	lsls	r4, r4, #1
        for(uint8_t bit=0; bit<16; bit++) {
 23fccc4:	f016 06ff 	ands.w	r6, r6, #255	; 0xff
            w <<= 1;
 23fccc8:	b2a4      	uxth	r4, r4
        for(uint8_t bit=0; bit<16; bit++) {
 23fccca:	d1eb      	bne.n	23fcca4 <_ZN15Adafruit_SPITFT11SPI_WRITE16Et+0x26>
}
 23fcccc:	bd70      	pop	{r4, r5, r6, pc}
            else           SPI_MOSI_LOW();
 23fccce:	f7ff fc6c 	bl	23fc5aa <_ZN15Adafruit_SPITFT12SPI_MOSI_LOWEv.isra.0>
 23fccd2:	e7ed      	b.n	23fccb0 <_ZN15Adafruit_SPITFT11SPI_WRITE16Et+0x32>
        TFT_WR_STROBE();
 23fccd4:	f7ff fd8f 	bl	23fc7f6 <_ZN15Adafruit_SPITFT13TFT_WR_STROBEEv>
}
 23fccd8:	e7f8      	b.n	23fcccc <_ZN15Adafruit_SPITFT11SPI_WRITE16Et+0x4e>

023fccda <_ZN15Adafruit_SPITFT10writePixelEsst>:
void Adafruit_SPITFT::writePixel(int16_t x, int16_t y, uint16_t color) {
 23fccda:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    if((x >= 0) && (x < _width) && (y >= 0) && (y < _height)) {
 23fccdc:	2900      	cmp	r1, #0
void Adafruit_SPITFT::writePixel(int16_t x, int16_t y, uint16_t color) {
 23fccde:	4604      	mov	r4, r0
 23fcce0:	461e      	mov	r6, r3
    if((x >= 0) && (x < _width) && (y >= 0) && (y < _height)) {
 23fcce2:	db17      	blt.n	23fcd14 <_ZN15Adafruit_SPITFT10writePixelEsst+0x3a>
 23fcce4:	f9b0 300c 	ldrsh.w	r3, [r0, #12]
 23fcce8:	428b      	cmp	r3, r1
 23fccea:	dd13      	ble.n	23fcd14 <_ZN15Adafruit_SPITFT10writePixelEsst+0x3a>
 23fccec:	2a00      	cmp	r2, #0
 23fccee:	db11      	blt.n	23fcd14 <_ZN15Adafruit_SPITFT10writePixelEsst+0x3a>
 23fccf0:	f9b0 300e 	ldrsh.w	r3, [r0, #14]
 23fccf4:	4293      	cmp	r3, r2
 23fccf6:	dd0d      	ble.n	23fcd14 <_ZN15Adafruit_SPITFT10writePixelEsst+0x3a>
        setAddrWindow(x, y, 1, 1);
 23fccf8:	2301      	movs	r3, #1
 23fccfa:	6805      	ldr	r5, [r0, #0]
 23fccfc:	9300      	str	r3, [sp, #0]
 23fccfe:	6d6f      	ldr	r7, [r5, #84]	; 0x54
 23fcd00:	b292      	uxth	r2, r2
 23fcd02:	b289      	uxth	r1, r1
 23fcd04:	47b8      	blx	r7
        SPI_WRITE16(color);
 23fcd06:	4631      	mov	r1, r6
 23fcd08:	4620      	mov	r0, r4
}
 23fcd0a:	b003      	add	sp, #12
 23fcd0c:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
        SPI_WRITE16(color);
 23fcd10:	f7ff bfb5 	b.w	23fcc7e <_ZN15Adafruit_SPITFT11SPI_WRITE16Et>
}
 23fcd14:	b003      	add	sp, #12
 23fcd16:	bdf0      	pop	{r4, r5, r6, r7, pc}

023fcd18 <_ZN15Adafruit_SPITFT9drawPixelEsst>:
void Adafruit_SPITFT::drawPixel(int16_t x, int16_t y, uint16_t color) {
 23fcd18:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
    if((x >= 0) && (x < _width) && (y >= 0) && (y < _height)) {
 23fcd1c:	1e0d      	subs	r5, r1, #0
void Adafruit_SPITFT::drawPixel(int16_t x, int16_t y, uint16_t color) {
 23fcd1e:	4604      	mov	r4, r0
 23fcd20:	4616      	mov	r6, r2
 23fcd22:	461f      	mov	r7, r3
    if((x >= 0) && (x < _width) && (y >= 0) && (y < _height)) {
 23fcd24:	db20      	blt.n	23fcd68 <_ZN15Adafruit_SPITFT9drawPixelEsst+0x50>
 23fcd26:	f9b0 300c 	ldrsh.w	r3, [r0, #12]
 23fcd2a:	42ab      	cmp	r3, r5
 23fcd2c:	dd1c      	ble.n	23fcd68 <_ZN15Adafruit_SPITFT9drawPixelEsst+0x50>
 23fcd2e:	2a00      	cmp	r2, #0
 23fcd30:	db1a      	blt.n	23fcd68 <_ZN15Adafruit_SPITFT9drawPixelEsst+0x50>
 23fcd32:	f9b0 300e 	ldrsh.w	r3, [r0, #14]
 23fcd36:	4293      	cmp	r3, r2
 23fcd38:	dd16      	ble.n	23fcd68 <_ZN15Adafruit_SPITFT9drawPixelEsst+0x50>
        startWrite();
 23fcd3a:	6803      	ldr	r3, [r0, #0]
 23fcd3c:	695b      	ldr	r3, [r3, #20]
 23fcd3e:	4798      	blx	r3
        setAddrWindow(x, y, 1, 1);
 23fcd40:	2301      	movs	r3, #1
 23fcd42:	6822      	ldr	r2, [r4, #0]
 23fcd44:	9300      	str	r3, [sp, #0]
 23fcd46:	4620      	mov	r0, r4
 23fcd48:	f8d2 8054 	ldr.w	r8, [r2, #84]	; 0x54
 23fcd4c:	b2a9      	uxth	r1, r5
 23fcd4e:	b2b2      	uxth	r2, r6
 23fcd50:	47c0      	blx	r8
        SPI_WRITE16(color);
 23fcd52:	4620      	mov	r0, r4
 23fcd54:	4639      	mov	r1, r7
 23fcd56:	f7ff ff92 	bl	23fcc7e <_ZN15Adafruit_SPITFT11SPI_WRITE16Et>
        endWrite();
 23fcd5a:	4620      	mov	r0, r4
 23fcd5c:	6823      	ldr	r3, [r4, #0]
 23fcd5e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
}
 23fcd60:	b002      	add	sp, #8
 23fcd62:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
        endWrite();
 23fcd66:	4718      	bx	r3
}
 23fcd68:	b002      	add	sp, #8
 23fcd6a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

023fcd6e <_ZN15Adafruit_SPITFT11SPI_WRITE32Em>:
void Adafruit_SPITFT::SPI_WRITE32(uint32_t l) {
 23fcd6e:	b570      	push	{r4, r5, r6, lr}
    if(connection == TFT_HARD_SPI) {
 23fcd70:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
void Adafruit_SPITFT::SPI_WRITE32(uint32_t l) {
 23fcd74:	4604      	mov	r4, r0
 23fcd76:	460d      	mov	r5, r1
    if(connection == TFT_HARD_SPI) {
 23fcd78:	b99b      	cbnz	r3, 23fcda2 <_ZN15Adafruit_SPITFT11SPI_WRITE32Em+0x34>
        hwspi._spi->transfer(l >> 24);
 23fcd7a:	0e09      	lsrs	r1, r1, #24
 23fcd7c:	6a40      	ldr	r0, [r0, #36]	; 0x24
 23fcd7e:	f001 fea3 	bl	23feac8 <_ZN8SPIClass8transferEh>
        hwspi._spi->transfer(l >> 16);
 23fcd82:	f3c5 4107 	ubfx	r1, r5, #16, #8
 23fcd86:	6a60      	ldr	r0, [r4, #36]	; 0x24
 23fcd88:	f001 fe9e 	bl	23feac8 <_ZN8SPIClass8transferEh>
        hwspi._spi->transfer(l >> 8);
 23fcd8c:	f3c5 2107 	ubfx	r1, r5, #8, #8
 23fcd90:	6a60      	ldr	r0, [r4, #36]	; 0x24
 23fcd92:	f001 fe99 	bl	23feac8 <_ZN8SPIClass8transferEh>
        hwspi._spi->transfer(l);
 23fcd96:	6a60      	ldr	r0, [r4, #36]	; 0x24
 23fcd98:	b2e9      	uxtb	r1, r5
}
 23fcd9a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        hwspi._spi->transfer(l);
 23fcd9e:	f001 be93 	b.w	23feac8 <_ZN8SPIClass8transferEh>
    } else if(connection == TFT_SOFT_SPI) {
 23fcda2:	2b01      	cmp	r3, #1
 23fcda4:	d118      	bne.n	23fcdd8 <_ZN15Adafruit_SPITFT11SPI_WRITE32Em+0x6a>
 23fcda6:	2620      	movs	r6, #32
            if(l & 0x80000000) SPI_MOSI_HIGH();
 23fcda8:	2d00      	cmp	r5, #0
 23fcdaa:	f994 0024 	ldrsb.w	r0, [r4, #36]	; 0x24
 23fcdae:	da10      	bge.n	23fcdd2 <_ZN15Adafruit_SPITFT11SPI_WRITE32Em+0x64>
 23fcdb0:	f7ff fbff 	bl	23fc5b2 <_ZN15Adafruit_SPITFT13SPI_MOSI_HIGHEv.isra.0>
            SPI_SCK_HIGH();
 23fcdb4:	f994 0026 	ldrsb.w	r0, [r4, #38]	; 0x26
 23fcdb8:	f7ff fbf3 	bl	23fc5a2 <_ZN15Adafruit_SPITFT12SPI_SCK_HIGHEv.isra.0>
        for(uint8_t bit=0; bit<32; bit++) {
 23fcdbc:	3e01      	subs	r6, #1
            SPI_SCK_LOW();
 23fcdbe:	f994 0026 	ldrsb.w	r0, [r4, #38]	; 0x26
 23fcdc2:	f7ff fbea 	bl	23fc59a <_ZN15Adafruit_SPITFT11SPI_SCK_LOWEv.isra.0>
        for(uint8_t bit=0; bit<32; bit++) {
 23fcdc6:	f016 06ff 	ands.w	r6, r6, #255	; 0xff
            l <<= 1;
 23fcdca:	ea4f 0545 	mov.w	r5, r5, lsl #1
        for(uint8_t bit=0; bit<32; bit++) {
 23fcdce:	d1eb      	bne.n	23fcda8 <_ZN15Adafruit_SPITFT11SPI_WRITE32Em+0x3a>
}
 23fcdd0:	bd70      	pop	{r4, r5, r6, pc}
            else               SPI_MOSI_LOW();
 23fcdd2:	f7ff fbea 	bl	23fc5aa <_ZN15Adafruit_SPITFT12SPI_MOSI_LOWEv.isra.0>
 23fcdd6:	e7ed      	b.n	23fcdb4 <_ZN15Adafruit_SPITFT11SPI_WRITE32Em+0x46>
        TFT_WR_STROBE();
 23fcdd8:	f7ff fd0d 	bl	23fc7f6 <_ZN15Adafruit_SPITFT13TFT_WR_STROBEEv>
}
 23fcddc:	e7f8      	b.n	23fcdd0 <_ZN15Adafruit_SPITFT11SPI_WRITE32Em+0x62>

023fcdde <_ZN15Adafruit_ST7789D1Ev>:

//#include "Adafruit_ST77xx.h"
#include "../lib/Adafruit_ST7735_RK/src/Adafruit_ST77xx.h"

/// Subclass of ST77XX type display for ST7789 TFT Driver
class Adafruit_ST7789 : public Adafruit_ST77xx {
 23fcdde:	4770      	bx	lr

023fcde0 <_ZN15Adafruit_ST778911setRotationEh>:
*/
/**************************************************************************/
void Adafruit_ST7789::setRotation(uint8_t m) {
  uint8_t madctl = 0;

  rotation = m & 3; // can't be higher than 3
 23fcde0:	f001 0103 	and.w	r1, r1, #3

  switch (rotation) {
 23fcde4:	2902      	cmp	r1, #2
void Adafruit_ST7789::setRotation(uint8_t m) {
 23fcde6:	b570      	push	{r4, r5, r6, lr}
 23fcde8:	4604      	mov	r4, r0
  rotation = m & 3; // can't be higher than 3
 23fcdea:	7681      	strb	r1, [r0, #26]
  switch (rotation) {
 23fcdec:	d024      	beq.n	23fce38 <_ZN15Adafruit_ST778911setRotationEh+0x58>
 23fcdee:	2903      	cmp	r1, #3
 23fcdf0:	d025      	beq.n	23fce3e <_ZN15Adafruit_ST778911setRotationEh+0x5e>
 23fcdf2:	2901      	cmp	r1, #1
   case 0:
     madctl  = ST77XX_MADCTL_MX | ST77XX_MADCTL_MY | ST77XX_MADCTL_RGB;
 23fcdf4:	bf14      	ite	ne
 23fcdf6:	25c0      	movne	r5, #192	; 0xc0
     _xstart = _colstart;
     _ystart = _rowstart;
     break;
   case 1:
     madctl  = ST77XX_MADCTL_MY | ST77XX_MADCTL_MV | ST77XX_MADCTL_RGB;
 23fcdf8:	25a0      	moveq	r5, #160	; 0xa0
 23fcdfa:	f890 304c 	ldrb.w	r3, [r0, #76]	; 0x4c
 23fcdfe:	f890 204d 	ldrb.w	r2, [r0, #77]	; 0x4d
     _xstart = _colstart;
 23fce02:	bf19      	ittee	ne
 23fce04:	f8a0 3040 	strhne.w	r3, [r0, #64]	; 0x40
     _ystart = _rowstart;
 23fce08:	f8a0 2042 	strhne.w	r2, [r0, #66]	; 0x42
     _xstart = _rowstart;
 23fce0c:	f8a0 2040 	strheq.w	r2, [r0, #64]	; 0x40
     _ystart = _colstart;
 23fce10:	f8a0 3042 	strheq.w	r3, [r0, #66]	; 0x42
     madctl  = ST77XX_MADCTL_MX | ST77XX_MADCTL_MV | ST77XX_MADCTL_RGB;
     _xstart = 0;
     _ystart = 0;
     break;
  }
  startWrite();
 23fce14:	6823      	ldr	r3, [r4, #0]
 23fce16:	4620      	mov	r0, r4
 23fce18:	695b      	ldr	r3, [r3, #20]
 23fce1a:	4798      	blx	r3
  writeCommand(ST77XX_MADCTL);
 23fce1c:	4620      	mov	r0, r4
 23fce1e:	2136      	movs	r1, #54	; 0x36
 23fce20:	f7ff ff06 	bl	23fcc30 <_ZN15Adafruit_SPITFT12writeCommandEh>
  spiWrite(madctl);
 23fce24:	4620      	mov	r0, r4
 23fce26:	4629      	mov	r1, r5
 23fce28:	f7ff fed9 	bl	23fcbde <_ZN15Adafruit_SPITFT8spiWriteEh>
  endWrite();
 23fce2c:	6823      	ldr	r3, [r4, #0]
 23fce2e:	4620      	mov	r0, r4
}
 23fce30:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  endWrite();
 23fce34:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 23fce36:	4718      	bx	r3
     _xstart = 0;
 23fce38:	2500      	movs	r5, #0
 23fce3a:	6405      	str	r5, [r0, #64]	; 0x40
     break;
 23fce3c:	e7ea      	b.n	23fce14 <_ZN15Adafruit_ST778911setRotationEh+0x34>
     _xstart = 0;
 23fce3e:	2300      	movs	r3, #0
     madctl  = ST77XX_MADCTL_MX | ST77XX_MADCTL_MV | ST77XX_MADCTL_RGB;
 23fce40:	2560      	movs	r5, #96	; 0x60
     _xstart = 0;
 23fce42:	6403      	str	r3, [r0, #64]	; 0x40
     break;
 23fce44:	e7e6      	b.n	23fce14 <_ZN15Adafruit_ST778911setRotationEh+0x34>

023fce46 <_ZN15Adafruit_ST7789D0Ev>:
 23fce46:	b510      	push	{r4, lr}
 23fce48:	4604      	mov	r4, r0
 23fce4a:	2150      	movs	r1, #80	; 0x50
 23fce4c:	f7fe fbd9 	bl	23fb602 <_ZdlPvj>
 23fce50:	4620      	mov	r0, r4
 23fce52:	bd10      	pop	{r4, pc}

023fce54 <_ZN15Adafruit_ST7789C1Eaaa>:
Adafruit_ST7789::Adafruit_ST7789(int8_t cs, int8_t dc, int8_t rst) :
 23fce54:	b510      	push	{r4, lr}
 23fce56:	4604      	mov	r4, r0
  Adafruit_ST77xx(cs, dc, rst) {
 23fce58:	f000 f89a 	bl	23fcf90 <_ZN15Adafruit_ST77xxC1Eaaa>
 23fce5c:	4b01      	ldr	r3, [pc, #4]	; (23fce64 <_ZN15Adafruit_ST7789C1Eaaa+0x10>)
}
 23fce5e:	4620      	mov	r0, r4
  Adafruit_ST77xx(cs, dc, rst) {
 23fce60:	6023      	str	r3, [r4, #0]
}
 23fce62:	bd10      	pop	{r4, pc}
 23fce64:	023ffc98 	.word	0x023ffc98

023fce68 <_ZN15Adafruit_ST77894initEtt>:
void Adafruit_ST7789::init(uint16_t width, uint16_t height) {
 23fce68:	b570      	push	{r4, r5, r6, lr}
 23fce6a:	4604      	mov	r4, r0
  _colstart = ST7789_240x240_XSTART;
 23fce6c:	2500      	movs	r5, #0
  commonInit(NULL);
 23fce6e:	2100      	movs	r1, #0
 23fce70:	f000 f8e5 	bl	23fd03e <_ZN15Adafruit_ST77xx10commonInitEPKh>
  _width    = 240;
 23fce74:	4b07      	ldr	r3, [pc, #28]	; (23fce94 <_ZN15Adafruit_ST77894initEtt+0x2c>)
  displayInit(cmd_240x240);
 23fce76:	4620      	mov	r0, r4
  _width    = 240;
 23fce78:	60e3      	str	r3, [r4, #12]
  displayInit(cmd_240x240);
 23fce7a:	4907      	ldr	r1, [pc, #28]	; (23fce98 <_ZN15Adafruit_ST77894initEtt+0x30>)
  _colstart = ST7789_240x240_XSTART;
 23fce7c:	f8a4 504c 	strh.w	r5, [r4, #76]	; 0x4c
  displayInit(cmd_240x240);
 23fce80:	f000 f89a 	bl	23fcfb8 <_ZN15Adafruit_ST77xx11displayInitEPKh>
  setRotation(0);
 23fce84:	6823      	ldr	r3, [r4, #0]
 23fce86:	4629      	mov	r1, r5
 23fce88:	4620      	mov	r0, r4
}
 23fce8a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  setRotation(0);
 23fce8e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 23fce90:	4718      	bx	r3
 23fce92:	bf00      	nop
 23fce94:	014000f0 	.word	0x014000f0
 23fce98:	023ffc6c 	.word	0x023ffc6c

023fce9c <_ZN15Adafruit_ST77xxD1Ev>:
#define ST77XX_MAGENTA    0xF81F
#define ST77XX_YELLOW     0xFFE0
#define	ST77XX_ORANGE     0xFC00

/// Subclass of SPITFT for ST77xx displays (lots in common!)
class Adafruit_ST77xx : public Adafruit_SPITFT {
 23fce9c:	4770      	bx	lr

023fce9e <_ZN15Adafruit_ST77xx11setRotationEh>:
/*!
    @brief  Set origin of (0,0) and orientation of TFT display
    @param  m  The index for rotation, from 0-3 inclusive
*/
/**************************************************************************/
void Adafruit_ST77xx::setRotation(uint8_t m) {
 23fce9e:	b570      	push	{r4, r5, r6, lr}
  uint8_t madctl = 0;

  rotation = m % 4; // can't be higher than 3
 23fcea0:	f001 0103 	and.w	r1, r1, #3

  switch(rotation) {
 23fcea4:	2902      	cmp	r1, #2
void Adafruit_ST77xx::setRotation(uint8_t m) {
 23fcea6:	4604      	mov	r4, r0
   case 0:
     madctl  = ST77XX_MADCTL_MX | ST77XX_MADCTL_MY | ST77XX_MADCTL_RGB;
     _xstart = _colstart;
 23fcea8:	f890 204c 	ldrb.w	r2, [r0, #76]	; 0x4c
     _ystart = _rowstart;
 23fceac:	f890 304d 	ldrb.w	r3, [r0, #77]	; 0x4d
  rotation = m % 4; // can't be higher than 3
 23fceb0:	7681      	strb	r1, [r0, #26]
  switch(rotation) {
 23fceb2:	d020      	beq.n	23fcef6 <_ZN15Adafruit_ST77xx11setRotationEh+0x58>
 23fceb4:	2903      	cmp	r1, #3
 23fceb6:	d024      	beq.n	23fcf02 <_ZN15Adafruit_ST77xx11setRotationEh+0x64>
 23fceb8:	2901      	cmp	r1, #1
     madctl  = ST77XX_MADCTL_MX | ST77XX_MADCTL_MY | ST77XX_MADCTL_RGB;
 23fceba:	bf17      	itett	ne
 23fcebc:	25c0      	movne	r5, #192	; 0xc0
     break;
   case 1:
     madctl  = ST77XX_MADCTL_MY | ST77XX_MADCTL_MV | ST77XX_MADCTL_RGB;
 23fcebe:	25a0      	moveq	r5, #160	; 0xa0
     _xstart = _colstart;
 23fcec0:	f8a0 2040 	strhne.w	r2, [r0, #64]	; 0x40
     _ystart = _rowstart;
 23fcec4:	f8a0 3042 	strhne.w	r3, [r0, #66]	; 0x42
     _ystart = _colstart;
 23fcec8:	bf04      	itt	eq
 23fceca:	f8a0 2042 	strheq.w	r2, [r0, #66]	; 0x42
     _xstart = _rowstart;
 23fcece:	f8a0 3040 	strheq.w	r3, [r0, #64]	; 0x40
     madctl  = ST77XX_MADCTL_MX | ST77XX_MADCTL_MV | ST77XX_MADCTL_RGB;
     _ystart = _colstart;
     _xstart = _rowstart;
     break;
  }
  startWrite();
 23fced2:	6823      	ldr	r3, [r4, #0]
 23fced4:	4620      	mov	r0, r4
 23fced6:	695b      	ldr	r3, [r3, #20]
 23fced8:	4798      	blx	r3
  writeCommand(ST77XX_MADCTL);
 23fceda:	4620      	mov	r0, r4
 23fcedc:	2136      	movs	r1, #54	; 0x36
 23fcede:	f7ff fea7 	bl	23fcc30 <_ZN15Adafruit_SPITFT12writeCommandEh>
  spiWrite(madctl);
 23fcee2:	4620      	mov	r0, r4
 23fcee4:	4629      	mov	r1, r5
 23fcee6:	f7ff fe7a 	bl	23fcbde <_ZN15Adafruit_SPITFT8spiWriteEh>
  endWrite();
 23fceea:	6823      	ldr	r3, [r4, #0]
 23fceec:	4620      	mov	r0, r4
}
 23fceee:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  endWrite();
 23fcef2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 23fcef4:	4718      	bx	r3
     madctl  = ST77XX_MADCTL_RGB;
 23fcef6:	2500      	movs	r5, #0
     _xstart = _colstart;
 23fcef8:	f8a0 2040 	strh.w	r2, [r0, #64]	; 0x40
     _ystart = _rowstart;
 23fcefc:	f8a0 3042 	strh.w	r3, [r0, #66]	; 0x42
     break;
 23fcf00:	e7e7      	b.n	23fced2 <_ZN15Adafruit_ST77xx11setRotationEh+0x34>
     madctl  = ST77XX_MADCTL_MX | ST77XX_MADCTL_MV | ST77XX_MADCTL_RGB;
 23fcf02:	2560      	movs	r5, #96	; 0x60
     _ystart = _colstart;
 23fcf04:	f8a0 2042 	strh.w	r2, [r0, #66]	; 0x42
     _xstart = _rowstart;
 23fcf08:	f8a0 3040 	strh.w	r3, [r0, #64]	; 0x40
     break;
 23fcf0c:	e7e1      	b.n	23fced2 <_ZN15Adafruit_ST77xx11setRotationEh+0x34>
	...

023fcf10 <_ZN15Adafruit_ST77xx5beginEm>:
    freq = SPI_DEFAULT_FREQ;
 23fcf10:	4b06      	ldr	r3, [pc, #24]	; (23fcf2c <_ZN15Adafruit_ST77xx5beginEm+0x1c>)
  initSPI(freq);
 23fcf12:	2200      	movs	r2, #0
    freq = SPI_DEFAULT_FREQ;
 23fcf14:	2900      	cmp	r1, #0
 23fcf16:	bf18      	it	ne
 23fcf18:	460b      	movne	r3, r1
  invertOnCommand  = ST77XX_INVON;
 23fcf1a:	f242 0121 	movw	r1, #8225	; 0x2021
  _freq = freq;
 23fcf1e:	6483      	str	r3, [r0, #72]	; 0x48
  invertOnCommand  = ST77XX_INVON;
 23fcf20:	f8a0 1044 	strh.w	r1, [r0, #68]	; 0x44
  initSPI(freq);
 23fcf24:	4619      	mov	r1, r3
 23fcf26:	f7ff bba3 	b.w	23fc670 <_ZN15Adafruit_SPITFT7initSPIEmh>
 23fcf2a:	bf00      	nop
 23fcf2c:	00f42400 	.word	0x00f42400

023fcf30 <_ZN15Adafruit_ST77xx13setAddrWindowEtttt>:
  uint16_t h) {
 23fcf30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 23fcf32:	4604      	mov	r4, r0
  x += _xstart;
 23fcf34:	f8b0 7040 	ldrh.w	r7, [r0, #64]	; 0x40
  y += _ystart;
 23fcf38:	f8b0 5042 	ldrh.w	r5, [r0, #66]	; 0x42
  uint16_t h) {
 23fcf3c:	f8bd 6018 	ldrh.w	r6, [sp, #24]
  x += _xstart;
 23fcf40:	4439      	add	r1, r7
  uint32_t xa = ((uint32_t)x << 16) | (x+w-1);
 23fcf42:	fa13 f781 	uxtah	r7, r3, r1
  y += _ystart;
 23fcf46:	442a      	add	r2, r5
  uint32_t ya = ((uint32_t)y << 16) | (y+h-1); 
 23fcf48:	fa16 f582 	uxtah	r5, r6, r2
  uint32_t xa = ((uint32_t)x << 16) | (x+w-1);
 23fcf4c:	3f01      	subs	r7, #1
 23fcf4e:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
  uint32_t ya = ((uint32_t)y << 16) | (y+h-1); 
 23fcf52:	3d01      	subs	r5, #1
  writeCommand(ST77XX_CASET); // Column addr set
 23fcf54:	212a      	movs	r1, #42	; 0x2a
  uint32_t ya = ((uint32_t)y << 16) | (y+h-1); 
 23fcf56:	ea45 4502 	orr.w	r5, r5, r2, lsl #16
  writeCommand(ST77XX_CASET); // Column addr set
 23fcf5a:	f7ff fe69 	bl	23fcc30 <_ZN15Adafruit_SPITFT12writeCommandEh>
  SPI_WRITE32(xa);
 23fcf5e:	4639      	mov	r1, r7
 23fcf60:	4620      	mov	r0, r4
 23fcf62:	f7ff ff04 	bl	23fcd6e <_ZN15Adafruit_SPITFT11SPI_WRITE32Em>
  writeCommand(ST77XX_RASET); // Row addr set
 23fcf66:	4620      	mov	r0, r4
 23fcf68:	212b      	movs	r1, #43	; 0x2b
 23fcf6a:	f7ff fe61 	bl	23fcc30 <_ZN15Adafruit_SPITFT12writeCommandEh>
  SPI_WRITE32(ya);
 23fcf6e:	4629      	mov	r1, r5
 23fcf70:	4620      	mov	r0, r4
 23fcf72:	f7ff fefc 	bl	23fcd6e <_ZN15Adafruit_SPITFT11SPI_WRITE32Em>
  writeCommand(ST77XX_RAMWR); // write to RAM
 23fcf76:	4620      	mov	r0, r4
}
 23fcf78:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
  writeCommand(ST77XX_RAMWR); // write to RAM
 23fcf7c:	212c      	movs	r1, #44	; 0x2c
 23fcf7e:	f7ff be57 	b.w	23fcc30 <_ZN15Adafruit_SPITFT12writeCommandEh>

023fcf82 <_ZN15Adafruit_ST77xxD0Ev>:
 23fcf82:	b510      	push	{r4, lr}
 23fcf84:	4604      	mov	r4, r0
 23fcf86:	2150      	movs	r1, #80	; 0x50
 23fcf88:	f7fe fb3b 	bl	23fb602 <_ZdlPvj>
 23fcf8c:	4620      	mov	r0, r4
 23fcf8e:	bd10      	pop	{r4, pc}

023fcf90 <_ZN15Adafruit_ST77xxC1Eaaa>:
Adafruit_ST77xx::Adafruit_ST77xx(int8_t cs, int8_t dc, int8_t rst) :
 23fcf90:	b513      	push	{r0, r1, r4, lr}
 23fcf92:	4604      	mov	r4, r0
  Adafruit_SPITFT(ST7735_TFTWIDTH_128, ST7735_TFTHEIGHT_160, cs, dc, rst) {
 23fcf94:	e9cd 2300 	strd	r2, r3, [sp]
 23fcf98:	460b      	mov	r3, r1
 23fcf9a:	22a0      	movs	r2, #160	; 0xa0
 23fcf9c:	2180      	movs	r1, #128	; 0x80
 23fcf9e:	f7ff fb37 	bl	23fc610 <_ZN15Adafruit_SPITFTC1Ettaaa>
 23fcfa2:	4b04      	ldr	r3, [pc, #16]	; (23fcfb4 <_ZN15Adafruit_ST77xxC1Eaaa+0x24>)
}
 23fcfa4:	4620      	mov	r0, r4
  Adafruit_SPITFT(ST7735_TFTWIDTH_128, ST7735_TFTHEIGHT_160, cs, dc, rst) {
 23fcfa6:	6023      	str	r3, [r4, #0]
 23fcfa8:	2300      	movs	r3, #0
 23fcfaa:	f8a4 304c 	strh.w	r3, [r4, #76]	; 0x4c
}
 23fcfae:	b002      	add	sp, #8
 23fcfb0:	bd10      	pop	{r4, pc}
 23fcfb2:	bf00      	nop
 23fcfb4:	023ffcf8 	.word	0x023ffcf8

023fcfb8 <_ZN15Adafruit_ST77xx11displayInitEPKh>:
void Adafruit_ST77xx::displayInit(const uint8_t *addr) {
 23fcfb8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 23fcfbc:	460c      	mov	r4, r1
  startWrite();
 23fcfbe:	6803      	ldr	r3, [r0, #0]
void Adafruit_ST77xx::displayInit(const uint8_t *addr) {
 23fcfc0:	4605      	mov	r5, r0
  startWrite();
 23fcfc2:	695b      	ldr	r3, [r3, #20]
 23fcfc4:	4798      	blx	r3
  numCommands = pgm_read_byte(addr++);   // Number of commands to follow
 23fcfc6:	f814 7b01 	ldrb.w	r7, [r4], #1
  while(numCommands--) {                 // For each command...
 23fcfca:	b397      	cbz	r7, 23fd032 <_ZN15Adafruit_ST77xx11displayInitEPKh+0x7a>
    writeCommand(pgm_read_byte(addr++)); // Read, issue command
 23fcfcc:	4626      	mov	r6, r4
 23fcfce:	4628      	mov	r0, r5
 23fcfd0:	f816 1b02 	ldrb.w	r1, [r6], #2
 23fcfd4:	f7ff fe2c 	bl	23fcc30 <_ZN15Adafruit_SPITFT12writeCommandEh>
    numArgs  = pgm_read_byte(addr++);    // Number of args to follow
 23fcfd8:	f894 9001 	ldrb.w	r9, [r4, #1]
 23fcfdc:	46b2      	mov	sl, r6
    numArgs &= ~ST_CMD_DELAY;            // Mask out delay bit
 23fcfde:	f009 087f 	and.w	r8, r9, #127	; 0x7f
 23fcfe2:	4644      	mov	r4, r8
    while(numArgs--) {                   // For each argument...
 23fcfe4:	3c01      	subs	r4, #1
 23fcfe6:	b2e4      	uxtb	r4, r4
 23fcfe8:	2cff      	cmp	r4, #255	; 0xff
 23fcfea:	d005      	beq.n	23fcff8 <_ZN15Adafruit_ST77xx11displayInitEPKh+0x40>
      spiWrite(pgm_read_byte(addr++));   // Read, issue argument
 23fcfec:	4628      	mov	r0, r5
 23fcfee:	f81a 1b01 	ldrb.w	r1, [sl], #1
 23fcff2:	f7ff fdf4 	bl	23fcbde <_ZN15Adafruit_SPITFT8spiWriteEh>
    while(numArgs--) {                   // For each argument...
 23fcff6:	e7f5      	b.n	23fcfe4 <_ZN15Adafruit_ST77xx11displayInitEPKh+0x2c>
 23fcff8:	f995 003e 	ldrsb.w	r0, [r5, #62]	; 0x3e
 23fcffc:	2101      	movs	r1, #1
 23fcffe:	b280      	uxth	r0, r0
 23fd000:	f002 f92d 	bl	23ff25e <digitalWrite>
        digitalWrite(_cs, LOW);
 23fd004:	f995 003e 	ldrsb.w	r0, [r5, #62]	; 0x3e
 23fd008:	2100      	movs	r1, #0
 23fd00a:	b280      	uxth	r0, r0
 23fd00c:	f002 f927 	bl	23ff25e <digitalWrite>
    if(ms) {
 23fd010:	f019 0f80 	tst.w	r9, #128	; 0x80
 23fd014:	eb06 0408 	add.w	r4, r6, r8
 23fd018:	d008      	beq.n	23fd02c <_ZN15Adafruit_ST77xx11displayInitEPKh+0x74>
      ms = pgm_read_byte(addr++); // Read post-command delay time (ms)
 23fd01a:	f816 0008 	ldrb.w	r0, [r6, r8]
 23fd01e:	3401      	adds	r4, #1
      if(ms == 255) ms = 500;     // If 255, delay for 500 ms
 23fd020:	28ff      	cmp	r0, #255	; 0xff
      delay(ms);
 23fd022:	bf08      	it	eq
 23fd024:	f44f 70fa 	moveq.w	r0, #500	; 0x1f4
 23fd028:	f000 ff8a 	bl	23fdf40 <delay>
 23fd02c:	3f01      	subs	r7, #1
 23fd02e:	b2ff      	uxtb	r7, r7
 23fd030:	e7cb      	b.n	23fcfca <_ZN15Adafruit_ST77xx11displayInitEPKh+0x12>
  endWrite();
 23fd032:	682b      	ldr	r3, [r5, #0]
 23fd034:	4628      	mov	r0, r5
}
 23fd036:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  endWrite();
 23fd03a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 23fd03c:	4718      	bx	r3

023fd03e <_ZN15Adafruit_ST77xx10commonInitEPKh>:
void Adafruit_ST77xx::commonInit(const uint8_t *cmdList) {
 23fd03e:	b538      	push	{r3, r4, r5, lr}
 23fd040:	460d      	mov	r5, r1
  begin();
 23fd042:	6803      	ldr	r3, [r0, #0]
 23fd044:	2100      	movs	r1, #0
 23fd046:	6d1b      	ldr	r3, [r3, #80]	; 0x50
void Adafruit_ST77xx::commonInit(const uint8_t *cmdList) {
 23fd048:	4604      	mov	r4, r0
  begin();
 23fd04a:	4798      	blx	r3
  if(cmdList) {
 23fd04c:	b12d      	cbz	r5, 23fd05a <_ZN15Adafruit_ST77xx10commonInitEPKh+0x1c>
    displayInit(cmdList);
 23fd04e:	4629      	mov	r1, r5
 23fd050:	4620      	mov	r0, r4
}
 23fd052:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    displayInit(cmdList);
 23fd056:	f7ff bfaf 	b.w	23fcfb8 <_ZN15Adafruit_ST77xx11displayInitEPKh>
}
 23fd05a:	bd38      	pop	{r3, r4, r5, pc}

023fd05c <_ZN7VL53L1XD1Ev>:
       }
    }
    
   /** Destructor
    */
    virtual ~VL53L1X(){}
 23fd05c:	4770      	bx	lr

023fd05e <_ZN7VL53L1X10VL53L1_OffEv>:
	/**
	 * @brief       PowerOff the sensor
	 * @return      void
	 */
    /* turns off the sensor */
    virtual void VL53L1_Off(void)
 23fd05e:	b508      	push	{r3, lr}
    {
       if(gpio0 >= 0)
 23fd060:	6880      	ldr	r0, [r0, #8]
 23fd062:	2800      	cmp	r0, #0
 23fd064:	db03      	blt.n	23fd06e <_ZN7VL53L1X10VL53L1_OffEv+0x10>
       {
         digitalWrite(gpio0, LOW);
 23fd066:	2100      	movs	r1, #0
 23fd068:	b280      	uxth	r0, r0
 23fd06a:	f002 f8f8 	bl	23ff25e <digitalWrite>
       }
       delay(10);
    }
 23fd06e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
       delay(10);
 23fd072:	200a      	movs	r0, #10
 23fd074:	f000 bf64 	b.w	23fdf40 <delay>

023fd078 <_ZN7VL53L1X9VL53L1_OnEv>:
    virtual void VL53L1_On(void)
 23fd078:	b508      	push	{r3, lr}
       if(gpio0 >= 0)
 23fd07a:	6880      	ldr	r0, [r0, #8]
 23fd07c:	2800      	cmp	r0, #0
 23fd07e:	db03      	blt.n	23fd088 <_ZN7VL53L1X9VL53L1_OnEv+0x10>
         digitalWrite(gpio0, HIGH);
 23fd080:	2101      	movs	r1, #1
 23fd082:	b280      	uxth	r0, r0
 23fd084:	f002 f8eb 	bl	23ff25e <digitalWrite>
    }
 23fd088:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
       delay(10);
 23fd08c:	200a      	movs	r0, #10
 23fd08e:	f000 bf57 	b.w	23fdf40 <delay>

023fd092 <_ZN7VL53L1XD0Ev>:
    virtual ~VL53L1X(){}
 23fd092:	b510      	push	{r4, lr}
 23fd094:	4604      	mov	r4, r0
 23fd096:	211c      	movs	r1, #28
 23fd098:	f7fe fab3 	bl	23fb602 <_ZdlPvj>
 23fd09c:	4620      	mov	r0, r4
 23fd09e:	bd10      	pop	{r4, pc}

023fd0a0 <_ZN7VL53L1X11GetDistanceEPm>:
/**
 * @brief Get ranging result and only that
 * @param pRange_mm  Pointer to range distance
 * @return           0 on success
 */
	int GetDistance(uint32_t *piData)
 23fd0a0:	b513      	push	{r0, r1, r4, lr}
 23fd0a2:	460c      	mov	r4, r1
    {
	int status;
	uint16_t distance;
	status = VL53L1X_GetDistance(&distance);
 23fd0a4:	f10d 0106 	add.w	r1, sp, #6
 23fd0a8:	f000 fb3f 	bl	23fd72a <_ZN7VL53L1X19VL53L1X_GetDistanceEPt>
	*piData = (uint32_t) distance;
 23fd0ac:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 23fd0b0:	6023      	str	r3, [r4, #0]
	return status;
    }
 23fd0b2:	b002      	add	sp, #8
 23fd0b4:	bd10      	pop	{r4, pc}

023fd0b6 <_ZN7VL53L1X6ReadIDEv>:
    virtual int ReadID(){
 23fd0b6:	b507      	push	{r0, r1, r2, lr}
		VL53L1X_GetSensorId(&sensorId);
 23fd0b8:	f10d 0106 	add.w	r1, sp, #6
 23fd0bc:	f000 fb24 	bl	23fd708 <_ZN7VL53L1X19VL53L1X_GetSensorIdEPt>
	}
 23fd0c0:	f64e 63ac 	movw	r3, #61100	; 0xeeac
		if (sensorId == 0xEEAC)
 23fd0c4:	f8bd 0006 	ldrh.w	r0, [sp, #6]
	}
 23fd0c8:	1ac0      	subs	r0, r0, r3
 23fd0ca:	bf18      	it	ne
 23fd0cc:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 23fd0d0:	b003      	add	sp, #12
 23fd0d2:	f85d fb04 	ldr.w	pc, [sp], #4

023fd0d6 <_ZN7VL53L1X4InitEv>:
    virtual int Init()
 23fd0d6:	b508      	push	{r3, lr}
       return VL53L1X_SensorInit();
 23fd0d8:	f000 f946 	bl	23fd368 <_ZN7VL53L1X18VL53L1X_SensorInitEv>
    }
 23fd0dc:	bd08      	pop	{r3, pc}
	...

023fd0e0 <_ZN10SFEVL53L1XC1ER7TwoWireii>:
#include <stdlib.h>
#include "Arduino.h"
#include "SparkFun_VL53L1X.h"
#include "vl53l1x_class.h"

SFEVL53L1X::SFEVL53L1X(TwoWire &i2cPort, int shutdownPin, int interruptPin)
 23fd0e0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 23fd0e4:	f04f 0952 	mov.w	r9, #82	; 0x52
{
	_i2cPort = &i2cPort;
	_shutdownPin = shutdownPin;
 23fd0e8:	e9c0 1200 	strd	r1, r2, [r0]
SFEVL53L1X::SFEVL53L1X(TwoWire &i2cPort, int shutdownPin, int interruptPin)
 23fd0ec:	f8c0 900c 	str.w	r9, [r0, #12]
	_interruptPin = interruptPin;
 23fd0f0:	6083      	str	r3, [r0, #8]
SFEVL53L1X::SFEVL53L1X(TwoWire &i2cPort, int shutdownPin, int interruptPin)
 23fd0f2:	4605      	mov	r5, r0
	_device = new VL53L1X(&i2cPort, shutdownPin, interruptPin);
 23fd0f4:	201c      	movs	r0, #28
SFEVL53L1X::SFEVL53L1X(TwoWire &i2cPort, int shutdownPin, int interruptPin)
 23fd0f6:	460f      	mov	r7, r1
 23fd0f8:	4616      	mov	r6, r2
 23fd0fa:	4698      	mov	r8, r3
	_device = new VL53L1X(&i2cPort, shutdownPin, interruptPin);
 23fd0fc:	f7fe fa7d 	bl	23fb5fa <_Znwj>
 23fd100:	4604      	mov	r4, r0
 23fd102:	b180      	cbz	r0, 23fd126 <_ZN10SFEVL53L1XC1ER7TwoWireii+0x46>
    VL53L1X(TwoWire *i2c, int pin, int pin_gpio1) : RangeSensor(), dev_i2c(i2c), gpio0(pin), gpio1Int(pin_gpio1)
 23fd104:	4b0a      	ldr	r3, [pc, #40]	; (23fd130 <_ZN10SFEVL53L1XC1ER7TwoWireii+0x50>)
       if(gpio0 >= 0)
 23fd106:	2e00      	cmp	r6, #0
    VL53L1X(TwoWire *i2c, int pin, int pin_gpio1) : RangeSensor(), dev_i2c(i2c), gpio0(pin), gpio1Int(pin_gpio1)
 23fd108:	e9c0 3700 	strd	r3, r7, [r0]
       Device = &MyDevice;
 23fd10c:	f100 0310 	add.w	r3, r0, #16
    VL53L1X(TwoWire *i2c, int pin, int pin_gpio1) : RangeSensor(), dev_i2c(i2c), gpio0(pin), gpio1Int(pin_gpio1)
 23fd110:	e9c0 6802 	strd	r6, r8, [r0, #8]
       MyDevice.I2cDevAddr=VL53L1X_DEFAULT_DEVICE_ADDRESS;
 23fd114:	f880 9010 	strb.w	r9, [r0, #16]
       MyDevice.I2cHandle = i2c;
 23fd118:	6147      	str	r7, [r0, #20]
       Device = &MyDevice;
 23fd11a:	6183      	str	r3, [r0, #24]
       if(gpio0 >= 0)
 23fd11c:	db03      	blt.n	23fd126 <_ZN10SFEVL53L1XC1ER7TwoWireii+0x46>
         pinMode(gpio0, OUTPUT);
 23fd11e:	2101      	movs	r1, #1
 23fd120:	b2b0      	uxth	r0, r6
 23fd122:	f002 f88b 	bl	23ff23c <pinMode>
}
 23fd126:	4628      	mov	r0, r5
	_device = new VL53L1X(&i2cPort, shutdownPin, interruptPin);
 23fd128:	612c      	str	r4, [r5, #16]
}
 23fd12a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 23fd12e:	bf00      	nop
 23fd130:	023ffd58 	.word	0x023ffd58

023fd134 <_ZN10SFEVL53L1X4initEv>:

bool SFEVL53L1X::init()
{
 23fd134:	b508      	push	{r3, lr}
	return _device->VL53L1X_SensorInit();
 23fd136:	6900      	ldr	r0, [r0, #16]
 23fd138:	f000 f916 	bl	23fd368 <_ZN7VL53L1X18VL53L1X_SensorInitEv>
}
 23fd13c:	3800      	subs	r0, #0
 23fd13e:	bf18      	it	ne
 23fd140:	2001      	movne	r0, #1
 23fd142:	bd08      	pop	{r3, pc}

023fd144 <_ZN10SFEVL53L1X12startRangingEv>:
	return tmp;
}

void SFEVL53L1X::startRanging()
{
	_device->VL53L1X_StartRanging();
 23fd144:	6900      	ldr	r0, [r0, #16]
 23fd146:	f000 b852 	b.w	23fd1ee <_ZN7VL53L1X20VL53L1X_StartRangingEv>

023fd14a <_ZN10SFEVL53L1X11stopRangingEv>:
}

void SFEVL53L1X::stopRanging()
{
	_device->VL53L1X_StopRanging();
 23fd14a:	6900      	ldr	r0, [r0, #16]
 23fd14c:	f000 b854 	b.w	23fd1f8 <_ZN7VL53L1X19VL53L1X_StopRangingEv>

023fd150 <_ZN10SFEVL53L1X19setTimingBudgetInMsEt>:
	return (bool)dataReady;
}

void SFEVL53L1X::setTimingBudgetInMs(uint16_t timingBudget)
{
	_device->VL53L1X_SetTimingBudgetInMs(timingBudget);
 23fd150:	6900      	ldr	r0, [r0, #16]
 23fd152:	f000 b95b 	b.w	23fd40c <_ZN7VL53L1X27VL53L1X_SetTimingBudgetInMsEt>

023fd156 <_ZN10SFEVL53L1X19setDistanceModeLongEv>:
	return timingBudget;
}

void SFEVL53L1X::setDistanceModeLong()
{
	_device->VL53L1X_SetDistanceMode(2);
 23fd156:	2102      	movs	r1, #2
 23fd158:	6900      	ldr	r0, [r0, #16]
 23fd15a:	f000 ba50 	b.w	23fd5fe <_ZN7VL53L1X23VL53L1X_SetDistanceModeEt>

023fd15e <_ZN10SFEVL53L1X25setIntermeasurementPeriodEt>:
	return distanceMode;
}

void SFEVL53L1X::setIntermeasurementPeriod(uint16_t intermeasurement)
{
	_device->VL53L1X_SetInterMeasurementInMs(intermeasurement);
 23fd15e:	6900      	ldr	r0, [r0, #16]
 23fd160:	f000 baaa 	b.w	23fd6b8 <_ZN7VL53L1X31VL53L1X_SetInterMeasurementInMsEt>

023fd164 <_ZN10SFEVL53L1X11getDistanceEv>:
	_device->VL53L1X_GetSensorId(&id);
	return id;
}

uint16_t SFEVL53L1X::getDistance()
{
 23fd164:	b507      	push	{r0, r1, r2, lr}
	uint16_t distance;
	_device->VL53L1X_GetDistance(&distance);
 23fd166:	f10d 0106 	add.w	r1, sp, #6
 23fd16a:	6900      	ldr	r0, [r0, #16]
 23fd16c:	f000 fadd 	bl	23fd72a <_ZN7VL53L1X19VL53L1X_GetDistanceEPt>
	return (int)distance;
}
 23fd170:	f8bd 0006 	ldrh.w	r0, [sp, #6]
 23fd174:	b003      	add	sp, #12
 23fd176:	f85d fb04 	ldr.w	pc, [sp], #4

023fd17a <_ZN10SFEVL53L1X6setROIEhhh>:
	return temp;
}

void SFEVL53L1X::setROI(uint8_t x, uint8_t y, uint8_t opticalCenter)
{
	_device->VL53L1X_SetROI(x, y, opticalCenter);
 23fd17a:	6900      	ldr	r0, [r0, #16]
 23fd17c:	f000 b841 	b.w	23fd202 <_ZN7VL53L1X14VL53L1X_SetROIEhhh>

023fd180 <_ZN7VL53L1X15VL53L1_I2CWriteEhtPht>:
	}
	return status;
}

VL53L1X_ERROR VL53L1X::VL53L1_I2CWrite(uint8_t DeviceAddr, uint16_t RegisterAddr, uint8_t *pBuffer, uint16_t NumByteToWrite)
{
 23fd180:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 23fd182:	4615      	mov	r5, r2
 23fd184:	4604      	mov	r4, r0
#ifdef DEBUG_MODE
	Serial.print("Beginning transmission to ");
	Serial.println(((DeviceAddr) >> 1) & 0x7F);
#endif
	dev_i2c->beginTransmission(((uint8_t)(((DeviceAddr) >> 1) & 0x7F)));
 23fd186:	0849      	lsrs	r1, r1, #1
 23fd188:	6840      	ldr	r0, [r0, #4]
{
 23fd18a:	461e      	mov	r6, r3
 23fd18c:	f8bd 7020 	ldrh.w	r7, [sp, #32]
	dev_i2c->beginTransmission(((uint8_t)(((DeviceAddr) >> 1) & 0x7F)));
 23fd190:	f001 fa60 	bl	23fe654 <_ZN7TwoWire17beginTransmissionEh>
#ifdef DEBUG_MODE
	Serial.print("Writing port number ");
	Serial.println(RegisterAddr);
#endif
	uint8_t buffer[2];
	buffer[0] = RegisterAddr >> 8;
 23fd194:	0a2b      	lsrs	r3, r5, #8
	buffer[1] = RegisterAddr & 0xFF;
	dev_i2c->write(buffer, 2);
 23fd196:	6860      	ldr	r0, [r4, #4]
	buffer[1] = RegisterAddr & 0xFF;
 23fd198:	f88d 5005 	strb.w	r5, [sp, #5]
	buffer[0] = RegisterAddr >> 8;
 23fd19c:	f88d 3004 	strb.w	r3, [sp, #4]
	dev_i2c->write(buffer, 2);
 23fd1a0:	6803      	ldr	r3, [r0, #0]
 23fd1a2:	2202      	movs	r2, #2
 23fd1a4:	68db      	ldr	r3, [r3, #12]
 23fd1a6:	a901      	add	r1, sp, #4
 23fd1a8:	4798      	blx	r3
	for (int i = 0; i < NumByteToWrite; i++)
 23fd1aa:	2500      	movs	r5, #0
 23fd1ac:	42af      	cmp	r7, r5
		dev_i2c->write(pBuffer[i]);
 23fd1ae:	6860      	ldr	r0, [r4, #4]
	for (int i = 0; i < NumByteToWrite; i++)
 23fd1b0:	dd05      	ble.n	23fd1be <_ZN7VL53L1X15VL53L1_I2CWriteEhtPht+0x3e>
		dev_i2c->write(pBuffer[i]);
 23fd1b2:	6803      	ldr	r3, [r0, #0]
 23fd1b4:	5d71      	ldrb	r1, [r6, r5]
 23fd1b6:	689b      	ldr	r3, [r3, #8]
 23fd1b8:	4798      	blx	r3
	for (int i = 0; i < NumByteToWrite; i++)
 23fd1ba:	3501      	adds	r5, #1
 23fd1bc:	e7f6      	b.n	23fd1ac <_ZN7VL53L1X15VL53L1_I2CWriteEhtPht+0x2c>

	dev_i2c->endTransmission(true);
 23fd1be:	2101      	movs	r1, #1
 23fd1c0:	f001 fa4c 	bl	23fe65c <_ZN7TwoWire15endTransmissionEh>
	return 0;
}
 23fd1c4:	2000      	movs	r0, #0
 23fd1c6:	b003      	add	sp, #12
 23fd1c8:	bdf0      	pop	{r4, r5, r6, r7, pc}

023fd1ca <_ZN7VL53L1X13VL53L1_WrByteEP12VL53L1_Dev_tth>:
{
 23fd1ca:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 23fd1cc:	f88d 300f 	strb.w	r3, [sp, #15]
	status = VL53L1_I2CWrite(Dev->I2cDevAddr, index, &data, 1);
 23fd1d0:	2301      	movs	r3, #1
 23fd1d2:	7809      	ldrb	r1, [r1, #0]
 23fd1d4:	9300      	str	r3, [sp, #0]
 23fd1d6:	f10d 030f 	add.w	r3, sp, #15
 23fd1da:	f7ff ffd1 	bl	23fd180 <_ZN7VL53L1X15VL53L1_I2CWriteEhtPht>
}
 23fd1de:	b005      	add	sp, #20
 23fd1e0:	f85d fb04 	ldr.w	pc, [sp], #4

023fd1e4 <_ZN7VL53L1X22VL53L1X_ClearInterruptEv>:
	status = VL53L1_WrByte(Device, SYSTEM__INTERRUPT_CLEAR, 0x01);
 23fd1e4:	2301      	movs	r3, #1
 23fd1e6:	2286      	movs	r2, #134	; 0x86
 23fd1e8:	6981      	ldr	r1, [r0, #24]
 23fd1ea:	f7ff bfee 	b.w	23fd1ca <_ZN7VL53L1X13VL53L1_WrByteEP12VL53L1_Dev_tth>

023fd1ee <_ZN7VL53L1X20VL53L1X_StartRangingEv>:
	status = VL53L1_WrByte(Device, SYSTEM__MODE_START, 0x40); /* Enable VL53L1X */
 23fd1ee:	2340      	movs	r3, #64	; 0x40
 23fd1f0:	2287      	movs	r2, #135	; 0x87
 23fd1f2:	6981      	ldr	r1, [r0, #24]
 23fd1f4:	f7ff bfe9 	b.w	23fd1ca <_ZN7VL53L1X13VL53L1_WrByteEP12VL53L1_Dev_tth>

023fd1f8 <_ZN7VL53L1X19VL53L1X_StopRangingEv>:
	status = VL53L1_WrByte(Device, SYSTEM__MODE_START, 0x00); /* Disable VL53L1X */
 23fd1f8:	2300      	movs	r3, #0
 23fd1fa:	2287      	movs	r2, #135	; 0x87
 23fd1fc:	6981      	ldr	r1, [r0, #24]
 23fd1fe:	f7ff bfe4 	b.w	23fd1ca <_ZN7VL53L1X13VL53L1_WrByteEP12VL53L1_Dev_tth>

023fd202 <_ZN7VL53L1X14VL53L1X_SetROIEhhh>:
	if (X > 16)
 23fd202:	2910      	cmp	r1, #16
{
 23fd204:	b570      	push	{r4, r5, r6, lr}
 23fd206:	460d      	mov	r5, r1
 23fd208:	bf28      	it	cs
 23fd20a:	2510      	movcs	r5, #16
	if (Y > 16)
 23fd20c:	2a10      	cmp	r2, #16
 23fd20e:	4616      	mov	r6, r2
 23fd210:	bf28      	it	cs
 23fd212:	2610      	movcs	r6, #16
	if (X > 10 || Y > 10)
 23fd214:	290a      	cmp	r1, #10
{
 23fd216:	4604      	mov	r4, r0
	if (X > 10 || Y > 10)
 23fd218:	d813      	bhi.n	23fd242 <_ZN7VL53L1X14VL53L1X_SetROIEhhh+0x40>
		opticalCenter = 199;
 23fd21a:	2a0b      	cmp	r2, #11
 23fd21c:	bf28      	it	cs
 23fd21e:	23c7      	movcs	r3, #199	; 0xc7
	status = VL53L1_WrByte(Device, ROI_CONFIG__USER_ROI_CENTRE_SPAD, opticalCenter);
 23fd220:	69a1      	ldr	r1, [r4, #24]
 23fd222:	227f      	movs	r2, #127	; 0x7f
 23fd224:	4620      	mov	r0, r4
 23fd226:	f7ff ffd0 	bl	23fd1ca <_ZN7VL53L1X13VL53L1_WrByteEP12VL53L1_Dev_tth>
						   (Y - 1) << 4 | (X - 1));
 23fd22a:	3d01      	subs	r5, #1
 23fd22c:	1e73      	subs	r3, r6, #1
 23fd22e:	ea45 1303 	orr.w	r3, r5, r3, lsl #4
	status = VL53L1_WrByte(Device, ROI_CONFIG__USER_ROI_REQUESTED_GLOBAL_XY_SIZE,
 23fd232:	4620      	mov	r0, r4
 23fd234:	69a1      	ldr	r1, [r4, #24]
 23fd236:	2280      	movs	r2, #128	; 0x80
}
 23fd238:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	status = VL53L1_WrByte(Device, ROI_CONFIG__USER_ROI_REQUESTED_GLOBAL_XY_SIZE,
 23fd23c:	b2db      	uxtb	r3, r3
 23fd23e:	f7ff bfc4 	b.w	23fd1ca <_ZN7VL53L1X13VL53L1_WrByteEP12VL53L1_Dev_tth>
		opticalCenter = 199;
 23fd242:	23c7      	movs	r3, #199	; 0xc7
 23fd244:	e7ec      	b.n	23fd220 <_ZN7VL53L1X14VL53L1X_SetROIEhhh+0x1e>

023fd246 <_ZN7VL53L1X13VL53L1_WrWordEP12VL53L1_Dev_ttt>:
{
 23fd246:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	buffer[0] = data >> 8;
 23fd248:	0a1c      	lsrs	r4, r3, #8
	buffer[1] = data & 0x00FF;
 23fd24a:	f88d 300d 	strb.w	r3, [sp, #13]
	status = VL53L1_I2CWrite(Dev->I2cDevAddr, index, (uint8_t *)buffer, 2);
 23fd24e:	2302      	movs	r3, #2
 23fd250:	7809      	ldrb	r1, [r1, #0]
 23fd252:	9300      	str	r3, [sp, #0]
 23fd254:	ab03      	add	r3, sp, #12
	buffer[0] = data >> 8;
 23fd256:	f88d 400c 	strb.w	r4, [sp, #12]
	status = VL53L1_I2CWrite(Dev->I2cDevAddr, index, (uint8_t *)buffer, 2);
 23fd25a:	f7ff ff91 	bl	23fd180 <_ZN7VL53L1X15VL53L1_I2CWriteEhtPht>
}
 23fd25e:	b004      	add	sp, #16
 23fd260:	bd10      	pop	{r4, pc}

023fd262 <_ZN7VL53L1X14VL53L1_WrDWordEP12VL53L1_Dev_ttm>:
{
 23fd262:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	buffer[0] = (data >> 24) & 0xFF;
 23fd264:	0e1c      	lsrs	r4, r3, #24
 23fd266:	f88d 400c 	strb.w	r4, [sp, #12]
	buffer[1] = (data >> 16) & 0xFF;
 23fd26a:	0c1c      	lsrs	r4, r3, #16
 23fd26c:	f88d 400d 	strb.w	r4, [sp, #13]
	buffer[3] = (data >> 0) & 0xFF;
 23fd270:	f88d 300f 	strb.w	r3, [sp, #15]
	buffer[2] = (data >> 8) & 0xFF;
 23fd274:	0a1c      	lsrs	r4, r3, #8
	status = VL53L1_I2CWrite(Dev->I2cDevAddr, index, (uint8_t *)buffer, 4);
 23fd276:	2304      	movs	r3, #4
 23fd278:	7809      	ldrb	r1, [r1, #0]
 23fd27a:	9300      	str	r3, [sp, #0]
 23fd27c:	ab03      	add	r3, sp, #12
	buffer[2] = (data >> 8) & 0xFF;
 23fd27e:	f88d 400e 	strb.w	r4, [sp, #14]
	status = VL53L1_I2CWrite(Dev->I2cDevAddr, index, (uint8_t *)buffer, 4);
 23fd282:	f7ff ff7d 	bl	23fd180 <_ZN7VL53L1X15VL53L1_I2CWriteEhtPht>
}
 23fd286:	b004      	add	sp, #16
 23fd288:	bd10      	pop	{r4, pc}

023fd28a <_ZN7VL53L1X14VL53L1_I2CReadEhtPht>:

VL53L1X_ERROR VL53L1X::VL53L1_I2CRead(uint8_t DeviceAddr, uint16_t RegisterAddr, uint8_t *pBuffer, uint16_t NumByteToRead)
{
 23fd28a:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 23fd28e:	4604      	mov	r4, r0
 23fd290:	4690      	mov	r8, r2
 23fd292:	461d      	mov	r5, r3
#ifdef DEBUG_MODE
		Serial.print("Writing port number ");
		Serial.println(RegisterAddr);
#endif
		uint8_t buffer[2];
		buffer[0] = RegisterAddr >> 8;
 23fd294:	2605      	movs	r6, #5
		dev_i2c->beginTransmission(((uint8_t)(((DeviceAddr) >> 1) & 0x7F)));
 23fd296:	084f      	lsrs	r7, r1, #1
		buffer[0] = RegisterAddr >> 8;
 23fd298:	ea4f 2912 	mov.w	r9, r2, lsr #8
		dev_i2c->beginTransmission(((uint8_t)(((DeviceAddr) >> 1) & 0x7F)));
 23fd29c:	4639      	mov	r1, r7
 23fd29e:	6860      	ldr	r0, [r4, #4]
 23fd2a0:	f001 f9d8 	bl	23fe654 <_ZN7TwoWire17beginTransmissionEh>
		buffer[1] = RegisterAddr & 0xFF;
		dev_i2c->write(buffer, 2);
 23fd2a4:	6860      	ldr	r0, [r4, #4]
		buffer[0] = RegisterAddr >> 8;
 23fd2a6:	f88d 9004 	strb.w	r9, [sp, #4]
		buffer[1] = RegisterAddr & 0xFF;
 23fd2aa:	f88d 8005 	strb.w	r8, [sp, #5]
		dev_i2c->write(buffer, 2);
 23fd2ae:	6803      	ldr	r3, [r0, #0]
 23fd2b0:	a901      	add	r1, sp, #4
 23fd2b2:	2202      	movs	r2, #2
 23fd2b4:	68db      	ldr	r3, [r3, #12]
 23fd2b6:	4798      	blx	r3
		status = dev_i2c->endTransmission(false);
 23fd2b8:	2100      	movs	r1, #0
 23fd2ba:	6860      	ldr	r0, [r4, #4]
 23fd2bc:	f001 f9ce 	bl	23fe65c <_ZN7TwoWire15endTransmissionEh>

		if (status == 0)
 23fd2c0:	b118      	cbz	r0, 23fd2ca <_ZN7VL53L1X14VL53L1_I2CReadEhtPht+0x40>
	for (uint8_t x = 0; x < maxAttempts; x++)
 23fd2c2:	3e01      	subs	r6, #1
 23fd2c4:	f016 06ff 	ands.w	r6, r6, #255	; 0xff
 23fd2c8:	d1e8      	bne.n	23fd29c <_ZN7VL53L1X14VL53L1_I2CReadEhtPht+0x12>
		}
#endif
		//End of fix
	}

	dev_i2c->requestFrom(((uint8_t)(((DeviceAddr) >> 1) & 0x7F)), (byte)NumByteToRead);
 23fd2ca:	4639      	mov	r1, r7
 23fd2cc:	f89d 2028 	ldrb.w	r2, [sp, #40]	; 0x28
 23fd2d0:	6860      	ldr	r0, [r4, #4]
 23fd2d2:	f001 f9bc 	bl	23fe64e <_ZN7TwoWire11requestFromEhj>

	int i = 0;
 23fd2d6:	3d01      	subs	r5, #1
	while (dev_i2c->available())
 23fd2d8:	6860      	ldr	r0, [r4, #4]
 23fd2da:	6803      	ldr	r3, [r0, #0]
 23fd2dc:	691b      	ldr	r3, [r3, #16]
 23fd2de:	4798      	blx	r3
 23fd2e0:	b130      	cbz	r0, 23fd2f0 <_ZN7VL53L1X14VL53L1_I2CReadEhtPht+0x66>
	{
		pBuffer[i] = dev_i2c->read();
 23fd2e2:	6860      	ldr	r0, [r4, #4]
 23fd2e4:	6803      	ldr	r3, [r0, #0]
 23fd2e6:	695b      	ldr	r3, [r3, #20]
 23fd2e8:	4798      	blx	r3
 23fd2ea:	f805 0f01 	strb.w	r0, [r5, #1]!
	while (dev_i2c->available())
 23fd2ee:	e7f3      	b.n	23fd2d8 <_ZN7VL53L1X14VL53L1_I2CReadEhtPht+0x4e>
		i++;
	}

	return 0;
}
 23fd2f0:	b003      	add	sp, #12
 23fd2f2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

023fd2f6 <_ZN7VL53L1X13VL53L1_RdByteEP12VL53L1_Dev_ttPh>:
{
 23fd2f6:	b513      	push	{r0, r1, r4, lr}
	status = VL53L1_I2CRead(Dev->I2cDevAddr, index, data, 1);
 23fd2f8:	2401      	movs	r4, #1
 23fd2fa:	7809      	ldrb	r1, [r1, #0]
 23fd2fc:	9400      	str	r4, [sp, #0]
 23fd2fe:	f7ff ffc4 	bl	23fd28a <_ZN7VL53L1X14VL53L1_I2CReadEhtPht>
	if (status)
 23fd302:	3800      	subs	r0, #0
 23fd304:	bf18      	it	ne
 23fd306:	2001      	movne	r0, #1
}
 23fd308:	4240      	negs	r0, r0
 23fd30a:	b002      	add	sp, #8
 23fd30c:	bd10      	pop	{r4, pc}

023fd30e <_ZN7VL53L1X28VL53L1X_GetInterruptPolarityEPh>:
{
 23fd30e:	b513      	push	{r0, r1, r4, lr}
	status = VL53L1_RdByte(Device, GPIO_HV_MUX__CTRL, &Temp);
 23fd310:	2230      	movs	r2, #48	; 0x30
{
 23fd312:	460c      	mov	r4, r1
	status = VL53L1_RdByte(Device, GPIO_HV_MUX__CTRL, &Temp);
 23fd314:	f10d 0307 	add.w	r3, sp, #7
 23fd318:	6981      	ldr	r1, [r0, #24]
 23fd31a:	f7ff ffec 	bl	23fd2f6 <_ZN7VL53L1X13VL53L1_RdByteEP12VL53L1_Dev_ttPh>
	*pInterruptPolarity = !(Temp >> 4);
 23fd31e:	f89d 3007 	ldrb.w	r3, [sp, #7]
 23fd322:	ea6f 1313 	mvn.w	r3, r3, lsr #4
 23fd326:	f003 0301 	and.w	r3, r3, #1
 23fd32a:	7023      	strb	r3, [r4, #0]
}
 23fd32c:	b002      	add	sp, #8
 23fd32e:	bd10      	pop	{r4, pc}

023fd330 <_ZN7VL53L1X25VL53L1X_CheckForDataReadyEPh>:
{
 23fd330:	b537      	push	{r0, r1, r2, r4, r5, lr}
 23fd332:	4605      	mov	r5, r0
 23fd334:	460c      	mov	r4, r1
	status = VL53L1X_GetInterruptPolarity(&IntPol);
 23fd336:	f10d 0107 	add.w	r1, sp, #7
 23fd33a:	f7ff ffe8 	bl	23fd30e <_ZN7VL53L1X28VL53L1X_GetInterruptPolarityEPh>
	status = VL53L1_RdByte(Device, GPIO__TIO_HV_STATUS, &Temp);
 23fd33e:	2231      	movs	r2, #49	; 0x31
 23fd340:	4628      	mov	r0, r5
 23fd342:	69a9      	ldr	r1, [r5, #24]
 23fd344:	f10d 0306 	add.w	r3, sp, #6
 23fd348:	f7ff ffd5 	bl	23fd2f6 <_ZN7VL53L1X13VL53L1_RdByteEP12VL53L1_Dev_ttPh>
	if (status == 0)
 23fd34c:	b950      	cbnz	r0, 23fd364 <_ZN7VL53L1X25VL53L1X_CheckForDataReadyEPh+0x34>
		if ((Temp & 1) == IntPol)
 23fd34e:	f89d 3006 	ldrb.w	r3, [sp, #6]
 23fd352:	f89d 2007 	ldrb.w	r2, [sp, #7]
 23fd356:	f003 0301 	and.w	r3, r3, #1
 23fd35a:	429a      	cmp	r2, r3
			*isDataReady = 1;
 23fd35c:	bf0a      	itet	eq
 23fd35e:	2301      	moveq	r3, #1
			*isDataReady = 0;
 23fd360:	7020      	strbne	r0, [r4, #0]
			*isDataReady = 1;
 23fd362:	7023      	strbeq	r3, [r4, #0]
}
 23fd364:	b003      	add	sp, #12
 23fd366:	bd30      	pop	{r4, r5, pc}

023fd368 <_ZN7VL53L1X18VL53L1X_SensorInitEv>:
	uint8_t Addr = 0x00, dataReady = 0, timeout = 0;
 23fd368:	2300      	movs	r3, #0
{
 23fd36a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 23fd36c:	4604      	mov	r4, r0
	uint8_t Addr = 0x00, dataReady = 0, timeout = 0;
 23fd36e:	252d      	movs	r5, #45	; 0x2d
 23fd370:	4e1b      	ldr	r6, [pc, #108]	; (23fd3e0 <_ZN7VL53L1X18VL53L1X_SensorInitEv+0x78>)
 23fd372:	f88d 3007 	strb.w	r3, [sp, #7]
		status = VL53L1_WrByte(Device, Addr, VL51L1X_DEFAULT_CONFIGURATION[Addr - 0x2D]);
 23fd376:	b2aa      	uxth	r2, r5
 23fd378:	4620      	mov	r0, r4
 23fd37a:	f816 3b01 	ldrb.w	r3, [r6], #1
 23fd37e:	69a1      	ldr	r1, [r4, #24]
	for (Addr = 0x2D; Addr <= 0x87; Addr++)
 23fd380:	3501      	adds	r5, #1
		status = VL53L1_WrByte(Device, Addr, VL51L1X_DEFAULT_CONFIGURATION[Addr - 0x2D]);
 23fd382:	f7ff ff22 	bl	23fd1ca <_ZN7VL53L1X13VL53L1_WrByteEP12VL53L1_Dev_tth>
	for (Addr = 0x2D; Addr <= 0x87; Addr++)
 23fd386:	2d88      	cmp	r5, #136	; 0x88
 23fd388:	d1f5      	bne.n	23fd376 <_ZN7VL53L1X18VL53L1X_SensorInitEv+0xe>
	status = VL53L1X_StartRanging();
 23fd38a:	4620      	mov	r0, r4
 23fd38c:	f7ff ff2f 	bl	23fd1ee <_ZN7VL53L1X20VL53L1X_StartRangingEv>
 23fd390:	2598      	movs	r5, #152	; 0x98
	while (dataReady == 0)
 23fd392:	f89d 3007 	ldrb.w	r3, [sp, #7]
 23fd396:	b963      	cbnz	r3, 23fd3b2 <_ZN7VL53L1X18VL53L1X_SensorInitEv+0x4a>
		status = VL53L1X_CheckForDataReady(&dataReady);
 23fd398:	4620      	mov	r0, r4
 23fd39a:	f10d 0107 	add.w	r1, sp, #7
		if (timeout++ > 150)
 23fd39e:	3d01      	subs	r5, #1
		status = VL53L1X_CheckForDataReady(&dataReady);
 23fd3a0:	f7ff ffc6 	bl	23fd330 <_ZN7VL53L1X25VL53L1X_CheckForDataReadyEPh>
		if (timeout++ > 150)
 23fd3a4:	f015 05ff 	ands.w	r5, r5, #255	; 0xff
 23fd3a8:	d017      	beq.n	23fd3da <_ZN7VL53L1X18VL53L1X_SensorInitEv+0x72>
		delay(1);
 23fd3aa:	2001      	movs	r0, #1
 23fd3ac:	f000 fdc8 	bl	23fdf40 <delay>
	while (dataReady == 0)
 23fd3b0:	e7ef      	b.n	23fd392 <_ZN7VL53L1X18VL53L1X_SensorInitEv+0x2a>
	status = VL53L1X_ClearInterrupt();
 23fd3b2:	4620      	mov	r0, r4
 23fd3b4:	f7ff ff16 	bl	23fd1e4 <_ZN7VL53L1X22VL53L1X_ClearInterruptEv>
	status = VL53L1X_StopRanging();
 23fd3b8:	4620      	mov	r0, r4
 23fd3ba:	f7ff ff1d 	bl	23fd1f8 <_ZN7VL53L1X19VL53L1X_StopRangingEv>
	status = VL53L1_WrByte(Device, VL53L1_VHV_CONFIG__TIMEOUT_MACROP_LOOP_BOUND, 0x09); /* two bounds VHV */
 23fd3be:	2309      	movs	r3, #9
 23fd3c0:	2208      	movs	r2, #8
 23fd3c2:	69a1      	ldr	r1, [r4, #24]
 23fd3c4:	4620      	mov	r0, r4
 23fd3c6:	f7ff ff00 	bl	23fd1ca <_ZN7VL53L1X13VL53L1_WrByteEP12VL53L1_Dev_tth>
	status = VL53L1_WrByte(Device, 0x0B, 0);											/* start VHV from the previous temperature */
 23fd3ca:	2300      	movs	r3, #0
 23fd3cc:	220b      	movs	r2, #11
 23fd3ce:	4620      	mov	r0, r4
 23fd3d0:	69a1      	ldr	r1, [r4, #24]
 23fd3d2:	f7ff fefa 	bl	23fd1ca <_ZN7VL53L1X13VL53L1_WrByteEP12VL53L1_Dev_tth>
}
 23fd3d6:	b002      	add	sp, #8
 23fd3d8:	bd70      	pop	{r4, r5, r6, pc}
			return VL53L1_ERROR_TIME_OUT;
 23fd3da:	f06f 0006 	mvn.w	r0, #6
 23fd3de:	e7fa      	b.n	23fd3d6 <_ZN7VL53L1X18VL53L1X_SensorInitEv+0x6e>
 23fd3e0:	023ffd74 	.word	0x023ffd74

023fd3e4 <_ZN7VL53L1X23VL53L1X_GetDistanceModeEPt>:
{
 23fd3e4:	b513      	push	{r0, r1, r4, lr}
	status = VL53L1_RdByte(Device, PHASECAL_CONFIG__TIMEOUT_MACROP, &TempDM);
 23fd3e6:	224b      	movs	r2, #75	; 0x4b
 23fd3e8:	f10d 0307 	add.w	r3, sp, #7
{
 23fd3ec:	460c      	mov	r4, r1
	status = VL53L1_RdByte(Device, PHASECAL_CONFIG__TIMEOUT_MACROP, &TempDM);
 23fd3ee:	6981      	ldr	r1, [r0, #24]
 23fd3f0:	f7ff ff81 	bl	23fd2f6 <_ZN7VL53L1X13VL53L1_RdByteEP12VL53L1_Dev_ttPh>
	if (TempDM == 0x14)
 23fd3f4:	f89d 3007 	ldrb.w	r3, [sp, #7]
 23fd3f8:	2b14      	cmp	r3, #20
 23fd3fa:	d103      	bne.n	23fd404 <_ZN7VL53L1X23VL53L1X_GetDistanceModeEPt+0x20>
		*DM = 1;
 23fd3fc:	2301      	movs	r3, #1
		*DM = 2;
 23fd3fe:	8023      	strh	r3, [r4, #0]
}
 23fd400:	b002      	add	sp, #8
 23fd402:	bd10      	pop	{r4, pc}
	if (TempDM == 0x0A)
 23fd404:	2b0a      	cmp	r3, #10
 23fd406:	d1fb      	bne.n	23fd400 <_ZN7VL53L1X23VL53L1X_GetDistanceModeEPt+0x1c>
		*DM = 2;
 23fd408:	2302      	movs	r3, #2
 23fd40a:	e7f8      	b.n	23fd3fe <_ZN7VL53L1X23VL53L1X_GetDistanceModeEPt+0x1a>

023fd40c <_ZN7VL53L1X27VL53L1X_SetTimingBudgetInMsEt>:
{
 23fd40c:	b573      	push	{r0, r1, r4, r5, r6, lr}
 23fd40e:	460d      	mov	r5, r1
	status = VL53L1X_GetDistanceMode(&DM);
 23fd410:	f10d 0106 	add.w	r1, sp, #6
{
 23fd414:	4604      	mov	r4, r0
	status = VL53L1X_GetDistanceMode(&DM);
 23fd416:	f7ff ffe5 	bl	23fd3e4 <_ZN7VL53L1X23VL53L1X_GetDistanceModeEPt>
	if (DM == 0)
 23fd41a:	f8bd 3006 	ldrh.w	r3, [sp, #6]
	status = VL53L1X_GetDistanceMode(&DM);
 23fd41e:	4606      	mov	r6, r0
	if (DM == 0)
 23fd420:	b153      	cbz	r3, 23fd438 <_ZN7VL53L1X27VL53L1X_SetTimingBudgetInMsEt+0x2c>
	else if (DM == 1)
 23fd422:	2b01      	cmp	r3, #1
 23fd424:	d152      	bne.n	23fd4cc <_ZN7VL53L1X27VL53L1X_SetTimingBudgetInMsEt+0xc0>
		switch (TimingBudgetInMs)
 23fd426:	2d32      	cmp	r5, #50	; 0x32
 23fd428:	d032      	beq.n	23fd490 <_ZN7VL53L1X27VL53L1X_SetTimingBudgetInMsEt+0x84>
 23fd42a:	d807      	bhi.n	23fd43c <_ZN7VL53L1X27VL53L1X_SetTimingBudgetInMsEt+0x30>
 23fd42c:	2d14      	cmp	r5, #20
 23fd42e:	d025      	beq.n	23fd47c <_ZN7VL53L1X27VL53L1X_SetTimingBudgetInMsEt+0x70>
 23fd430:	2d21      	cmp	r5, #33	; 0x21
 23fd432:	d02b      	beq.n	23fd48c <_ZN7VL53L1X27VL53L1X_SetTimingBudgetInMsEt+0x80>
 23fd434:	2d0f      	cmp	r5, #15
 23fd436:	d012      	beq.n	23fd45e <_ZN7VL53L1X27VL53L1X_SetTimingBudgetInMsEt+0x52>
		return 1;
 23fd438:	2601      	movs	r6, #1
 23fd43a:	e01c      	b.n	23fd476 <_ZN7VL53L1X27VL53L1X_SetTimingBudgetInMsEt+0x6a>
		switch (TimingBudgetInMs)
 23fd43c:	2dc8      	cmp	r5, #200	; 0xc8
 23fd43e:	d031      	beq.n	23fd4a4 <_ZN7VL53L1X27VL53L1X_SetTimingBudgetInMsEt+0x98>
 23fd440:	f5b5 7ffa 	cmp.w	r5, #500	; 0x1f4
 23fd444:	d038      	beq.n	23fd4b8 <_ZN7VL53L1X27VL53L1X_SetTimingBudgetInMsEt+0xac>
 23fd446:	2d64      	cmp	r5, #100	; 0x64
 23fd448:	d1f6      	bne.n	23fd438 <_ZN7VL53L1X27VL53L1X_SetTimingBudgetInMsEt+0x2c>
			VL53L1_WrWord(Device, RANGE_CONFIG__TIMEOUT_MACROP_A_HI,
 23fd44a:	f240 23e1 	movw	r3, #737	; 0x2e1
 23fd44e:	225e      	movs	r2, #94	; 0x5e
 23fd450:	4620      	mov	r0, r4
 23fd452:	69a1      	ldr	r1, [r4, #24]
 23fd454:	f7ff fef7 	bl	23fd246 <_ZN7VL53L1X13VL53L1_WrWordEP12VL53L1_Dev_ttt>
			VL53L1_WrWord(Device, RANGE_CONFIG__TIMEOUT_MACROP_B_HI,
 23fd458:	f44f 7362 	mov.w	r3, #904	; 0x388
 23fd45c:	e006      	b.n	23fd46c <_ZN7VL53L1X27VL53L1X_SetTimingBudgetInMsEt+0x60>
			VL53L1_WrWord(Device, RANGE_CONFIG__TIMEOUT_MACROP_A_HI,
 23fd45e:	231d      	movs	r3, #29
 23fd460:	225e      	movs	r2, #94	; 0x5e
 23fd462:	4620      	mov	r0, r4
 23fd464:	69a1      	ldr	r1, [r4, #24]
 23fd466:	f7ff feee 	bl	23fd246 <_ZN7VL53L1X13VL53L1_WrWordEP12VL53L1_Dev_ttt>
			VL53L1_WrWord(Device, RANGE_CONFIG__TIMEOUT_MACROP_B_HI,
 23fd46a:	2327      	movs	r3, #39	; 0x27
			VL53L1_WrWord(Device, RANGE_CONFIG__TIMEOUT_MACROP_B_HI,
 23fd46c:	2261      	movs	r2, #97	; 0x61
 23fd46e:	4620      	mov	r0, r4
 23fd470:	69a1      	ldr	r1, [r4, #24]
 23fd472:	f7ff fee8 	bl	23fd246 <_ZN7VL53L1X13VL53L1_WrWordEP12VL53L1_Dev_ttt>
}
 23fd476:	4630      	mov	r0, r6
 23fd478:	b002      	add	sp, #8
 23fd47a:	bd70      	pop	{r4, r5, r6, pc}
			VL53L1_WrWord(Device, RANGE_CONFIG__TIMEOUT_MACROP_A_HI,
 23fd47c:	2351      	movs	r3, #81	; 0x51
			VL53L1_WrWord(Device, RANGE_CONFIG__TIMEOUT_MACROP_A_HI,
 23fd47e:	225e      	movs	r2, #94	; 0x5e
 23fd480:	4620      	mov	r0, r4
 23fd482:	69a1      	ldr	r1, [r4, #24]
 23fd484:	f7ff fedf 	bl	23fd246 <_ZN7VL53L1X13VL53L1_WrWordEP12VL53L1_Dev_ttt>
			VL53L1_WrWord(Device, RANGE_CONFIG__TIMEOUT_MACROP_B_HI,
 23fd488:	236e      	movs	r3, #110	; 0x6e
 23fd48a:	e7ef      	b.n	23fd46c <_ZN7VL53L1X27VL53L1X_SetTimingBudgetInMsEt+0x60>
			VL53L1_WrWord(Device, RANGE_CONFIG__TIMEOUT_MACROP_A_HI,
 23fd48c:	23d6      	movs	r3, #214	; 0xd6
 23fd48e:	e7f6      	b.n	23fd47e <_ZN7VL53L1X27VL53L1X_SetTimingBudgetInMsEt+0x72>
			VL53L1_WrWord(Device, RANGE_CONFIG__TIMEOUT_MACROP_A_HI,
 23fd490:	f44f 73d7 	mov.w	r3, #430	; 0x1ae
 23fd494:	225e      	movs	r2, #94	; 0x5e
 23fd496:	4620      	mov	r0, r4
 23fd498:	69a1      	ldr	r1, [r4, #24]
 23fd49a:	f7ff fed4 	bl	23fd246 <_ZN7VL53L1X13VL53L1_WrWordEP12VL53L1_Dev_ttt>
			VL53L1_WrWord(Device, RANGE_CONFIG__TIMEOUT_MACROP_B_HI,
 23fd49e:	f44f 73f4 	mov.w	r3, #488	; 0x1e8
 23fd4a2:	e7e3      	b.n	23fd46c <_ZN7VL53L1X27VL53L1X_SetTimingBudgetInMsEt+0x60>
			VL53L1_WrWord(Device, RANGE_CONFIG__TIMEOUT_MACROP_A_HI,
 23fd4a4:	f240 33e1 	movw	r3, #993	; 0x3e1
 23fd4a8:	225e      	movs	r2, #94	; 0x5e
 23fd4aa:	4620      	mov	r0, r4
 23fd4ac:	69a1      	ldr	r1, [r4, #24]
 23fd4ae:	f7ff feca 	bl	23fd246 <_ZN7VL53L1X13VL53L1_WrWordEP12VL53L1_Dev_ttt>
			VL53L1_WrWord(Device, RANGE_CONFIG__TIMEOUT_MACROP_B_HI,
 23fd4b2:	f240 4396 	movw	r3, #1174	; 0x496
 23fd4b6:	e7d9      	b.n	23fd46c <_ZN7VL53L1X27VL53L1X_SetTimingBudgetInMsEt+0x60>
			VL53L1_WrWord(Device, RANGE_CONFIG__TIMEOUT_MACROP_A_HI,
 23fd4b8:	f240 5391 	movw	r3, #1425	; 0x591
 23fd4bc:	225e      	movs	r2, #94	; 0x5e
 23fd4be:	4620      	mov	r0, r4
 23fd4c0:	69a1      	ldr	r1, [r4, #24]
 23fd4c2:	f7ff fec0 	bl	23fd246 <_ZN7VL53L1X13VL53L1_WrWordEP12VL53L1_Dev_ttt>
			VL53L1_WrWord(Device, RANGE_CONFIG__TIMEOUT_MACROP_B_HI,
 23fd4c6:	f240 53c1 	movw	r3, #1473	; 0x5c1
 23fd4ca:	e7cf      	b.n	23fd46c <_ZN7VL53L1X27VL53L1X_SetTimingBudgetInMsEt+0x60>
		switch (TimingBudgetInMs)
 23fd4cc:	2d64      	cmp	r5, #100	; 0x64
 23fd4ce:	d027      	beq.n	23fd520 <_ZN7VL53L1X27VL53L1X_SetTimingBudgetInMsEt+0x114>
 23fd4d0:	d80d      	bhi.n	23fd4ee <_ZN7VL53L1X27VL53L1X_SetTimingBudgetInMsEt+0xe2>
 23fd4d2:	2d21      	cmp	r5, #33	; 0x21
 23fd4d4:	d01a      	beq.n	23fd50c <_ZN7VL53L1X27VL53L1X_SetTimingBudgetInMsEt+0x100>
 23fd4d6:	2d32      	cmp	r5, #50	; 0x32
 23fd4d8:	d01a      	beq.n	23fd510 <_ZN7VL53L1X27VL53L1X_SetTimingBudgetInMsEt+0x104>
 23fd4da:	2d14      	cmp	r5, #20
 23fd4dc:	d1ac      	bne.n	23fd438 <_ZN7VL53L1X27VL53L1X_SetTimingBudgetInMsEt+0x2c>
			VL53L1_WrWord(Device, RANGE_CONFIG__TIMEOUT_MACROP_A_HI,
 23fd4de:	231e      	movs	r3, #30
 23fd4e0:	225e      	movs	r2, #94	; 0x5e
 23fd4e2:	4620      	mov	r0, r4
 23fd4e4:	69a1      	ldr	r1, [r4, #24]
 23fd4e6:	f7ff feae 	bl	23fd246 <_ZN7VL53L1X13VL53L1_WrWordEP12VL53L1_Dev_ttt>
			VL53L1_WrWord(Device, RANGE_CONFIG__TIMEOUT_MACROP_B_HI,
 23fd4ea:	2322      	movs	r3, #34	; 0x22
 23fd4ec:	e7be      	b.n	23fd46c <_ZN7VL53L1X27VL53L1X_SetTimingBudgetInMsEt+0x60>
		switch (TimingBudgetInMs)
 23fd4ee:	2dc8      	cmp	r5, #200	; 0xc8
 23fd4f0:	d020      	beq.n	23fd534 <_ZN7VL53L1X27VL53L1X_SetTimingBudgetInMsEt+0x128>
 23fd4f2:	f5b5 7ffa 	cmp.w	r5, #500	; 0x1f4
 23fd4f6:	d19f      	bne.n	23fd438 <_ZN7VL53L1X27VL53L1X_SetTimingBudgetInMsEt+0x2c>
			VL53L1_WrWord(Device, RANGE_CONFIG__TIMEOUT_MACROP_A_HI,
 23fd4f8:	f240 438f 	movw	r3, #1167	; 0x48f
 23fd4fc:	225e      	movs	r2, #94	; 0x5e
 23fd4fe:	4620      	mov	r0, r4
 23fd500:	69a1      	ldr	r1, [r4, #24]
 23fd502:	f7ff fea0 	bl	23fd246 <_ZN7VL53L1X13VL53L1_WrWordEP12VL53L1_Dev_ttt>
			VL53L1_WrWord(Device, RANGE_CONFIG__TIMEOUT_MACROP_B_HI,
 23fd506:	f240 43a4 	movw	r3, #1188	; 0x4a4
 23fd50a:	e7af      	b.n	23fd46c <_ZN7VL53L1X27VL53L1X_SetTimingBudgetInMsEt+0x60>
			VL53L1_WrWord(Device, RANGE_CONFIG__TIMEOUT_MACROP_A_HI,
 23fd50c:	2360      	movs	r3, #96	; 0x60
 23fd50e:	e7b6      	b.n	23fd47e <_ZN7VL53L1X27VL53L1X_SetTimingBudgetInMsEt+0x72>
			VL53L1_WrWord(Device, RANGE_CONFIG__TIMEOUT_MACROP_A_HI,
 23fd510:	23ad      	movs	r3, #173	; 0xad
 23fd512:	225e      	movs	r2, #94	; 0x5e
 23fd514:	4620      	mov	r0, r4
 23fd516:	69a1      	ldr	r1, [r4, #24]
 23fd518:	f7ff fe95 	bl	23fd246 <_ZN7VL53L1X13VL53L1_WrWordEP12VL53L1_Dev_ttt>
			VL53L1_WrWord(Device, RANGE_CONFIG__TIMEOUT_MACROP_B_HI,
 23fd51c:	23c6      	movs	r3, #198	; 0xc6
 23fd51e:	e7a5      	b.n	23fd46c <_ZN7VL53L1X27VL53L1X_SetTimingBudgetInMsEt+0x60>
			VL53L1_WrWord(Device, RANGE_CONFIG__TIMEOUT_MACROP_A_HI,
 23fd520:	f44f 73e6 	mov.w	r3, #460	; 0x1cc
 23fd524:	225e      	movs	r2, #94	; 0x5e
 23fd526:	4620      	mov	r0, r4
 23fd528:	69a1      	ldr	r1, [r4, #24]
 23fd52a:	f7ff fe8c 	bl	23fd246 <_ZN7VL53L1X13VL53L1_WrWordEP12VL53L1_Dev_ttt>
			VL53L1_WrWord(Device, RANGE_CONFIG__TIMEOUT_MACROP_B_HI,
 23fd52e:	f44f 73f5 	mov.w	r3, #490	; 0x1ea
 23fd532:	e79b      	b.n	23fd46c <_ZN7VL53L1X27VL53L1X_SetTimingBudgetInMsEt+0x60>
			VL53L1_WrWord(Device, RANGE_CONFIG__TIMEOUT_MACROP_A_HI,
 23fd534:	f240 23d9 	movw	r3, #729	; 0x2d9
 23fd538:	225e      	movs	r2, #94	; 0x5e
 23fd53a:	4620      	mov	r0, r4
 23fd53c:	69a1      	ldr	r1, [r4, #24]
 23fd53e:	f7ff fe82 	bl	23fd246 <_ZN7VL53L1X13VL53L1_WrWordEP12VL53L1_Dev_ttt>
			VL53L1_WrWord(Device, RANGE_CONFIG__TIMEOUT_MACROP_B_HI,
 23fd542:	f44f 733e 	mov.w	r3, #760	; 0x2f8
 23fd546:	e791      	b.n	23fd46c <_ZN7VL53L1X27VL53L1X_SetTimingBudgetInMsEt+0x60>

023fd548 <_ZN7VL53L1X13VL53L1_RdWordEP12VL53L1_Dev_ttPt>:
{
 23fd548:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 23fd54a:	461c      	mov	r4, r3
	uint8_t buffer[2] = {0, 0};
 23fd54c:	2300      	movs	r3, #0
 23fd54e:	f8ad 300c 	strh.w	r3, [sp, #12]
	status = VL53L1_I2CRead(Dev->I2cDevAddr, index, buffer, 2);
 23fd552:	2302      	movs	r3, #2
 23fd554:	7809      	ldrb	r1, [r1, #0]
 23fd556:	9300      	str	r3, [sp, #0]
 23fd558:	ab03      	add	r3, sp, #12
 23fd55a:	f7ff fe96 	bl	23fd28a <_ZN7VL53L1X14VL53L1_I2CReadEhtPht>
	if (!status)
 23fd55e:	b930      	cbnz	r0, 23fd56e <_ZN7VL53L1X13VL53L1_RdWordEP12VL53L1_Dev_ttPt+0x26>
		*data = (buffer[0] << 8) + buffer[1];
 23fd560:	f89d 200c 	ldrb.w	r2, [sp, #12]
 23fd564:	f89d 300d 	ldrb.w	r3, [sp, #13]
 23fd568:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 23fd56c:	8023      	strh	r3, [r4, #0]
}
 23fd56e:	b004      	add	sp, #16
 23fd570:	bd10      	pop	{r4, pc}

023fd572 <_ZN7VL53L1X27VL53L1X_GetTimingBudgetInMsEPt>:
{
 23fd572:	b513      	push	{r0, r1, r4, lr}
	status = VL53L1_RdWord(Device, RANGE_CONFIG__TIMEOUT_MACROP_A_HI, &Temp);
 23fd574:	225e      	movs	r2, #94	; 0x5e
 23fd576:	f10d 0306 	add.w	r3, sp, #6
{
 23fd57a:	460c      	mov	r4, r1
	status = VL53L1_RdWord(Device, RANGE_CONFIG__TIMEOUT_MACROP_A_HI, &Temp);
 23fd57c:	6981      	ldr	r1, [r0, #24]
 23fd57e:	f7ff ffe3 	bl	23fd548 <_ZN7VL53L1X13VL53L1_RdWordEP12VL53L1_Dev_ttPt>
	switch (Temp)
 23fd582:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 23fd586:	f5b3 7fd7 	cmp.w	r3, #430	; 0x1ae
 23fd58a:	d034      	beq.n	23fd5f6 <_ZN7VL53L1X27VL53L1X_GetTimingBudgetInMsEPt+0x84>
 23fd58c:	d810      	bhi.n	23fd5b0 <_ZN7VL53L1X27VL53L1X_GetTimingBudgetInMsEPt+0x3e>
 23fd58e:	2b51      	cmp	r3, #81	; 0x51
 23fd590:	d02f      	beq.n	23fd5f2 <_ZN7VL53L1X27VL53L1X_GetTimingBudgetInMsEPt+0x80>
 23fd592:	d805      	bhi.n	23fd5a0 <_ZN7VL53L1X27VL53L1X_GetTimingBudgetInMsEPt+0x2e>
 23fd594:	2b1d      	cmp	r3, #29
 23fd596:	d028      	beq.n	23fd5ea <_ZN7VL53L1X27VL53L1X_GetTimingBudgetInMsEPt+0x78>
 23fd598:	2b1e      	cmp	r3, #30
 23fd59a:	d02a      	beq.n	23fd5f2 <_ZN7VL53L1X27VL53L1X_GetTimingBudgetInMsEPt+0x80>
		*pTimingBudget = 0;
 23fd59c:	2300      	movs	r3, #0
 23fd59e:	e025      	b.n	23fd5ec <_ZN7VL53L1X27VL53L1X_GetTimingBudgetInMsEPt+0x7a>
	switch (Temp)
 23fd5a0:	2bad      	cmp	r3, #173	; 0xad
 23fd5a2:	d028      	beq.n	23fd5f6 <_ZN7VL53L1X27VL53L1X_GetTimingBudgetInMsEPt+0x84>
 23fd5a4:	2bd6      	cmp	r3, #214	; 0xd6
 23fd5a6:	d001      	beq.n	23fd5ac <_ZN7VL53L1X27VL53L1X_GetTimingBudgetInMsEPt+0x3a>
 23fd5a8:	2b60      	cmp	r3, #96	; 0x60
 23fd5aa:	d1f7      	bne.n	23fd59c <_ZN7VL53L1X27VL53L1X_GetTimingBudgetInMsEPt+0x2a>
		*pTimingBudget = 33;
 23fd5ac:	2321      	movs	r3, #33	; 0x21
 23fd5ae:	e01d      	b.n	23fd5ec <_ZN7VL53L1X27VL53L1X_GetTimingBudgetInMsEPt+0x7a>
	switch (Temp)
 23fd5b0:	f240 32e1 	movw	r2, #993	; 0x3e1
 23fd5b4:	4293      	cmp	r3, r2
 23fd5b6:	d020      	beq.n	23fd5fa <_ZN7VL53L1X27VL53L1X_GetTimingBudgetInMsEPt+0x88>
 23fd5b8:	d80c      	bhi.n	23fd5d4 <_ZN7VL53L1X27VL53L1X_GetTimingBudgetInMsEPt+0x62>
 23fd5ba:	f240 22d9 	movw	r2, #729	; 0x2d9
 23fd5be:	4293      	cmp	r3, r2
 23fd5c0:	d01b      	beq.n	23fd5fa <_ZN7VL53L1X27VL53L1X_GetTimingBudgetInMsEPt+0x88>
 23fd5c2:	f240 22e1 	movw	r2, #737	; 0x2e1
 23fd5c6:	4293      	cmp	r3, r2
 23fd5c8:	d002      	beq.n	23fd5d0 <_ZN7VL53L1X27VL53L1X_GetTimingBudgetInMsEPt+0x5e>
 23fd5ca:	f5b3 7fe6 	cmp.w	r3, #460	; 0x1cc
 23fd5ce:	d1e5      	bne.n	23fd59c <_ZN7VL53L1X27VL53L1X_GetTimingBudgetInMsEPt+0x2a>
		*pTimingBudget = 100;
 23fd5d0:	2364      	movs	r3, #100	; 0x64
 23fd5d2:	e00b      	b.n	23fd5ec <_ZN7VL53L1X27VL53L1X_GetTimingBudgetInMsEPt+0x7a>
	switch (Temp)
 23fd5d4:	f240 428f 	movw	r2, #1167	; 0x48f
 23fd5d8:	4293      	cmp	r3, r2
 23fd5da:	d003      	beq.n	23fd5e4 <_ZN7VL53L1X27VL53L1X_GetTimingBudgetInMsEPt+0x72>
 23fd5dc:	f240 5291 	movw	r2, #1425	; 0x591
 23fd5e0:	4293      	cmp	r3, r2
 23fd5e2:	d1db      	bne.n	23fd59c <_ZN7VL53L1X27VL53L1X_GetTimingBudgetInMsEPt+0x2a>
		*pTimingBudget = 500;
 23fd5e4:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 23fd5e8:	e000      	b.n	23fd5ec <_ZN7VL53L1X27VL53L1X_GetTimingBudgetInMsEPt+0x7a>
		*pTimingBudget = 15;
 23fd5ea:	230f      	movs	r3, #15
		*pTimingBudget = 0;
 23fd5ec:	8023      	strh	r3, [r4, #0]
}
 23fd5ee:	b002      	add	sp, #8
 23fd5f0:	bd10      	pop	{r4, pc}
		*pTimingBudget = 20;
 23fd5f2:	2314      	movs	r3, #20
 23fd5f4:	e7fa      	b.n	23fd5ec <_ZN7VL53L1X27VL53L1X_GetTimingBudgetInMsEPt+0x7a>
		*pTimingBudget = 50;
 23fd5f6:	2332      	movs	r3, #50	; 0x32
 23fd5f8:	e7f8      	b.n	23fd5ec <_ZN7VL53L1X27VL53L1X_GetTimingBudgetInMsEPt+0x7a>
		*pTimingBudget = 200;
 23fd5fa:	23c8      	movs	r3, #200	; 0xc8
 23fd5fc:	e7f6      	b.n	23fd5ec <_ZN7VL53L1X27VL53L1X_GetTimingBudgetInMsEPt+0x7a>

023fd5fe <_ZN7VL53L1X23VL53L1X_SetDistanceModeEt>:
{
 23fd5fe:	b537      	push	{r0, r1, r2, r4, r5, lr}
 23fd600:	460d      	mov	r5, r1
	status = VL53L1X_GetTimingBudgetInMs(&TB);
 23fd602:	f10d 0106 	add.w	r1, sp, #6
{
 23fd606:	4604      	mov	r4, r0
	status = VL53L1X_GetTimingBudgetInMs(&TB);
 23fd608:	f7ff ffb3 	bl	23fd572 <_ZN7VL53L1X27VL53L1X_GetTimingBudgetInMsEPt>
	switch (DM)
 23fd60c:	2d01      	cmp	r5, #1
 23fd60e:	d008      	beq.n	23fd622 <_ZN7VL53L1X23VL53L1X_SetDistanceModeEt+0x24>
 23fd610:	2d02      	cmp	r5, #2
 23fd612:	d02d      	beq.n	23fd670 <_ZN7VL53L1X23VL53L1X_SetDistanceModeEt+0x72>
	status = VL53L1X_SetTimingBudgetInMs(TB);
 23fd614:	4620      	mov	r0, r4
 23fd616:	f8bd 1006 	ldrh.w	r1, [sp, #6]
 23fd61a:	f7ff fef7 	bl	23fd40c <_ZN7VL53L1X27VL53L1X_SetTimingBudgetInMsEt>
}
 23fd61e:	b003      	add	sp, #12
 23fd620:	bd30      	pop	{r4, r5, pc}
		status = VL53L1_WrByte(Device, PHASECAL_CONFIG__TIMEOUT_MACROP, 0x14);
 23fd622:	2314      	movs	r3, #20
 23fd624:	224b      	movs	r2, #75	; 0x4b
 23fd626:	69a1      	ldr	r1, [r4, #24]
 23fd628:	4620      	mov	r0, r4
 23fd62a:	f7ff fdce 	bl	23fd1ca <_ZN7VL53L1X13VL53L1_WrByteEP12VL53L1_Dev_tth>
		status = VL53L1_WrByte(Device, RANGE_CONFIG__VCSEL_PERIOD_A, 0x07);
 23fd62e:	2307      	movs	r3, #7
 23fd630:	2260      	movs	r2, #96	; 0x60
 23fd632:	69a1      	ldr	r1, [r4, #24]
 23fd634:	4620      	mov	r0, r4
 23fd636:	f7ff fdc8 	bl	23fd1ca <_ZN7VL53L1X13VL53L1_WrByteEP12VL53L1_Dev_tth>
		status = VL53L1_WrByte(Device, RANGE_CONFIG__VCSEL_PERIOD_B, 0x05);
 23fd63a:	2305      	movs	r3, #5
 23fd63c:	2263      	movs	r2, #99	; 0x63
 23fd63e:	69a1      	ldr	r1, [r4, #24]
 23fd640:	4620      	mov	r0, r4
 23fd642:	f7ff fdc2 	bl	23fd1ca <_ZN7VL53L1X13VL53L1_WrByteEP12VL53L1_Dev_tth>
		status = VL53L1_WrByte(Device, RANGE_CONFIG__VALID_PHASE_HIGH, 0x38);
 23fd646:	2338      	movs	r3, #56	; 0x38
 23fd648:	2269      	movs	r2, #105	; 0x69
 23fd64a:	69a1      	ldr	r1, [r4, #24]
 23fd64c:	4620      	mov	r0, r4
 23fd64e:	f7ff fdbc 	bl	23fd1ca <_ZN7VL53L1X13VL53L1_WrByteEP12VL53L1_Dev_tth>
		status = VL53L1_WrWord(Device, SD_CONFIG__WOI_SD0, 0x0705);
 23fd652:	f240 7305 	movw	r3, #1797	; 0x705
 23fd656:	2278      	movs	r2, #120	; 0x78
 23fd658:	4620      	mov	r0, r4
 23fd65a:	69a1      	ldr	r1, [r4, #24]
 23fd65c:	f7ff fdf3 	bl	23fd246 <_ZN7VL53L1X13VL53L1_WrWordEP12VL53L1_Dev_ttt>
		status = VL53L1_WrWord(Device, SD_CONFIG__INITIAL_PHASE_SD0, 0x0606);
 23fd660:	f240 6306 	movw	r3, #1542	; 0x606
		status = VL53L1_WrWord(Device, SD_CONFIG__INITIAL_PHASE_SD0, 0x0E0E);
 23fd664:	227a      	movs	r2, #122	; 0x7a
 23fd666:	4620      	mov	r0, r4
 23fd668:	69a1      	ldr	r1, [r4, #24]
 23fd66a:	f7ff fdec 	bl	23fd246 <_ZN7VL53L1X13VL53L1_WrWordEP12VL53L1_Dev_ttt>
		break;
 23fd66e:	e7d1      	b.n	23fd614 <_ZN7VL53L1X23VL53L1X_SetDistanceModeEt+0x16>
		status = VL53L1_WrByte(Device, PHASECAL_CONFIG__TIMEOUT_MACROP, 0x0A);
 23fd670:	230a      	movs	r3, #10
 23fd672:	224b      	movs	r2, #75	; 0x4b
 23fd674:	69a1      	ldr	r1, [r4, #24]
 23fd676:	4620      	mov	r0, r4
 23fd678:	f7ff fda7 	bl	23fd1ca <_ZN7VL53L1X13VL53L1_WrByteEP12VL53L1_Dev_tth>
		status = VL53L1_WrByte(Device, RANGE_CONFIG__VCSEL_PERIOD_A, 0x0F);
 23fd67c:	230f      	movs	r3, #15
 23fd67e:	2260      	movs	r2, #96	; 0x60
 23fd680:	69a1      	ldr	r1, [r4, #24]
 23fd682:	4620      	mov	r0, r4
 23fd684:	f7ff fda1 	bl	23fd1ca <_ZN7VL53L1X13VL53L1_WrByteEP12VL53L1_Dev_tth>
		status = VL53L1_WrByte(Device, RANGE_CONFIG__VCSEL_PERIOD_B, 0x0D);
 23fd688:	230d      	movs	r3, #13
 23fd68a:	2263      	movs	r2, #99	; 0x63
 23fd68c:	69a1      	ldr	r1, [r4, #24]
 23fd68e:	4620      	mov	r0, r4
 23fd690:	f7ff fd9b 	bl	23fd1ca <_ZN7VL53L1X13VL53L1_WrByteEP12VL53L1_Dev_tth>
		status = VL53L1_WrByte(Device, RANGE_CONFIG__VALID_PHASE_HIGH, 0xB8);
 23fd694:	23b8      	movs	r3, #184	; 0xb8
 23fd696:	2269      	movs	r2, #105	; 0x69
 23fd698:	69a1      	ldr	r1, [r4, #24]
 23fd69a:	4620      	mov	r0, r4
 23fd69c:	f7ff fd95 	bl	23fd1ca <_ZN7VL53L1X13VL53L1_WrByteEP12VL53L1_Dev_tth>
		status = VL53L1_WrWord(Device, SD_CONFIG__WOI_SD0, 0x0F0D);
 23fd6a0:	f640 730d 	movw	r3, #3853	; 0xf0d
 23fd6a4:	2278      	movs	r2, #120	; 0x78
 23fd6a6:	4620      	mov	r0, r4
 23fd6a8:	69a1      	ldr	r1, [r4, #24]
 23fd6aa:	f7ff fdcc 	bl	23fd246 <_ZN7VL53L1X13VL53L1_WrWordEP12VL53L1_Dev_ttt>
		status = VL53L1_WrWord(Device, SD_CONFIG__INITIAL_PHASE_SD0, 0x0E0E);
 23fd6ae:	f640 630e 	movw	r3, #3598	; 0xe0e
 23fd6b2:	e7d7      	b.n	23fd664 <_ZN7VL53L1X23VL53L1X_SetDistanceModeEt+0x66>
 23fd6b4:	0000      	movs	r0, r0
	...

023fd6b8 <_ZN7VL53L1X31VL53L1X_SetInterMeasurementInMsEt>:
{
 23fd6b8:	b573      	push	{r0, r1, r4, r5, r6, lr}
	status = VL53L1_RdWord(Device, VL53L1_RESULT__OSC_CALIBRATE_VAL, &ClockPLL);
 23fd6ba:	22de      	movs	r2, #222	; 0xde
{
 23fd6bc:	460e      	mov	r6, r1
	status = VL53L1_RdWord(Device, VL53L1_RESULT__OSC_CALIBRATE_VAL, &ClockPLL);
 23fd6be:	f10d 0306 	add.w	r3, sp, #6
 23fd6c2:	6981      	ldr	r1, [r0, #24]
{
 23fd6c4:	4604      	mov	r4, r0
	status = VL53L1_RdWord(Device, VL53L1_RESULT__OSC_CALIBRATE_VAL, &ClockPLL);
 23fd6c6:	f7ff ff3f 	bl	23fd548 <_ZN7VL53L1X13VL53L1_RdWordEP12VL53L1_Dev_ttPt>
	ClockPLL = ClockPLL & 0x3FF;
 23fd6ca:	f8bd 3006 	ldrh.w	r3, [sp, #6]
	status = VL53L1_RdWord(Device, VL53L1_RESULT__OSC_CALIBRATE_VAL, &ClockPLL);
 23fd6ce:	4605      	mov	r5, r0
	ClockPLL = ClockPLL & 0x3FF;
 23fd6d0:	f3c3 0309 	ubfx	r3, r3, #0, #10
				   (uint32_t)(ClockPLL * InterMeasMs * 1.075));
 23fd6d4:	fb06 f003 	mul.w	r0, r6, r3
	ClockPLL = ClockPLL & 0x3FF;
 23fd6d8:	f8ad 3006 	strh.w	r3, [sp, #6]
				   (uint32_t)(ClockPLL * InterMeasMs * 1.075));
 23fd6dc:	f7fd fa96 	bl	23fac0c <__aeabi_i2d>
 23fd6e0:	a307      	add	r3, pc, #28	; (adr r3, 23fd700 <_ZN7VL53L1X31VL53L1X_SetInterMeasurementInMsEt+0x48>)
 23fd6e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 23fd6e6:	f7fd fafb 	bl	23face0 <__aeabi_dmul>
	VL53L1_WrDWord(Device, VL53L1_SYSTEM__INTERMEASUREMENT_PERIOD,
 23fd6ea:	f7fd fd93 	bl	23fb214 <__aeabi_d2uiz>
 23fd6ee:	226c      	movs	r2, #108	; 0x6c
 23fd6f0:	4603      	mov	r3, r0
 23fd6f2:	69a1      	ldr	r1, [r4, #24]
 23fd6f4:	4620      	mov	r0, r4
 23fd6f6:	f7ff fdb4 	bl	23fd262 <_ZN7VL53L1X14VL53L1_WrDWordEP12VL53L1_Dev_ttm>
}
 23fd6fa:	4628      	mov	r0, r5
 23fd6fc:	b002      	add	sp, #8
 23fd6fe:	bd70      	pop	{r4, r5, r6, pc}
 23fd700:	33333333 	.word	0x33333333
 23fd704:	3ff13333 	.word	0x3ff13333

023fd708 <_ZN7VL53L1X19VL53L1X_GetSensorIdEPt>:
	uint16_t tmp = 0;
 23fd708:	2300      	movs	r3, #0
{
 23fd70a:	b513      	push	{r0, r1, r4, lr}
	status = VL53L1_RdWord(Device, VL53L1_IDENTIFICATION__MODEL_ID, &tmp);
 23fd70c:	f240 120f 	movw	r2, #271	; 0x10f
{
 23fd710:	460c      	mov	r4, r1
	uint16_t tmp = 0;
 23fd712:	f8ad 3006 	strh.w	r3, [sp, #6]
	status = VL53L1_RdWord(Device, VL53L1_IDENTIFICATION__MODEL_ID, &tmp);
 23fd716:	6981      	ldr	r1, [r0, #24]
 23fd718:	f10d 0306 	add.w	r3, sp, #6
 23fd71c:	f7ff ff14 	bl	23fd548 <_ZN7VL53L1X13VL53L1_RdWordEP12VL53L1_Dev_ttPt>
	*sensorId = tmp;
 23fd720:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 23fd724:	8023      	strh	r3, [r4, #0]
}
 23fd726:	b002      	add	sp, #8
 23fd728:	bd10      	pop	{r4, pc}

023fd72a <_ZN7VL53L1X19VL53L1X_GetDistanceEPt>:
{
 23fd72a:	b513      	push	{r0, r1, r4, lr}
	status = (VL53L1_RdWord(Device,
 23fd72c:	2296      	movs	r2, #150	; 0x96
{
 23fd72e:	460c      	mov	r4, r1
	status = (VL53L1_RdWord(Device,
 23fd730:	f10d 0306 	add.w	r3, sp, #6
 23fd734:	6981      	ldr	r1, [r0, #24]
 23fd736:	f7ff ff07 	bl	23fd548 <_ZN7VL53L1X13VL53L1_RdWordEP12VL53L1_Dev_ttPt>
	*distance = tmp;
 23fd73a:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 23fd73e:	8023      	strh	r3, [r4, #0]
}
 23fd740:	b002      	add	sp, #8
 23fd742:	bd10      	pop	{r4, pc}

023fd744 <os_mutex_recursive_create>:
DYNALIB_FN(13, hal_concurrent, os_mutex_destroy, int(os_mutex_t))
DYNALIB_FN(14, hal_concurrent, os_mutex_lock, int(os_mutex_t))
DYNALIB_FN(15, hal_concurrent, os_mutex_trylock, int(os_mutex_t))
DYNALIB_FN(16, hal_concurrent, os_mutex_unlock, int(os_mutex_t))

DYNALIB_FN(17, hal_concurrent, os_mutex_recursive_create, int(os_mutex_recursive_t*))
 23fd744:	b509      	push	{r0, r3, lr}
 23fd746:	4804      	ldr	r0, [pc, #16]	; (23fd758 <os_mutex_recursive_create+0x14>)
 23fd748:	6800      	ldr	r0, [r0, #0]
 23fd74a:	4b04      	ldr	r3, [pc, #16]	; (23fd75c <os_mutex_recursive_create+0x18>)
 23fd74c:	4403      	add	r3, r0
 23fd74e:	681b      	ldr	r3, [r3, #0]
 23fd750:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 23fd752:	9302      	str	r3, [sp, #8]
 23fd754:	bd09      	pop	{r0, r3, pc}
 23fd756:	0000      	.short	0x0000
 23fd758:	1007ad48 	.word	0x1007ad48
 23fd75c:	00000030 	.word	0x00000030

023fd760 <HAL_RNG_GetRandomNumber>:

DYNALIB_BEGIN(hal)

#if PLATFORM_ID > PLATFORM_GCC
DYNALIB_FN(0, hal, HAL_RNG_Configuration, void(void))
DYNALIB_FN(1, hal, HAL_RNG_GetRandomNumber, uint32_t(void))
 23fd760:	b509      	push	{r0, r3, lr}
 23fd762:	4804      	ldr	r0, [pc, #16]	; (23fd774 <HAL_RNG_GetRandomNumber+0x14>)
 23fd764:	6800      	ldr	r0, [r0, #0]
 23fd766:	4b04      	ldr	r3, [pc, #16]	; (23fd778 <HAL_RNG_GetRandomNumber+0x18>)
 23fd768:	4403      	add	r3, r0
 23fd76a:	681b      	ldr	r3, [r3, #0]
 23fd76c:	685b      	ldr	r3, [r3, #4]
 23fd76e:	9302      	str	r3, [sp, #8]
 23fd770:	bd09      	pop	{r0, r3, pc}
 23fd772:	0000      	.short	0x0000
 23fd774:	1007ad48 	.word	0x1007ad48
 23fd778:	00000000 	.word	0x00000000

023fd77c <HAL_Delay_Microseconds>:
#else
#define BASE_IDX 0
#endif // PLATFORM_ID > PLATFORM_GCC

DYNALIB_FN(BASE_IDX + 0, hal, HAL_Delay_Milliseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 1, hal, HAL_Delay_Microseconds, void(uint32_t))
 23fd77c:	b509      	push	{r0, r3, lr}
 23fd77e:	4804      	ldr	r0, [pc, #16]	; (23fd790 <HAL_Delay_Microseconds+0x14>)
 23fd780:	6800      	ldr	r0, [r0, #0]
 23fd782:	4b04      	ldr	r3, [pc, #16]	; (23fd794 <HAL_Delay_Microseconds+0x18>)
 23fd784:	4403      	add	r3, r0
 23fd786:	681b      	ldr	r3, [r3, #0]
 23fd788:	68db      	ldr	r3, [r3, #12]
 23fd78a:	9302      	str	r3, [sp, #8]
 23fd78c:	bd09      	pop	{r0, r3, pc}
 23fd78e:	0000      	.short	0x0000
 23fd790:	1007ad48 	.word	0x1007ad48
 23fd794:	00000000 	.word	0x00000000

023fd798 <HAL_Timer_Get_Milli_Seconds>:
DYNALIB_FN(BASE_IDX + 2, hal, HAL_Timer_Get_Micro_Seconds, system_tick_t(void))
DYNALIB_FN(BASE_IDX + 3, hal, HAL_Timer_Get_Milli_Seconds, system_tick_t(void))
 23fd798:	b509      	push	{r0, r3, lr}
 23fd79a:	4804      	ldr	r0, [pc, #16]	; (23fd7ac <HAL_Timer_Get_Milli_Seconds+0x14>)
 23fd79c:	6800      	ldr	r0, [r0, #0]
 23fd79e:	4b04      	ldr	r3, [pc, #16]	; (23fd7b0 <HAL_Timer_Get_Milli_Seconds+0x18>)
 23fd7a0:	4403      	add	r3, r0
 23fd7a2:	681b      	ldr	r3, [r3, #0]
 23fd7a4:	695b      	ldr	r3, [r3, #20]
 23fd7a6:	9302      	str	r3, [sp, #8]
 23fd7a8:	bd09      	pop	{r0, r3, pc}
 23fd7aa:	0000      	.short	0x0000
 23fd7ac:	1007ad48 	.word	0x1007ad48
 23fd7b0:	00000000 	.word	0x00000000

023fd7b4 <hal_gpio_mode>:

DYNALIB_BEGIN(hal_gpio)

DYNALIB_FN(0, hal_gpio, hal_pin_map, hal_pin_info_t*(void))
DYNALIB_FN(1, hal_gpio, hal_pin_validate_function, PinFunction(hal_pin_t, PinFunction))
DYNALIB_FN(2, hal_gpio, hal_gpio_mode, void(hal_pin_t, PinMode))
 23fd7b4:	b509      	push	{r0, r3, lr}
 23fd7b6:	4804      	ldr	r0, [pc, #16]	; (23fd7c8 <hal_gpio_mode+0x14>)
 23fd7b8:	6800      	ldr	r0, [r0, #0]
 23fd7ba:	4b04      	ldr	r3, [pc, #16]	; (23fd7cc <hal_gpio_mode+0x18>)
 23fd7bc:	4403      	add	r3, r0
 23fd7be:	681b      	ldr	r3, [r3, #0]
 23fd7c0:	689b      	ldr	r3, [r3, #8]
 23fd7c2:	9302      	str	r3, [sp, #8]
 23fd7c4:	bd09      	pop	{r0, r3, pc}
 23fd7c6:	0000      	.short	0x0000
 23fd7c8:	1007ad48 	.word	0x1007ad48
 23fd7cc:	00000014 	.word	0x00000014

023fd7d0 <hal_gpio_get_mode>:
DYNALIB_FN(3, hal_gpio, hal_gpio_get_mode, PinMode(hal_pin_t))
 23fd7d0:	b509      	push	{r0, r3, lr}
 23fd7d2:	4804      	ldr	r0, [pc, #16]	; (23fd7e4 <hal_gpio_get_mode+0x14>)
 23fd7d4:	6800      	ldr	r0, [r0, #0]
 23fd7d6:	4b04      	ldr	r3, [pc, #16]	; (23fd7e8 <hal_gpio_get_mode+0x18>)
 23fd7d8:	4403      	add	r3, r0
 23fd7da:	681b      	ldr	r3, [r3, #0]
 23fd7dc:	68db      	ldr	r3, [r3, #12]
 23fd7de:	9302      	str	r3, [sp, #8]
 23fd7e0:	bd09      	pop	{r0, r3, pc}
 23fd7e2:	0000      	.short	0x0000
 23fd7e4:	1007ad48 	.word	0x1007ad48
 23fd7e8:	00000014 	.word	0x00000014

023fd7ec <hal_gpio_write>:
DYNALIB_FN(4, hal_gpio, hal_gpio_write, void(hal_pin_t, uint8_t))
 23fd7ec:	b509      	push	{r0, r3, lr}
 23fd7ee:	4804      	ldr	r0, [pc, #16]	; (23fd800 <hal_gpio_write+0x14>)
 23fd7f0:	6800      	ldr	r0, [r0, #0]
 23fd7f2:	4b04      	ldr	r3, [pc, #16]	; (23fd804 <hal_gpio_write+0x18>)
 23fd7f4:	4403      	add	r3, r0
 23fd7f6:	681b      	ldr	r3, [r3, #0]
 23fd7f8:	691b      	ldr	r3, [r3, #16]
 23fd7fa:	9302      	str	r3, [sp, #8]
 23fd7fc:	bd09      	pop	{r0, r3, pc}
 23fd7fe:	0000      	.short	0x0000
 23fd800:	1007ad48 	.word	0x1007ad48
 23fd804:	00000014 	.word	0x00000014

023fd808 <hal_i2c_begin>:
DYNALIB_BEGIN(hal_i2c)

DYNALIB_FN(0, hal_i2c, hal_i2c_set_speed, void(hal_i2c_interface_t, uint32_t, void*))
DYNALIB_FN(1, hal_i2c, hal_i2c_enable_dma_mode, void(hal_i2c_interface_t, bool, void*))
DYNALIB_FN(2, hal_i2c, hal_i2c_stretch_clock, void(hal_i2c_interface_t, bool, void*))
DYNALIB_FN(3, hal_i2c, hal_i2c_begin, void(hal_i2c_interface_t, hal_i2c_mode_t, uint8_t, void*))
 23fd808:	b509      	push	{r0, r3, lr}
 23fd80a:	4804      	ldr	r0, [pc, #16]	; (23fd81c <hal_i2c_begin+0x14>)
 23fd80c:	6800      	ldr	r0, [r0, #0]
 23fd80e:	4b04      	ldr	r3, [pc, #16]	; (23fd820 <hal_i2c_begin+0x18>)
 23fd810:	4403      	add	r3, r0
 23fd812:	681b      	ldr	r3, [r3, #0]
 23fd814:	68db      	ldr	r3, [r3, #12]
 23fd816:	9302      	str	r3, [sp, #8]
 23fd818:	bd09      	pop	{r0, r3, pc}
 23fd81a:	0000      	.short	0x0000
 23fd81c:	1007ad48 	.word	0x1007ad48
 23fd820:	00000010 	.word	0x00000010

023fd824 <hal_i2c_begin_transmission>:
DYNALIB_FN(4, hal_i2c, hal_i2c_end, void(hal_i2c_interface_t, void*))
DYNALIB_FN(5, hal_i2c, hal_i2c_request, uint32_t(hal_i2c_interface_t, uint8_t, uint8_t, uint8_t, void*))
DYNALIB_FN(6, hal_i2c, hal_i2c_begin_transmission, void(hal_i2c_interface_t, uint8_t, const hal_i2c_transmission_config_t*))
 23fd824:	b509      	push	{r0, r3, lr}
 23fd826:	4804      	ldr	r0, [pc, #16]	; (23fd838 <hal_i2c_begin_transmission+0x14>)
 23fd828:	6800      	ldr	r0, [r0, #0]
 23fd82a:	4b04      	ldr	r3, [pc, #16]	; (23fd83c <hal_i2c_begin_transmission+0x18>)
 23fd82c:	4403      	add	r3, r0
 23fd82e:	681b      	ldr	r3, [r3, #0]
 23fd830:	699b      	ldr	r3, [r3, #24]
 23fd832:	9302      	str	r3, [sp, #8]
 23fd834:	bd09      	pop	{r0, r3, pc}
 23fd836:	0000      	.short	0x0000
 23fd838:	1007ad48 	.word	0x1007ad48
 23fd83c:	00000010 	.word	0x00000010

023fd840 <hal_i2c_end_transmission>:
DYNALIB_FN(7, hal_i2c, hal_i2c_end_transmission, uint8_t(hal_i2c_interface_t, uint8_t, void*))
 23fd840:	b509      	push	{r0, r3, lr}
 23fd842:	4804      	ldr	r0, [pc, #16]	; (23fd854 <hal_i2c_end_transmission+0x14>)
 23fd844:	6800      	ldr	r0, [r0, #0]
 23fd846:	4b04      	ldr	r3, [pc, #16]	; (23fd858 <hal_i2c_end_transmission+0x18>)
 23fd848:	4403      	add	r3, r0
 23fd84a:	681b      	ldr	r3, [r3, #0]
 23fd84c:	69db      	ldr	r3, [r3, #28]
 23fd84e:	9302      	str	r3, [sp, #8]
 23fd850:	bd09      	pop	{r0, r3, pc}
 23fd852:	0000      	.short	0x0000
 23fd854:	1007ad48 	.word	0x1007ad48
 23fd858:	00000010 	.word	0x00000010

023fd85c <hal_i2c_write>:
DYNALIB_FN(8, hal_i2c, hal_i2c_write, uint32_t(hal_i2c_interface_t, uint8_t, void*))
 23fd85c:	b509      	push	{r0, r3, lr}
 23fd85e:	4804      	ldr	r0, [pc, #16]	; (23fd870 <hal_i2c_write+0x14>)
 23fd860:	6800      	ldr	r0, [r0, #0]
 23fd862:	4b04      	ldr	r3, [pc, #16]	; (23fd874 <hal_i2c_write+0x18>)
 23fd864:	4403      	add	r3, r0
 23fd866:	681b      	ldr	r3, [r3, #0]
 23fd868:	6a1b      	ldr	r3, [r3, #32]
 23fd86a:	9302      	str	r3, [sp, #8]
 23fd86c:	bd09      	pop	{r0, r3, pc}
 23fd86e:	0000      	.short	0x0000
 23fd870:	1007ad48 	.word	0x1007ad48
 23fd874:	00000010 	.word	0x00000010

023fd878 <hal_i2c_available>:
DYNALIB_FN(9, hal_i2c, hal_i2c_available, int32_t(hal_i2c_interface_t, void*))
 23fd878:	b509      	push	{r0, r3, lr}
 23fd87a:	4804      	ldr	r0, [pc, #16]	; (23fd88c <hal_i2c_available+0x14>)
 23fd87c:	6800      	ldr	r0, [r0, #0]
 23fd87e:	4b04      	ldr	r3, [pc, #16]	; (23fd890 <hal_i2c_available+0x18>)
 23fd880:	4403      	add	r3, r0
 23fd882:	681b      	ldr	r3, [r3, #0]
 23fd884:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 23fd886:	9302      	str	r3, [sp, #8]
 23fd888:	bd09      	pop	{r0, r3, pc}
 23fd88a:	0000      	.short	0x0000
 23fd88c:	1007ad48 	.word	0x1007ad48
 23fd890:	00000010 	.word	0x00000010

023fd894 <hal_i2c_read>:
DYNALIB_FN(10, hal_i2c, hal_i2c_read, int32_t(hal_i2c_interface_t, void*))
 23fd894:	b509      	push	{r0, r3, lr}
 23fd896:	4804      	ldr	r0, [pc, #16]	; (23fd8a8 <hal_i2c_read+0x14>)
 23fd898:	6800      	ldr	r0, [r0, #0]
 23fd89a:	4b04      	ldr	r3, [pc, #16]	; (23fd8ac <hal_i2c_read+0x18>)
 23fd89c:	4403      	add	r3, r0
 23fd89e:	681b      	ldr	r3, [r3, #0]
 23fd8a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 23fd8a2:	9302      	str	r3, [sp, #8]
 23fd8a4:	bd09      	pop	{r0, r3, pc}
 23fd8a6:	0000      	.short	0x0000
 23fd8a8:	1007ad48 	.word	0x1007ad48
 23fd8ac:	00000010 	.word	0x00000010

023fd8b0 <hal_i2c_peek>:
DYNALIB_FN(11, hal_i2c, hal_i2c_peek, int32_t(hal_i2c_interface_t, void*))
 23fd8b0:	b509      	push	{r0, r3, lr}
 23fd8b2:	4804      	ldr	r0, [pc, #16]	; (23fd8c4 <hal_i2c_peek+0x14>)
 23fd8b4:	6800      	ldr	r0, [r0, #0]
 23fd8b6:	4b04      	ldr	r3, [pc, #16]	; (23fd8c8 <hal_i2c_peek+0x18>)
 23fd8b8:	4403      	add	r3, r0
 23fd8ba:	681b      	ldr	r3, [r3, #0]
 23fd8bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 23fd8be:	9302      	str	r3, [sp, #8]
 23fd8c0:	bd09      	pop	{r0, r3, pc}
 23fd8c2:	0000      	.short	0x0000
 23fd8c4:	1007ad48 	.word	0x1007ad48
 23fd8c8:	00000010 	.word	0x00000010

023fd8cc <hal_i2c_flush>:
DYNALIB_FN(12, hal_i2c, hal_i2c_flush, void(hal_i2c_interface_t, void*))
 23fd8cc:	b509      	push	{r0, r3, lr}
 23fd8ce:	4804      	ldr	r0, [pc, #16]	; (23fd8e0 <hal_i2c_flush+0x14>)
 23fd8d0:	6800      	ldr	r0, [r0, #0]
 23fd8d2:	4b04      	ldr	r3, [pc, #16]	; (23fd8e4 <hal_i2c_flush+0x18>)
 23fd8d4:	4403      	add	r3, r0
 23fd8d6:	681b      	ldr	r3, [r3, #0]
 23fd8d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 23fd8da:	9302      	str	r3, [sp, #8]
 23fd8dc:	bd09      	pop	{r0, r3, pc}
 23fd8de:	0000      	.short	0x0000
 23fd8e0:	1007ad48 	.word	0x1007ad48
 23fd8e4:	00000010 	.word	0x00000010

023fd8e8 <hal_i2c_is_enabled>:
DYNALIB_FN(13, hal_i2c, hal_i2c_is_enabled, bool(hal_i2c_interface_t, void*))
 23fd8e8:	b509      	push	{r0, r3, lr}
 23fd8ea:	4804      	ldr	r0, [pc, #16]	; (23fd8fc <hal_i2c_is_enabled+0x14>)
 23fd8ec:	6800      	ldr	r0, [r0, #0]
 23fd8ee:	4b04      	ldr	r3, [pc, #16]	; (23fd900 <hal_i2c_is_enabled+0x18>)
 23fd8f0:	4403      	add	r3, r0
 23fd8f2:	681b      	ldr	r3, [r3, #0]
 23fd8f4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 23fd8f6:	9302      	str	r3, [sp, #8]
 23fd8f8:	bd09      	pop	{r0, r3, pc}
 23fd8fa:	0000      	.short	0x0000
 23fd8fc:	1007ad48 	.word	0x1007ad48
 23fd900:	00000010 	.word	0x00000010

023fd904 <hal_i2c_init>:
DYNALIB_FN(14, hal_i2c, hal_i2c_set_callback_on_received, void(hal_i2c_interface_t, void(*)(int), void*))
DYNALIB_FN(15, hal_i2c, hal_i2c_set_callback_on_requested, void(hal_i2c_interface_t, void(*)(void), void*))
DYNALIB_FN(16, hal_i2c, hal_i2c_init, int(hal_i2c_interface_t, const hal_i2c_config_t*))
 23fd904:	b509      	push	{r0, r3, lr}
 23fd906:	4804      	ldr	r0, [pc, #16]	; (23fd918 <hal_i2c_init+0x14>)
 23fd908:	6800      	ldr	r0, [r0, #0]
 23fd90a:	4b04      	ldr	r3, [pc, #16]	; (23fd91c <hal_i2c_init+0x18>)
 23fd90c:	4403      	add	r3, r0
 23fd90e:	681b      	ldr	r3, [r3, #0]
 23fd910:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 23fd912:	9302      	str	r3, [sp, #8]
 23fd914:	bd09      	pop	{r0, r3, pc}
 23fd916:	0000      	.short	0x0000
 23fd918:	1007ad48 	.word	0x1007ad48
 23fd91c:	00000010 	.word	0x00000010

023fd920 <hal_i2c_request_ex>:
DYNALIB_FN(17, hal_i2c, hal_i2c_reset, int(hal_i2c_interface_t, uint32_t, void*))
DYNALIB_FN(18, hal_i2c, hal_i2c_lock, int32_t(hal_i2c_interface_t, void*))
DYNALIB_FN(19, hal_i2c, hal_i2c_unlock, int32_t(hal_i2c_interface_t, void*))
DYNALIB_FN(20, hal_i2c, hal_i2c_request_ex, int32_t(hal_i2c_interface_t, const hal_i2c_transmission_config_t*, void*))
 23fd920:	b509      	push	{r0, r3, lr}
 23fd922:	4804      	ldr	r0, [pc, #16]	; (23fd934 <hal_i2c_request_ex+0x14>)
 23fd924:	6800      	ldr	r0, [r0, #0]
 23fd926:	4b04      	ldr	r3, [pc, #16]	; (23fd938 <hal_i2c_request_ex+0x18>)
 23fd928:	4403      	add	r3, r0
 23fd92a:	681b      	ldr	r3, [r3, #0]
 23fd92c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 23fd92e:	9302      	str	r3, [sp, #8]
 23fd930:	bd09      	pop	{r0, r3, pc}
 23fd932:	0000      	.short	0x0000
 23fd934:	1007ad48 	.word	0x1007ad48
 23fd938:	00000010 	.word	0x00000010

023fd93c <inet_inet_ntop>:
DYNALIB_FN(0, hal_inet, inet_inet_addr, in_addr_t(const char*))
DYNALIB_FN(1, hal_inet, inet_inet_aton, int(const char*, struct in_addr*))
DYNALIB_FN(2, hal_inet, inet_inet_network, in_addr_t(const char*))
DYNALIB_FN(3, hal_inet, inet_inet_ntoa, char*(struct in_addr))
DYNALIB_FN(4, hal_inet, inet_inet_ntoa_r, char*(struct in_addr, char*, socklen_t))
DYNALIB_FN(5, hal_inet, inet_inet_ntop, const char*(int, const void*, char*, socklen_t))
 23fd93c:	b509      	push	{r0, r3, lr}
 23fd93e:	4804      	ldr	r0, [pc, #16]	; (23fd950 <inet_inet_ntop+0x14>)
 23fd940:	6800      	ldr	r0, [r0, #0]
 23fd942:	4b04      	ldr	r3, [pc, #16]	; (23fd954 <inet_inet_ntop+0x18>)
 23fd944:	4403      	add	r3, r0
 23fd946:	681b      	ldr	r3, [r3, #0]
 23fd948:	695b      	ldr	r3, [r3, #20]
 23fd94a:	9302      	str	r3, [sp, #8]
 23fd94c:	bd09      	pop	{r0, r3, pc}
 23fd94e:	0000      	.short	0x0000
 23fd950:	1007ad48 	.word	0x1007ad48
 23fd954:	0000004c 	.word	0x0000004c

023fd958 <netdb_freeaddrinfo>:

DYNALIB_BEGIN(hal_netdb)

DYNALIB_FN(0, hal_netdb, netdb_gethostbyname, struct hostent*(const char*))
DYNALIB_FN(1, hal_netdb, netdb_gethostbyname_r, int(const char*, struct hostent*, char*, size_t, struct hostent**, int*))
DYNALIB_FN(2, hal_netdb, netdb_freeaddrinfo, void(struct addrinfo*))
 23fd958:	b509      	push	{r0, r3, lr}
 23fd95a:	4804      	ldr	r0, [pc, #16]	; (23fd96c <netdb_freeaddrinfo+0x14>)
 23fd95c:	6800      	ldr	r0, [r0, #0]
 23fd95e:	4b04      	ldr	r3, [pc, #16]	; (23fd970 <netdb_freeaddrinfo+0x18>)
 23fd960:	4403      	add	r3, r0
 23fd962:	681b      	ldr	r3, [r3, #0]
 23fd964:	689b      	ldr	r3, [r3, #8]
 23fd966:	9302      	str	r3, [sp, #8]
 23fd968:	bd09      	pop	{r0, r3, pc}
 23fd96a:	0000      	.short	0x0000
 23fd96c:	1007ad48 	.word	0x1007ad48
 23fd970:	00000050 	.word	0x00000050

023fd974 <netdb_getaddrinfo>:
DYNALIB_FN(3, hal_netdb, netdb_getaddrinfo, int(const char*, const char*, const struct addrinfo*, struct addrinfo**))
 23fd974:	b509      	push	{r0, r3, lr}
 23fd976:	4804      	ldr	r0, [pc, #16]	; (23fd988 <netdb_getaddrinfo+0x14>)
 23fd978:	6800      	ldr	r0, [r0, #0]
 23fd97a:	4b04      	ldr	r3, [pc, #16]	; (23fd98c <netdb_getaddrinfo+0x18>)
 23fd97c:	4403      	add	r3, r0
 23fd97e:	681b      	ldr	r3, [r3, #0]
 23fd980:	68db      	ldr	r3, [r3, #12]
 23fd982:	9302      	str	r3, [sp, #8]
 23fd984:	bd09      	pop	{r0, r3, pc}
 23fd986:	0000      	.short	0x0000
 23fd988:	1007ad48 	.word	0x1007ad48
 23fd98c:	00000050 	.word	0x00000050

023fd990 <hal_spi_begin>:
// New HAL functions must be added to the end of this list.
// GNINRAW

DYNALIB_BEGIN(hal_spi)

DYNALIB_FN(0, hal_spi, hal_spi_begin, void(hal_spi_interface_t, uint16_t))
 23fd990:	b509      	push	{r0, r3, lr}
 23fd992:	4804      	ldr	r0, [pc, #16]	; (23fd9a4 <hal_spi_begin+0x14>)
 23fd994:	6800      	ldr	r0, [r0, #0]
 23fd996:	4b04      	ldr	r3, [pc, #16]	; (23fd9a8 <hal_spi_begin+0x18>)
 23fd998:	4403      	add	r3, r0
 23fd99a:	681b      	ldr	r3, [r3, #0]
 23fd99c:	681b      	ldr	r3, [r3, #0]
 23fd99e:	9302      	str	r3, [sp, #8]
 23fd9a0:	bd09      	pop	{r0, r3, pc}
 23fd9a2:	0000      	.short	0x0000
 23fd9a4:	1007ad48 	.word	0x1007ad48
 23fd9a8:	00000018 	.word	0x00000018

023fd9ac <hal_spi_transfer>:
DYNALIB_FN(1, hal_spi, hal_spi_end, void(hal_spi_interface_t))
DYNALIB_FN(2, hal_spi, hal_spi_set_bit_order, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(3, hal_spi, hal_spi_set_data_mode, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(4, hal_spi, hal_spi_set_clock_divider, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(5, hal_spi, hal_spi_transfer, uint16_t(hal_spi_interface_t, uint16_t))
 23fd9ac:	b509      	push	{r0, r3, lr}
 23fd9ae:	4804      	ldr	r0, [pc, #16]	; (23fd9c0 <hal_spi_transfer+0x14>)
 23fd9b0:	6800      	ldr	r0, [r0, #0]
 23fd9b2:	4b04      	ldr	r3, [pc, #16]	; (23fd9c4 <hal_spi_transfer+0x18>)
 23fd9b4:	4403      	add	r3, r0
 23fd9b6:	681b      	ldr	r3, [r3, #0]
 23fd9b8:	695b      	ldr	r3, [r3, #20]
 23fd9ba:	9302      	str	r3, [sp, #8]
 23fd9bc:	bd09      	pop	{r0, r3, pc}
 23fd9be:	0000      	.short	0x0000
 23fd9c0:	1007ad48 	.word	0x1007ad48
 23fd9c4:	00000018 	.word	0x00000018

023fd9c8 <hal_spi_init>:
DYNALIB_FN(6, hal_spi, hal_spi_is_enabled_deprecated, bool(void))
DYNALIB_FN(7, hal_spi, hal_spi_init, void(hal_spi_interface_t))
 23fd9c8:	b509      	push	{r0, r3, lr}
 23fd9ca:	4804      	ldr	r0, [pc, #16]	; (23fd9dc <hal_spi_init+0x14>)
 23fd9cc:	6800      	ldr	r0, [r0, #0]
 23fd9ce:	4b04      	ldr	r3, [pc, #16]	; (23fd9e0 <hal_spi_init+0x18>)
 23fd9d0:	4403      	add	r3, r0
 23fd9d2:	681b      	ldr	r3, [r3, #0]
 23fd9d4:	69db      	ldr	r3, [r3, #28]
 23fd9d6:	9302      	str	r3, [sp, #8]
 23fd9d8:	bd09      	pop	{r0, r3, pc}
 23fd9da:	0000      	.short	0x0000
 23fd9dc:	1007ad48 	.word	0x1007ad48
 23fd9e0:	00000018 	.word	0x00000018

023fd9e4 <hal_spi_is_enabled>:
DYNALIB_FN(8, hal_spi, hal_spi_is_enabled, bool(hal_spi_interface_t))
 23fd9e4:	b509      	push	{r0, r3, lr}
 23fd9e6:	4804      	ldr	r0, [pc, #16]	; (23fd9f8 <hal_spi_is_enabled+0x14>)
 23fd9e8:	6800      	ldr	r0, [r0, #0]
 23fd9ea:	4b04      	ldr	r3, [pc, #16]	; (23fd9fc <hal_spi_is_enabled+0x18>)
 23fd9ec:	4403      	add	r3, r0
 23fd9ee:	681b      	ldr	r3, [r3, #0]
 23fd9f0:	6a1b      	ldr	r3, [r3, #32]
 23fd9f2:	9302      	str	r3, [sp, #8]
 23fd9f4:	bd09      	pop	{r0, r3, pc}
 23fd9f6:	0000      	.short	0x0000
 23fd9f8:	1007ad48 	.word	0x1007ad48
 23fd9fc:	00000018 	.word	0x00000018

023fda00 <hal_spi_info>:
DYNALIB_FN(9, hal_spi, hal_spi_info, void(hal_spi_interface_t, hal_spi_info_t*, void*))
 23fda00:	b509      	push	{r0, r3, lr}
 23fda02:	4804      	ldr	r0, [pc, #16]	; (23fda14 <hal_spi_info+0x14>)
 23fda04:	6800      	ldr	r0, [r0, #0]
 23fda06:	4b04      	ldr	r3, [pc, #16]	; (23fda18 <hal_spi_info+0x18>)
 23fda08:	4403      	add	r3, r0
 23fda0a:	681b      	ldr	r3, [r3, #0]
 23fda0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 23fda0e:	9302      	str	r3, [sp, #8]
 23fda10:	bd09      	pop	{r0, r3, pc}
 23fda12:	0000      	.short	0x0000
 23fda14:	1007ad48 	.word	0x1007ad48
 23fda18:	00000018 	.word	0x00000018

023fda1c <hal_spi_set_settings>:
DYNALIB_FN(10, hal_spi, hal_spi_transfer_dma, void(hal_spi_interface_t, const void*, void*, uint32_t, hal_spi_dma_user_callback))
DYNALIB_FN(11, hal_spi, hal_spi_begin_ext, void(hal_spi_interface_t, hal_spi_mode_t, uint16_t, const hal_spi_config_t*))
DYNALIB_FN(12, hal_spi, hal_spi_set_callback_on_selected, void(hal_spi_interface_t, hal_spi_select_user_callback, void*))
DYNALIB_FN(13, hal_spi, hal_spi_transfer_dma_cancel, void(hal_spi_interface_t))
DYNALIB_FN(14, hal_spi, hal_spi_transfer_dma_status, int32_t(hal_spi_interface_t, hal_spi_transfer_status_t*))
DYNALIB_FN(15, hal_spi, hal_spi_set_settings, int32_t(hal_spi_interface_t, uint8_t, uint8_t, uint8_t, uint8_t, void*))
 23fda1c:	b509      	push	{r0, r3, lr}
 23fda1e:	4804      	ldr	r0, [pc, #16]	; (23fda30 <hal_spi_set_settings+0x14>)
 23fda20:	6800      	ldr	r0, [r0, #0]
 23fda22:	4b04      	ldr	r3, [pc, #16]	; (23fda34 <hal_spi_set_settings+0x18>)
 23fda24:	4403      	add	r3, r0
 23fda26:	681b      	ldr	r3, [r3, #0]
 23fda28:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 23fda2a:	9302      	str	r3, [sp, #8]
 23fda2c:	bd09      	pop	{r0, r3, pc}
 23fda2e:	0000      	.short	0x0000
 23fda30:	1007ad48 	.word	0x1007ad48
 23fda34:	00000018 	.word	0x00000018

023fda38 <hal_spi_acquire>:
#if HAL_PLATFORM_SPI_HAL_THREAD_SAFETY
DYNALIB_FN(16, hal_spi, hal_spi_acquire, int32_t(hal_spi_interface_t, const hal_spi_acquire_config_t*))
 23fda38:	b509      	push	{r0, r3, lr}
 23fda3a:	4804      	ldr	r0, [pc, #16]	; (23fda4c <hal_spi_acquire+0x14>)
 23fda3c:	6800      	ldr	r0, [r0, #0]
 23fda3e:	4b04      	ldr	r3, [pc, #16]	; (23fda50 <hal_spi_acquire+0x18>)
 23fda40:	4403      	add	r3, r0
 23fda42:	681b      	ldr	r3, [r3, #0]
 23fda44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 23fda46:	9302      	str	r3, [sp, #8]
 23fda48:	bd09      	pop	{r0, r3, pc}
 23fda4a:	0000      	.short	0x0000
 23fda4c:	1007ad48 	.word	0x1007ad48
 23fda50:	00000018 	.word	0x00000018

023fda54 <hal_spi_release>:
DYNALIB_FN(17, hal_spi, hal_spi_release, int32_t(hal_spi_interface_t, void*))
 23fda54:	b509      	push	{r0, r3, lr}
 23fda56:	4804      	ldr	r0, [pc, #16]	; (23fda68 <hal_spi_release+0x14>)
 23fda58:	6800      	ldr	r0, [r0, #0]
 23fda5a:	4b04      	ldr	r3, [pc, #16]	; (23fda6c <hal_spi_release+0x18>)
 23fda5c:	4403      	add	r3, r0
 23fda5e:	681b      	ldr	r3, [r3, #0]
 23fda60:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 23fda62:	9302      	str	r3, [sp, #8]
 23fda64:	bd09      	pop	{r0, r3, pc}
 23fda66:	0000      	.short	0x0000
 23fda68:	1007ad48 	.word	0x1007ad48
 23fda6c:	00000018 	.word	0x00000018

023fda70 <hal_usart_write>:
#endif

DYNALIB_FN(BASE_IDX + 0, hal_usart, hal_usart_init, void(hal_usart_interface_t, hal_usart_ring_buffer_t*, hal_usart_ring_buffer_t*))
DYNALIB_FN(BASE_IDX + 1, hal_usart, hal_usart_begin, void(hal_usart_interface_t, uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal_usart, hal_usart_end, void(hal_usart_interface_t))
DYNALIB_FN(BASE_IDX + 3, hal_usart, hal_usart_write, uint32_t(hal_usart_interface_t, uint8_t))
 23fda70:	b509      	push	{r0, r3, lr}
 23fda72:	4804      	ldr	r0, [pc, #16]	; (23fda84 <hal_usart_write+0x14>)
 23fda74:	6800      	ldr	r0, [r0, #0]
 23fda76:	4b04      	ldr	r3, [pc, #16]	; (23fda88 <hal_usart_write+0x18>)
 23fda78:	4403      	add	r3, r0
 23fda7a:	681b      	ldr	r3, [r3, #0]
 23fda7c:	68db      	ldr	r3, [r3, #12]
 23fda7e:	9302      	str	r3, [sp, #8]
 23fda80:	bd09      	pop	{r0, r3, pc}
 23fda82:	0000      	.short	0x0000
 23fda84:	1007ad48 	.word	0x1007ad48
 23fda88:	00000024 	.word	0x00000024

023fda8c <hal_usart_available>:
DYNALIB_FN(BASE_IDX + 4, hal_usart, hal_usart_available, int32_t(hal_usart_interface_t))
 23fda8c:	b509      	push	{r0, r3, lr}
 23fda8e:	4804      	ldr	r0, [pc, #16]	; (23fdaa0 <hal_usart_available+0x14>)
 23fda90:	6800      	ldr	r0, [r0, #0]
 23fda92:	4b04      	ldr	r3, [pc, #16]	; (23fdaa4 <hal_usart_available+0x18>)
 23fda94:	4403      	add	r3, r0
 23fda96:	681b      	ldr	r3, [r3, #0]
 23fda98:	691b      	ldr	r3, [r3, #16]
 23fda9a:	9302      	str	r3, [sp, #8]
 23fda9c:	bd09      	pop	{r0, r3, pc}
 23fda9e:	0000      	.short	0x0000
 23fdaa0:	1007ad48 	.word	0x1007ad48
 23fdaa4:	00000024 	.word	0x00000024

023fdaa8 <hal_usart_read>:
DYNALIB_FN(BASE_IDX + 5, hal_usart, hal_usart_read, int32_t(hal_usart_interface_t))
 23fdaa8:	b509      	push	{r0, r3, lr}
 23fdaaa:	4804      	ldr	r0, [pc, #16]	; (23fdabc <hal_usart_read+0x14>)
 23fdaac:	6800      	ldr	r0, [r0, #0]
 23fdaae:	4b04      	ldr	r3, [pc, #16]	; (23fdac0 <hal_usart_read+0x18>)
 23fdab0:	4403      	add	r3, r0
 23fdab2:	681b      	ldr	r3, [r3, #0]
 23fdab4:	695b      	ldr	r3, [r3, #20]
 23fdab6:	9302      	str	r3, [sp, #8]
 23fdab8:	bd09      	pop	{r0, r3, pc}
 23fdaba:	0000      	.short	0x0000
 23fdabc:	1007ad48 	.word	0x1007ad48
 23fdac0:	00000024 	.word	0x00000024

023fdac4 <hal_usart_peek>:
DYNALIB_FN(BASE_IDX + 6, hal_usart, hal_usart_peek, int32_t(hal_usart_interface_t))
 23fdac4:	b509      	push	{r0, r3, lr}
 23fdac6:	4804      	ldr	r0, [pc, #16]	; (23fdad8 <hal_usart_peek+0x14>)
 23fdac8:	6800      	ldr	r0, [r0, #0]
 23fdaca:	4b04      	ldr	r3, [pc, #16]	; (23fdadc <hal_usart_peek+0x18>)
 23fdacc:	4403      	add	r3, r0
 23fdace:	681b      	ldr	r3, [r3, #0]
 23fdad0:	699b      	ldr	r3, [r3, #24]
 23fdad2:	9302      	str	r3, [sp, #8]
 23fdad4:	bd09      	pop	{r0, r3, pc}
 23fdad6:	0000      	.short	0x0000
 23fdad8:	1007ad48 	.word	0x1007ad48
 23fdadc:	00000024 	.word	0x00000024

023fdae0 <hal_usart_flush>:
DYNALIB_FN(BASE_IDX + 7, hal_usart, hal_usart_flush, void(hal_usart_interface_t))
 23fdae0:	b509      	push	{r0, r3, lr}
 23fdae2:	4804      	ldr	r0, [pc, #16]	; (23fdaf4 <hal_usart_flush+0x14>)
 23fdae4:	6800      	ldr	r0, [r0, #0]
 23fdae6:	4b04      	ldr	r3, [pc, #16]	; (23fdaf8 <hal_usart_flush+0x18>)
 23fdae8:	4403      	add	r3, r0
 23fdaea:	681b      	ldr	r3, [r3, #0]
 23fdaec:	69db      	ldr	r3, [r3, #28]
 23fdaee:	9302      	str	r3, [sp, #8]
 23fdaf0:	bd09      	pop	{r0, r3, pc}
 23fdaf2:	0000      	.short	0x0000
 23fdaf4:	1007ad48 	.word	0x1007ad48
 23fdaf8:	00000024 	.word	0x00000024

023fdafc <hal_usart_is_enabled>:
DYNALIB_FN(BASE_IDX + 8, hal_usart, hal_usart_is_enabled, bool(hal_usart_interface_t))
 23fdafc:	b509      	push	{r0, r3, lr}
 23fdafe:	4804      	ldr	r0, [pc, #16]	; (23fdb10 <hal_usart_is_enabled+0x14>)
 23fdb00:	6800      	ldr	r0, [r0, #0]
 23fdb02:	4b04      	ldr	r3, [pc, #16]	; (23fdb14 <hal_usart_is_enabled+0x18>)
 23fdb04:	4403      	add	r3, r0
 23fdb06:	681b      	ldr	r3, [r3, #0]
 23fdb08:	6a1b      	ldr	r3, [r3, #32]
 23fdb0a:	9302      	str	r3, [sp, #8]
 23fdb0c:	bd09      	pop	{r0, r3, pc}
 23fdb0e:	0000      	.short	0x0000
 23fdb10:	1007ad48 	.word	0x1007ad48
 23fdb14:	00000024 	.word	0x00000024

023fdb18 <hal_usart_available_data_for_write>:
DYNALIB_FN(BASE_IDX + 9, hal_usart, hal_usart_half_duplex, void(hal_usart_interface_t, bool))
DYNALIB_FN(BASE_IDX + 10, hal_usart, hal_usart_available_data_for_write, int32_t(hal_usart_interface_t))
 23fdb18:	b509      	push	{r0, r3, lr}
 23fdb1a:	4804      	ldr	r0, [pc, #16]	; (23fdb2c <hal_usart_available_data_for_write+0x14>)
 23fdb1c:	6800      	ldr	r0, [r0, #0]
 23fdb1e:	4b04      	ldr	r3, [pc, #16]	; (23fdb30 <hal_usart_available_data_for_write+0x18>)
 23fdb20:	4403      	add	r3, r0
 23fdb22:	681b      	ldr	r3, [r3, #0]
 23fdb24:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 23fdb26:	9302      	str	r3, [sp, #8]
 23fdb28:	bd09      	pop	{r0, r3, pc}
 23fdb2a:	0000      	.short	0x0000
 23fdb2c:	1007ad48 	.word	0x1007ad48
 23fdb30:	00000024 	.word	0x00000024

023fdb34 <hal_usart_init_ex>:
DYNALIB_FN(BASE_IDX2 + 0, hal_usart, hal_usart_begin_config, void(hal_usart_interface_t serial, uint32_t baud, uint32_t config, void *ptr))
DYNALIB_FN(BASE_IDX2 + 1, hal_usart, hal_usart_write_nine_bits, uint32_t(hal_usart_interface_t serial, uint16_t data))
DYNALIB_FN(BASE_IDX2 + 2, hal_usart, hal_usart_send_break, void(hal_usart_interface_t, void*))
DYNALIB_FN(BASE_IDX2 + 3, hal_usart, hal_usart_break_detected, uint8_t(hal_usart_interface_t))
DYNALIB_FN(BASE_IDX2 + 4, hal_usart, hal_usart_sleep, int(hal_usart_interface_t serial, bool, void*))
DYNALIB_FN(BASE_IDX2 + 5, hal_usart, hal_usart_init_ex, int(hal_usart_interface_t, const hal_usart_buffer_config_t*, void*))
 23fdb34:	b509      	push	{r0, r3, lr}
 23fdb36:	4804      	ldr	r0, [pc, #16]	; (23fdb48 <hal_usart_init_ex+0x14>)
 23fdb38:	6800      	ldr	r0, [r0, #0]
 23fdb3a:	4b04      	ldr	r3, [pc, #16]	; (23fdb4c <hal_usart_init_ex+0x18>)
 23fdb3c:	4403      	add	r3, r0
 23fdb3e:	681b      	ldr	r3, [r3, #0]
 23fdb40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 23fdb42:	9302      	str	r3, [sp, #8]
 23fdb44:	bd09      	pop	{r0, r3, pc}
 23fdb46:	0000      	.short	0x0000
 23fdb48:	1007ad48 	.word	0x1007ad48
 23fdb4c:	00000024 	.word	0x00000024

023fdb50 <HAL_USB_USART_Init>:
// GNINRAW

DYNALIB_BEGIN(hal_usb)

#ifdef USB_CDC_ENABLE
DYNALIB_FN(0, hal_usb, HAL_USB_USART_Init, void(HAL_USB_USART_Serial, const HAL_USB_USART_Config*))
 23fdb50:	b509      	push	{r0, r3, lr}
 23fdb52:	4804      	ldr	r0, [pc, #16]	; (23fdb64 <HAL_USB_USART_Init+0x14>)
 23fdb54:	6800      	ldr	r0, [r0, #0]
 23fdb56:	4b04      	ldr	r3, [pc, #16]	; (23fdb68 <HAL_USB_USART_Init+0x18>)
 23fdb58:	4403      	add	r3, r0
 23fdb5a:	681b      	ldr	r3, [r3, #0]
 23fdb5c:	681b      	ldr	r3, [r3, #0]
 23fdb5e:	9302      	str	r3, [sp, #8]
 23fdb60:	bd09      	pop	{r0, r3, pc}
 23fdb62:	0000      	.short	0x0000
 23fdb64:	1007ad48 	.word	0x1007ad48
 23fdb68:	00000034 	.word	0x00000034

023fdb6c <HAL_USB_USART_Begin>:
DYNALIB_FN(1, hal_usb, HAL_USB_USART_Begin, void(HAL_USB_USART_Serial, uint32_t, void *))
 23fdb6c:	b509      	push	{r0, r3, lr}
 23fdb6e:	4804      	ldr	r0, [pc, #16]	; (23fdb80 <HAL_USB_USART_Begin+0x14>)
 23fdb70:	6800      	ldr	r0, [r0, #0]
 23fdb72:	4b04      	ldr	r3, [pc, #16]	; (23fdb84 <HAL_USB_USART_Begin+0x18>)
 23fdb74:	4403      	add	r3, r0
 23fdb76:	681b      	ldr	r3, [r3, #0]
 23fdb78:	685b      	ldr	r3, [r3, #4]
 23fdb7a:	9302      	str	r3, [sp, #8]
 23fdb7c:	bd09      	pop	{r0, r3, pc}
 23fdb7e:	0000      	.short	0x0000
 23fdb80:	1007ad48 	.word	0x1007ad48
 23fdb84:	00000034 	.word	0x00000034

023fdb88 <HAL_USB_USART_Available_Data>:
DYNALIB_FN(2, hal_usb, HAL_USB_USART_End, void(HAL_USB_USART_Serial))
DYNALIB_FN(3, hal_usb, HAL_USB_USART_Baud_Rate, unsigned int(HAL_USB_USART_Serial))
DYNALIB_FN(4, hal_usb, HAL_USB_USART_Available_Data, int32_t(HAL_USB_USART_Serial))
 23fdb88:	b509      	push	{r0, r3, lr}
 23fdb8a:	4804      	ldr	r0, [pc, #16]	; (23fdb9c <HAL_USB_USART_Available_Data+0x14>)
 23fdb8c:	6800      	ldr	r0, [r0, #0]
 23fdb8e:	4b04      	ldr	r3, [pc, #16]	; (23fdba0 <HAL_USB_USART_Available_Data+0x18>)
 23fdb90:	4403      	add	r3, r0
 23fdb92:	681b      	ldr	r3, [r3, #0]
 23fdb94:	691b      	ldr	r3, [r3, #16]
 23fdb96:	9302      	str	r3, [sp, #8]
 23fdb98:	bd09      	pop	{r0, r3, pc}
 23fdb9a:	0000      	.short	0x0000
 23fdb9c:	1007ad48 	.word	0x1007ad48
 23fdba0:	00000034 	.word	0x00000034

023fdba4 <HAL_USB_USART_Available_Data_For_Write>:
DYNALIB_FN(5, hal_usb, HAL_USB_USART_Available_Data_For_Write, int32_t(HAL_USB_USART_Serial))
 23fdba4:	b509      	push	{r0, r3, lr}
 23fdba6:	4804      	ldr	r0, [pc, #16]	; (23fdbb8 <HAL_USB_USART_Available_Data_For_Write+0x14>)
 23fdba8:	6800      	ldr	r0, [r0, #0]
 23fdbaa:	4b04      	ldr	r3, [pc, #16]	; (23fdbbc <HAL_USB_USART_Available_Data_For_Write+0x18>)
 23fdbac:	4403      	add	r3, r0
 23fdbae:	681b      	ldr	r3, [r3, #0]
 23fdbb0:	695b      	ldr	r3, [r3, #20]
 23fdbb2:	9302      	str	r3, [sp, #8]
 23fdbb4:	bd09      	pop	{r0, r3, pc}
 23fdbb6:	0000      	.short	0x0000
 23fdbb8:	1007ad48 	.word	0x1007ad48
 23fdbbc:	00000034 	.word	0x00000034

023fdbc0 <HAL_USB_USART_Receive_Data>:
DYNALIB_FN(6, hal_usb, HAL_USB_USART_Receive_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
 23fdbc0:	b509      	push	{r0, r3, lr}
 23fdbc2:	4804      	ldr	r0, [pc, #16]	; (23fdbd4 <HAL_USB_USART_Receive_Data+0x14>)
 23fdbc4:	6800      	ldr	r0, [r0, #0]
 23fdbc6:	4b04      	ldr	r3, [pc, #16]	; (23fdbd8 <HAL_USB_USART_Receive_Data+0x18>)
 23fdbc8:	4403      	add	r3, r0
 23fdbca:	681b      	ldr	r3, [r3, #0]
 23fdbcc:	699b      	ldr	r3, [r3, #24]
 23fdbce:	9302      	str	r3, [sp, #8]
 23fdbd0:	bd09      	pop	{r0, r3, pc}
 23fdbd2:	0000      	.short	0x0000
 23fdbd4:	1007ad48 	.word	0x1007ad48
 23fdbd8:	00000034 	.word	0x00000034

023fdbdc <HAL_USB_USART_Send_Data>:
DYNALIB_FN(7, hal_usb, HAL_USB_USART_Send_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
 23fdbdc:	b509      	push	{r0, r3, lr}
 23fdbde:	4804      	ldr	r0, [pc, #16]	; (23fdbf0 <HAL_USB_USART_Send_Data+0x14>)
 23fdbe0:	6800      	ldr	r0, [r0, #0]
 23fdbe2:	4b04      	ldr	r3, [pc, #16]	; (23fdbf4 <HAL_USB_USART_Send_Data+0x18>)
 23fdbe4:	4403      	add	r3, r0
 23fdbe6:	681b      	ldr	r3, [r3, #0]
 23fdbe8:	69db      	ldr	r3, [r3, #28]
 23fdbea:	9302      	str	r3, [sp, #8]
 23fdbec:	bd09      	pop	{r0, r3, pc}
 23fdbee:	0000      	.short	0x0000
 23fdbf0:	1007ad48 	.word	0x1007ad48
 23fdbf4:	00000034 	.word	0x00000034

023fdbf8 <HAL_USB_USART_Flush_Data>:
DYNALIB_FN(8, hal_usb, HAL_USB_USART_Flush_Data, void(HAL_USB_USART_Serial))
 23fdbf8:	b509      	push	{r0, r3, lr}
 23fdbfa:	4804      	ldr	r0, [pc, #16]	; (23fdc0c <HAL_USB_USART_Flush_Data+0x14>)
 23fdbfc:	6800      	ldr	r0, [r0, #0]
 23fdbfe:	4b04      	ldr	r3, [pc, #16]	; (23fdc10 <HAL_USB_USART_Flush_Data+0x18>)
 23fdc00:	4403      	add	r3, r0
 23fdc02:	681b      	ldr	r3, [r3, #0]
 23fdc04:	6a1b      	ldr	r3, [r3, #32]
 23fdc06:	9302      	str	r3, [sp, #8]
 23fdc08:	bd09      	pop	{r0, r3, pc}
 23fdc0a:	0000      	.short	0x0000
 23fdc0c:	1007ad48 	.word	0x1007ad48
 23fdc10:	00000034 	.word	0x00000034

023fdc14 <panic_>:
DYNALIB_FN(9, services, LED_Toggle, void(Led_TypeDef))
DYNALIB_FN(10, services, LED_Fade, void(Led_TypeDef))
DYNALIB_FN(11, services, Get_LED_Brightness, uint8_t(void))

DYNALIB_FN(12, services, set_logger_output, void(debug_output_fn, LoggerOutputLevel)) // Deprecated
DYNALIB_FN(13, services, panic_, void(ePanicCode, void*, void(*)(uint32_t)))
 23fdc14:	b509      	push	{r0, r3, lr}
 23fdc16:	4804      	ldr	r0, [pc, #16]	; (23fdc28 <panic_+0x14>)
 23fdc18:	6800      	ldr	r0, [r0, #0]
 23fdc1a:	4b04      	ldr	r3, [pc, #16]	; (23fdc2c <panic_+0x18>)
 23fdc1c:	4403      	add	r3, r0
 23fdc1e:	681b      	ldr	r3, [r3, #0]
 23fdc20:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 23fdc22:	9302      	str	r3, [sp, #8]
 23fdc24:	bd09      	pop	{r0, r3, pc}
 23fdc26:	0000      	.short	0x0000
 23fdc28:	1007ad48 	.word	0x1007ad48
 23fdc2c:	00000048 	.word	0x00000048

023fdc30 <set_system_mode>:
#endif

DYNALIB_BEGIN(system)

DYNALIB_FN(0, system, system_mode, System_Mode_TypeDef(void))
DYNALIB_FN(1, system, set_system_mode, void(System_Mode_TypeDef))
 23fdc30:	b509      	push	{r0, r3, lr}
 23fdc32:	4804      	ldr	r0, [pc, #16]	; (23fdc44 <set_system_mode+0x14>)
 23fdc34:	6800      	ldr	r0, [r0, #0]
 23fdc36:	4b04      	ldr	r3, [pc, #16]	; (23fdc48 <set_system_mode+0x18>)
 23fdc38:	4403      	add	r3, r0
 23fdc3a:	681b      	ldr	r3, [r3, #0]
 23fdc3c:	685b      	ldr	r3, [r3, #4]
 23fdc3e:	9302      	str	r3, [sp, #8]
 23fdc40:	bd09      	pop	{r0, r3, pc}
 23fdc42:	0000      	.short	0x0000
 23fdc44:	1007ad48 	.word	0x1007ad48
 23fdc48:	00000008 	.word	0x00000008

023fdc4c <system_delay_ms>:

DYNALIB_FN(2, system, set_ymodem_serial_flash_update_handler, void(ymodem_serial_flash_update_handler))
DYNALIB_FN(3, system, system_firmwareUpdate, bool(Stream*, void*))
DYNALIB_FN(4, system, system_fileTransfer, bool(system_file_transfer_t*, void*))

DYNALIB_FN(5, system, system_delay_ms, void(unsigned long, bool))
 23fdc4c:	b509      	push	{r0, r3, lr}
 23fdc4e:	4804      	ldr	r0, [pc, #16]	; (23fdc60 <system_delay_ms+0x14>)
 23fdc50:	6800      	ldr	r0, [r0, #0]
 23fdc52:	4b04      	ldr	r3, [pc, #16]	; (23fdc64 <system_delay_ms+0x18>)
 23fdc54:	4403      	add	r3, r0
 23fdc56:	681b      	ldr	r3, [r3, #0]
 23fdc58:	695b      	ldr	r3, [r3, #20]
 23fdc5a:	9302      	str	r3, [sp, #8]
 23fdc5c:	bd09      	pop	{r0, r3, pc}
 23fdc5e:	0000      	.short	0x0000
 23fdc60:	1007ad48 	.word	0x1007ad48
 23fdc64:	00000008 	.word	0x00000008

023fdc68 <application_thread_current>:
DYNALIB_FN(15, system, system_get_flag, int(system_flag_t, uint8_t*, void*))
DYNALIB_FN(16, system, Spark_Prepare_For_Firmware_Update, int(FileTransfer::Descriptor&, uint32_t, void*))
DYNALIB_FN(17, system, Spark_Save_Firmware_Chunk, int(FileTransfer::Descriptor&, const uint8_t*, void*))
DYNALIB_FN(18, system, Spark_Finish_Firmware_Update, int(FileTransfer::Descriptor&, uint32_t, void*))

DYNALIB_FN(19, system, application_thread_current, uint8_t(void*))
 23fdc68:	b509      	push	{r0, r3, lr}
 23fdc6a:	4804      	ldr	r0, [pc, #16]	; (23fdc7c <application_thread_current+0x14>)
 23fdc6c:	6800      	ldr	r0, [r0, #0]
 23fdc6e:	4b04      	ldr	r3, [pc, #16]	; (23fdc80 <application_thread_current+0x18>)
 23fdc70:	4403      	add	r3, r0
 23fdc72:	681b      	ldr	r3, [r3, #0]
 23fdc74:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 23fdc76:	9302      	str	r3, [sp, #8]
 23fdc78:	bd09      	pop	{r0, r3, pc}
 23fdc7a:	0000      	.short	0x0000
 23fdc7c:	1007ad48 	.word	0x1007ad48
 23fdc80:	00000008 	.word	0x00000008

023fdc84 <application_thread_invoke>:
DYNALIB_FN(20, system, system_thread_current, uint8_t(void*))
DYNALIB_FN(21, system, application_thread_invoke, uint8_t(void(*)(void*), void*, void*))
 23fdc84:	b509      	push	{r0, r3, lr}
 23fdc86:	4804      	ldr	r0, [pc, #16]	; (23fdc98 <application_thread_invoke+0x14>)
 23fdc88:	6800      	ldr	r0, [r0, #0]
 23fdc8a:	4b04      	ldr	r3, [pc, #16]	; (23fdc9c <application_thread_invoke+0x18>)
 23fdc8c:	4403      	add	r3, r0
 23fdc8e:	681b      	ldr	r3, [r3, #0]
 23fdc90:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 23fdc92:	9302      	str	r3, [sp, #8]
 23fdc94:	bd09      	pop	{r0, r3, pc}
 23fdc96:	0000      	.short	0x0000
 23fdc98:	1007ad48 	.word	0x1007ad48
 23fdc9c:	00000008 	.word	0x00000008

023fdca0 <system_ctrl_set_app_request_handler>:
DYNALIB_FN(BASE_IDX + 6, system, led_pattern_period, uint16_t(int, int, void*))
DYNALIB_FN(BASE_IDX + 7, system, system_set_tester_handlers, int(system_tester_handlers_t*, void*))
DYNALIB_FN(BASE_IDX + 8, system, system_format_diag_data, int(const uint16_t*, size_t, unsigned, appender_fn, void*, void*))

// Control requests
DYNALIB_FN(BASE_IDX + 9, system, system_ctrl_set_app_request_handler, int(ctrl_request_handler_fn, void*))
 23fdca0:	b509      	push	{r0, r3, lr}
 23fdca2:	4804      	ldr	r0, [pc, #16]	; (23fdcb4 <system_ctrl_set_app_request_handler+0x14>)
 23fdca4:	6800      	ldr	r0, [r0, #0]
 23fdca6:	4b04      	ldr	r3, [pc, #16]	; (23fdcb8 <system_ctrl_set_app_request_handler+0x18>)
 23fdca8:	4403      	add	r3, r0
 23fdcaa:	681b      	ldr	r3, [r3, #0]
 23fdcac:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 23fdcb0:	9302      	str	r3, [sp, #8]
 23fdcb2:	bd09      	pop	{r0, r3, pc}
 23fdcb4:	1007ad48 	.word	0x1007ad48
 23fdcb8:	00000008 	.word	0x00000008

023fdcbc <system_ctrl_set_result>:
DYNALIB_FN(BASE_IDX + 10, system, system_ctrl_alloc_reply_data, int(ctrl_request*, size_t, void*))
DYNALIB_FN(BASE_IDX + 11, system, system_ctrl_free_request_data, void(ctrl_request*, void*))
DYNALIB_FN(BASE_IDX + 12, system, system_ctrl_set_result, void(ctrl_request*, int, ctrl_completion_handler_fn, void*, void*))
 23fdcbc:	b509      	push	{r0, r3, lr}
 23fdcbe:	4804      	ldr	r0, [pc, #16]	; (23fdcd0 <system_ctrl_set_result+0x14>)
 23fdcc0:	6800      	ldr	r0, [r0, #0]
 23fdcc2:	4b04      	ldr	r3, [pc, #16]	; (23fdcd4 <system_ctrl_set_result+0x18>)
 23fdcc4:	4403      	add	r3, r0
 23fdcc6:	681b      	ldr	r3, [r3, #0]
 23fdcc8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 23fdccc:	9302      	str	r3, [sp, #8]
 23fdcce:	bd09      	pop	{r0, r3, pc}
 23fdcd0:	1007ad48 	.word	0x1007ad48
 23fdcd4:	00000008 	.word	0x00000008

023fdcd8 <spark_cloud_flag_connected>:
DYNALIB_FN(0, system_cloud, spark_variable, bool(const char*, const void*, Spark_Data_TypeDef, spark_variable_t*))
DYNALIB_FN(1, system_cloud, spark_function, bool(const char*, p_user_function_int_str_t, void*))
DYNALIB_FN(2, system_cloud, spark_process, bool(void))
DYNALIB_FN(3, system_cloud, spark_cloud_flag_connect, void(void))
DYNALIB_FN(4, system_cloud, spark_cloud_flag_disconnect, void(void))
DYNALIB_FN(5, system_cloud, spark_cloud_flag_connected, bool(void))
 23fdcd8:	b509      	push	{r0, r3, lr}
 23fdcda:	4804      	ldr	r0, [pc, #16]	; (23fdcec <spark_cloud_flag_connected+0x14>)
 23fdcdc:	6800      	ldr	r0, [r0, #0]
 23fdcde:	4b04      	ldr	r3, [pc, #16]	; (23fdcf0 <spark_cloud_flag_connected+0x18>)
 23fdce0:	4403      	add	r3, r0
 23fdce2:	681b      	ldr	r3, [r3, #0]
 23fdce4:	695b      	ldr	r3, [r3, #20]
 23fdce6:	9302      	str	r3, [sp, #8]
 23fdce8:	bd09      	pop	{r0, r3, pc}
 23fdcea:	0000      	.short	0x0000
 23fdcec:	1007ad48 	.word	0x1007ad48
 23fdcf0:	0000002c 	.word	0x0000002c

023fdcf4 <spark_send_event>:
DYNALIB_FN(6, system_cloud, system_cloud_protocol_instance, ProtocolFacade*(void))
DYNALIB_FN(7, system_cloud, spark_deviceID, String(void))
DYNALIB_FN(8, system_cloud, spark_send_event, bool(const char*, const char*, int, uint32_t, void*))
 23fdcf4:	b509      	push	{r0, r3, lr}
 23fdcf6:	4804      	ldr	r0, [pc, #16]	; (23fdd08 <spark_send_event+0x14>)
 23fdcf8:	6800      	ldr	r0, [r0, #0]
 23fdcfa:	4b04      	ldr	r3, [pc, #16]	; (23fdd0c <spark_send_event+0x18>)
 23fdcfc:	4403      	add	r3, r0
 23fdcfe:	681b      	ldr	r3, [r3, #0]
 23fdd00:	6a1b      	ldr	r3, [r3, #32]
 23fdd02:	9302      	str	r3, [sp, #8]
 23fdd04:	bd09      	pop	{r0, r3, pc}
 23fdd06:	0000      	.short	0x0000
 23fdd08:	1007ad48 	.word	0x1007ad48
 23fdd0c:	0000002c 	.word	0x0000002c

023fdd10 <spark_set_random_seed_from_cloud_handler>:
DYNALIB_FN(10, system_cloud, spark_unsubscribe, void(void*))
DYNALIB_FN(11, system_cloud, spark_sync_time, bool(void*))
DYNALIB_FN(12, system_cloud, spark_sync_time_pending, bool(void*))
DYNALIB_FN(13, system_cloud, spark_sync_time_last, system_tick_t(time32_t*, time_t*))
DYNALIB_FN(14, system_cloud, spark_set_connection_property, int(unsigned, unsigned, const void*, void*))
DYNALIB_FN(15, system_cloud, spark_set_random_seed_from_cloud_handler, int(void (*handler)(unsigned int), void*))
 23fdd10:	b509      	push	{r0, r3, lr}
 23fdd12:	4804      	ldr	r0, [pc, #16]	; (23fdd24 <spark_set_random_seed_from_cloud_handler+0x14>)
 23fdd14:	6800      	ldr	r0, [r0, #0]
 23fdd16:	4b04      	ldr	r3, [pc, #16]	; (23fdd28 <spark_set_random_seed_from_cloud_handler+0x18>)
 23fdd18:	4403      	add	r3, r0
 23fdd1a:	681b      	ldr	r3, [r3, #0]
 23fdd1c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 23fdd1e:	9302      	str	r3, [sp, #8]
 23fdd20:	bd09      	pop	{r0, r3, pc}
 23fdd22:	0000      	.short	0x0000
 23fdd24:	1007ad48 	.word	0x1007ad48
 23fdd28:	0000002c 	.word	0x0000002c

023fdd2c <network_connect>:
#endif

DYNALIB_BEGIN(system_net)

DYNALIB_FN(0, system_net, network_config, const void*(network_handle_t, uint32_t, void*))
DYNALIB_FN(1, system_net, network_connect, void(network_handle_t, uint32_t, uint32_t, void*))
 23fdd2c:	b509      	push	{r0, r3, lr}
 23fdd2e:	4804      	ldr	r0, [pc, #16]	; (23fdd40 <network_connect+0x14>)
 23fdd30:	6800      	ldr	r0, [r0, #0]
 23fdd32:	4b04      	ldr	r3, [pc, #16]	; (23fdd44 <network_connect+0x18>)
 23fdd34:	4403      	add	r3, r0
 23fdd36:	681b      	ldr	r3, [r3, #0]
 23fdd38:	685b      	ldr	r3, [r3, #4]
 23fdd3a:	9302      	str	r3, [sp, #8]
 23fdd3c:	bd09      	pop	{r0, r3, pc}
 23fdd3e:	0000      	.short	0x0000
 23fdd40:	1007ad48 	.word	0x1007ad48
 23fdd44:	00000028 	.word	0x00000028

023fdd48 <network_connecting>:
DYNALIB_FN(2, system_net, network_connecting, bool(network_handle_t, uint32_t, void*))
 23fdd48:	b509      	push	{r0, r3, lr}
 23fdd4a:	4804      	ldr	r0, [pc, #16]	; (23fdd5c <network_connecting+0x14>)
 23fdd4c:	6800      	ldr	r0, [r0, #0]
 23fdd4e:	4b04      	ldr	r3, [pc, #16]	; (23fdd60 <network_connecting+0x18>)
 23fdd50:	4403      	add	r3, r0
 23fdd52:	681b      	ldr	r3, [r3, #0]
 23fdd54:	689b      	ldr	r3, [r3, #8]
 23fdd56:	9302      	str	r3, [sp, #8]
 23fdd58:	bd09      	pop	{r0, r3, pc}
 23fdd5a:	0000      	.short	0x0000
 23fdd5c:	1007ad48 	.word	0x1007ad48
 23fdd60:	00000028 	.word	0x00000028

023fdd64 <network_disconnect>:
DYNALIB_FN(3, system_net, network_disconnect, void(network_handle_t, uint32_t, void*))
 23fdd64:	b509      	push	{r0, r3, lr}
 23fdd66:	4804      	ldr	r0, [pc, #16]	; (23fdd78 <network_disconnect+0x14>)
 23fdd68:	6800      	ldr	r0, [r0, #0]
 23fdd6a:	4b04      	ldr	r3, [pc, #16]	; (23fdd7c <network_disconnect+0x18>)
 23fdd6c:	4403      	add	r3, r0
 23fdd6e:	681b      	ldr	r3, [r3, #0]
 23fdd70:	68db      	ldr	r3, [r3, #12]
 23fdd72:	9302      	str	r3, [sp, #8]
 23fdd74:	bd09      	pop	{r0, r3, pc}
 23fdd76:	0000      	.short	0x0000
 23fdd78:	1007ad48 	.word	0x1007ad48
 23fdd7c:	00000028 	.word	0x00000028

023fdd80 <network_ready>:
DYNALIB_FN(4, system_net, network_ready, bool(network_handle_t, uint32_t, void*))
 23fdd80:	b509      	push	{r0, r3, lr}
 23fdd82:	4804      	ldr	r0, [pc, #16]	; (23fdd94 <network_ready+0x14>)
 23fdd84:	6800      	ldr	r0, [r0, #0]
 23fdd86:	4b04      	ldr	r3, [pc, #16]	; (23fdd98 <network_ready+0x18>)
 23fdd88:	4403      	add	r3, r0
 23fdd8a:	681b      	ldr	r3, [r3, #0]
 23fdd8c:	691b      	ldr	r3, [r3, #16]
 23fdd8e:	9302      	str	r3, [sp, #8]
 23fdd90:	bd09      	pop	{r0, r3, pc}
 23fdd92:	0000      	.short	0x0000
 23fdd94:	1007ad48 	.word	0x1007ad48
 23fdd98:	00000028 	.word	0x00000028

023fdd9c <network_on>:
DYNALIB_FN(5, system_net, network_on, void(network_handle_t, uint32_t, uint32_t, void*))
 23fdd9c:	b509      	push	{r0, r3, lr}
 23fdd9e:	4804      	ldr	r0, [pc, #16]	; (23fddb0 <network_on+0x14>)
 23fdda0:	6800      	ldr	r0, [r0, #0]
 23fdda2:	4b04      	ldr	r3, [pc, #16]	; (23fddb4 <network_on+0x18>)
 23fdda4:	4403      	add	r3, r0
 23fdda6:	681b      	ldr	r3, [r3, #0]
 23fdda8:	695b      	ldr	r3, [r3, #20]
 23fddaa:	9302      	str	r3, [sp, #8]
 23fddac:	bd09      	pop	{r0, r3, pc}
 23fddae:	0000      	.short	0x0000
 23fddb0:	1007ad48 	.word	0x1007ad48
 23fddb4:	00000028 	.word	0x00000028

023fddb8 <network_off>:
DYNALIB_FN(6, system_net, network_off, void(network_handle_t, uint32_t, uint32_t, void*))
 23fddb8:	b509      	push	{r0, r3, lr}
 23fddba:	4804      	ldr	r0, [pc, #16]	; (23fddcc <network_off+0x14>)
 23fddbc:	6800      	ldr	r0, [r0, #0]
 23fddbe:	4b04      	ldr	r3, [pc, #16]	; (23fddd0 <network_off+0x18>)
 23fddc0:	4403      	add	r3, r0
 23fddc2:	681b      	ldr	r3, [r3, #0]
 23fddc4:	699b      	ldr	r3, [r3, #24]
 23fddc6:	9302      	str	r3, [sp, #8]
 23fddc8:	bd09      	pop	{r0, r3, pc}
 23fddca:	0000      	.short	0x0000
 23fddcc:	1007ad48 	.word	0x1007ad48
 23fddd0:	00000028 	.word	0x00000028

023fddd4 <network_listen>:
DYNALIB_FN(7, system_net, network_listen, void(network_handle_t, uint32_t, void*))
 23fddd4:	b509      	push	{r0, r3, lr}
 23fddd6:	4804      	ldr	r0, [pc, #16]	; (23fdde8 <network_listen+0x14>)
 23fddd8:	6800      	ldr	r0, [r0, #0]
 23fddda:	4b04      	ldr	r3, [pc, #16]	; (23fddec <network_listen+0x18>)
 23fdddc:	4403      	add	r3, r0
 23fddde:	681b      	ldr	r3, [r3, #0]
 23fdde0:	69db      	ldr	r3, [r3, #28]
 23fdde2:	9302      	str	r3, [sp, #8]
 23fdde4:	bd09      	pop	{r0, r3, pc}
 23fdde6:	0000      	.short	0x0000
 23fdde8:	1007ad48 	.word	0x1007ad48
 23fddec:	00000028 	.word	0x00000028

023fddf0 <network_listening>:
DYNALIB_FN(8, system_net, network_listening, bool(network_handle_t, uint32_t, void*))
 23fddf0:	b509      	push	{r0, r3, lr}
 23fddf2:	4804      	ldr	r0, [pc, #16]	; (23fde04 <network_listening+0x14>)
 23fddf4:	6800      	ldr	r0, [r0, #0]
 23fddf6:	4b04      	ldr	r3, [pc, #16]	; (23fde08 <network_listening+0x18>)
 23fddf8:	4403      	add	r3, r0
 23fddfa:	681b      	ldr	r3, [r3, #0]
 23fddfc:	6a1b      	ldr	r3, [r3, #32]
 23fddfe:	9302      	str	r3, [sp, #8]
 23fde00:	bd09      	pop	{r0, r3, pc}
 23fde02:	0000      	.short	0x0000
 23fde04:	1007ad48 	.word	0x1007ad48
 23fde08:	00000028 	.word	0x00000028

023fde0c <network_set_listen_timeout>:
DYNALIB_FN(9, system_net, network_has_credentials, bool(network_handle_t, uint32_t, void*))
DYNALIB_FN(10, system_net, network_set_credentials, int(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(11, system_net, network_clear_credentials, bool(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(12, system_net, network_set_listen_timeout, void(network_handle_t, uint16_t, void*))
 23fde0c:	b509      	push	{r0, r3, lr}
 23fde0e:	4804      	ldr	r0, [pc, #16]	; (23fde20 <network_set_listen_timeout+0x14>)
 23fde10:	6800      	ldr	r0, [r0, #0]
 23fde12:	4b04      	ldr	r3, [pc, #16]	; (23fde24 <network_set_listen_timeout+0x18>)
 23fde14:	4403      	add	r3, r0
 23fde16:	681b      	ldr	r3, [r3, #0]
 23fde18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 23fde1a:	9302      	str	r3, [sp, #8]
 23fde1c:	bd09      	pop	{r0, r3, pc}
 23fde1e:	0000      	.short	0x0000
 23fde20:	1007ad48 	.word	0x1007ad48
 23fde24:	00000028 	.word	0x00000028

023fde28 <network_get_listen_timeout>:
DYNALIB_FN(13, system_net, network_get_listen_timeout, uint16_t(network_handle_t, uint32_t, void*))
 23fde28:	b509      	push	{r0, r3, lr}
 23fde2a:	4804      	ldr	r0, [pc, #16]	; (23fde3c <network_get_listen_timeout+0x14>)
 23fde2c:	6800      	ldr	r0, [r0, #0]
 23fde2e:	4b04      	ldr	r3, [pc, #16]	; (23fde40 <network_get_listen_timeout+0x18>)
 23fde30:	4403      	add	r3, r0
 23fde32:	681b      	ldr	r3, [r3, #0]
 23fde34:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 23fde36:	9302      	str	r3, [sp, #8]
 23fde38:	bd09      	pop	{r0, r3, pc}
 23fde3a:	0000      	.short	0x0000
 23fde3c:	1007ad48 	.word	0x1007ad48
 23fde40:	00000028 	.word	0x00000028

023fde44 <network_is_on>:
DYNALIB_FN(14, system_net, network_set_hostname, int(network_handle_t, uint32_t, const char*, void*))
DYNALIB_FN(15, system_net, network_get_hostname, int(network_handle_t, uint32_t, char*, size_t, void*))
DYNALIB_FN(16, system_net, network_is_on, bool(network_handle_t, void*))
 23fde44:	b509      	push	{r0, r3, lr}
 23fde46:	4804      	ldr	r0, [pc, #16]	; (23fde58 <network_is_on+0x14>)
 23fde48:	6800      	ldr	r0, [r0, #0]
 23fde4a:	4b04      	ldr	r3, [pc, #16]	; (23fde5c <network_is_on+0x18>)
 23fde4c:	4403      	add	r3, r0
 23fde4e:	681b      	ldr	r3, [r3, #0]
 23fde50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 23fde52:	9302      	str	r3, [sp, #8]
 23fde54:	bd09      	pop	{r0, r3, pc}
 23fde56:	0000      	.short	0x0000
 23fde58:	1007ad48 	.word	0x1007ad48
 23fde5c:	00000028 	.word	0x00000028

023fde60 <network_is_off>:
DYNALIB_FN(17, system_net, network_is_off, bool(network_handle_t, void*))
 23fde60:	b509      	push	{r0, r3, lr}
 23fde62:	4804      	ldr	r0, [pc, #16]	; (23fde74 <network_is_off+0x14>)
 23fde64:	6800      	ldr	r0, [r0, #0]
 23fde66:	4b04      	ldr	r3, [pc, #16]	; (23fde78 <network_is_off+0x18>)
 23fde68:	4403      	add	r3, r0
 23fde6a:	681b      	ldr	r3, [r3, #0]
 23fde6c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 23fde6e:	9302      	str	r3, [sp, #8]
 23fde70:	bd09      	pop	{r0, r3, pc}
 23fde72:	0000      	.short	0x0000
 23fde74:	1007ad48 	.word	0x1007ad48
 23fde78:	00000028 	.word	0x00000028

023fde7c <malloc>:
#include "hal_platform.h"
#endif // defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))

DYNALIB_BEGIN(rt)

DYNALIB_FN(0, rt, malloc, void*(size_t))
 23fde7c:	b509      	push	{r0, r3, lr}
 23fde7e:	4804      	ldr	r0, [pc, #16]	; (23fde90 <malloc+0x14>)
 23fde80:	6800      	ldr	r0, [r0, #0]
 23fde82:	4b04      	ldr	r3, [pc, #16]	; (23fde94 <malloc+0x18>)
 23fde84:	4403      	add	r3, r0
 23fde86:	681b      	ldr	r3, [r3, #0]
 23fde88:	681b      	ldr	r3, [r3, #0]
 23fde8a:	9302      	str	r3, [sp, #8]
 23fde8c:	bd09      	pop	{r0, r3, pc}
 23fde8e:	0000      	.short	0x0000
 23fde90:	1007ad48 	.word	0x1007ad48
 23fde94:	00000004 	.word	0x00000004

023fde98 <free>:
DYNALIB_FN(1, rt, free, void(void*))
 23fde98:	b509      	push	{r0, r3, lr}
 23fde9a:	4804      	ldr	r0, [pc, #16]	; (23fdeac <free+0x14>)
 23fde9c:	6800      	ldr	r0, [r0, #0]
 23fde9e:	4b04      	ldr	r3, [pc, #16]	; (23fdeb0 <free+0x18>)
 23fdea0:	4403      	add	r3, r0
 23fdea2:	681b      	ldr	r3, [r3, #0]
 23fdea4:	685b      	ldr	r3, [r3, #4]
 23fdea6:	9302      	str	r3, [sp, #8]
 23fdea8:	bd09      	pop	{r0, r3, pc}
 23fdeaa:	0000      	.short	0x0000
 23fdeac:	1007ad48 	.word	0x1007ad48
 23fdeb0:	00000004 	.word	0x00000004

023fdeb4 <realloc>:
DYNALIB_FN(2, rt, realloc, void*(void*, size_t))
 23fdeb4:	b509      	push	{r0, r3, lr}
 23fdeb6:	4804      	ldr	r0, [pc, #16]	; (23fdec8 <realloc+0x14>)
 23fdeb8:	6800      	ldr	r0, [r0, #0]
 23fdeba:	4b04      	ldr	r3, [pc, #16]	; (23fdecc <realloc+0x18>)
 23fdebc:	4403      	add	r3, r0
 23fdebe:	681b      	ldr	r3, [r3, #0]
 23fdec0:	689b      	ldr	r3, [r3, #8]
 23fdec2:	9302      	str	r3, [sp, #8]
 23fdec4:	bd09      	pop	{r0, r3, pc}
 23fdec6:	0000      	.short	0x0000
 23fdec8:	1007ad48 	.word	0x1007ad48
 23fdecc:	00000004 	.word	0x00000004

023fded0 <abort>:
DYNALIB_FN(6, rt, siscanf, int(const char*, const char*, ...))
DYNALIB_FN(7, rt, snprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(8, rt, sniprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(9, rt, vsnprintf, int(char*, size_t, const char*, va_list))
DYNALIB_FN(10, rt, vsniprintf, int(char*, size_t, const char*, va_list))
DYNALIB_FN(11, rt, abort, void(void))
 23fded0:	b509      	push	{r0, r3, lr}
 23fded2:	4804      	ldr	r0, [pc, #16]	; (23fdee4 <abort+0x14>)
 23fded4:	6800      	ldr	r0, [r0, #0]
 23fded6:	4b04      	ldr	r3, [pc, #16]	; (23fdee8 <abort+0x18>)
 23fded8:	4403      	add	r3, r0
 23fdeda:	681b      	ldr	r3, [r3, #0]
 23fdedc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 23fdede:	9302      	str	r3, [sp, #8]
 23fdee0:	bd09      	pop	{r0, r3, pc}
 23fdee2:	0000      	.short	0x0000
 23fdee4:	1007ad48 	.word	0x1007ad48
 23fdee8:	00000004 	.word	0x00000004

023fdeec <_malloc_r>:
DYNALIB_FN(12, rt, _malloc_r, void*(struct _reent*, size_t))
 23fdeec:	b509      	push	{r0, r3, lr}
 23fdeee:	4804      	ldr	r0, [pc, #16]	; (23fdf00 <_malloc_r+0x14>)
 23fdef0:	6800      	ldr	r0, [r0, #0]
 23fdef2:	4b04      	ldr	r3, [pc, #16]	; (23fdf04 <_malloc_r+0x18>)
 23fdef4:	4403      	add	r3, r0
 23fdef6:	681b      	ldr	r3, [r3, #0]
 23fdef8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 23fdefa:	9302      	str	r3, [sp, #8]
 23fdefc:	bd09      	pop	{r0, r3, pc}
 23fdefe:	0000      	.short	0x0000
 23fdf00:	1007ad48 	.word	0x1007ad48
 23fdf04:	00000004 	.word	0x00000004

023fdf08 <__assert_func>:
DYNALIB_FN(13, rt, _free_r, void(struct _reent*, void*))
DYNALIB_FN(14, rt, _realloc_r, void*(struct _reent*, void*, size_t))
DYNALIB_FN(15, rt, __errno, int*())

#if defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))
DYNALIB_FN(16, rt, __assert_func, void(const char*, int, const char*, const char*))
 23fdf08:	b509      	push	{r0, r3, lr}
 23fdf0a:	4804      	ldr	r0, [pc, #16]	; (23fdf1c <__assert_func+0x14>)
 23fdf0c:	6800      	ldr	r0, [r0, #0]
 23fdf0e:	4b04      	ldr	r3, [pc, #16]	; (23fdf20 <__assert_func+0x18>)
 23fdf10:	4403      	add	r3, r0
 23fdf12:	681b      	ldr	r3, [r3, #0]
 23fdf14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 23fdf16:	9302      	str	r3, [sp, #8]
 23fdf18:	bd09      	pop	{r0, r3, pc}
 23fdf1a:	0000      	.short	0x0000
 23fdf1c:	1007ad48 	.word	0x1007ad48
 23fdf20:	00000004 	.word	0x00000004

023fdf24 <newlib_impure_ptr_callback>:
DYNALIB_FN(17, rt, newlib_impure_ptr_callback, void(void (*)(struct _reent*, size_t, uint32_t, void*), void*))
 23fdf24:	b509      	push	{r0, r3, lr}
 23fdf26:	4804      	ldr	r0, [pc, #16]	; (23fdf38 <newlib_impure_ptr_callback+0x14>)
 23fdf28:	6800      	ldr	r0, [r0, #0]
 23fdf2a:	4b04      	ldr	r3, [pc, #16]	; (23fdf3c <newlib_impure_ptr_callback+0x18>)
 23fdf2c:	4403      	add	r3, r0
 23fdf2e:	681b      	ldr	r3, [r3, #0]
 23fdf30:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 23fdf32:	9302      	str	r3, [sp, #8]
 23fdf34:	bd09      	pop	{r0, r3, pc}
 23fdf36:	0000      	.short	0x0000
 23fdf38:	1007ad48 	.word	0x1007ad48
 23fdf3c:	00000004 	.word	0x00000004

023fdf40 <delay>:
    return (value - fromStart) * (toEnd - toStart) / (fromEnd - fromStart) + toStart;
}

void delay(unsigned long ms)
{
    system_delay_ms(ms, false);
 23fdf40:	2100      	movs	r1, #0
 23fdf42:	f7ff be83 	b.w	23fdc4c <system_delay_ms>

023fdf46 <_ZN8particle6detail21futureCallbackWrapperEPv>:
 * License along with this library; if not, see <http://www.gnu.org/licenses/>.
 */

#include "spark_wiring_async.h"

void particle::detail::futureCallbackWrapper(void* data) {
 23fdf46:	b510      	push	{r4, lr}
  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
 23fdf48:	6883      	ldr	r3, [r0, #8]
 23fdf4a:	4604      	mov	r4, r0
 23fdf4c:	b90b      	cbnz	r3, 23fdf52 <_ZN8particle6detail21futureCallbackWrapperEPv+0xc>
	__throw_bad_function_call();
 23fdf4e:	f001 faa1 	bl	23ff494 <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
 23fdf52:	68c3      	ldr	r3, [r0, #12]
 23fdf54:	4798      	blx	r3
      if (_M_manager)
 23fdf56:	68a3      	ldr	r3, [r4, #8]
 23fdf58:	b11b      	cbz	r3, 23fdf62 <_ZN8particle6detail21futureCallbackWrapperEPv+0x1c>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
 23fdf5a:	2203      	movs	r2, #3
 23fdf5c:	4621      	mov	r1, r4
 23fdf5e:	4620      	mov	r0, r4
 23fdf60:	4798      	blx	r3
    auto callbackPtr = static_cast<const std::function<void()>*>(data);
    (*callbackPtr)();
    delete callbackPtr;
 23fdf62:	4620      	mov	r0, r4
}
 23fdf64:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    delete callbackPtr;
 23fdf68:	2110      	movs	r1, #16
 23fdf6a:	f7fd bb4a 	b.w	23fb602 <_ZdlPvj>

023fdf6e <_ZNSt14_Function_baseD1Ev>:
    ~_Function_base()
 23fdf6e:	b510      	push	{r4, lr}
      if (_M_manager)
 23fdf70:	6883      	ldr	r3, [r0, #8]
    ~_Function_base()
 23fdf72:	4604      	mov	r4, r0
      if (_M_manager)
 23fdf74:	b113      	cbz	r3, 23fdf7c <_ZNSt14_Function_baseD1Ev+0xe>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
 23fdf76:	2203      	movs	r2, #3
 23fdf78:	4601      	mov	r1, r0
 23fdf7a:	4798      	blx	r3
    }
 23fdf7c:	4620      	mov	r0, r4
 23fdf7e:	bd10      	pop	{r4, pc}

023fdf80 <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>:
			      is_move_constructible<_Tp>,
			      is_move_assignable<_Tp>>::value>::type
#else
    void
#endif
    swap(_Tp& __a, _Tp& __b)
 23fdf80:	b513      	push	{r0, r1, r4, lr}
    {
#if __cplusplus < 201103L
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)
#endif
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 23fdf82:	466c      	mov	r4, sp
    swap(_Tp& __a, _Tp& __b)
 23fdf84:	460b      	mov	r3, r1
 23fdf86:	4602      	mov	r2, r0
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 23fdf88:	e9d0 0100 	ldrd	r0, r1, [r0]
 23fdf8c:	e884 0003 	stmia.w	r4, {r0, r1}
      __a = _GLIBCXX_MOVE(__b);
 23fdf90:	e893 0003 	ldmia.w	r3, {r0, r1}
 23fdf94:	e882 0003 	stmia.w	r2, {r0, r1}
      __b = _GLIBCXX_MOVE(__tmp);
 23fdf98:	e894 0003 	ldmia.w	r4, {r0, r1}
 23fdf9c:	e883 0003 	stmia.w	r3, {r0, r1}
    }
 23fdfa0:	b002      	add	sp, #8
 23fdfa2:	bd10      	pop	{r4, pc}

023fdfa4 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E>:
    /**
     * Creates a shared mutex.
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
 23fdfa4:	2300      	movs	r3, #0
 23fdfa6:	4802      	ldr	r0, [pc, #8]	; (23fdfb0 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0xc>)
 23fdfa8:	6003      	str	r3, [r0, #0]
    {
        os_mutex_recursive_create(&handle_);
 23fdfaa:	f7ff bbcb 	b.w	23fd744 <os_mutex_recursive_create>
 23fdfae:	bf00      	nop
 23fdfb0:	1007ae8c 	.word	0x1007ae8c

023fdfb4 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED1Ev>:
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
 23fdfb4:	4770      	bx	lr

023fdfb6 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info>:
      { return nullptr; }
 23fdfb6:	2000      	movs	r0, #0
 23fdfb8:	4770      	bx	lr

023fdfba <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED0Ev>:
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
 23fdfba:	b510      	push	{r4, lr}
 23fdfbc:	4604      	mov	r4, r0
 23fdfbe:	2110      	movs	r1, #16
 23fdfc0:	f7fd fb1f 	bl	23fb602 <_ZdlPvj>
 23fdfc4:	4620      	mov	r0, r4
 23fdfc6:	bd10      	pop	{r4, pc}

023fdfc8 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv>:
      _M_destroy() noexcept
 23fdfc8:	b508      	push	{r3, lr}
      { delete this; }
 23fdfca:	f7ff fff6 	bl	23fdfba <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED0Ev>
 23fdfce:	bd08      	pop	{r3, pc}

023fdfd0 <_ZN8particle5ErrorC1EOS0_>:

} // namespace particle

inline particle::Error::Error(Type type) :
        msg_(nullptr),
        type_(type) {
 23fdfd0:	2200      	movs	r2, #0

inline particle::Error::Error(const Error& error) :
        Error(error.type_, error.msg_) {
}

inline particle::Error::Error(Error&& error) :
 23fdfd2:	b530      	push	{r4, r5, lr}
        type_(type) {
 23fdfd4:	f64f 749c 	movw	r4, #65436	; 0xff9c
 23fdfd8:	6002      	str	r2, [r0, #0]
 23fdfda:	8084      	strh	r4, [r0, #4]
      __a = _GLIBCXX_MOVE(__b);
 23fdfdc:	888d      	ldrh	r5, [r1, #4]
      __b = _GLIBCXX_MOVE(__tmp);
 23fdfde:	808c      	strh	r4, [r1, #4]
      __a = _GLIBCXX_MOVE(__b);
 23fdfe0:	680c      	ldr	r4, [r1, #0]
 23fdfe2:	8085      	strh	r5, [r0, #4]
 23fdfe4:	6004      	str	r4, [r0, #0]
      __b = _GLIBCXX_MOVE(__tmp);
 23fdfe6:	600a      	str	r2, [r1, #0]
        Error() {
    swap(*this, error);
}
 23fdfe8:	bd30      	pop	{r4, r5, pc}

023fdfea <_ZN8particle5ErrorD1Ev>:

inline particle::Error::~Error() {
 23fdfea:	b510      	push	{r4, lr}
 23fdfec:	4604      	mov	r4, r0
    free((void*)msg_);
 23fdfee:	6800      	ldr	r0, [r0, #0]
 23fdff0:	f7ff ff52 	bl	23fde98 <free>
}
 23fdff4:	4620      	mov	r0, r4
 23fdff6:	bd10      	pop	{r4, pc}

023fdff8 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv>:
      _M_dispose() noexcept
 23fdff8:	b538      	push	{r3, r4, r5, lr}
      { delete _M_ptr; }
 23fdffa:	68c4      	ldr	r4, [r0, #12]
 23fdffc:	b314      	cbz	r4, 23fe044 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x4c>
      _Tp
      load(memory_order __m = memory_order_seq_cst) const noexcept
      {
	alignas(_Tp) unsigned char __buf[sizeof(_Tp)];
	_Tp* __ptr = reinterpret_cast<_Tp*>(__buf);
	__atomic_load(std::__addressof(_M_i), __ptr, int(__m));
 23fdffe:	7823      	ldrb	r3, [r4, #0]
 23fe000:	b2db      	uxtb	r3, r3
    ~FutureImpl() {
        // Call destructor of the appropriate unnamed enum's field
        const State s = this->state();
        if (s == State::SUCCEEDED) {
            result_.~ResultT();
        } else if (s == State::FAILED) {
 23fe002:	2b02      	cmp	r3, #2
 23fe004:	d103      	bne.n	23fe00e <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x16>
            error_.~Error();
 23fe006:	f104 000c 	add.w	r0, r4, #12
 23fe00a:	f7ff ffee 	bl	23fdfea <_ZN8particle5ErrorD1Ev>
      {
	memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_release);
	__glibcxx_assert(__b != memory_order_acq_rel);

	return __atomic_load_n(&_M_p, int(__m));
 23fe00e:	1d23      	adds	r3, r4, #4
 23fe010:	681d      	ldr	r5, [r3, #0]
        delete onSuccess_.load(std::memory_order_relaxed);
 23fe012:	b135      	cbz	r5, 23fe022 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x2a>
    class function<_Res(_ArgTypes...)>
 23fe014:	4628      	mov	r0, r5
 23fe016:	f7ff ffaa 	bl	23fdf6e <_ZNSt14_Function_baseD1Ev>
 23fe01a:	2110      	movs	r1, #16
 23fe01c:	4628      	mov	r0, r5
 23fe01e:	f7fd faf0 	bl	23fb602 <_ZdlPvj>
 23fe022:	f104 0308 	add.w	r3, r4, #8
 23fe026:	681d      	ldr	r5, [r3, #0]
        delete onError_.load(std::memory_order_relaxed);
 23fe028:	b135      	cbz	r5, 23fe038 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x40>
 23fe02a:	4628      	mov	r0, r5
 23fe02c:	f7ff ff9f 	bl	23fdf6e <_ZNSt14_Function_baseD1Ev>
 23fe030:	2110      	movs	r1, #16
 23fe032:	4628      	mov	r0, r5
 23fe034:	f7fd fae5 	bl	23fb602 <_ZdlPvj>
 23fe038:	4620      	mov	r0, r4
 23fe03a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 23fe03e:	2114      	movs	r1, #20
 23fe040:	f7fd badf 	b.w	23fb602 <_ZdlPvj>
 23fe044:	bd38      	pop	{r3, r4, r5, pc}

023fe046 <_ZNSt12__shared_ptrIN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EEC1ERKS7_>:
      __shared_ptr(const __shared_ptr&) noexcept = default;
 23fe046:	680b      	ldr	r3, [r1, #0]
 23fe048:	6003      	str	r3, [r0, #0]
      : _M_pi(__r._M_pi)
 23fe04a:	684b      	ldr	r3, [r1, #4]
 23fe04c:	6043      	str	r3, [r0, #4]
	if (_M_pi != 0)
 23fe04e:	b113      	cbz	r3, 23fe056 <_ZNSt12__shared_ptrIN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EEC1ERKS7_+0x10>
    { ++_M_use_count; }
 23fe050:	685a      	ldr	r2, [r3, #4]
 23fe052:	3201      	adds	r2, #1
 23fe054:	605a      	str	r2, [r3, #4]
      __shared_ptr(const __shared_ptr&) noexcept = default;
 23fe056:	4770      	bx	lr

023fe058 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>:
        // TODO: Use custom reference counting object to avoid unnecessary memory allocation
        return new detail::FutureImplPtr<ResultT, ContextT>(p_);
    }

    // Unwraps promise from an object pointer created via dataPtr() method
    static Promise<ResultT, ContextT> fromDataPtr(void* data) {
 23fe058:	b537      	push	{r0, r1, r2, r4, r5, lr}
 23fe05a:	4604      	mov	r4, r0
       *  @brief  Construct an empty %shared_ptr.
       *  @post   use_count()==0 && get()==0
       */
      constexpr shared_ptr() noexcept : __shared_ptr<_Tp>() { }

      shared_ptr(const shared_ptr&) noexcept = default; ///< Copy constructor
 23fe05c:	4668      	mov	r0, sp
 23fe05e:	460d      	mov	r5, r1
 23fe060:	f7ff fff1 	bl	23fe046 <_ZNSt12__shared_ptrIN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EEC1ERKS7_>
	__shared_ptr(const __shared_ptr<_Yp, _Lp>& __r) noexcept
	: _M_ptr(__r._M_ptr), _M_refcount(__r._M_refcount)
	{ }

      __shared_ptr(__shared_ptr&& __r) noexcept
      : _M_ptr(__r._M_ptr), _M_refcount()
 23fe064:	9b00      	ldr	r3, [sp, #0]
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
 23fe066:	9a01      	ldr	r2, [sp, #4]
      : _M_ptr(__r._M_ptr), _M_refcount()
 23fe068:	6023      	str	r3, [r4, #0]
	__r._M_pi = _M_pi;
 23fe06a:	2300      	movs	r3, #0
	_M_pi = __tmp;
 23fe06c:	6062      	str	r2, [r4, #4]
      ~__shared_ptr() = default;
 23fe06e:	a801      	add	r0, sp, #4
	__r._M_pi = _M_pi;
 23fe070:	9301      	str	r3, [sp, #4]
      {
	_M_refcount._M_swap(__r._M_refcount);
	__r._M_ptr = 0;
 23fe072:	9300      	str	r3, [sp, #0]
      ~__shared_ptr() = default;
 23fe074:	f7fd fb06 	bl	23fb684 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
        auto d = static_cast<detail::FutureImplPtr<ResultT, ContextT>*>(data);
        const Promise<ResultT, ContextT> p(*d);
        delete d;
 23fe078:	b135      	cbz	r5, 23fe088 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv+0x30>
 23fe07a:	1d28      	adds	r0, r5, #4
 23fe07c:	f7fd fb02 	bl	23fb684 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 23fe080:	2108      	movs	r1, #8
 23fe082:	4628      	mov	r0, r5
 23fe084:	f7fd fabd 	bl	23fb602 <_ZdlPvj>
        return p;
    }
 23fe088:	4620      	mov	r0, r4
 23fe08a:	b003      	add	sp, #12
 23fe08c:	bd30      	pop	{r4, r5, pc}

023fe08e <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>:
      if (_M_empty())
 23fe08e:	6882      	ldr	r2, [r0, #8]
    function<_Res(_ArgTypes...)>::
 23fe090:	b510      	push	{r4, lr}
      if (_M_empty())
 23fe092:	b90a      	cbnz	r2, 23fe098 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_+0xa>
	__throw_bad_function_call();
 23fe094:	f001 f9fe 	bl	23ff494 <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
 23fe098:	68c3      	ldr	r3, [r0, #12]
    }
 23fe09a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
 23fe09e:	4718      	bx	r3

023fe0a0 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE9_M_invokeERKSt9_Any_data>:
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
 23fe0a0:	b508      	push	{r3, lr}
	    return __source._M_access<_Functor*>();
 23fe0a2:	6800      	ldr	r0, [r0, #0]
    { return static_cast<_Up&&>(__t); }

  template<typename _Res, typename _Fn, typename... _Args>
    constexpr _Res
    __invoke_impl(__invoke_other, _Fn&& __f, _Args&&... __args)
    { return std::forward<_Fn>(__f)(std::forward<_Args>(__args)...); }
 23fe0a4:	f100 0110 	add.w	r1, r0, #16
 23fe0a8:	f7ff fff1 	bl	23fe08e <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>
      }
 23fe0ac:	bd08      	pop	{r3, pc}

023fe0ae <_ZNKSt8functionIFvRKbEEclES1_>:
      if (_M_empty())
 23fe0ae:	6882      	ldr	r2, [r0, #8]
    function<_Res(_ArgTypes...)>::
 23fe0b0:	b510      	push	{r4, lr}
      if (_M_empty())
 23fe0b2:	b90a      	cbnz	r2, 23fe0b8 <_ZNKSt8functionIFvRKbEEclES1_+0xa>
	__throw_bad_function_call();
 23fe0b4:	f001 f9ee 	bl	23ff494 <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
 23fe0b8:	68c3      	ldr	r3, [r0, #12]
    }
 23fe0ba:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
 23fe0be:	4718      	bx	r3

023fe0c0 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE9_M_invokeERKSt9_Any_data>:
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
 23fe0c0:	b508      	push	{r3, lr}
	    return __source._M_access<_Functor*>();
 23fe0c2:	6800      	ldr	r0, [r0, #0]
 23fe0c4:	f100 0110 	add.w	r1, r0, #16
 23fe0c8:	f7ff fff1 	bl	23fe0ae <_ZNKSt8functionIFvRKbEEclES1_>
      }
 23fe0cc:	bd08      	pop	{r3, pc}
	...

023fe0d0 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>:
	__shared_count(_Ptr __p) : _M_pi(0)
 23fe0d0:	b538      	push	{r3, r4, r5, lr}
 23fe0d2:	2300      	movs	r3, #0
 23fe0d4:	4604      	mov	r4, r0
 23fe0d6:	6003      	str	r3, [r0, #0]
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
 23fe0d8:	2010      	movs	r0, #16
	__shared_count(_Ptr __p) : _M_pi(0)
 23fe0da:	460d      	mov	r5, r1
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
 23fe0dc:	f7fd fa8d 	bl	23fb5fa <_Znwj>
 23fe0e0:	b128      	cbz	r0, 23fe0ee <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_+0x1e>
      : _M_use_count(1), _M_weak_count(1) { }
 23fe0e2:	2301      	movs	r3, #1
 23fe0e4:	e9c0 3301 	strd	r3, r3, [r0, #4]
      : _M_ptr(__p) { }
 23fe0e8:	4b02      	ldr	r3, [pc, #8]	; (23fe0f4 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_+0x24>)
 23fe0ea:	60c5      	str	r5, [r0, #12]
 23fe0ec:	6003      	str	r3, [r0, #0]
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
 23fe0ee:	6020      	str	r0, [r4, #0]
	}
 23fe0f0:	4620      	mov	r0, r4
 23fe0f2:	bd38      	pop	{r3, r4, r5, pc}
 23fe0f4:	023ffdd8 	.word	0x023ffdd8

023fe0f8 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>:
    function<_Res(_ArgTypes...)>::
 23fe0f8:	b538      	push	{r3, r4, r5, lr}
    _Function_base() : _M_manager(nullptr) { }
 23fe0fa:	2300      	movs	r3, #0
 23fe0fc:	6083      	str	r3, [r0, #8]
    bool _M_empty() const { return !_M_manager; }
 23fe0fe:	688b      	ldr	r3, [r1, #8]
    function<_Res(_ArgTypes...)>::
 23fe100:	4604      	mov	r4, r0
 23fe102:	460d      	mov	r5, r1
      if (static_cast<bool>(__x))
 23fe104:	b12b      	cbz	r3, 23fe112 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_+0x1a>
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
 23fe106:	2202      	movs	r2, #2
 23fe108:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
 23fe10a:	68eb      	ldr	r3, [r5, #12]
 23fe10c:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
 23fe10e:	68ab      	ldr	r3, [r5, #8]
 23fe110:	60a3      	str	r3, [r4, #8]
    }
 23fe112:	4620      	mov	r0, r4
 23fe114:	bd38      	pop	{r3, r4, r5, pc}
	...

023fe118 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>:
    void setError(Error error) {
 23fe118:	b5f0      	push	{r4, r5, r6, r7, lr}
 23fe11a:	b089      	sub	sp, #36	; 0x24
        { __shared_ptr(__p, std::move(__d), std::move(__a)).swap(*this); }

      /// Return the stored pointer.
      element_type*
      get() const noexcept
      { return _M_ptr; }
 23fe11c:	6804      	ldr	r4, [r0, #0]
        p_->setError(std::move(error));
 23fe11e:	4668      	mov	r0, sp
 23fe120:	f7ff ff56 	bl	23fdfd0 <_ZN8particle5ErrorC1EOS0_>

      bool
      compare_exchange_strong(_Tp& __e, _Tp __i, memory_order __s,
			      memory_order __f) noexcept
      {
	return __atomic_compare_exchange(std::__addressof(_M_i),
 23fe124:	f04f 0302 	mov.w	r3, #2
 23fe128:	e8d4 2f4f 	ldrexb	r2, [r4]
 23fe12c:	2a00      	cmp	r2, #0
 23fe12e:	d103      	bne.n	23fe138 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x20>
 23fe130:	e8c4 3f41 	strexb	r1, r3, [r4]
 23fe134:	2900      	cmp	r1, #0
 23fe136:	d1f7      	bne.n	23fe128 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x10>
        if (this->changeState(State::FAILED)) {
 23fe138:	d121      	bne.n	23fe17e <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x66>
            new(&error_) Error(std::move(error));
 23fe13a:	f104 050c 	add.w	r5, r4, #12
 23fe13e:	4669      	mov	r1, sp
 23fe140:	4628      	mov	r0, r5
 23fe142:	f7ff ff45 	bl	23fdfd0 <_ZN8particle5ErrorC1EOS0_>
	__atomic_store_n(&_M_i, __i, int(__m));
 23fe146:	2201      	movs	r2, #1
 23fe148:	1c63      	adds	r3, r4, #1
 23fe14a:	e8c3 2f8f 	stlb	r2, [r3]

      _GLIBCXX_ALWAYS_INLINE __pointer_type
      exchange(__pointer_type __p,
	       memory_order __m = memory_order_seq_cst) noexcept
      {
	return __atomic_exchange_n(&_M_p, __p, int(__m));
 23fe14e:	2000      	movs	r0, #0
 23fe150:	f104 0308 	add.w	r3, r4, #8
 23fe154:	e8d3 6fef 	ldaex	r6, [r3]
 23fe158:	e8c3 0fe2 	stlex	r2, r0, [r3]
 23fe15c:	2a00      	cmp	r2, #0
 23fe15e:	d1f9      	bne.n	23fe154 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x3c>
        if (callbackPtr) {
 23fe160:	b16e      	cbz	r6, 23fe17e <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x66>
        return (application_thread_current(nullptr) != 0);
 23fe162:	f7ff fd81 	bl	23fdc68 <application_thread_current>
        if (ContextT::isApplicationThreadCurrent()) {
 23fe166:	b178      	cbz	r0, 23fe188 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x70>
            callback(std::forward<ArgsT>(args)...); // Synchronous call
 23fe168:	4629      	mov	r1, r5
 23fe16a:	4630      	mov	r0, r6
 23fe16c:	f7ff ff8f 	bl	23fe08e <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>
    class function<_Res(_ArgTypes...)>
 23fe170:	4630      	mov	r0, r6
 23fe172:	f7ff fefc 	bl	23fdf6e <_ZNSt14_Function_baseD1Ev>
            delete callbackPtr;
 23fe176:	2110      	movs	r1, #16
 23fe178:	4630      	mov	r0, r6
 23fe17a:	f7fd fa42 	bl	23fb602 <_ZdlPvj>
        p_->setError(std::move(error));
 23fe17e:	4668      	mov	r0, sp
 23fe180:	f7ff ff33 	bl	23fdfea <_ZN8particle5ErrorD1Ev>
    }
 23fe184:	b009      	add	sp, #36	; 0x24
 23fe186:	bdf0      	pop	{r4, r5, r6, r7, pc}

     public:
      template<typename... _Args>
	explicit _GLIBCXX20_CONSTEXPR
	_Bind(const _Functor& __f, _Args&&... __args)
	: _M_f(__f), _M_bound_args(std::forward<_Args>(__args)...)
 23fe188:	4631      	mov	r1, r6
 23fe18a:	a802      	add	r0, sp, #8
 23fe18c:	f7ff ffb4 	bl	23fe0f8 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>
        Error(error.type_, error.msg_) {
 23fe190:	68e0      	ldr	r0, [r4, #12]
 23fe192:	f9b4 5010 	ldrsh.w	r5, [r4, #16]
        msg_(msg ? (const char*)strdup(msg) : nullptr),
 23fe196:	b108      	cbz	r0, 23fe19c <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x84>
 23fe198:	f001 f9d0 	bl	23ff53c <strdup>
        type_(type) {
 23fe19c:	9006      	str	r0, [sp, #24]
            auto callbackPtr = new std::function<void()>(std::bind(callback, std::forward<ArgsT>(args)...));
 23fe19e:	2010      	movs	r0, #16
 23fe1a0:	f8ad 501c 	strh.w	r5, [sp, #28]
 23fe1a4:	f7fd fa29 	bl	23fb5fa <_Znwj>
 23fe1a8:	4605      	mov	r5, r0
 23fe1aa:	b1e8      	cbz	r0, 23fe1e8 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xd0>
    _Function_base() : _M_manager(nullptr) { }
 23fe1ac:	2700      	movs	r7, #0
 23fe1ae:	6087      	str	r7, [r0, #8]
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
 23fe1b0:	2018      	movs	r0, #24
 23fe1b2:	f7fd fa22 	bl	23fb5fa <_Znwj>
 23fe1b6:	4604      	mov	r4, r0
 23fe1b8:	b188      	cbz	r0, 23fe1de <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xc6>
	std::swap(_M_functor, __x._M_functor);
 23fe1ba:	4601      	mov	r1, r0
    _Function_base() : _M_manager(nullptr) { }
 23fe1bc:	6087      	str	r7, [r0, #8]
	std::swap(_M_functor, __x._M_functor);
 23fe1be:	a802      	add	r0, sp, #8
 23fe1c0:	f7ff fede 	bl	23fdf80 <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 23fe1c4:	9b04      	ldr	r3, [sp, #16]
      __a = _GLIBCXX_MOVE(__b);
 23fe1c6:	68a2      	ldr	r2, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
 23fe1c8:	60a3      	str	r3, [r4, #8]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 23fe1ca:	9b05      	ldr	r3, [sp, #20]
      __a = _GLIBCXX_MOVE(__b);
 23fe1cc:	9204      	str	r2, [sp, #16]
 23fe1ce:	68e2      	ldr	r2, [r4, #12]
      constexpr _Head_base(const _Head_base&) = default;
      constexpr _Head_base(_Head_base&&) = default;

      template<typename _UHead>
        constexpr _Head_base(_UHead&& __h)
	: _M_head_impl(std::forward<_UHead>(__h)) { }
 23fe1d0:	a906      	add	r1, sp, #24
      __b = _GLIBCXX_MOVE(__tmp);
 23fe1d2:	60e3      	str	r3, [r4, #12]
 23fe1d4:	f104 0010 	add.w	r0, r4, #16
      __a = _GLIBCXX_MOVE(__b);
 23fe1d8:	9205      	str	r2, [sp, #20]
 23fe1da:	f7ff fef9 	bl	23fdfd0 <_ZN8particle5ErrorC1EOS0_>
	    _M_invoker = &_My_handler::_M_invoke;
 23fe1de:	4b08      	ldr	r3, [pc, #32]	; (23fe200 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xe8>)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
 23fe1e0:	602c      	str	r4, [r5, #0]
	    _M_invoker = &_My_handler::_M_invoke;
 23fe1e2:	60eb      	str	r3, [r5, #12]
	    _M_manager = &_My_handler::_M_manager;
 23fe1e4:	4b07      	ldr	r3, [pc, #28]	; (23fe204 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xec>)
 23fe1e6:	60ab      	str	r3, [r5, #8]
    struct _Head_base<_Idx, _Head, false>
 23fe1e8:	a806      	add	r0, sp, #24
 23fe1ea:	f7ff fefe 	bl	23fdfea <_ZN8particle5ErrorD1Ev>
    class function<_Res(_ArgTypes...)>
 23fe1ee:	a802      	add	r0, sp, #8
 23fe1f0:	f7ff febd 	bl	23fdf6e <_ZNSt14_Function_baseD1Ev>
        return (application_thread_invoke(callback, data, nullptr) == 0);
 23fe1f4:	2200      	movs	r2, #0
 23fe1f6:	4629      	mov	r1, r5
 23fe1f8:	4803      	ldr	r0, [pc, #12]	; (23fe208 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xf0>)
 23fe1fa:	f7ff fd43 	bl	23fdc84 <application_thread_invoke>
 23fe1fe:	e7b7      	b.n	23fe170 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x58>
 23fe200:	023fe0a1 	.word	0x023fe0a1
 23fe204:	023fe31d 	.word	0x023fe31d
 23fe208:	023fdf47 	.word	0x023fdf47

023fe20c <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>:
    desc.data = (void*)data;
    desc.funcKey = funcKey;
    return spark_function(NULL, (user_function_int_str_t*)&desc, NULL);
}

Future<bool> CloudClass::publish_event(const char *eventName, const char *eventData, int ttl, PublishFlags flags) {
 23fe20c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 23fe210:	b08b      	sub	sp, #44	; 0x2c
 23fe212:	4605      	mov	r5, r0
 23fe214:	460f      	mov	r7, r1
 23fe216:	4690      	mov	r8, r2
 23fe218:	4699      	mov	r9, r3
 23fe21a:	f89d a050 	ldrb.w	sl, [sp, #80]	; 0x50
    static void sleep(Spark_Sleep_TypeDef sleepMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(sleepMode, seconds); }
    static void sleep(uint16_t wakeUpPin, InterruptMode edgeTriggerMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
 23fe21e:	f7ff fd5b 	bl	23fdcd8 <spark_cloud_flag_connected>
 23fe222:	ae07      	add	r6, sp, #28
    if (!connected()) {
 23fe224:	4683      	mov	fp, r0
 23fe226:	bb38      	cbnz	r0, 23fe278 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x6c>
        type_(type) {
 23fe228:	f64f 732e 	movw	r3, #65326	; 0xff2e
 23fe22c:	9005      	str	r0, [sp, #20]
    typedef typename detail::FutureImpl<ResultT, ContextT>::OnSuccessCallback OnSuccessCallback;
    typedef typename detail::FutureImpl<ResultT, ContextT>::OnErrorCallback OnErrorCallback;

    // Construct failed future
    explicit FutureBase(Error error) :
            p_(new detail::FutureImpl<ResultT, ContextT>(std::move(error))) {
 23fe22e:	a905      	add	r1, sp, #20
 23fe230:	4630      	mov	r0, r6
 23fe232:	f8ad 3018 	strh.w	r3, [sp, #24]
 23fe236:	f7ff fecb 	bl	23fdfd0 <_ZN8particle5ErrorC1EOS0_>
 23fe23a:	2014      	movs	r0, #20
 23fe23c:	f7fd f9dd 	bl	23fb5fa <_Znwj>
 23fe240:	4604      	mov	r4, r0
 23fe242:	b148      	cbz	r0, 23fe258 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x4c>
      constexpr atomic(_Tp __i) noexcept : _M_i(__i) { }
 23fe244:	2302      	movs	r3, #2
 23fe246:	7003      	strb	r3, [r0, #0]
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
 23fe248:	2301      	movs	r3, #1
      constexpr __atomic_base(__pointer_type __p) noexcept : _M_p (__p) { }
 23fe24a:	e9c0 bb01 	strd	fp, fp, [r0, #4]
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
 23fe24e:	7043      	strb	r3, [r0, #1]
            error_(std::move(error)) {
 23fe250:	4631      	mov	r1, r6
 23fe252:	300c      	adds	r0, #12
 23fe254:	f7ff febc 	bl	23fdfd0 <_ZN8particle5ErrorC1EOS0_>
	: _M_ptr(__p), _M_refcount(__p, typename is_array<_Tp>::type())
 23fe258:	4628      	mov	r0, r5
	: __shared_count(__p)
 23fe25a:	4621      	mov	r1, r4
	: _M_ptr(__p), _M_refcount(__p, typename is_array<_Tp>::type())
 23fe25c:	f840 4b04 	str.w	r4, [r0], #4
	: __shared_count(__p)
 23fe260:	f7ff ff36 	bl	23fe0d0 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>
            p_(new detail::FutureImpl<ResultT, ContextT>(std::move(error))) {
 23fe264:	4630      	mov	r0, r6
 23fe266:	f7ff fec0 	bl	23fdfea <_ZN8particle5ErrorD1Ev>
    }

    explicit FutureBase(Error::Type error) :
            FutureBase(Error(error)) {
 23fe26a:	a805      	add	r0, sp, #20
 23fe26c:	f7ff febd 	bl	23fdfea <_ZN8particle5ErrorD1Ev>
        p.setError(Error::UNKNOWN);
        p.fromDataPtr(d.handler_data); // Free wrapper object
    }

    return p.future();
}
 23fe270:	4628      	mov	r0, r5
 23fe272:	b00b      	add	sp, #44	; 0x2c
 23fe274:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    d.size = sizeof(spark_send_event_data);
 23fe278:	230c      	movs	r3, #12
    spark_send_event_data d = {};
 23fe27a:	2400      	movs	r4, #0
            p_(new detail::FutureImpl<ResultT, ContextT>(State::RUNNING)) {
 23fe27c:	2014      	movs	r0, #20
 23fe27e:	e9cd 4408 	strd	r4, r4, [sp, #32]
    d.size = sizeof(spark_send_event_data);
 23fe282:	9307      	str	r3, [sp, #28]
 23fe284:	f7fd f9b9 	bl	23fb5fa <_Znwj>
 23fe288:	4601      	mov	r1, r0
 23fe28a:	b118      	cbz	r0, 23fe294 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x88>
      constexpr __atomic_base(__pointer_type __p) noexcept : _M_p (__p) { }
 23fe28c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 23fe290:	7004      	strb	r4, [r0, #0]
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
 23fe292:	7044      	strb	r4, [r0, #1]
 23fe294:	a804      	add	r0, sp, #16
	: _M_ptr(__p), _M_refcount(__p, typename is_array<_Tp>::type())
 23fe296:	9103      	str	r1, [sp, #12]
	: __shared_count(__p)
 23fe298:	f7ff ff1a 	bl	23fe0d0 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>
    d.handler_callback = publishCompletionCallback;
 23fe29c:	4b1e      	ldr	r3, [pc, #120]	; (23fe318 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x10c>)
        return new detail::FutureImplPtr<ResultT, ContextT>(p_);
 23fe29e:	2008      	movs	r0, #8
 23fe2a0:	9308      	str	r3, [sp, #32]
 23fe2a2:	f7fd f9aa 	bl	23fb5fa <_Znwj>
 23fe2a6:	4604      	mov	r4, r0
 23fe2a8:	b110      	cbz	r0, 23fe2b0 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xa4>
 23fe2aa:	a903      	add	r1, sp, #12
 23fe2ac:	f7ff fecb 	bl	23fe046 <_ZNSt12__shared_ptrIN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EEC1ERKS7_>
    if (!spark_send_event(eventName, eventData, ttl, flags.value(), &d) && !p.isDone()) {
 23fe2b0:	464a      	mov	r2, r9
 23fe2b2:	4641      	mov	r1, r8
 23fe2b4:	4638      	mov	r0, r7
 23fe2b6:	9600      	str	r6, [sp, #0]
 23fe2b8:	fa5f f38a 	uxtb.w	r3, sl
    d.handler_data = p.dataPtr();
 23fe2bc:	9409      	str	r4, [sp, #36]	; 0x24
    if (!spark_send_event(eventName, eventData, ttl, flags.value(), &d) && !p.isDone()) {
 23fe2be:	f7ff fd19 	bl	23fdcf4 <spark_send_event>
 23fe2c2:	b9b8      	cbnz	r0, 23fe2f4 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xe8>
	return __atomic_load_n(&_M_i, int(__m));
 23fe2c4:	9b03      	ldr	r3, [sp, #12]
 23fe2c6:	3301      	adds	r3, #1
 23fe2c8:	781b      	ldrb	r3, [r3, #0]
 23fe2ca:	b2db      	uxtb	r3, r3
 23fe2cc:	b993      	cbnz	r3, 23fe2f4 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xe8>
 23fe2ce:	9305      	str	r3, [sp, #20]
 23fe2d0:	f64f 739c 	movw	r3, #65436	; 0xff9c
        p.setError(Error::UNKNOWN);
 23fe2d4:	a905      	add	r1, sp, #20
 23fe2d6:	a803      	add	r0, sp, #12
 23fe2d8:	f8ad 3018 	strh.w	r3, [sp, #24]
 23fe2dc:	f7ff ff1c 	bl	23fe118 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>
 23fe2e0:	a805      	add	r0, sp, #20
 23fe2e2:	f7ff fe82 	bl	23fdfea <_ZN8particle5ErrorD1Ev>
        p.fromDataPtr(d.handler_data); // Free wrapper object
 23fe2e6:	a805      	add	r0, sp, #20
 23fe2e8:	9909      	ldr	r1, [sp, #36]	; 0x24
 23fe2ea:	f7ff feb5 	bl	23fe058 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>
      ~__shared_ptr() = default;
 23fe2ee:	a806      	add	r0, sp, #24
 23fe2f0:	f7fd f9c8 	bl	23fb684 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 23fe2f4:	a903      	add	r1, sp, #12
 23fe2f6:	a805      	add	r0, sp, #20
 23fe2f8:	f7ff fea5 	bl	23fe046 <_ZNSt12__shared_ptrIN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EEC1ERKS7_>
      : _M_ptr(__r._M_ptr), _M_refcount()
 23fe2fc:	9b05      	ldr	r3, [sp, #20]
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
 23fe2fe:	9a06      	ldr	r2, [sp, #24]
      : _M_ptr(__r._M_ptr), _M_refcount()
 23fe300:	602b      	str	r3, [r5, #0]
	__r._M_pi = _M_pi;
 23fe302:	2300      	movs	r3, #0
	_M_pi = __tmp;
 23fe304:	606a      	str	r2, [r5, #4]
      ~__shared_ptr() = default;
 23fe306:	a806      	add	r0, sp, #24
	__r._M_pi = _M_pi;
 23fe308:	9306      	str	r3, [sp, #24]
	__r._M_ptr = 0;
 23fe30a:	9305      	str	r3, [sp, #20]
      ~__shared_ptr() = default;
 23fe30c:	f7fd f9ba 	bl	23fb684 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 23fe310:	a804      	add	r0, sp, #16
 23fe312:	f7fd f9b7 	bl	23fb684 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
class Promise: public PromiseBase<ResultT, ContextT> {
 23fe316:	e7ab      	b.n	23fe270 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x64>
 23fe318:	023fe399 	.word	0x023fe399

023fe31c <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation>:
	switch (__op)
 23fe31c:	2a01      	cmp	r2, #1
      _M_manager(_Any_data& __dest, const _Any_data& __source,
 23fe31e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 23fe320:	4605      	mov	r5, r0
	switch (__op)
 23fe322:	d103      	bne.n	23fe32c <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x10>
	    return __source._M_access<_Functor*>();
 23fe324:	680b      	ldr	r3, [r1, #0]
	    __dest._M_access<_Functor*>() = _Base::_M_get_pointer(__source);
 23fe326:	6003      	str	r3, [r0, #0]
      }
 23fe328:	2000      	movs	r0, #0
 23fe32a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	  switch (__op)
 23fe32c:	2a02      	cmp	r2, #2
 23fe32e:	d010      	beq.n	23fe352 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x36>
 23fe330:	2a03      	cmp	r2, #3
 23fe332:	d1f9      	bne.n	23fe328 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0xc>
	  delete __victim._M_access<_Functor*>();
 23fe334:	6804      	ldr	r4, [r0, #0]
 23fe336:	2c00      	cmp	r4, #0
 23fe338:	d0f6      	beq.n	23fe328 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0xc>
 23fe33a:	f104 0010 	add.w	r0, r4, #16
 23fe33e:	f7ff fe54 	bl	23fdfea <_ZN8particle5ErrorD1Ev>
    class function<_Res(_ArgTypes...)>
 23fe342:	4620      	mov	r0, r4
 23fe344:	f7ff fe13 	bl	23fdf6e <_ZNSt14_Function_baseD1Ev>
	  delete __victim._M_access<_Functor*>();
 23fe348:	2118      	movs	r1, #24
 23fe34a:	4620      	mov	r0, r4
 23fe34c:	f7fd f959 	bl	23fb602 <_ZdlPvj>
 23fe350:	e7ea      	b.n	23fe328 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0xc>
	    new _Functor(*__source._M_access<const _Functor*>());
 23fe352:	2018      	movs	r0, #24
	  __dest._M_access<_Functor*>() =
 23fe354:	680e      	ldr	r6, [r1, #0]
	    new _Functor(*__source._M_access<const _Functor*>());
 23fe356:	f7fd f950 	bl	23fb5fa <_Znwj>
 23fe35a:	4604      	mov	r4, r0
 23fe35c:	b150      	cbz	r0, 23fe374 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x58>
	explicit _GLIBCXX20_CONSTEXPR
	_Bind(_Functor&& __f, _Args&&... __args)
	: _M_f(std::move(__f)), _M_bound_args(std::forward<_Args>(__args)...)
	{ }

      _Bind(const _Bind&) = default;
 23fe35e:	4631      	mov	r1, r6
 23fe360:	f7ff feca 	bl	23fe0f8 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>
        Error(error.type_, error.msg_) {
 23fe364:	6930      	ldr	r0, [r6, #16]
 23fe366:	f9b6 7014 	ldrsh.w	r7, [r6, #20]
        msg_(msg ? (const char*)strdup(msg) : nullptr),
 23fe36a:	b108      	cbz	r0, 23fe370 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x54>
 23fe36c:	f001 f8e6 	bl	23ff53c <strdup>
        type_(type) {
 23fe370:	6120      	str	r0, [r4, #16]
 23fe372:	82a7      	strh	r7, [r4, #20]
	  __dest._M_access<_Functor*>() =
 23fe374:	602c      	str	r4, [r5, #0]
	}
 23fe376:	e7d7      	b.n	23fe328 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0xc>

023fe378 <_ZNSt8functionIFvRKbEEC1ERKS3_>:
    function<_Res(_ArgTypes...)>::
 23fe378:	b538      	push	{r3, r4, r5, lr}
    _Function_base() : _M_manager(nullptr) { }
 23fe37a:	2300      	movs	r3, #0
 23fe37c:	6083      	str	r3, [r0, #8]
    bool _M_empty() const { return !_M_manager; }
 23fe37e:	688b      	ldr	r3, [r1, #8]
    function<_Res(_ArgTypes...)>::
 23fe380:	4604      	mov	r4, r0
 23fe382:	460d      	mov	r5, r1
      if (static_cast<bool>(__x))
 23fe384:	b12b      	cbz	r3, 23fe392 <_ZNSt8functionIFvRKbEEC1ERKS3_+0x1a>
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
 23fe386:	2202      	movs	r2, #2
 23fe388:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
 23fe38a:	68eb      	ldr	r3, [r5, #12]
 23fe38c:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
 23fe38e:	68ab      	ldr	r3, [r5, #8]
 23fe390:	60a3      	str	r3, [r4, #8]
    }
 23fe392:	4620      	mov	r0, r4
 23fe394:	bd38      	pop	{r3, r4, r5, pc}
	...

023fe398 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_>:
void publishCompletionCallback(int error, const void* data, void* callbackData, void* reserved) {
 23fe398:	b5f0      	push	{r4, r5, r6, r7, lr}
 23fe39a:	4604      	mov	r4, r0
 23fe39c:	b089      	sub	sp, #36	; 0x24
 23fe39e:	460d      	mov	r5, r1
    auto p = Promise<bool>::fromDataPtr(callbackData);
 23fe3a0:	a801      	add	r0, sp, #4
 23fe3a2:	4611      	mov	r1, r2
 23fe3a4:	f7ff fe58 	bl	23fe058 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>
    if (error != Error::NONE) {
 23fe3a8:	b1a4      	cbz	r4, 23fe3d4 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x3c>
        p.setError(Error((Error::Type)error, (const char*)data));
 23fe3aa:	b224      	sxth	r4, r4
        msg_(msg ? (const char*)strdup(msg) : nullptr),
 23fe3ac:	b11d      	cbz	r5, 23fe3b6 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x1e>
 23fe3ae:	4628      	mov	r0, r5
 23fe3b0:	f001 f8c4 	bl	23ff53c <strdup>
 23fe3b4:	4605      	mov	r5, r0
 23fe3b6:	a801      	add	r0, sp, #4
 23fe3b8:	a903      	add	r1, sp, #12
        type_(type) {
 23fe3ba:	9503      	str	r5, [sp, #12]
 23fe3bc:	f8ad 4010 	strh.w	r4, [sp, #16]
 23fe3c0:	f7ff feaa 	bl	23fe118 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>
 23fe3c4:	a803      	add	r0, sp, #12
 23fe3c6:	f7ff fe10 	bl	23fdfea <_ZN8particle5ErrorD1Ev>
 23fe3ca:	a802      	add	r0, sp, #8
 23fe3cc:	f7fd f95a 	bl	23fb684 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
 23fe3d0:	b009      	add	sp, #36	; 0x24
 23fe3d2:	bdf0      	pop	{r4, r5, r6, r7, pc}
	return __atomic_compare_exchange(std::__addressof(_M_i),
 23fe3d4:	2301      	movs	r3, #1
      { return _M_ptr; }
 23fe3d6:	9d01      	ldr	r5, [sp, #4]
 23fe3d8:	e8d5 2f4f 	ldrexb	r2, [r5]
 23fe3dc:	2a00      	cmp	r2, #0
 23fe3de:	d103      	bne.n	23fe3e8 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x50>
 23fe3e0:	e8c5 3f41 	strexb	r1, r3, [r5]
 23fe3e4:	2900      	cmp	r1, #0
 23fe3e6:	d1f7      	bne.n	23fe3d8 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x40>
        if (this->changeState(State::SUCCEEDED)) {
 23fe3e8:	d1ef      	bne.n	23fe3ca <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x32>
            new(&result_) ResultT(std::move(result));
 23fe3ea:	732b      	strb	r3, [r5, #12]
	__atomic_store_n(&_M_i, __i, int(__m));
 23fe3ec:	2201      	movs	r2, #1
 23fe3ee:	18eb      	adds	r3, r5, r3
 23fe3f0:	e8c3 2f8f 	stlb	r2, [r3]
	return __atomic_exchange_n(&_M_p, __p, int(__m));
 23fe3f4:	1d2b      	adds	r3, r5, #4
 23fe3f6:	e8d3 6fef 	ldaex	r6, [r3]
 23fe3fa:	e8c3 4fe2 	stlex	r2, r4, [r3]
 23fe3fe:	2a00      	cmp	r2, #0
 23fe400:	d1f9      	bne.n	23fe3f6 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x5e>
        if (callbackPtr) {
 23fe402:	2e00      	cmp	r6, #0
 23fe404:	d0e1      	beq.n	23fe3ca <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x32>
        return (application_thread_current(nullptr) != 0);
 23fe406:	4620      	mov	r0, r4
 23fe408:	f7ff fc2e 	bl	23fdc68 <application_thread_current>
        if (ContextT::isApplicationThreadCurrent()) {
 23fe40c:	4607      	mov	r7, r0
 23fe40e:	b160      	cbz	r0, 23fe42a <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x92>
            callback(std::forward<ArgsT>(args)...); // Synchronous call
 23fe410:	4630      	mov	r0, r6
 23fe412:	f105 010c 	add.w	r1, r5, #12
 23fe416:	f7ff fe4a 	bl	23fe0ae <_ZNKSt8functionIFvRKbEEclES1_>
    class function<_Res(_ArgTypes...)>
 23fe41a:	4630      	mov	r0, r6
 23fe41c:	f7ff fda7 	bl	23fdf6e <_ZNSt14_Function_baseD1Ev>
            delete callbackPtr;
 23fe420:	2110      	movs	r1, #16
 23fe422:	4630      	mov	r0, r6
 23fe424:	f7fd f8ed 	bl	23fb602 <_ZdlPvj>
 23fe428:	e7cf      	b.n	23fe3ca <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x32>
	: _M_f(__f), _M_bound_args(std::forward<_Args>(__args)...)
 23fe42a:	4631      	mov	r1, r6
 23fe42c:	a803      	add	r0, sp, #12
 23fe42e:	f7ff ffa3 	bl	23fe378 <_ZNSt8functionIFvRKbEEC1ERKS3_>
	: _M_head_impl(std::forward<_UHead>(__h)) { }
 23fe432:	7b2b      	ldrb	r3, [r5, #12]
            auto callbackPtr = new std::function<void()>(std::bind(callback, std::forward<ArgsT>(args)...));
 23fe434:	2010      	movs	r0, #16
 23fe436:	f88d 301c 	strb.w	r3, [sp, #28]
 23fe43a:	f7fd f8de 	bl	23fb5fa <_Znwj>
 23fe43e:	4605      	mov	r5, r0
 23fe440:	b1d0      	cbz	r0, 23fe478 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0xe0>
    _Function_base() : _M_manager(nullptr) { }
 23fe442:	6087      	str	r7, [r0, #8]
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
 23fe444:	2014      	movs	r0, #20
 23fe446:	f7fd f8d8 	bl	23fb5fa <_Znwj>
 23fe44a:	4604      	mov	r4, r0
 23fe44c:	b178      	cbz	r0, 23fe46e <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0xd6>
	std::swap(_M_functor, __x._M_functor);
 23fe44e:	4601      	mov	r1, r0
    _Function_base() : _M_manager(nullptr) { }
 23fe450:	6087      	str	r7, [r0, #8]
	std::swap(_M_functor, __x._M_functor);
 23fe452:	a803      	add	r0, sp, #12
 23fe454:	f7ff fd94 	bl	23fdf80 <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 23fe458:	9b05      	ldr	r3, [sp, #20]
      __a = _GLIBCXX_MOVE(__b);
 23fe45a:	68a2      	ldr	r2, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
 23fe45c:	60a3      	str	r3, [r4, #8]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 23fe45e:	9b06      	ldr	r3, [sp, #24]
      __a = _GLIBCXX_MOVE(__b);
 23fe460:	9205      	str	r2, [sp, #20]
 23fe462:	68e2      	ldr	r2, [r4, #12]
      __b = _GLIBCXX_MOVE(__tmp);
 23fe464:	60e3      	str	r3, [r4, #12]
 23fe466:	f89d 301c 	ldrb.w	r3, [sp, #28]
      __a = _GLIBCXX_MOVE(__b);
 23fe46a:	9206      	str	r2, [sp, #24]
 23fe46c:	7423      	strb	r3, [r4, #16]
	    _M_invoker = &_My_handler::_M_invoke;
 23fe46e:	4b07      	ldr	r3, [pc, #28]	; (23fe48c <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0xf4>)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
 23fe470:	602c      	str	r4, [r5, #0]
	    _M_invoker = &_My_handler::_M_invoke;
 23fe472:	60eb      	str	r3, [r5, #12]
	    _M_manager = &_My_handler::_M_manager;
 23fe474:	4b06      	ldr	r3, [pc, #24]	; (23fe490 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0xf8>)
 23fe476:	60ab      	str	r3, [r5, #8]
    class function<_Res(_ArgTypes...)>
 23fe478:	a803      	add	r0, sp, #12
 23fe47a:	f7ff fd78 	bl	23fdf6e <_ZNSt14_Function_baseD1Ev>
        return (application_thread_invoke(callback, data, nullptr) == 0);
 23fe47e:	2200      	movs	r2, #0
 23fe480:	4629      	mov	r1, r5
 23fe482:	4804      	ldr	r0, [pc, #16]	; (23fe494 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0xfc>)
 23fe484:	f7ff fbfe 	bl	23fdc84 <application_thread_invoke>
 23fe488:	e7c7      	b.n	23fe41a <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x82>
 23fe48a:	bf00      	nop
 23fe48c:	023fe0c1 	.word	0x023fe0c1
 23fe490:	023fe499 	.word	0x023fe499
 23fe494:	023fdf47 	.word	0x023fdf47

023fe498 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation>:
	switch (__op)
 23fe498:	2a01      	cmp	r2, #1
      _M_manager(_Any_data& __dest, const _Any_data& __source,
 23fe49a:	b570      	push	{r4, r5, r6, lr}
 23fe49c:	4604      	mov	r4, r0
	switch (__op)
 23fe49e:	d103      	bne.n	23fe4a8 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x10>
	    return __source._M_access<_Functor*>();
 23fe4a0:	680b      	ldr	r3, [r1, #0]
	    __dest._M_access<_Functor*>() = _Base::_M_get_pointer(__source);
 23fe4a2:	6003      	str	r3, [r0, #0]
      }
 23fe4a4:	2000      	movs	r0, #0
 23fe4a6:	bd70      	pop	{r4, r5, r6, pc}
	  switch (__op)
 23fe4a8:	2a02      	cmp	r2, #2
 23fe4aa:	d00c      	beq.n	23fe4c6 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x2e>
 23fe4ac:	2a03      	cmp	r2, #3
 23fe4ae:	d1f9      	bne.n	23fe4a4 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0xc>
	  delete __victim._M_access<_Functor*>();
 23fe4b0:	6804      	ldr	r4, [r0, #0]
 23fe4b2:	2c00      	cmp	r4, #0
 23fe4b4:	d0f6      	beq.n	23fe4a4 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0xc>
    class function<_Res(_ArgTypes...)>
 23fe4b6:	4620      	mov	r0, r4
 23fe4b8:	f7ff fd59 	bl	23fdf6e <_ZNSt14_Function_baseD1Ev>
	  delete __victim._M_access<_Functor*>();
 23fe4bc:	2114      	movs	r1, #20
 23fe4be:	4620      	mov	r0, r4
 23fe4c0:	f7fd f89f 	bl	23fb602 <_ZdlPvj>
 23fe4c4:	e7ee      	b.n	23fe4a4 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0xc>
	    new _Functor(*__source._M_access<const _Functor*>());
 23fe4c6:	2014      	movs	r0, #20
	  __dest._M_access<_Functor*>() =
 23fe4c8:	680e      	ldr	r6, [r1, #0]
	    new _Functor(*__source._M_access<const _Functor*>());
 23fe4ca:	f7fd f896 	bl	23fb5fa <_Znwj>
 23fe4ce:	4605      	mov	r5, r0
 23fe4d0:	b120      	cbz	r0, 23fe4dc <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x44>
      _Bind(const _Bind&) = default;
 23fe4d2:	4631      	mov	r1, r6
 23fe4d4:	f7ff ff50 	bl	23fe378 <_ZNSt8functionIFvRKbEEC1ERKS3_>
 23fe4d8:	7c33      	ldrb	r3, [r6, #16]
 23fe4da:	742b      	strb	r3, [r5, #16]
	  __dest._M_access<_Functor*>() =
 23fe4dc:	6025      	str	r5, [r4, #0]
	}
 23fe4de:	e7e1      	b.n	23fe4a4 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0xc>

023fe4e0 <_ZN5spark13EthernetClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
 23fe4e0:	2200      	movs	r2, #0
 23fe4e2:	6840      	ldr	r0, [r0, #4]
 23fe4e4:	4611      	mov	r1, r2
 23fe4e6:	f7ff bc83 	b.w	23fddf0 <network_listening>

023fe4ea <_ZN5spark13EthernetClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
 23fe4ea:	2200      	movs	r2, #0
 23fe4ec:	6840      	ldr	r0, [r0, #4]
 23fe4ee:	4611      	mov	r1, r2
 23fe4f0:	f7ff bc9a 	b.w	23fde28 <network_get_listen_timeout>

023fe4f4 <_ZN5spark13EthernetClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
 23fe4f4:	2200      	movs	r2, #0
 23fe4f6:	6840      	ldr	r0, [r0, #4]
 23fe4f8:	f7ff bc88 	b.w	23fde0c <network_set_listen_timeout>

023fe4fc <_ZN5spark13EthernetClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
 23fe4fc:	2200      	movs	r2, #0
 23fe4fe:	6840      	ldr	r0, [r0, #4]
 23fe500:	f081 0101 	eor.w	r1, r1, #1
 23fe504:	f7ff bc66 	b.w	23fddd4 <network_listen>

023fe508 <_ZN5spark13EthernetClass3offEv>:
        network_off(*this, 0, 0, NULL);
 23fe508:	2300      	movs	r3, #0
 23fe50a:	6840      	ldr	r0, [r0, #4]
 23fe50c:	461a      	mov	r2, r3
 23fe50e:	4619      	mov	r1, r3
 23fe510:	f7ff bc52 	b.w	23fddb8 <network_off>

023fe514 <_ZN5spark13EthernetClass2onEv>:
        network_on(*this, 0, 0, NULL);
 23fe514:	2300      	movs	r3, #0
 23fe516:	6840      	ldr	r0, [r0, #4]
 23fe518:	461a      	mov	r2, r3
 23fe51a:	4619      	mov	r1, r3
 23fe51c:	f7ff bc3e 	b.w	23fdd9c <network_on>

023fe520 <_ZN5spark13EthernetClass5readyEv>:
    }

    bool ready() {
        return network_ready(*this, 0,  NULL);
 23fe520:	2200      	movs	r2, #0
 23fe522:	6840      	ldr	r0, [r0, #4]
 23fe524:	4611      	mov	r1, r2
 23fe526:	f7ff bc2b 	b.w	23fdd80 <network_ready>

023fe52a <_ZN5spark13EthernetClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
 23fe52a:	2200      	movs	r2, #0
 23fe52c:	6840      	ldr	r0, [r0, #4]
 23fe52e:	4611      	mov	r1, r2
 23fe530:	f7ff bc0a 	b.w	23fdd48 <network_connecting>

023fe534 <_ZN5spark13EthernetClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
 23fe534:	2200      	movs	r2, #0
 23fe536:	2102      	movs	r1, #2
 23fe538:	6840      	ldr	r0, [r0, #4]
 23fe53a:	f7ff bc13 	b.w	23fdd64 <network_disconnect>

023fe53e <_ZN5spark13EthernetClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
 23fe53e:	2300      	movs	r3, #0
 23fe540:	6840      	ldr	r0, [r0, #4]
 23fe542:	461a      	mov	r2, r3
 23fe544:	f7ff bbf2 	b.w	23fdd2c <network_connect>

023fe548 <_GLOBAL__sub_I__ZN5spark8EthernetE>:
    static NetworkClass& from(network_interface_t nif);

    virtual IPAddress resolve(const char* name);

    explicit NetworkClass(network_interface_t iface)
            : iface_(iface) {
 23fe548:	2203      	movs	r2, #3
 23fe54a:	4b02      	ldr	r3, [pc, #8]	; (23fe554 <_GLOBAL__sub_I__ZN5spark8EthernetE+0xc>)
 23fe54c:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_ETHERNET) {
 23fe54e:	4a02      	ldr	r2, [pc, #8]	; (23fe558 <_GLOBAL__sub_I__ZN5spark8EthernetE+0x10>)
 23fe550:	601a      	str	r2, [r3, #0]

namespace spark {

EthernetClass Ethernet;

} // spark
 23fe552:	4770      	bx	lr
 23fe554:	1007ae90 	.word	0x1007ae90
 23fe558:	023ffdf4 	.word	0x023ffdf4

023fe55c <_ZN7TwoWireD1Ev>:
private:
  hal_i2c_interface_t _i2c;

public:
  TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& config);
  virtual ~TwoWire() {};
 23fe55c:	4770      	bx	lr

023fe55e <_ZN7TwoWire5writeEPKhj>:

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
 23fe55e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 23fe560:	4606      	mov	r6, r0
 23fe562:	4615      	mov	r5, r2
 23fe564:	460c      	mov	r4, r1
 23fe566:	188f      	adds	r7, r1, r2
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
 23fe568:	42bc      	cmp	r4, r7
 23fe56a:	d006      	beq.n	23fe57a <_ZN7TwoWire5writeEPKhj+0x1c>
  {
    write(data[i]);
 23fe56c:	6833      	ldr	r3, [r6, #0]
 23fe56e:	4630      	mov	r0, r6
 23fe570:	689b      	ldr	r3, [r3, #8]
 23fe572:	f814 1b01 	ldrb.w	r1, [r4], #1
 23fe576:	4798      	blx	r3
  for(size_t i = 0; i < quantity; ++i)
 23fe578:	e7f6      	b.n	23fe568 <_ZN7TwoWire5writeEPKhj+0xa>
  }

  return quantity;
}
 23fe57a:	4628      	mov	r0, r5
 23fe57c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

023fe57e <_ZN7TwoWire5writeEh>:
  return hal_i2c_write(_i2c, data, NULL);
 23fe57e:	2200      	movs	r2, #0
 23fe580:	7c00      	ldrb	r0, [r0, #16]
 23fe582:	f7ff b96b 	b.w	23fd85c <hal_i2c_write>

023fe586 <_ZN7TwoWire9availableEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::available(void)
{
  return hal_i2c_available(_i2c, NULL);
 23fe586:	2100      	movs	r1, #0
 23fe588:	7c00      	ldrb	r0, [r0, #16]
 23fe58a:	f7ff b975 	b.w	23fd878 <hal_i2c_available>

023fe58e <_ZN7TwoWire4readEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::read(void)
{
  return hal_i2c_read(_i2c, NULL);
 23fe58e:	2100      	movs	r1, #0
 23fe590:	7c00      	ldrb	r0, [r0, #16]
 23fe592:	f7ff b97f 	b.w	23fd894 <hal_i2c_read>

023fe596 <_ZN7TwoWire4peekEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::peek(void)
{
  return hal_i2c_peek(_i2c, NULL);
 23fe596:	2100      	movs	r1, #0
 23fe598:	7c00      	ldrb	r0, [r0, #16]
 23fe59a:	f7ff b989 	b.w	23fd8b0 <hal_i2c_peek>

023fe59e <_ZN7TwoWire5flushEv>:
}

void TwoWire::flush(void)
{
  hal_i2c_flush(_i2c, NULL);
 23fe59e:	2100      	movs	r1, #0
 23fe5a0:	7c00      	ldrb	r0, [r0, #16]
 23fe5a2:	f7ff b993 	b.w	23fd8cc <hal_i2c_flush>

023fe5a6 <_ZN7TwoWireD0Ev>:
 23fe5a6:	b510      	push	{r4, lr}
 23fe5a8:	4604      	mov	r4, r0
 23fe5aa:	2114      	movs	r1, #20
 23fe5ac:	f7fd f829 	bl	23fb602 <_ZdlPvj>
 23fe5b0:	4620      	mov	r0, r4
 23fe5b2:	bd10      	pop	{r4, pc}

023fe5b4 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>:
TwoWire::TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& conf)
 23fe5b4:	b538      	push	{r3, r4, r5, lr}
 23fe5b6:	4604      	mov	r4, r0
 23fe5b8:	4615      	mov	r5, r2
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
 23fe5ba:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 23fe5be:	2200      	movs	r2, #0
 23fe5c0:	e9c4 2301 	strd	r2, r3, [r4, #4]
 23fe5c4:	4b09      	ldr	r3, [pc, #36]	; (23fe5ec <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t+0x38>)
 23fe5c6:	4608      	mov	r0, r1
  _i2c = i2c;
 23fe5c8:	7421      	strb	r1, [r4, #16]
TwoWire::TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& conf)
 23fe5ca:	6023      	str	r3, [r4, #0]
  int result = hal_i2c_init(_i2c, &conf);
 23fe5cc:	4629      	mov	r1, r5
 23fe5ce:	f7ff f999 	bl	23fd904 <hal_i2c_init>
  if (result == SYSTEM_ERROR_NOT_ENOUGH_DATA && 
 23fe5d2:	30bf      	adds	r0, #191	; 0xbf
 23fe5d4:	d108      	bne.n	23fe5e8 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t+0x34>
      (conf.flags & HAL_I2C_CONFIG_FLAG_FREEABLE)) {
 23fe5d6:	696b      	ldr	r3, [r5, #20]
  if (result == SYSTEM_ERROR_NOT_ENOUGH_DATA && 
 23fe5d8:	07db      	lsls	r3, r3, #31
 23fe5da:	d505      	bpl.n	23fe5e8 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t+0x34>
    free(conf.rx_buffer);
 23fe5dc:	6868      	ldr	r0, [r5, #4]
 23fe5de:	f7ff fc5b 	bl	23fde98 <free>
    free(conf.tx_buffer);
 23fe5e2:	68e8      	ldr	r0, [r5, #12]
 23fe5e4:	f7ff fc58 	bl	23fde98 <free>
}
 23fe5e8:	4620      	mov	r0, r4
 23fe5ea:	bd38      	pop	{r3, r4, r5, pc}
 23fe5ec:	023ffe30 	.word	0x023ffe30

023fe5f0 <_ZN7TwoWire5beginEv>:
	hal_i2c_begin(_i2c, I2C_MODE_MASTER, 0x00, NULL);
 23fe5f0:	2300      	movs	r3, #0
 23fe5f2:	7c00      	ldrb	r0, [r0, #16]
 23fe5f4:	461a      	mov	r2, r3
 23fe5f6:	4619      	mov	r1, r3
 23fe5f8:	f7ff b906 	b.w	23fd808 <hal_i2c_begin>

023fe5fc <_ZN7TwoWire11requestFromERK16WireTransmission>:
size_t TwoWire::requestFrom(const WireTransmission& transfer) {
 23fe5fc:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    hal_i2c_transmission_config_t conf = {
 23fe5fe:	2200      	movs	r2, #0
 23fe600:	2314      	movs	r3, #20
 23fe602:	e9cd 2201 	strd	r2, r2, [sp, #4]
 23fe606:	f8ad 3004 	strh.w	r3, [sp, #4]
    };
 23fe60a:	780b      	ldrb	r3, [r1, #0]
  return hal_i2c_request_ex(_i2c, &conf, nullptr);
 23fe60c:	7c00      	ldrb	r0, [r0, #16]
 23fe60e:	f88d 3008 	strb.w	r3, [sp, #8]
 23fe612:	684b      	ldr	r3, [r1, #4]
 23fe614:	9303      	str	r3, [sp, #12]
 23fe616:	68cb      	ldr	r3, [r1, #12]
 23fe618:	9304      	str	r3, [sp, #16]
      .flags = (uint32_t)(stop_ ? HAL_I2C_TRANSMISSION_FLAG_STOP : 0)
 23fe61a:	7a0b      	ldrb	r3, [r1, #8]
 23fe61c:	a901      	add	r1, sp, #4
 23fe61e:	9305      	str	r3, [sp, #20]
 23fe620:	f7ff f97e 	bl	23fd920 <hal_i2c_request_ex>
}
 23fe624:	b007      	add	sp, #28
 23fe626:	f85d fb04 	ldr.w	pc, [sp], #4

023fe62a <_ZN7TwoWire11requestFromEhjh>:
{
 23fe62a:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  return requestFrom(WireTransmission(address).quantity(quantity).stop(sendStop));
 23fe62c:	3b00      	subs	r3, #0
        timeout_{HAL_I2C_DEFAULT_TIMEOUT_MS} {
 23fe62e:	f88d 1000 	strb.w	r1, [sp]
 23fe632:	f04f 0164 	mov.w	r1, #100	; 0x64
 23fe636:	bf18      	it	ne
 23fe638:	2301      	movne	r3, #1
 23fe63a:	9103      	str	r1, [sp, #12]
 23fe63c:	4669      	mov	r1, sp
    size_ = size;
 23fe63e:	9201      	str	r2, [sp, #4]
 23fe640:	f88d 3008 	strb.w	r3, [sp, #8]
 23fe644:	f7ff ffda 	bl	23fe5fc <_ZN7TwoWire11requestFromERK16WireTransmission>
}
 23fe648:	b005      	add	sp, #20
 23fe64a:	f85d fb04 	ldr.w	pc, [sp], #4

023fe64e <_ZN7TwoWire11requestFromEhj>:
  return requestFrom(address, quantity, (uint8_t)true);
 23fe64e:	2301      	movs	r3, #1
 23fe650:	f7ff bfeb 	b.w	23fe62a <_ZN7TwoWire11requestFromEhjh>

023fe654 <_ZN7TwoWire17beginTransmissionEh>:
	hal_i2c_begin_transmission(_i2c, address, NULL);
 23fe654:	2200      	movs	r2, #0
 23fe656:	7c00      	ldrb	r0, [r0, #16]
 23fe658:	f7ff b8e4 	b.w	23fd824 <hal_i2c_begin_transmission>

023fe65c <_ZN7TwoWire15endTransmissionEh>:
	return hal_i2c_end_transmission(_i2c, sendStop, NULL);
 23fe65c:	2200      	movs	r2, #0
 23fe65e:	7c00      	ldrb	r0, [r0, #16]
 23fe660:	f7ff b8ee 	b.w	23fd840 <hal_i2c_end_transmission>

023fe664 <_ZN9IPAddressD1Ev>:
    IPAddress(uint32_t address);
    // 4 bytes defining the IP address in network order
    IPAddress(const uint8_t* address);
    IPAddress(const HAL_IPAddress& address);

    virtual ~IPAddress() {}
 23fe664:	4770      	bx	lr

023fe666 <_ZN9IPAddressD0Ev>:
 23fe666:	b510      	push	{r4, lr}
 23fe668:	4604      	mov	r4, r0
 23fe66a:	2118      	movs	r1, #24
 23fe66c:	f7fc ffc9 	bl	23fb602 <_ZdlPvj>
 23fe670:	4620      	mov	r0, r4
 23fe672:	bd10      	pop	{r4, pc}

023fe674 <_ZNK9IPAddress7printToER5Print>:
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
 23fe674:	b5f0      	push	{r4, r5, r6, r7, lr}
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
 23fe676:	7d03      	ldrb	r3, [r0, #20]
{
 23fe678:	460e      	mov	r6, r1
	if (address.v==6) {
 23fe67a:	2b06      	cmp	r3, #6
 23fe67c:	f04f 0400 	mov.w	r4, #0
{
 23fe680:	b08d      	sub	sp, #52	; 0x34
		char buf[INET6_ADDRSTRLEN+1];
		buf[0] = 0;
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
 23fe682:	f100 0704 	add.w	r7, r0, #4
	if (address.v==6) {
 23fe686:	d012      	beq.n	23fe6ae <_ZNK9IPAddress7printToER5Print+0x3a>
 23fe688:	f100 0508 	add.w	r5, r0, #8
            val = n;
        }
#if __GNUC__ >= 9
#pragma GCC diagnostic pop
#endif // __GNUC__ >= 9
        return printNumber(val, base) + t;
 23fe68c:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 23fe690:	220a      	movs	r2, #10
 23fe692:	4630      	mov	r0, r6
 23fe694:	f000 f947 	bl	23fe926 <_ZN5Print11printNumberEmh>
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
 23fe698:	42af      	cmp	r7, r5
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
 23fe69a:	4404      	add	r4, r0
    for (int i = 0; i < 4; i++)
 23fe69c:	d019      	beq.n	23fe6d2 <_ZNK9IPAddress7printToER5Print+0x5e>
        if (n)
 23fe69e:	2c00      	cmp	r4, #0
 23fe6a0:	d0f4      	beq.n	23fe68c <_ZNK9IPAddress7printToER5Print+0x18>
            n += p.print('.');
 23fe6a2:	212e      	movs	r1, #46	; 0x2e
 23fe6a4:	4630      	mov	r0, r6
 23fe6a6:	f000 f93b 	bl	23fe920 <_ZN5Print5printEc>
 23fe6aa:	4404      	add	r4, r0
 23fe6ac:	e7ee      	b.n	23fe68c <_ZNK9IPAddress7printToER5Print+0x18>
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
 23fe6ae:	232f      	movs	r3, #47	; 0x2f
 23fe6b0:	466a      	mov	r2, sp
 23fe6b2:	4639      	mov	r1, r7
 23fe6b4:	200a      	movs	r0, #10
		buf[0] = 0;
 23fe6b6:	f88d 4000 	strb.w	r4, [sp]
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
 23fe6ba:	f7ff f93f 	bl	23fd93c <inet_inet_ntop>
      return write((const uint8_t *)str, strlen(str));
 23fe6be:	4668      	mov	r0, sp
 23fe6c0:	f7fc ff76 	bl	23fb5b0 <strlen>
 23fe6c4:	6833      	ldr	r3, [r6, #0]
 23fe6c6:	4602      	mov	r2, r0
 23fe6c8:	4669      	mov	r1, sp
 23fe6ca:	4630      	mov	r0, r6
 23fe6cc:	68db      	ldr	r3, [r3, #12]
 23fe6ce:	4798      	blx	r3
 23fe6d0:	4604      	mov	r4, r0
    }
    return n;
}
 23fe6d2:	4620      	mov	r0, r4
 23fe6d4:	b00d      	add	sp, #52	; 0x34
 23fe6d6:	bdf0      	pop	{r4, r5, r6, r7, pc}

023fe6d8 <_ZN9IPAddressC1Ev>:
IPAddress::IPAddress()
 23fe6d8:	b510      	push	{r4, lr}
 23fe6da:	4604      	mov	r4, r0
 23fe6dc:	4b04      	ldr	r3, [pc, #16]	; (23fe6f0 <_ZN9IPAddressC1Ev+0x18>)
        return address;
    }

    virtual size_t printTo(Print& p) const;

    void clear() { memset(&address, 0, sizeof (address)); }
 23fe6de:	2211      	movs	r2, #17
 23fe6e0:	2100      	movs	r1, #0
 23fe6e2:	f840 3b04 	str.w	r3, [r0], #4
 23fe6e6:	f000 feeb 	bl	23ff4c0 <memset>
}
 23fe6ea:	4620      	mov	r0, r4
 23fe6ec:	bd10      	pop	{r4, pc}
 23fe6ee:	bf00      	nop
 23fe6f0:	023ffe58 	.word	0x023ffe58

023fe6f4 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>:
IPAddress::IPAddress(const HAL_IPAddress& address)
 23fe6f4:	4603      	mov	r3, r0
 23fe6f6:	4a07      	ldr	r2, [pc, #28]	; (23fe714 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0x20>)
 23fe6f8:	b510      	push	{r4, lr}
 23fe6fa:	f843 2b04 	str.w	r2, [r3], #4
    memcpy(&this->address, &address, sizeof(address));
 23fe6fe:	f101 0210 	add.w	r2, r1, #16
 23fe702:	f851 4b04 	ldr.w	r4, [r1], #4
 23fe706:	4291      	cmp	r1, r2
 23fe708:	f843 4b04 	str.w	r4, [r3], #4
 23fe70c:	d1f9      	bne.n	23fe702 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0xe>
 23fe70e:	780a      	ldrb	r2, [r1, #0]
 23fe710:	701a      	strb	r2, [r3, #0]
}
 23fe712:	bd10      	pop	{r4, pc}
 23fe714:	023ffe58 	.word	0x023ffe58

023fe718 <_ZN9IPAddress8set_ipv4Ehhhh>:
{
 23fe718:	b510      	push	{r4, lr}
    address.ipv4 = b0<<24 | b1 << 16 | b2 << 8 | b3;
 23fe71a:	f89d 4008 	ldrb.w	r4, [sp, #8]
 23fe71e:	ea44 2303 	orr.w	r3, r4, r3, lsl #8
 23fe722:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
        address.v = version;
 23fe726:	2304      	movs	r3, #4
 23fe728:	ea42 6101 	orr.w	r1, r2, r1, lsl #24
 23fe72c:	6041      	str	r1, [r0, #4]
 23fe72e:	7503      	strb	r3, [r0, #20]
}
 23fe730:	bd10      	pop	{r4, pc}
	...

023fe734 <_ZN9IPAddressC1EPKh>:
IPAddress::IPAddress(const uint8_t* addr)
 23fe734:	b507      	push	{r0, r1, r2, lr}
 23fe736:	4b06      	ldr	r3, [pc, #24]	; (23fe750 <_ZN9IPAddressC1EPKh+0x1c>)
 23fe738:	6003      	str	r3, [r0, #0]
    set_ipv4(addr[0], addr[1], addr[2], addr[3]);
 23fe73a:	78cb      	ldrb	r3, [r1, #3]
 23fe73c:	9300      	str	r3, [sp, #0]
 23fe73e:	788b      	ldrb	r3, [r1, #2]
 23fe740:	784a      	ldrb	r2, [r1, #1]
 23fe742:	7809      	ldrb	r1, [r1, #0]
 23fe744:	f7ff ffe8 	bl	23fe718 <_ZN9IPAddress8set_ipv4Ehhhh>
}
 23fe748:	b003      	add	sp, #12
 23fe74a:	f85d fb04 	ldr.w	pc, [sp], #4
 23fe74e:	bf00      	nop
 23fe750:	023ffe58 	.word	0x023ffe58

023fe754 <_GLOBAL__sub_I__ZN5spark3LogE>:
    // This handler doesn't support direct logging
}

// spark::Logger
inline spark::Logger::Logger(const char *name) :
        name_(name) {
 23fe754:	4b01      	ldr	r3, [pc, #4]	; (23fe75c <_GLOBAL__sub_I__ZN5spark3LogE+0x8>)
 23fe756:	4a02      	ldr	r2, [pc, #8]	; (23fe760 <_GLOBAL__sub_I__ZN5spark3LogE+0xc>)
 23fe758:	601a      	str	r2, [r3, #0]
#if Wiring_LogConfig

// spark::
void spark::logProcessControlRequest(ctrl_request* req) {
    JSONRequestHandler::process(req);
}
 23fe75a:	4770      	bx	lr
 23fe75c:	1007ae98 	.word	0x1007ae98
 23fe760:	023ffe64 	.word	0x023ffe64

023fe764 <_ZN5spark12NetworkClass7connectEj>:
        return Network;
    }
}

void NetworkClass::connect(unsigned flags) {
    network_connect(*this, flags, 0, nullptr);
 23fe764:	2300      	movs	r3, #0
 23fe766:	6840      	ldr	r0, [r0, #4]
 23fe768:	461a      	mov	r2, r3
 23fe76a:	f7ff badf 	b.w	23fdd2c <network_connect>

023fe76e <_ZN5spark12NetworkClass10disconnectEv>:
}

void NetworkClass::disconnect() {
    network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, nullptr);
 23fe76e:	2200      	movs	r2, #0
 23fe770:	2102      	movs	r1, #2
 23fe772:	6840      	ldr	r0, [r0, #4]
 23fe774:	f7ff baf6 	b.w	23fdd64 <network_disconnect>

023fe778 <_ZN5spark12NetworkClass10connectingEv>:
}

bool NetworkClass::connecting() {
    return network_connecting(*this, 0, nullptr);
 23fe778:	2200      	movs	r2, #0
 23fe77a:	6840      	ldr	r0, [r0, #4]
 23fe77c:	4611      	mov	r1, r2
 23fe77e:	f7ff bae3 	b.w	23fdd48 <network_connecting>

023fe782 <_ZN5spark12NetworkClass5readyEv>:
}

bool NetworkClass::ready() {
    return network_ready(*this, 0, nullptr);
 23fe782:	2200      	movs	r2, #0
 23fe784:	6840      	ldr	r0, [r0, #4]
 23fe786:	4611      	mov	r1, r2
 23fe788:	f7ff bafa 	b.w	23fdd80 <network_ready>

023fe78c <_ZN5spark12NetworkClass2onEv>:
}

void NetworkClass::on() {
    network_on(*this, 0, 0, nullptr);
 23fe78c:	2300      	movs	r3, #0
 23fe78e:	6840      	ldr	r0, [r0, #4]
 23fe790:	461a      	mov	r2, r3
 23fe792:	4619      	mov	r1, r3
 23fe794:	f7ff bb02 	b.w	23fdd9c <network_on>

023fe798 <_ZN5spark12NetworkClass3offEv>:
}

void NetworkClass::off() {
    network_off(*this, 0, 0, nullptr);
 23fe798:	2300      	movs	r3, #0
 23fe79a:	6840      	ldr	r0, [r0, #4]
 23fe79c:	461a      	mov	r2, r3
 23fe79e:	4619      	mov	r1, r3
 23fe7a0:	f7ff bb0a 	b.w	23fddb8 <network_off>

023fe7a4 <_ZN5spark12NetworkClass4isOnEv>:
}

bool NetworkClass::isOn() {
    return network_is_on(*this, nullptr);
 23fe7a4:	2100      	movs	r1, #0
 23fe7a6:	6840      	ldr	r0, [r0, #4]
 23fe7a8:	f7ff bb4c 	b.w	23fde44 <network_is_on>

023fe7ac <_ZN5spark12NetworkClass5isOffEv>:
}

bool NetworkClass::isOff() {
    return network_is_off(*this, nullptr);
 23fe7ac:	2100      	movs	r1, #0
 23fe7ae:	6840      	ldr	r0, [r0, #4]
 23fe7b0:	f7ff bb56 	b.w	23fde60 <network_is_off>

023fe7b4 <_ZN5spark12NetworkClass6listenEb>:
}

void NetworkClass::listen(bool begin) {
    network_listen(*this, begin ? 0 : 1, nullptr);
 23fe7b4:	2200      	movs	r2, #0
 23fe7b6:	6840      	ldr	r0, [r0, #4]
 23fe7b8:	f081 0101 	eor.w	r1, r1, #1
 23fe7bc:	f7ff bb0a 	b.w	23fddd4 <network_listen>

023fe7c0 <_ZN5spark12NetworkClass16setListenTimeoutEt>:
}

void NetworkClass::setListenTimeout(uint16_t timeout) {
    network_set_listen_timeout(*this, timeout, nullptr);
 23fe7c0:	2200      	movs	r2, #0
 23fe7c2:	6840      	ldr	r0, [r0, #4]
 23fe7c4:	f7ff bb22 	b.w	23fde0c <network_set_listen_timeout>

023fe7c8 <_ZN5spark12NetworkClass16getListenTimeoutEv>:
}

uint16_t NetworkClass::getListenTimeout() {
    return network_get_listen_timeout(*this, 0, nullptr);
 23fe7c8:	2200      	movs	r2, #0
 23fe7ca:	6840      	ldr	r0, [r0, #4]
 23fe7cc:	4611      	mov	r1, r2
 23fe7ce:	f7ff bb2b 	b.w	23fde28 <network_get_listen_timeout>

023fe7d2 <_ZN5spark12NetworkClass9listeningEv>:
}

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
 23fe7d2:	2200      	movs	r2, #0
 23fe7d4:	6840      	ldr	r0, [r0, #4]
 23fe7d6:	4611      	mov	r1, r2
 23fe7d8:	f7ff bb0a 	b.w	23fddf0 <network_listening>

023fe7dc <_ZN5spark12NetworkClass7resolveEPKc>:
}

IPAddress NetworkClass::resolve(const char* name) {
 23fe7dc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 23fe7e0:	b095      	sub	sp, #84	; 0x54
 23fe7e2:	4614      	mov	r4, r2
 23fe7e4:	460d      	mov	r5, r1
 23fe7e6:	4607      	mov	r7, r0
    IPAddress addr;
 23fe7e8:	f7ff ff76 	bl	23fe6d8 <_ZN9IPAddressC1Ev>
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
 23fe7ec:	2100      	movs	r1, #0
    struct addrinfo hints = {};
 23fe7ee:	221c      	movs	r2, #28
 23fe7f0:	a80d      	add	r0, sp, #52	; 0x34
    struct addrinfo *ai = nullptr;
 23fe7f2:	9100      	str	r1, [sp, #0]
    struct addrinfo hints = {};
 23fe7f4:	f000 fe64 	bl	23ff4c0 <memset>
    hints.ai_flags = AI_ADDRCONFIG;
 23fe7f8:	2340      	movs	r3, #64	; 0x40
    hints.ai_family = AF_UNSPEC;
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
 23fe7fa:	4620      	mov	r0, r4
    hints.ai_flags = AI_ADDRCONFIG;
 23fe7fc:	930c      	str	r3, [sp, #48]	; 0x30
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
 23fe7fe:	2100      	movs	r1, #0
 23fe800:	466b      	mov	r3, sp
 23fe802:	aa0c      	add	r2, sp, #48	; 0x30
 23fe804:	f7ff f8b6 	bl	23fd974 <netdb_getaddrinfo>
    if (!r) {
 23fe808:	4604      	mov	r4, r0
 23fe80a:	2800      	cmp	r0, #0
 23fe80c:	d14b      	bne.n	23fe8a6 <_ZN5spark12NetworkClass7resolveEPKc+0xca>
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
 23fe80e:	4602      	mov	r2, r0
 23fe810:	2101      	movs	r1, #1
 23fe812:	6868      	ldr	r0, [r5, #4]
 23fe814:	f7ff fab4 	bl	23fdd80 <network_ready>
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
 23fe818:	2102      	movs	r1, #2
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
 23fe81a:	4680      	mov	r8, r0
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
 23fe81c:	4622      	mov	r2, r4
 23fe81e:	6868      	ldr	r0, [r5, #4]
 23fe820:	f7ff faae 	bl	23fdd80 <network_ready>
        bool ok = false;
 23fe824:	4621      	mov	r1, r4
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
 23fe826:	4681      	mov	r9, r0
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
 23fe828:	9e00      	ldr	r6, [sp, #0]
 23fe82a:	2e00      	cmp	r6, #0
 23fe82c:	d03b      	beq.n	23fe8a6 <_ZN5spark12NetworkClass7resolveEPKc+0xca>
 23fe82e:	2900      	cmp	r1, #0
 23fe830:	d139      	bne.n	23fe8a6 <_ZN5spark12NetworkClass7resolveEPKc+0xca>
            // NOTE: using only the first entry that matches the current state of IPv4/IPv6 connectivity
            switch (cur->ai_family) {
 23fe832:	6873      	ldr	r3, [r6, #4]
 23fe834:	2b02      	cmp	r3, #2
 23fe836:	d003      	beq.n	23fe840 <_ZN5spark12NetworkClass7resolveEPKc+0x64>
 23fe838:	2b0a      	cmp	r3, #10
 23fe83a:	d011      	beq.n	23fe860 <_ZN5spark12NetworkClass7resolveEPKc+0x84>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
 23fe83c:	69f6      	ldr	r6, [r6, #28]
 23fe83e:	e7f4      	b.n	23fe82a <_ZN5spark12NetworkClass7resolveEPKc+0x4e>
                case AF_INET: {
                    if (!ipv4) {
 23fe840:	f1b8 0f00 	cmp.w	r8, #0
 23fe844:	d0fa      	beq.n	23fe83c <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                        continue;
                    }
                    // NOTE: HAL_IPAddress is little-endian
                    auto in = (struct sockaddr_in*)cur->ai_addr;
                    addr = (const uint8_t*)(&in->sin_addr.s_addr);
 23fe846:	6971      	ldr	r1, [r6, #20]
        return *this = IPAddress(address);
 23fe848:	a806      	add	r0, sp, #24
 23fe84a:	3104      	adds	r1, #4
class IPAddress : public Printable {
 23fe84c:	1d3c      	adds	r4, r7, #4
 23fe84e:	ad07      	add	r5, sp, #28
        return *this = IPAddress(address);
 23fe850:	f7ff ff70 	bl	23fe734 <_ZN9IPAddressC1EPKh>
class IPAddress : public Printable {
 23fe854:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 23fe856:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 23fe858:	682b      	ldr	r3, [r5, #0]
                    ok = true;
 23fe85a:	4641      	mov	r1, r8
 23fe85c:	7023      	strb	r3, [r4, #0]
        return *this = IPAddress(address);
 23fe85e:	e7ed      	b.n	23fe83c <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                    break;
                }
                case AF_INET6: {
                    if (!ipv6) {
 23fe860:	f1b9 0f00 	cmp.w	r9, #0
 23fe864:	d0ea      	beq.n	23fe83c <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                        continue;
                    }
                    auto in6 = (struct sockaddr_in6*)cur->ai_addr;
                    HAL_IPAddress a = {};
 23fe866:	2210      	movs	r2, #16
 23fe868:	a801      	add	r0, sp, #4
                    auto in6 = (struct sockaddr_in6*)cur->ai_addr;
 23fe86a:	6974      	ldr	r4, [r6, #20]
                    HAL_IPAddress a = {};
 23fe86c:	f000 fe28 	bl	23ff4c0 <memset>
                    a.v = 6;
 23fe870:	2306      	movs	r3, #6
                    memcpy(a.ipv6, in6->sin6_addr.s6_addr, sizeof(a.ipv6));
 23fe872:	ad01      	add	r5, sp, #4
                    a.v = 6;
 23fe874:	f88d 3014 	strb.w	r3, [sp, #20]
                    memcpy(a.ipv6, in6->sin6_addr.s6_addr, sizeof(a.ipv6));
 23fe878:	f104 0308 	add.w	r3, r4, #8
 23fe87c:	3418      	adds	r4, #24
 23fe87e:	462a      	mov	r2, r5
 23fe880:	6818      	ldr	r0, [r3, #0]
 23fe882:	6859      	ldr	r1, [r3, #4]
 23fe884:	3308      	adds	r3, #8
 23fe886:	c203      	stmia	r2!, {r0, r1}
 23fe888:	42a3      	cmp	r3, r4
 23fe88a:	4615      	mov	r5, r2
 23fe88c:	d1f7      	bne.n	23fe87e <_ZN5spark12NetworkClass7resolveEPKc+0xa2>
                    addr = IPAddress(a);
 23fe88e:	a901      	add	r1, sp, #4
 23fe890:	a806      	add	r0, sp, #24
class IPAddress : public Printable {
 23fe892:	1d3c      	adds	r4, r7, #4
 23fe894:	ad07      	add	r5, sp, #28
 23fe896:	f7ff ff2d 	bl	23fe6f4 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
 23fe89a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 23fe89c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 23fe89e:	682b      	ldr	r3, [r5, #0]
                    ok = true;
 23fe8a0:	4649      	mov	r1, r9
 23fe8a2:	7023      	strb	r3, [r4, #0]
                    break;
 23fe8a4:	e7ca      	b.n	23fe83c <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                }
            }
        }
    }
    freeaddrinfo(ai);
 23fe8a6:	9800      	ldr	r0, [sp, #0]
 23fe8a8:	f7ff f856 	bl	23fd958 <netdb_freeaddrinfo>
    return Cellular.resolve(name);
#endif // Wiring_Cellular

#endif // HAL_USE_INET_HAL_POSIX
    return addr;
}
 23fe8ac:	4638      	mov	r0, r7
 23fe8ae:	b015      	add	sp, #84	; 0x54
 23fe8b0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

023fe8b4 <_GLOBAL__sub_I__ZN5spark7NetworkE>:
 23fe8b4:	4b02      	ldr	r3, [pc, #8]	; (23fe8c0 <_GLOBAL__sub_I__ZN5spark7NetworkE+0xc>)
 23fe8b6:	4a03      	ldr	r2, [pc, #12]	; (23fe8c4 <_GLOBAL__sub_I__ZN5spark7NetworkE+0x10>)
 23fe8b8:	601a      	str	r2, [r3, #0]
 23fe8ba:	2200      	movs	r2, #0
 23fe8bc:	605a      	str	r2, [r3, #4]
    network_free_configuration(c, count, nullptr);
    return res;
}
#endif // HAL_USE_SOCKET_HAL_POSIX

} // spark
 23fe8be:	4770      	bx	lr
 23fe8c0:	1007ae9c 	.word	0x1007ae9c
 23fe8c4:	023ffe70 	.word	0x023ffe70

023fe8c8 <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
 23fe8c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 23fe8ca:	4606      	mov	r6, r0
 23fe8cc:	460d      	mov	r5, r1
  size_t n = 0;
 23fe8ce:	2400      	movs	r4, #0
 23fe8d0:	188f      	adds	r7, r1, r2
  while (size--) {
 23fe8d2:	42bd      	cmp	r5, r7
 23fe8d4:	d00c      	beq.n	23fe8f0 <_ZN5Print5writeEPKhj+0x28>
     int chunk = write(*buffer++);
 23fe8d6:	6833      	ldr	r3, [r6, #0]
 23fe8d8:	4630      	mov	r0, r6
 23fe8da:	689b      	ldr	r3, [r3, #8]
 23fe8dc:	f815 1b01 	ldrb.w	r1, [r5], #1
 23fe8e0:	4798      	blx	r3
     if (chunk>=0)
 23fe8e2:	1e03      	subs	r3, r0, #0
 23fe8e4:	db01      	blt.n	23fe8ea <_ZN5Print5writeEPKhj+0x22>
         n += chunk;
 23fe8e6:	441c      	add	r4, r3
  while (size--) {
 23fe8e8:	e7f3      	b.n	23fe8d2 <_ZN5Print5writeEPKhj+0xa>
     int chunk = write(*buffer++);
 23fe8ea:	2c00      	cmp	r4, #0
 23fe8ec:	bf08      	it	eq
 23fe8ee:	461c      	moveq	r4, r3
             n = chunk;
         break;
     }
  }
  return n;
}
 23fe8f0:	4620      	mov	r0, r4
 23fe8f2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

023fe8f4 <_ZN5Print5writeEPKc>:
    size_t write(const char *str) {
 23fe8f4:	b513      	push	{r0, r1, r4, lr}
 23fe8f6:	4604      	mov	r4, r0
    }
 23fe8f8:	4608      	mov	r0, r1
      if (str == NULL) return 0;
 23fe8fa:	b159      	cbz	r1, 23fe914 <_ZN5Print5writeEPKc+0x20>
      return write((const uint8_t *)str, strlen(str));
 23fe8fc:	9101      	str	r1, [sp, #4]
 23fe8fe:	f7fc fe57 	bl	23fb5b0 <strlen>
 23fe902:	4602      	mov	r2, r0
 23fe904:	4620      	mov	r0, r4
 23fe906:	6823      	ldr	r3, [r4, #0]
 23fe908:	9901      	ldr	r1, [sp, #4]
 23fe90a:	68db      	ldr	r3, [r3, #12]
    }
 23fe90c:	b002      	add	sp, #8
 23fe90e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return write((const uint8_t *)str, strlen(str));
 23fe912:	4718      	bx	r3
    }
 23fe914:	b002      	add	sp, #8
 23fe916:	bd10      	pop	{r4, pc}

023fe918 <_ZN5Print5printEPKc>:

size_t Print::print(const char str[])
{
 23fe918:	b508      	push	{r3, lr}
  return write(str);
 23fe91a:	f7ff ffeb 	bl	23fe8f4 <_ZN5Print5writeEPKc>
}
 23fe91e:	bd08      	pop	{r3, pc}

023fe920 <_ZN5Print5printEc>:

size_t Print::print(char c)
{
  return write(c);
 23fe920:	6803      	ldr	r3, [r0, #0]
 23fe922:	689b      	ldr	r3, [r3, #8]
 23fe924:	4718      	bx	r3

023fe926 <_ZN5Print11printNumberEmh>:

size_t Print::printNumber(unsigned long n, uint8_t base) {
  char buf[8 * sizeof(n) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
 23fe926:	2300      	movs	r3, #0

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
 23fe928:	2a01      	cmp	r2, #1
 23fe92a:	bf98      	it	ls
 23fe92c:	220a      	movls	r2, #10
size_t Print::printNumber(unsigned long n, uint8_t base) {
 23fe92e:	b530      	push	{r4, r5, lr}
 23fe930:	b08b      	sub	sp, #44	; 0x2c
  *str = '\0';
 23fe932:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
  if (base < 2) base = 10;
 23fe936:	ac09      	add	r4, sp, #36	; 0x24

  do {
   decltype(n) m = n;
   n /= base;
 23fe938:	460d      	mov	r5, r1
 23fe93a:	fbb1 f1f2 	udiv	r1, r1, r2
   char c = m - base * n;
 23fe93e:	fb01 5312 	mls	r3, r1, r2, r5
 23fe942:	f003 03ff 	and.w	r3, r3, #255	; 0xff
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
 23fe946:	2b09      	cmp	r3, #9
 23fe948:	bf94      	ite	ls
 23fe94a:	3330      	addls	r3, #48	; 0x30
 23fe94c:	3337      	addhi	r3, #55	; 0x37
 23fe94e:	b2db      	uxtb	r3, r3
  } while(n);
 23fe950:	42aa      	cmp	r2, r5
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
 23fe952:	f804 3d01 	strb.w	r3, [r4, #-1]!
  } while(n);
 23fe956:	d9ef      	bls.n	23fe938 <_ZN5Print11printNumberEmh+0x12>

  return write(str);
 23fe958:	4621      	mov	r1, r4
 23fe95a:	f7ff ffcb 	bl	23fe8f4 <_ZN5Print5writeEPKc>
}
 23fe95e:	b00b      	add	sp, #44	; 0x2c
 23fe960:	bd30      	pop	{r4, r5, pc}
	...

023fe964 <_GLOBAL__sub_I_RGB>:
    _Function_base() : _M_manager(nullptr) { }
 23fe964:	2200      	movs	r2, #0
 23fe966:	4b01      	ldr	r3, [pc, #4]	; (23fe96c <_GLOBAL__sub_I_RGB+0x8>)
 23fe968:	609a      	str	r2, [r3, #8]
{
    RGBClass* const d = static_cast<RGBClass*>(data);
    if (d->changeHandler_) {
        d->changeHandler_(r, g, b);
    }
}
 23fe96a:	4770      	bx	lr
 23fe96c:	1007aea4 	.word	0x1007aea4

023fe970 <_ZN8SPIClass6unlockEv.isra.0>:
  }

  void unlock()
  {
#if HAL_PLATFORM_SPI_HAL_THREAD_SAFETY
    hal_spi_release(_spi, nullptr);
 23fe970:	2100      	movs	r1, #0
 23fe972:	f7ff b86f 	b.w	23fda54 <hal_spi_release>

023fe976 <_ZN8SPIClass4lockEv.isra.0>:
    return hal_spi_acquire(_spi, nullptr);
 23fe976:	2100      	movs	r1, #0
 23fe978:	f7ff b85e 	b.w	23fda38 <hal_spi_acquire>

023fe97c <_ZN8SPIClassC1E19hal_spi_interface_t>:
    }
    return particle::SPISettings(info->clock, info->bit_order, info->data_mode);
}
} // namespace

SPIClass::SPIClass(hal_spi_interface_t spi)
 23fe97c:	b510      	push	{r4, lr}
 23fe97e:	4604      	mov	r4, r0
 23fe980:	4608      	mov	r0, r1
{
    _spi = spi;
 23fe982:	7021      	strb	r1, [r4, #0]
    hal_spi_init(_spi);
 23fe984:	f7ff f820 	bl	23fd9c8 <hal_spi_init>
    _dividerReference = SPI_CLK_SYSTEM; // 0 indicates the system clock
 23fe988:	2300      	movs	r3, #0
}
 23fe98a:	4620      	mov	r0, r4
    _dividerReference = SPI_CLK_SYSTEM; // 0 indicates the system clock
 23fe98c:	6063      	str	r3, [r4, #4]
}
 23fe98e:	bd10      	pop	{r4, pc}

023fe990 <_ZN8SPIClass5beginEv>:

void SPIClass::begin()
{
 23fe990:	b513      	push	{r0, r1, r4, lr}
 23fe992:	4604      	mov	r4, r0
    // TODO: Fetch default pin from HAL
    if (!lock())
 23fe994:	7800      	ldrb	r0, [r0, #0]
 23fe996:	f7ff ffee 	bl	23fe976 <_ZN8SPIClass4lockEv.isra.0>
 23fe99a:	b958      	cbnz	r0, 23fe9b4 <_ZN8SPIClass5beginEv+0x24>
 23fe99c:	7820      	ldrb	r0, [r4, #0]
    {
        hal_spi_begin(_spi, SPI_DEFAULT_SS);
 23fe99e:	f64f 71ff 	movw	r1, #65535	; 0xffff
 23fe9a2:	9001      	str	r0, [sp, #4]
 23fe9a4:	f7fe fff4 	bl	23fd990 <hal_spi_begin>
        unlock();
 23fe9a8:	9801      	ldr	r0, [sp, #4]
    }
}
 23fe9aa:	b002      	add	sp, #8
 23fe9ac:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 23fe9b0:	f7ff bfde 	b.w	23fe970 <_ZN8SPIClass6unlockEv.isra.0>
 23fe9b4:	b002      	add	sp, #8
 23fe9b6:	bd10      	pop	{r4, pc}

023fe9b8 <_ZN8SPIClass14endTransactionEv>:
}

void SPIClass::endTransaction()
{
    // Release peripheral
    unlock();
 23fe9b8:	7800      	ldrb	r0, [r0, #0]
 23fe9ba:	f7ff bfd9 	b.w	23fe970 <_ZN8SPIClass6unlockEv.isra.0>
	...

023fe9c0 <_ZN8SPIClass19computeClockDividerEjjRhRj>:
    }
}

void SPIClass::computeClockDivider(unsigned reference, unsigned targetSpeed, uint8_t& divider,
                                   unsigned& clock)
{
 23fe9c0:	b530      	push	{r4, r5, lr}
    clock = reference;
    uint8_t scale = 0;
    clock >>= 1; // div2 is the first
 23fe9c2:	2400      	movs	r4, #0
 23fe9c4:	0840      	lsrs	r0, r0, #1
 23fe9c6:	6018      	str	r0, [r3, #0]
    while (clock > targetSpeed && scale < 7)
 23fe9c8:	6818      	ldr	r0, [r3, #0]
 23fe9ca:	b2e5      	uxtb	r5, r4
 23fe9cc:	4288      	cmp	r0, r1
 23fe9ce:	d906      	bls.n	23fe9de <_ZN8SPIClass19computeClockDividerEjjRhRj+0x1e>
 23fe9d0:	3401      	adds	r4, #1
 23fe9d2:	2c08      	cmp	r4, #8
 23fe9d4:	d002      	beq.n	23fe9dc <_ZN8SPIClass19computeClockDividerEjjRhRj+0x1c>
    {
        clock >>= 1;
 23fe9d6:	0840      	lsrs	r0, r0, #1
 23fe9d8:	6018      	str	r0, [r3, #0]
    while (clock > targetSpeed && scale < 7)
 23fe9da:	e7f5      	b.n	23fe9c8 <_ZN8SPIClass19computeClockDividerEjjRhRj+0x8>
 23fe9dc:	2507      	movs	r5, #7
        scale++;
    }
    divider = clock_divisors[scale];
 23fe9de:	4b02      	ldr	r3, [pc, #8]	; (23fe9e8 <_ZN8SPIClass19computeClockDividerEjjRhRj+0x28>)
 23fe9e0:	5d5b      	ldrb	r3, [r3, r5]
 23fe9e2:	7013      	strb	r3, [r2, #0]
}
 23fe9e4:	bd30      	pop	{r4, r5, pc}
 23fe9e6:	bf00      	nop
 23fe9e8:	023ffea4 	.word	0x023ffea4

023fe9ec <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE>:
{
 23fe9ec:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 23fe9f0:	4606      	mov	r6, r0
 23fe9f2:	b08f      	sub	sp, #60	; 0x3c
    CHECK(lock());
 23fe9f4:	7800      	ldrb	r0, [r0, #0]
{
 23fe9f6:	460c      	mov	r4, r1
    CHECK(lock());
 23fe9f8:	f7ff ffbd 	bl	23fe976 <_ZN8SPIClass4lockEv.isra.0>
 23fe9fc:	2800      	cmp	r0, #0
 23fe9fe:	db1b      	blt.n	23fea38 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x4c>
    memset(info, 0, sizeof(hal_spi_info_t));
 23fea00:	2214      	movs	r2, #20
 23fea02:	2100      	movs	r1, #0
 23fea04:	a809      	add	r0, sp, #36	; 0x24
    querySpiInfo(_spi, &spi_info);
 23fea06:	7835      	ldrb	r5, [r6, #0]
    memset(info, 0, sizeof(hal_spi_info_t));
 23fea08:	f000 fd5a 	bl	23ff4c0 <memset>
    info->version = HAL_SPI_INFO_VERSION_1;
 23fea0c:	230b      	movs	r3, #11
    hal_spi_info(spi, info, nullptr);
 23fea0e:	2200      	movs	r2, #0
 23fea10:	4628      	mov	r0, r5
 23fea12:	a909      	add	r1, sp, #36	; 0x24
    info->version = HAL_SPI_INFO_VERSION_1;
 23fea14:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
    hal_spi_info(spi, info, nullptr);
 23fea18:	f7fe fff2 	bl	23fda00 <hal_spi_info>
    if (!info || !info->enabled || info->default_settings)
 23fea1c:	f89d 302d 	ldrb.w	r3, [sp, #45]	; 0x2d
 23fea20:	b113      	cbz	r3, 23fea28 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x3c>
 23fea22:	f89d 502c 	ldrb.w	r5, [sp, #44]	; 0x2c
 23fea26:	b155      	cbz	r5, 23fea3e <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x52>
  {
 23fea28:	2700      	movs	r7, #0
 23fea2a:	2501      	movs	r5, #1
 23fea2c:	46b9      	mov	r9, r7
 23fea2e:	46b8      	mov	r8, r7
    if (default_ && other.default_)
 23fea30:	7923      	ldrb	r3, [r4, #4]
 23fea32:	b15d      	cbz	r5, 23fea4c <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x60>
 23fea34:	b1c3      	cbz	r3, 23fea68 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x7c>
    return 0;
 23fea36:	2000      	movs	r0, #0
}
 23fea38:	b00f      	add	sp, #60	; 0x3c
 23fea3a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    return particle::SPISettings(info->clock, info->bit_order, info->data_mode);
 23fea3e:	f8dd 8030 	ldr.w	r8, [sp, #48]	; 0x30
 23fea42:	f89d 9034 	ldrb.w	r9, [sp, #52]	; 0x34
 23fea46:	f89d 7035 	ldrb.w	r7, [sp, #53]	; 0x35
  }
 23fea4a:	e7f1      	b.n	23fea30 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x44>
    if (default_ == other.default_ &&
 23fea4c:	2b00      	cmp	r3, #0
 23fea4e:	d135      	bne.n	23feabc <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xd0>
 23fea50:	68a3      	ldr	r3, [r4, #8]
 23fea52:	4543      	cmp	r3, r8
 23fea54:	d108      	bne.n	23fea68 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x7c>
        bitOrder_ == other.bitOrder_ &&
 23fea56:	f88d 9020 	strb.w	r9, [sp, #32]
 23fea5a:	f88d 7021 	strb.w	r7, [sp, #33]	; 0x21
 23fea5e:	f8bd 2020 	ldrh.w	r2, [sp, #32]
 23fea62:	89a3      	ldrh	r3, [r4, #12]
 23fea64:	429a      	cmp	r2, r3
 23fea66:	d0e6      	beq.n	23fea36 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x4a>
            uint8_t divisor = 0;
 23fea68:	2300      	movs	r3, #0
            computeClockDivider((unsigned int)spi_info.system_clock, settings.clock_, divisor,
 23fea6a:	68a1      	ldr	r1, [r4, #8]
            uint8_t divisor = 0;
 23fea6c:	f88d 300f 	strb.w	r3, [sp, #15]
            computeClockDivider((unsigned int)spi_info.system_clock, settings.clock_, divisor,
 23fea70:	980a      	ldr	r0, [sp, #40]	; 0x28
 23fea72:	ab04      	add	r3, sp, #16
 23fea74:	f10d 020f 	add.w	r2, sp, #15
 23fea78:	f7ff ffa2 	bl	23fe9c0 <_ZN8SPIClass19computeClockDividerEjjRhRj>
    if (default_ && other.default_)
 23fea7c:	7921      	ldrb	r1, [r4, #4]
 23fea7e:	b985      	cbnz	r5, 23feaa2 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xb6>
    if (default_ == other.default_ &&
 23fea80:	b989      	cbnz	r1, 23feaa6 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xba>
 23fea82:	68a3      	ldr	r3, [r4, #8]
 23fea84:	4543      	cmp	r3, r8
 23fea86:	d30e      	bcc.n	23feaa6 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xba>
        bitOrder_ == other.bitOrder_ &&
 23fea88:	f88d 9020 	strb.w	r9, [sp, #32]
 23fea8c:	f88d 7021 	strb.w	r7, [sp, #33]	; 0x21
 23fea90:	f8bd 2020 	ldrh.w	r2, [sp, #32]
 23fea94:	89a3      	ldrh	r3, [r4, #12]
 23fea96:	429a      	cmp	r2, r3
 23fea98:	d105      	bne.n	23feaa6 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xba>
            if (!(spi_settings <= settings && clock == spi_settings.clock_))
 23fea9a:	9b04      	ldr	r3, [sp, #16]
 23fea9c:	4543      	cmp	r3, r8
 23fea9e:	d102      	bne.n	23feaa6 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xba>
 23feaa0:	e7c9      	b.n	23fea36 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x4a>
    if (default_ && other.default_)
 23feaa2:	2900      	cmp	r1, #0
 23feaa4:	d1f9      	bne.n	23fea9a <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xae>
                hal_spi_set_settings(_spi, settings.default_, divisor, settings.bitOrder_,
 23feaa6:	2300      	movs	r3, #0
 23feaa8:	9301      	str	r3, [sp, #4]
 23feaaa:	7b63      	ldrb	r3, [r4, #13]
 23feaac:	f89d 200f 	ldrb.w	r2, [sp, #15]
 23feab0:	9300      	str	r3, [sp, #0]
 23feab2:	7b23      	ldrb	r3, [r4, #12]
            hal_spi_set_settings(_spi, settings.default_, 0, 0, 0, nullptr);
 23feab4:	7830      	ldrb	r0, [r6, #0]
 23feab6:	f7fe ffb1 	bl	23fda1c <hal_spi_set_settings>
 23feaba:	e7bc      	b.n	23fea36 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x4a>
 23feabc:	462b      	mov	r3, r5
 23feabe:	462a      	mov	r2, r5
 23feac0:	2101      	movs	r1, #1
 23feac2:	e9cd 5500 	strd	r5, r5, [sp]
 23feac6:	e7f5      	b.n	23feab4 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xc8>

023feac8 <_ZN8SPIClass8transferEh>:

    return clock;
}

byte SPIClass::transfer(byte _data)
{
 23feac8:	b508      	push	{r3, lr}
    return static_cast<byte>(hal_spi_transfer(_spi, _data));
 23feaca:	7800      	ldrb	r0, [r0, #0]
 23feacc:	f7fe ff6e 	bl	23fd9ac <hal_spi_transfer>
}
 23fead0:	b2c0      	uxtb	r0, r0
 23fead2:	bd08      	pop	{r3, pc}

023fead4 <_Z4dtoadhPc>:
#include "string_convert.h"

//These are very crude implementations - will refine later
//------------------------------------------------------------------------------------------

void dtoa (double val, unsigned char prec, char *sout) {
 23fead4:	e92d 4ff1 	stmdb	sp!, {r0, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 23fead8:	ec57 6b10 	vmov	r6, r7, d0
 23feadc:	4680      	mov	r8, r0
 23feade:	460c      	mov	r4, r1
    bool negative = val<0;
    if (negative) {
 23feae0:	2200      	movs	r2, #0
 23feae2:	2300      	movs	r3, #0
 23feae4:	ee10 0a10 	vmov	r0, s0
 23feae8:	4639      	mov	r1, r7
 23feaea:	f7fc fb6b 	bl	23fb1c4 <__aeabi_dcmplt>
 23feaee:	b128      	cbz	r0, 23feafc <_Z4dtoadhPc+0x28>
        val = -val;
 23feaf0:	f107 4300 	add.w	r3, r7, #2147483648	; 0x80000000
 23feaf4:	461f      	mov	r7, r3
        *sout++ = '-';
 23feaf6:	232d      	movs	r3, #45	; 0x2d
 23feaf8:	f804 3b01 	strb.w	r3, [r4], #1
 23feafc:	2300      	movs	r3, #0
    }
    long scale = 1;
 23feafe:	f04f 0901 	mov.w	r9, #1
    for (uint8_t i=0; i<prec; i++)
        scale *= 10;
 23feb02:	220a      	movs	r2, #10
    for (uint8_t i=0; i<prec; i++)
 23feb04:	b2d9      	uxtb	r1, r3
 23feb06:	4588      	cmp	r8, r1
 23feb08:	d903      	bls.n	23feb12 <_Z4dtoadhPc+0x3e>
        scale *= 10;
 23feb0a:	fb02 f909 	mul.w	r9, r2, r9
    for (uint8_t i=0; i<prec; i++)
 23feb0e:	3301      	adds	r3, #1
 23feb10:	e7f8      	b.n	23feb04 <_Z4dtoadhPc+0x30>
    val *= scale;   // capture all the significant digits
 23feb12:	4648      	mov	r0, r9
 23feb14:	f7fc f87a 	bl	23fac0c <__aeabi_i2d>
 23feb18:	4632      	mov	r2, r6
 23feb1a:	463b      	mov	r3, r7
 23feb1c:	f7fc f8e0 	bl	23face0 <__aeabi_dmul>
 23feb20:	4606      	mov	r6, r0
 23feb22:	460f      	mov	r7, r1
    uint64_t fixed = uint64_t(val);
 23feb24:	f7fc fbae 	bl	23fb284 <__aeabi_d2ulz>
 23feb28:	468a      	mov	sl, r1
 23feb2a:	4605      	mov	r5, r0
 23feb2c:	468b      	mov	fp, r1
    if ((val-fixed)>=0.5)    // round last digit
 23feb2e:	f7fc f8a1 	bl	23fac74 <__aeabi_ul2d>
 23feb32:	4602      	mov	r2, r0
 23feb34:	460b      	mov	r3, r1
 23feb36:	4630      	mov	r0, r6
 23feb38:	4639      	mov	r1, r7
 23feb3a:	f7fb ff19 	bl	23fa970 <__aeabi_dsub>
 23feb3e:	2200      	movs	r2, #0
 23feb40:	4b13      	ldr	r3, [pc, #76]	; (23feb90 <_Z4dtoadhPc+0xbc>)
 23feb42:	f7fc fb53 	bl	23fb1ec <__aeabi_dcmpge>
 23feb46:	b110      	cbz	r0, 23feb4e <_Z4dtoadhPc+0x7a>
        fixed++;
 23feb48:	3501      	adds	r5, #1
 23feb4a:	f14a 0b00 	adc.w	fp, sl, #0

    unsigned long first = (unsigned long)(fixed / scale);
 23feb4e:	464a      	mov	r2, r9
 23feb50:	4628      	mov	r0, r5
 23feb52:	4659      	mov	r1, fp
 23feb54:	17d3      	asrs	r3, r2, #31
 23feb56:	f7fc fb7d 	bl	23fb254 <__aeabi_uldivmod>
    unsigned long second = (unsigned long)(fixed % scale);

    ultoa(first, sout, 10, 1);
 23feb5a:	2301      	movs	r3, #1
 23feb5c:	4615      	mov	r5, r2
 23feb5e:	4621      	mov	r1, r4
 23feb60:	220a      	movs	r2, #10
 23feb62:	f000 fa4a 	bl	23feffa <ultoa>
    if (prec) {
 23feb66:	f1b8 0f00 	cmp.w	r8, #0
 23feb6a:	d00e      	beq.n	23feb8a <_Z4dtoadhPc+0xb6>
        sout += strlen(sout);
 23feb6c:	4620      	mov	r0, r4
 23feb6e:	f7fc fd1f 	bl	23fb5b0 <strlen>
        *sout++ = '.';
 23feb72:	232e      	movs	r3, #46	; 0x2e
        sout += strlen(sout);
 23feb74:	1821      	adds	r1, r4, r0
        *sout++ = '.';
 23feb76:	5423      	strb	r3, [r4, r0]
        ultoa(second, sout, 10, prec);
 23feb78:	220a      	movs	r2, #10
 23feb7a:	4643      	mov	r3, r8
 23feb7c:	4628      	mov	r0, r5
 23feb7e:	3101      	adds	r1, #1
    }
}
 23feb80:	b001      	add	sp, #4
 23feb82:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
        ultoa(second, sout, 10, prec);
 23feb86:	f000 ba38 	b.w	23feffa <ultoa>
}
 23feb8a:	b001      	add	sp, #4
 23feb8c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 23feb90:	3fe00000 	.word	0x3fe00000

023feb94 <_ZN6StringD1Ev>:
	init();
	char buf[33];
	dtoa(value, decimalPlaces, buf);
        *this = buf;
}
String::~String()
 23feb94:	b510      	push	{r4, lr}
 23feb96:	4604      	mov	r4, r0
{
	free(buffer);
 23feb98:	6800      	ldr	r0, [r0, #0]
 23feb9a:	f7ff f97d 	bl	23fde98 <free>
}
 23feb9e:	4620      	mov	r0, r4
 23feba0:	bd10      	pop	{r4, pc}

023feba2 <_ZN6String10invalidateEv>:
	len = 0;
	flags = 0;
}

void String::invalidate(void)
{
 23feba2:	b510      	push	{r4, lr}
 23feba4:	4604      	mov	r4, r0
	if (buffer) free(buffer);
 23feba6:	6800      	ldr	r0, [r0, #0]
 23feba8:	b108      	cbz	r0, 23febae <_ZN6String10invalidateEv+0xc>
 23febaa:	f7ff f975 	bl	23fde98 <free>
	buffer = NULL;
 23febae:	2300      	movs	r3, #0
	capacity = len = 0;
 23febb0:	e9c4 3301 	strd	r3, r3, [r4, #4]
	buffer = NULL;
 23febb4:	6023      	str	r3, [r4, #0]
}
 23febb6:	bd10      	pop	{r4, pc}

023febb8 <_ZN6String12changeBufferEj>:
	}
	return 0;
}

unsigned char String::changeBuffer(unsigned int maxStrLen)
{
 23febb8:	b538      	push	{r3, r4, r5, lr}
 23febba:	4604      	mov	r4, r0
 23febbc:	460d      	mov	r5, r1
	char *newbuffer = (char *)realloc(buffer, maxStrLen + 1);
 23febbe:	6800      	ldr	r0, [r0, #0]
 23febc0:	3101      	adds	r1, #1
 23febc2:	f7ff f977 	bl	23fdeb4 <realloc>
	if (newbuffer) {
 23febc6:	b110      	cbz	r0, 23febce <_ZN6String12changeBufferEj+0x16>
		buffer = newbuffer;
		capacity = maxStrLen;
 23febc8:	e9c4 0500 	strd	r0, r5, [r4]
		return 1;
 23febcc:	2001      	movs	r0, #1
	}
	return 0;
}
 23febce:	bd38      	pop	{r3, r4, r5, pc}

023febd0 <_ZN6String7reserveEj>:
{
 23febd0:	b510      	push	{r4, lr}
	if (buffer && capacity >= size) return 1;
 23febd2:	6803      	ldr	r3, [r0, #0]
{
 23febd4:	4604      	mov	r4, r0
	if (buffer && capacity >= size) return 1;
 23febd6:	b123      	cbz	r3, 23febe2 <_ZN6String7reserveEj+0x12>
 23febd8:	6843      	ldr	r3, [r0, #4]
 23febda:	428b      	cmp	r3, r1
 23febdc:	d301      	bcc.n	23febe2 <_ZN6String7reserveEj+0x12>
 23febde:	2001      	movs	r0, #1
}
 23febe0:	bd10      	pop	{r4, pc}
	if (changeBuffer(size)) {
 23febe2:	4620      	mov	r0, r4
 23febe4:	f7ff ffe8 	bl	23febb8 <_ZN6String12changeBufferEj>
 23febe8:	2800      	cmp	r0, #0
 23febea:	d0f9      	beq.n	23febe0 <_ZN6String7reserveEj+0x10>
		if (len == 0) buffer[0] = 0;
 23febec:	68a3      	ldr	r3, [r4, #8]
 23febee:	2b00      	cmp	r3, #0
 23febf0:	d1f5      	bne.n	23febde <_ZN6String7reserveEj+0xe>
 23febf2:	6822      	ldr	r2, [r4, #0]
 23febf4:	7013      	strb	r3, [r2, #0]
 23febf6:	e7f2      	b.n	23febde <_ZN6String7reserveEj+0xe>

023febf8 <_ZN6String4copyEPKcj>:
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
 23febf8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 23febfa:	460d      	mov	r5, r1
	if (!reserve(length)) {
 23febfc:	4611      	mov	r1, r2
 23febfe:	9201      	str	r2, [sp, #4]
{
 23fec00:	4604      	mov	r4, r0
	if (!reserve(length)) {
 23fec02:	f7ff ffe5 	bl	23febd0 <_ZN6String7reserveEj>
 23fec06:	9a01      	ldr	r2, [sp, #4]
 23fec08:	b928      	cbnz	r0, 23fec16 <_ZN6String4copyEPKcj+0x1e>
		invalidate();
 23fec0a:	4620      	mov	r0, r4
 23fec0c:	f7ff ffc9 	bl	23feba2 <_ZN6String10invalidateEv>
	}
	len = length;
	memcpy(buffer, cstr, length);
	buffer[len] = 0;
	return *this;
}
 23fec10:	4620      	mov	r0, r4
 23fec12:	b003      	add	sp, #12
 23fec14:	bd30      	pop	{r4, r5, pc}
	memcpy(buffer, cstr, length);
 23fec16:	4629      	mov	r1, r5
	len = length;
 23fec18:	60a2      	str	r2, [r4, #8]
	memcpy(buffer, cstr, length);
 23fec1a:	6820      	ldr	r0, [r4, #0]
 23fec1c:	f000 fc43 	bl	23ff4a6 <memcpy>
	buffer[len] = 0;
 23fec20:	2100      	movs	r1, #0
 23fec22:	6822      	ldr	r2, [r4, #0]
 23fec24:	68a3      	ldr	r3, [r4, #8]
 23fec26:	54d1      	strb	r1, [r2, r3]
	return *this;
 23fec28:	e7f2      	b.n	23fec10 <_ZN6String4copyEPKcj+0x18>

023fec2a <_ZN6StringC1EPK19__FlashStringHelper>:
	buffer = NULL;
 23fec2a:	2300      	movs	r3, #0
String::String(const __FlashStringHelper *pstr)
 23fec2c:	b513      	push	{r0, r1, r4, lr}
 23fec2e:	4604      	mov	r4, r0
	capacity = 0;
 23fec30:	e9c0 3300 	strd	r3, r3, [r0]
	len = 0;
 23fec34:	6083      	str	r3, [r0, #8]
	flags = 0;
 23fec36:	7303      	strb	r3, [r0, #12]
	if (cstr) copy(cstr, strlen(cstr));
 23fec38:	b141      	cbz	r1, 23fec4c <_ZN6StringC1EPK19__FlashStringHelper+0x22>
	if (cstr) copy(cstr, strlen(cstr));
 23fec3a:	4608      	mov	r0, r1
 23fec3c:	9101      	str	r1, [sp, #4]
 23fec3e:	f7fc fcb7 	bl	23fb5b0 <strlen>
 23fec42:	9901      	ldr	r1, [sp, #4]
 23fec44:	4602      	mov	r2, r0
 23fec46:	4620      	mov	r0, r4
 23fec48:	f7ff ffd6 	bl	23febf8 <_ZN6String4copyEPKcj>
}
 23fec4c:	4620      	mov	r0, r4
 23fec4e:	b002      	add	sp, #8
 23fec50:	bd10      	pop	{r4, pc}

023fec52 <_ZN6StringaSERKS_>:
}
#endif

String & String::operator = (const String &rhs)
{
	if (this == &rhs) return *this;
 23fec52:	4288      	cmp	r0, r1
{
 23fec54:	b510      	push	{r4, lr}
 23fec56:	4604      	mov	r4, r0
	if (this == &rhs) return *this;
 23fec58:	d005      	beq.n	23fec66 <_ZN6StringaSERKS_+0x14>

	if (rhs.buffer) copy(rhs.buffer, rhs.len);
 23fec5a:	680b      	ldr	r3, [r1, #0]
 23fec5c:	b12b      	cbz	r3, 23fec6a <_ZN6StringaSERKS_+0x18>
 23fec5e:	688a      	ldr	r2, [r1, #8]
 23fec60:	4619      	mov	r1, r3
 23fec62:	f7ff ffc9 	bl	23febf8 <_ZN6String4copyEPKcj>
	else invalidate();

	return *this;
}
 23fec66:	4620      	mov	r0, r4
 23fec68:	bd10      	pop	{r4, pc}
	else invalidate();
 23fec6a:	f7ff ff9a 	bl	23feba2 <_ZN6String10invalidateEv>
 23fec6e:	e7fa      	b.n	23fec66 <_ZN6StringaSERKS_+0x14>

023fec70 <_ZN6StringC1ERKS_>:
	buffer = NULL;
 23fec70:	2300      	movs	r3, #0
String::String(const String &value)
 23fec72:	b510      	push	{r4, lr}
 23fec74:	4604      	mov	r4, r0
	capacity = 0;
 23fec76:	e9c0 3300 	strd	r3, r3, [r0]
	len = 0;
 23fec7a:	6083      	str	r3, [r0, #8]
	flags = 0;
 23fec7c:	7303      	strb	r3, [r0, #12]
	*this = value;
 23fec7e:	f7ff ffe8 	bl	23fec52 <_ZN6StringaSERKS_>
}
 23fec82:	4620      	mov	r0, r4
 23fec84:	bd10      	pop	{r4, pc}

023fec86 <_ZN6StringaSEPKc>:
	return *this;
}
#endif

String & String::operator = (const char *cstr)
{
 23fec86:	b513      	push	{r0, r1, r4, lr}
 23fec88:	4604      	mov	r4, r0
	if (cstr) copy(cstr, strlen(cstr));
 23fec8a:	b159      	cbz	r1, 23feca4 <_ZN6StringaSEPKc+0x1e>
 23fec8c:	4608      	mov	r0, r1
 23fec8e:	9101      	str	r1, [sp, #4]
 23fec90:	f7fc fc8e 	bl	23fb5b0 <strlen>
 23fec94:	9901      	ldr	r1, [sp, #4]
 23fec96:	4602      	mov	r2, r0
 23fec98:	4620      	mov	r0, r4
 23fec9a:	f7ff ffad 	bl	23febf8 <_ZN6String4copyEPKcj>
	else invalidate();

	return *this;
}
 23fec9e:	4620      	mov	r0, r4
 23feca0:	b002      	add	sp, #8
 23feca2:	bd10      	pop	{r4, pc}
	else invalidate();
 23feca4:	f7ff ff7d 	bl	23feba2 <_ZN6String10invalidateEv>
 23feca8:	e7f9      	b.n	23fec9e <_ZN6StringaSEPKc+0x18>

023fecaa <_ZN6StringC1Eih>:
String::String(int value, unsigned char base)
 23fecaa:	b510      	push	{r4, lr}
	buffer = NULL;
 23fecac:	2300      	movs	r3, #0
String::String(int value, unsigned char base)
 23fecae:	4604      	mov	r4, r0
 23fecb0:	b08a      	sub	sp, #40	; 0x28
	capacity = 0;
 23fecb2:	e9c4 3300 	strd	r3, r3, [r4]
	len = 0;
 23fecb6:	60a3      	str	r3, [r4, #8]
	flags = 0;
 23fecb8:	7323      	strb	r3, [r4, #12]
String::String(int value, unsigned char base)
 23fecba:	4608      	mov	r0, r1
	itoa(value, buf, base);
 23fecbc:	a901      	add	r1, sp, #4
 23fecbe:	f000 f9c1 	bl	23ff044 <itoa>
	*this = buf;
 23fecc2:	4620      	mov	r0, r4
 23fecc4:	a901      	add	r1, sp, #4
 23fecc6:	f7ff ffde 	bl	23fec86 <_ZN6StringaSEPKc>
}
 23fecca:	4620      	mov	r0, r4
 23feccc:	b00a      	add	sp, #40	; 0x28
 23fecce:	bd10      	pop	{r4, pc}

023fecd0 <_ZN6StringC1Efi>:
String::String(float value, int decimalPlaces)
 23fecd0:	b530      	push	{r4, r5, lr}
	buffer = NULL;
 23fecd2:	2300      	movs	r3, #0
String::String(float value, int decimalPlaces)
 23fecd4:	4604      	mov	r4, r0
 23fecd6:	b08b      	sub	sp, #44	; 0x2c
	capacity = 0;
 23fecd8:	e9c4 3300 	strd	r3, r3, [r4]
	len = 0;
 23fecdc:	60a3      	str	r3, [r4, #8]
	flags = 0;
 23fecde:	7323      	strb	r3, [r4, #12]
String::String(float value, int decimalPlaces)
 23fece0:	ee10 0a10 	vmov	r0, s0
	dtoa(value, decimalPlaces, buf);
 23fece4:	b2cd      	uxtb	r5, r1
 23fece6:	f7fb ffa3 	bl	23fac30 <__aeabi_f2d>
 23fecea:	ec41 0b10 	vmov	d0, r0, r1
 23fecee:	4628      	mov	r0, r5
 23fecf0:	a901      	add	r1, sp, #4
 23fecf2:	f7ff feef 	bl	23fead4 <_Z4dtoadhPc>
        *this = buf;
 23fecf6:	4620      	mov	r0, r4
 23fecf8:	a901      	add	r1, sp, #4
 23fecfa:	f7ff ffc4 	bl	23fec86 <_ZN6StringaSEPKc>
}
 23fecfe:	4620      	mov	r0, r4
 23fed00:	b00b      	add	sp, #44	; 0x2c
 23fed02:	bd30      	pop	{r4, r5, pc}

023fed04 <_ZN6String6concatEPKcj>:
{
	return concat(s.buffer, s.len);
}

unsigned char String::concat(const char *cstr, unsigned int length)
{
 23fed04:	b570      	push	{r4, r5, r6, lr}
 23fed06:	4605      	mov	r5, r0
	unsigned int newlen = len + length;
	if (!cstr) return 0;
 23fed08:	460e      	mov	r6, r1
 23fed0a:	b909      	cbnz	r1, 23fed10 <_ZN6String6concatEPKcj+0xc>
 23fed0c:	2000      	movs	r0, #0
	if (length == 0) return 1;
	if (!reserve(newlen)) return 0;
	strcpy(buffer + len, cstr);
	len = newlen;
	return 1;
}
 23fed0e:	bd70      	pop	{r4, r5, r6, pc}
	if (length == 0) return 1;
 23fed10:	b16a      	cbz	r2, 23fed2e <_ZN6String6concatEPKcj+0x2a>
	unsigned int newlen = len + length;
 23fed12:	6884      	ldr	r4, [r0, #8]
 23fed14:	4414      	add	r4, r2
	if (!reserve(newlen)) return 0;
 23fed16:	4621      	mov	r1, r4
 23fed18:	f7ff ff5a 	bl	23febd0 <_ZN6String7reserveEj>
 23fed1c:	2800      	cmp	r0, #0
 23fed1e:	d0f5      	beq.n	23fed0c <_ZN6String6concatEPKcj+0x8>
	strcpy(buffer + len, cstr);
 23fed20:	6828      	ldr	r0, [r5, #0]
 23fed22:	68ab      	ldr	r3, [r5, #8]
 23fed24:	4631      	mov	r1, r6
 23fed26:	4418      	add	r0, r3
 23fed28:	f000 fc00 	bl	23ff52c <strcpy>
	len = newlen;
 23fed2c:	60ac      	str	r4, [r5, #8]
	if (length == 0) return 1;
 23fed2e:	2001      	movs	r0, #1
 23fed30:	e7ed      	b.n	23fed0e <_ZN6String6concatEPKcj+0xa>

023fed32 <_ZplRK15StringSumHelperRK6String>:
/*********************************************/
/*  Concatenate                              */
/*********************************************/

StringSumHelper & operator + (const StringSumHelper &lhs, const String &rhs)
{
 23fed32:	b510      	push	{r4, lr}
	StringSumHelper &a = const_cast<StringSumHelper&>(lhs);
	if (!a.concat(rhs.buffer, rhs.len)) a.invalidate();
 23fed34:	688a      	ldr	r2, [r1, #8]
 23fed36:	6809      	ldr	r1, [r1, #0]
{
 23fed38:	4604      	mov	r4, r0
	if (!a.concat(rhs.buffer, rhs.len)) a.invalidate();
 23fed3a:	f7ff ffe3 	bl	23fed04 <_ZN6String6concatEPKcj>
 23fed3e:	b910      	cbnz	r0, 23fed46 <_ZplRK15StringSumHelperRK6String+0x14>
 23fed40:	4620      	mov	r0, r4
 23fed42:	f7ff ff2e 	bl	23feba2 <_ZN6String10invalidateEv>
	return a;
}
 23fed46:	4620      	mov	r0, r4
 23fed48:	bd10      	pop	{r4, pc}

023fed4a <_ZplRK15StringSumHelperPKc>:

StringSumHelper & operator + (const StringSumHelper &lhs, const char *cstr)
{
 23fed4a:	b513      	push	{r0, r1, r4, lr}
 23fed4c:	4604      	mov	r4, r0
	StringSumHelper &a = const_cast<StringSumHelper&>(lhs);
	if (!cstr || !a.concat(cstr, strlen(cstr))) a.invalidate();
 23fed4e:	b929      	cbnz	r1, 23fed5c <_ZplRK15StringSumHelperPKc+0x12>
 23fed50:	4620      	mov	r0, r4
 23fed52:	f7ff ff26 	bl	23feba2 <_ZN6String10invalidateEv>
	return a;
}
 23fed56:	4620      	mov	r0, r4
 23fed58:	b002      	add	sp, #8
 23fed5a:	bd10      	pop	{r4, pc}
	if (!cstr || !a.concat(cstr, strlen(cstr))) a.invalidate();
 23fed5c:	4608      	mov	r0, r1
 23fed5e:	9101      	str	r1, [sp, #4]
 23fed60:	f7fc fc26 	bl	23fb5b0 <strlen>
 23fed64:	9901      	ldr	r1, [sp, #4]
 23fed66:	4602      	mov	r2, r0
 23fed68:	4620      	mov	r0, r4
 23fed6a:	f7ff ffcb 	bl	23fed04 <_ZN6String6concatEPKcj>
 23fed6e:	2800      	cmp	r0, #0
 23fed70:	d0ee      	beq.n	23fed50 <_ZplRK15StringSumHelperPKc+0x6>
 23fed72:	e7f0      	b.n	23fed56 <_ZplRK15StringSumHelperPKc+0xc>

023fed74 <_GLOBAL__sub_I_System>:
} // namespace particle

// particle::Flag<TagT, ValueT>
template<typename TagT, typename ValueT>
inline particle::Flag<TagT, ValueT>::Flag(ValueT val) :
        val_(val) {
 23fed74:	2202      	movs	r2, #2

class SystemSleepResult {
public:
    SystemSleepResult()
            : wakeupSource_(nullptr),
              error_(SYSTEM_ERROR_NONE) {
 23fed76:	2000      	movs	r0, #0
 23fed78:	4b04      	ldr	r3, [pc, #16]	; (23fed8c <_GLOBAL__sub_I_System+0x18>)
 23fed7a:	601a      	str	r2, [r3, #0]
 23fed7c:	4b04      	ldr	r3, [pc, #16]	; (23fed90 <_GLOBAL__sub_I_System+0x1c>)
    SleepResult() {}
 23fed7e:	4a05      	ldr	r2, [pc, #20]	; (23fed94 <_GLOBAL__sub_I_System+0x20>)
              error_(SYSTEM_ERROR_NONE) {
 23fed80:	e9c3 0000 	strd	r0, r0, [r3]
    SleepResult() {}
 23fed84:	609a      	str	r2, [r3, #8]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
 23fed86:	f7fe bf53 	b.w	23fdc30 <set_system_mode>
 23fed8a:	bf00      	nop
 23fed8c:	1007aec0 	.word	0x1007aec0
 23fed90:	1007aeb4 	.word	0x1007aeb4
 23fed94:	ffff0000 	.word	0xffff0000

023fed98 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT>:
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
            unix_time_cache = unix_time;
    }
}

const char* TimeClass::format_spec = TIME_FORMAT_DEFAULT;
 23fed98:	4b02      	ldr	r3, [pc, #8]	; (23feda4 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0xc>)
 23fed9a:	681a      	ldr	r2, [r3, #0]
 23fed9c:	4b02      	ldr	r3, [pc, #8]	; (23feda8 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0x10>)
 23fed9e:	601a      	str	r2, [r3, #0]
{
  return isValid();
}


TimeClass Time;
 23feda0:	4770      	bx	lr
 23feda2:	bf00      	nop
 23feda4:	1007ad4c 	.word	0x1007ad4c
 23feda8:	1007aec4 	.word	0x1007aec4

023fedac <_ZN11USARTSerialD1Ev>:
private:
  hal_usart_interface_t _serial;
  bool _blocking;
public:
  USARTSerial(hal_usart_interface_t serial, const hal_usart_buffer_config_t& config);
  virtual ~USARTSerial() {};
 23fedac:	4770      	bx	lr

023fedae <_ZN11USARTSerial14blockOnOverrunEb>:
    hal_usart_half_duplex(_serial, Enable);
}

void USARTSerial::blockOnOverrun(bool block)
{
  _blocking = block;
 23fedae:	7441      	strb	r1, [r0, #17]
}
 23fedb0:	4770      	bx	lr

023fedb2 <_ZN11USARTSerial17availableForWriteEv>:


int USARTSerial::availableForWrite(void)
{
 23fedb2:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available_data_for_write(_serial));
 23fedb4:	7c00      	ldrb	r0, [r0, #16]
 23fedb6:	f7fe feaf 	bl	23fdb18 <hal_usart_available_data_for_write>
}
 23fedba:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 23fedbe:	bd08      	pop	{r3, pc}

023fedc0 <_ZN11USARTSerial9availableEv>:

int USARTSerial::available(void)
{
 23fedc0:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available(_serial));
 23fedc2:	7c00      	ldrb	r0, [r0, #16]
 23fedc4:	f7fe fe62 	bl	23fda8c <hal_usart_available>
}
 23fedc8:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 23fedcc:	bd08      	pop	{r3, pc}

023fedce <_ZN11USARTSerial4peekEv>:

int USARTSerial::peek(void)
{
 23fedce:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_peek(_serial));
 23fedd0:	7c00      	ldrb	r0, [r0, #16]
 23fedd2:	f7fe fe77 	bl	23fdac4 <hal_usart_peek>
}
 23fedd6:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
 23fedda:	bd08      	pop	{r3, pc}

023feddc <_ZN11USARTSerial4readEv>:

int USARTSerial::read(void)
{
 23feddc:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_read(_serial));
 23fedde:	7c00      	ldrb	r0, [r0, #16]
 23fede0:	f7fe fe62 	bl	23fdaa8 <hal_usart_read>
}
 23fede4:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
 23fede8:	bd08      	pop	{r3, pc}

023fedea <_ZN11USARTSerial5flushEv>:

void USARTSerial::flush()
{
  hal_usart_flush(_serial);
 23fedea:	7c00      	ldrb	r0, [r0, #16]
 23fedec:	f7fe be78 	b.w	23fdae0 <hal_usart_flush>

023fedf0 <_ZN11USARTSerial5writeEh>:
}

size_t USARTSerial::write(uint8_t c)
{
 23fedf0:	b537      	push	{r0, r1, r2, r4, r5, lr}
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
 23fedf2:	7c45      	ldrb	r5, [r0, #17]
{
 23fedf4:	4604      	mov	r4, r0
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
 23fedf6:	b12d      	cbz	r5, 23fee04 <_ZN11USARTSerial5writeEh+0x14>
    // the HAL always blocks.
	  return hal_usart_write(_serial, c);
 23fedf8:	7c20      	ldrb	r0, [r4, #16]
  }
  return 0;
}
 23fedfa:	b003      	add	sp, #12
 23fedfc:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
	  return hal_usart_write(_serial, c);
 23fee00:	f7fe be36 	b.w	23fda70 <hal_usart_write>
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
 23fee04:	7c00      	ldrb	r0, [r0, #16]
 23fee06:	9101      	str	r1, [sp, #4]
 23fee08:	f7fe fe86 	bl	23fdb18 <hal_usart_available_data_for_write>
 23fee0c:	2800      	cmp	r0, #0
 23fee0e:	9901      	ldr	r1, [sp, #4]
 23fee10:	dcf2      	bgt.n	23fedf8 <_ZN11USARTSerial5writeEh+0x8>
}
 23fee12:	4628      	mov	r0, r5
 23fee14:	b003      	add	sp, #12
 23fee16:	bd30      	pop	{r4, r5, pc}

023fee18 <_ZN11USARTSerialD0Ev>:
 23fee18:	b510      	push	{r4, lr}
 23fee1a:	4604      	mov	r4, r0
 23fee1c:	2114      	movs	r1, #20
 23fee1e:	f7fc fbf0 	bl	23fb602 <_ZdlPvj>
 23fee22:	4620      	mov	r0, r4
 23fee24:	bd10      	pop	{r4, pc}
	...

023fee28 <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t>:
USARTSerial::USARTSerial(hal_usart_interface_t serial, const hal_usart_buffer_config_t& config)
 23fee28:	b510      	push	{r4, lr}
 23fee2a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 23fee2e:	4604      	mov	r4, r0
 23fee30:	4608      	mov	r0, r1
 23fee32:	4611      	mov	r1, r2
 23fee34:	2200      	movs	r2, #0
 23fee36:	e9c4 2301 	strd	r2, r3, [r4, #4]
 23fee3a:	4b04      	ldr	r3, [pc, #16]	; (23fee4c <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t+0x24>)
  _serial = serial;
 23fee3c:	7420      	strb	r0, [r4, #16]
USARTSerial::USARTSerial(hal_usart_interface_t serial, const hal_usart_buffer_config_t& config)
 23fee3e:	6023      	str	r3, [r4, #0]
  _blocking = true;
 23fee40:	2301      	movs	r3, #1
 23fee42:	7463      	strb	r3, [r4, #17]
  hal_usart_init_ex(serial, &config, nullptr);
 23fee44:	f7fe fe76 	bl	23fdb34 <hal_usart_init_ex>
}
 23fee48:	4620      	mov	r0, r4
 23fee4a:	bd10      	pop	{r4, pc}
 23fee4c:	023ffed0 	.word	0x023ffed0

023fee50 <_ZN11USARTSerial9isEnabledEv>:
USARTSerial::operator bool() {
  return true;
}

bool USARTSerial::isEnabled() {
  return hal_usart_is_enabled(_serial);
 23fee50:	7c00      	ldrb	r0, [r0, #16]
 23fee52:	f7fe be53 	b.w	23fdafc <hal_usart_is_enabled>

023fee56 <_ZN9USBSerial14blockOnOverrunEb>:
  HAL_USB_USART_Flush_Data(_serial);
}

void USBSerial::blockOnOverrun(bool block)
{
  _blocking = block;
 23fee56:	7441      	strb	r1, [r0, #17]
}
 23fee58:	4770      	bx	lr

023fee5a <__tcf_0>:
}

USBSerial& _fetch_usbserial()
{
  HAL_USB_USART_Config conf = acquireSerialBuffer();
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
 23fee5a:	4770      	bx	lr

023fee5c <_ZN9USBSerialD1Ev>:
#include "usb_hal.h"
#include "system_task.h"
#include "spark_wiring_startup.h"
#include "concurrent_hal.h"

class USBSerial : public Stream
 23fee5c:	4770      	bx	lr

023fee5e <_ZN9USBSerial4readEv>:
{
 23fee5e:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
 23fee60:	2100      	movs	r1, #0
 23fee62:	7c00      	ldrb	r0, [r0, #16]
 23fee64:	f7fe feac 	bl	23fdbc0 <HAL_USB_USART_Receive_Data>
}
 23fee68:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
 23fee6c:	bd08      	pop	{r3, pc}

023fee6e <_ZN9USBSerial4peekEv>:
{
 23fee6e:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, true));
 23fee70:	2101      	movs	r1, #1
 23fee72:	7c00      	ldrb	r0, [r0, #16]
 23fee74:	f7fe fea4 	bl	23fdbc0 <HAL_USB_USART_Receive_Data>
}
 23fee78:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
 23fee7c:	bd08      	pop	{r3, pc}

023fee7e <_ZN9USBSerial17availableForWriteEv>:
{
 23fee7e:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USB_USART_Available_Data_For_Write(_serial));
 23fee80:	7c00      	ldrb	r0, [r0, #16]
 23fee82:	f7fe fe8f 	bl	23fdba4 <HAL_USB_USART_Available_Data_For_Write>
}
 23fee86:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 23fee8a:	bd08      	pop	{r3, pc}

023fee8c <_ZN9USBSerial9availableEv>:
{
 23fee8c:	b508      	push	{r3, lr}
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
 23fee8e:	7c00      	ldrb	r0, [r0, #16]
 23fee90:	f7fe fe7a 	bl	23fdb88 <HAL_USB_USART_Available_Data>
}
 23fee94:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 23fee98:	bd08      	pop	{r3, pc}

023fee9a <_ZN9USBSerial5writeEh>:
{
 23fee9a:	b513      	push	{r0, r1, r4, lr}
 23fee9c:	4604      	mov	r4, r0
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
 23fee9e:	7c00      	ldrb	r0, [r0, #16]
{
 23feea0:	9101      	str	r1, [sp, #4]
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
 23feea2:	f7fe fe7f 	bl	23fdba4 <HAL_USB_USART_Available_Data_For_Write>
 23feea6:	2800      	cmp	r0, #0
 23feea8:	9901      	ldr	r1, [sp, #4]
 23feeaa:	dc01      	bgt.n	23feeb0 <_ZN9USBSerial5writeEh+0x16>
 23feeac:	7c60      	ldrb	r0, [r4, #17]
 23feeae:	b120      	cbz	r0, 23feeba <_ZN9USBSerial5writeEh+0x20>
    return std::max(0, (int)HAL_USB_USART_Send_Data(_serial, byte));
 23feeb0:	7c20      	ldrb	r0, [r4, #16]
 23feeb2:	f7fe fe93 	bl	23fdbdc <HAL_USB_USART_Send_Data>
 23feeb6:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
}
 23feeba:	b002      	add	sp, #8
 23feebc:	bd10      	pop	{r4, pc}

023feebe <_ZN9USBSerial5flushEv>:
  HAL_USB_USART_Flush_Data(_serial);
 23feebe:	7c00      	ldrb	r0, [r0, #16]
 23feec0:	f7fe be9a 	b.w	23fdbf8 <HAL_USB_USART_Flush_Data>

023feec4 <_ZN9USBSerialD0Ev>:
 23feec4:	b510      	push	{r4, lr}
 23feec6:	4604      	mov	r4, r0
 23feec8:	2114      	movs	r1, #20
 23feeca:	f7fc fb9a 	bl	23fb602 <_ZdlPvj>
 23feece:	4620      	mov	r0, r4
 23feed0:	bd10      	pop	{r4, pc}
	...

023feed4 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>:
USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
 23feed4:	b510      	push	{r4, lr}
 23feed6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 23feeda:	4604      	mov	r4, r0
 23feedc:	4608      	mov	r0, r1
 23feede:	2100      	movs	r1, #0
 23feee0:	e9c4 1301 	strd	r1, r3, [r4, #4]
 23feee4:	4b04      	ldr	r3, [pc, #16]	; (23feef8 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config+0x24>)
  _serial = serial;
 23feee6:	7420      	strb	r0, [r4, #16]
USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
 23feee8:	6023      	str	r3, [r4, #0]
  _blocking = true;
 23feeea:	2301      	movs	r3, #1
  HAL_USB_USART_Init(_serial, &conf);
 23feeec:	4611      	mov	r1, r2
  _blocking = true;
 23feeee:	7463      	strb	r3, [r4, #17]
  HAL_USB_USART_Init(_serial, &conf);
 23feef0:	f7fe fe2e 	bl	23fdb50 <HAL_USB_USART_Init>
}
 23feef4:	4620      	mov	r0, r4
 23feef6:	bd10      	pop	{r4, pc}
 23feef8:	023fff00 	.word	0x023fff00

023feefc <_ZN9USBSerial5beginEl>:
    HAL_USB_USART_Begin(_serial, speed, NULL);
 23feefc:	2200      	movs	r2, #0
 23feefe:	7c00      	ldrb	r0, [r0, #16]
 23fef00:	f7fe be34 	b.w	23fdb6c <HAL_USB_USART_Begin>

023fef04 <_Z19acquireSerialBufferv>:
{
 23fef04:	b510      	push	{r4, lr}
 23fef06:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {};
 23fef08:	2214      	movs	r2, #20
 23fef0a:	2100      	movs	r1, #0
 23fef0c:	f000 fad8 	bl	23ff4c0 <memset>
}
 23fef10:	4620      	mov	r0, r4
 23fef12:	bd10      	pop	{r4, pc}

023fef14 <_Z16_fetch_usbserialv>:
{
 23fef14:	b510      	push	{r4, lr}
 23fef16:	b088      	sub	sp, #32
  HAL_USB_USART_Config conf = acquireSerialBuffer();
 23fef18:	a803      	add	r0, sp, #12
 23fef1a:	f7ff fff3 	bl	23fef04 <_Z19acquireSerialBufferv>
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
 23fef1e:	4c0c      	ldr	r4, [pc, #48]	; (23fef50 <_Z16_fetch_usbserialv+0x3c>)
 23fef20:	e8d4 1f8f 	ldab	r1, [r4]
 23fef24:	f011 0101 	ands.w	r1, r1, #1
 23fef28:	d10f      	bne.n	23fef4a <_Z16_fetch_usbserialv+0x36>
 23fef2a:	4620      	mov	r0, r4
 23fef2c:	9101      	str	r1, [sp, #4]
 23fef2e:	f7fc fb77 	bl	23fb620 <__cxa_guard_acquire>
 23fef32:	9901      	ldr	r1, [sp, #4]
 23fef34:	b148      	cbz	r0, 23fef4a <_Z16_fetch_usbserialv+0x36>
 23fef36:	aa03      	add	r2, sp, #12
 23fef38:	4806      	ldr	r0, [pc, #24]	; (23fef54 <_Z16_fetch_usbserialv+0x40>)
 23fef3a:	f7ff ffcb 	bl	23feed4 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
 23fef3e:	4620      	mov	r0, r4
 23fef40:	f7fc fb73 	bl	23fb62a <__cxa_guard_release>
 23fef44:	4804      	ldr	r0, [pc, #16]	; (23fef58 <_Z16_fetch_usbserialv+0x44>)
 23fef46:	f000 faa8 	bl	23ff49a <atexit>
	return _usbserial;
}
 23fef4a:	4802      	ldr	r0, [pc, #8]	; (23fef54 <_Z16_fetch_usbserialv+0x40>)
 23fef4c:	b008      	add	sp, #32
 23fef4e:	bd10      	pop	{r4, pc}
 23fef50:	1007aec8 	.word	0x1007aec8
 23fef54:	1007aecc 	.word	0x1007aecc
 23fef58:	023fee5b 	.word	0x023fee5b

023fef5c <_ZN5spark9WiFiClass5readyEv>:
    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
    }

    bool ready(void) {
        return network_ready(*this, 0, NULL);
 23fef5c:	2200      	movs	r2, #0
 23fef5e:	6840      	ldr	r0, [r0, #4]
 23fef60:	4611      	mov	r1, r2
 23fef62:	f7fe bf0d 	b.w	23fdd80 <network_ready>

023fef66 <_ZN5spark9WiFiClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
 23fef66:	2200      	movs	r2, #0
 23fef68:	6840      	ldr	r0, [r0, #4]
 23fef6a:	4611      	mov	r1, r2
 23fef6c:	f7fe bf40 	b.w	23fddf0 <network_listening>

023fef70 <_ZN5spark9WiFiClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
 23fef70:	2200      	movs	r2, #0
 23fef72:	6840      	ldr	r0, [r0, #4]
 23fef74:	4611      	mov	r1, r2
 23fef76:	f7fe bf57 	b.w	23fde28 <network_get_listen_timeout>

023fef7a <_ZN5spark9WiFiClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
 23fef7a:	2200      	movs	r2, #0
 23fef7c:	6840      	ldr	r0, [r0, #4]
 23fef7e:	f7fe bf45 	b.w	23fde0c <network_set_listen_timeout>

023fef82 <_ZN5spark9WiFiClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
 23fef82:	2200      	movs	r2, #0
 23fef84:	6840      	ldr	r0, [r0, #4]
 23fef86:	f081 0101 	eor.w	r1, r1, #1
 23fef8a:	f7fe bf23 	b.w	23fddd4 <network_listen>

023fef8e <_ZN5spark9WiFiClass3offEv>:
        network_off(*this, 0, 0, NULL);
 23fef8e:	2300      	movs	r3, #0
 23fef90:	6840      	ldr	r0, [r0, #4]
 23fef92:	461a      	mov	r2, r3
 23fef94:	4619      	mov	r1, r3
 23fef96:	f7fe bf0f 	b.w	23fddb8 <network_off>

023fef9a <_ZN5spark9WiFiClass2onEv>:
        network_on(*this, 0, 0, NULL);
 23fef9a:	2300      	movs	r3, #0
 23fef9c:	6840      	ldr	r0, [r0, #4]
 23fef9e:	461a      	mov	r2, r3
 23fefa0:	4619      	mov	r1, r3
 23fefa2:	f7fe befb 	b.w	23fdd9c <network_on>

023fefa6 <_ZN5spark9WiFiClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
 23fefa6:	2200      	movs	r2, #0
 23fefa8:	6840      	ldr	r0, [r0, #4]
 23fefaa:	4611      	mov	r1, r2
 23fefac:	f7fe becc 	b.w	23fdd48 <network_connecting>

023fefb0 <_ZN5spark9WiFiClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
 23fefb0:	2200      	movs	r2, #0
 23fefb2:	2102      	movs	r1, #2
 23fefb4:	6840      	ldr	r0, [r0, #4]
 23fefb6:	f7fe bed5 	b.w	23fdd64 <network_disconnect>

023fefba <_ZN5spark9WiFiClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
 23fefba:	2300      	movs	r3, #0
 23fefbc:	6840      	ldr	r0, [r0, #4]
 23fefbe:	461a      	mov	r2, r3
 23fefc0:	f7fe beb4 	b.w	23fdd2c <network_connect>

023fefc4 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t>:
 23fefc4:	2204      	movs	r2, #4
 23fefc6:	4b02      	ldr	r3, [pc, #8]	; (23fefd0 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0xc>)
 23fefc8:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_WIFI_STA) {
 23fefca:	4a02      	ldr	r2, [pc, #8]	; (23fefd4 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0x10>)
 23fefcc:	601a      	str	r2, [r3, #0]
the same way.
*****************************************************************************/

    WiFiClass WiFi;
    // NetworkClass& Network = WiFi;
}
 23fefce:	4770      	bx	lr
 23fefd0:	1007aee0 	.word	0x1007aee0
 23fefd4:	023fff30 	.word	0x023fff30

023fefd8 <_Z11str_reversePc>:

//------------------------------------------------------------------------------------------
#define BUFSIZE (sizeof(long) * 8 + 1)

//utility function used by ultoa()
__attribute__((weak)) void str_reverse(char* buffer){
 23fefd8:	b510      	push	{r4, lr}
 23fefda:	4604      	mov	r4, r0
	char *i, *j;
	char c;
	i=buffer;
	j=buffer + strlen(buffer)-1;
 23fefdc:	f7fc fae8 	bl	23fb5b0 <strlen>
 23fefe0:	3801      	subs	r0, #1
 23fefe2:	1823      	adds	r3, r4, r0
 23fefe4:	4620      	mov	r0, r4
	while(i<j){
 23fefe6:	4283      	cmp	r3, r0
 23fefe8:	d906      	bls.n	23feff8 <_Z11str_reversePc+0x20>
		c = *i;
 23fefea:	7802      	ldrb	r2, [r0, #0]
		*i = *j;
 23fefec:	7819      	ldrb	r1, [r3, #0]
 23fefee:	f800 1b01 	strb.w	r1, [r0], #1
		*j = c;
 23feff2:	f803 2901 	strb.w	r2, [r3], #-1
	while(i<j){
 23feff6:	e7f6      	b.n	23fefe6 <_Z11str_reversePc+0xe>
		++i;
		--j;
	}
}
 23feff8:	bd10      	pop	{r4, pc}

023feffa <ultoa>:
      memcpy(head, ++tail, i);
      return str;
}

//convert unsigned long to string
__attribute__((weak)) char* ultoa(unsigned long a, char* buffer, int radix, char pad){
 23feffa:	b570      	push	{r4, r5, r6, lr}
 23feffc:	460c      	mov	r4, r1
	if(radix<2 || radix>36){
 23feffe:	1e91      	subs	r1, r2, #2
 23ff000:	2922      	cmp	r1, #34	; 0x22
 23ff002:	d81d      	bhi.n	23ff040 <ultoa+0x46>
		return NULL;
	}
	char* ptr=buffer;
 23ff004:	4625      	mov	r5, r4

	div_t result;
	while(a){
 23ff006:	b930      	cbnz	r0, 23ff016 <ultoa+0x1c>
            }
            ++ptr;
            a = result.quot;
	}
        while (ptr < buffer+pad)
            *ptr++ = '0';
 23ff008:	2230      	movs	r2, #48	; 0x30
        while (ptr < buffer+pad)
 23ff00a:	4423      	add	r3, r4
 23ff00c:	429d      	cmp	r5, r3
 23ff00e:	d210      	bcs.n	23ff032 <ultoa+0x38>
            *ptr++ = '0';
 23ff010:	f805 2b01 	strb.w	r2, [r5], #1
        while (ptr < buffer+pad)
 23ff014:	e7fa      	b.n	23ff00c <ultoa+0x12>
            result.quot = a/radix;
 23ff016:	fbb0 f6f2 	udiv	r6, r0, r2
            result.rem = a%radix;
 23ff01a:	fb02 0016 	mls	r0, r2, r6, r0
            *ptr = result.rem;
 23ff01e:	b2c1      	uxtb	r1, r0
            if(result.rem<10){
 23ff020:	2809      	cmp	r0, #9
                *ptr += '0';
 23ff022:	bf94      	ite	ls
 23ff024:	3130      	addls	r1, #48	; 0x30
                *ptr += 'a'-10;
 23ff026:	3157      	addhi	r1, #87	; 0x57
 23ff028:	b2c9      	uxtb	r1, r1
            a = result.quot;
 23ff02a:	4630      	mov	r0, r6
 23ff02c:	f805 1b01 	strb.w	r1, [r5], #1
	while(a){
 23ff030:	e7e9      	b.n	23ff006 <ultoa+0xc>

	*ptr = '\0';
 23ff032:	2300      	movs	r3, #0
	str_reverse(buffer);
 23ff034:	4620      	mov	r0, r4
	*ptr = '\0';
 23ff036:	702b      	strb	r3, [r5, #0]
	str_reverse(buffer);
 23ff038:	f7ff ffce 	bl	23fefd8 <_Z11str_reversePc>
	return buffer;
 23ff03c:	4620      	mov	r0, r4
}
 23ff03e:	bd70      	pop	{r4, r5, r6, pc}
		return NULL;
 23ff040:	2000      	movs	r0, #0
 23ff042:	e7fc      	b.n	23ff03e <ultoa+0x44>

023ff044 <itoa>:

__attribute__((weak)) char* itoa(int a, char* buffer, int radix){
 23ff044:	b538      	push	{r3, r4, r5, lr}
	if(a<0){
 23ff046:	1e03      	subs	r3, r0, #0
__attribute__((weak)) char* itoa(int a, char* buffer, int radix){
 23ff048:	460c      	mov	r4, r1
 23ff04a:	4615      	mov	r5, r2
	if(a<0){
 23ff04c:	da0d      	bge.n	23ff06a <itoa+0x26>
		*buffer = '-';
 23ff04e:	222d      	movs	r2, #45	; 0x2d
		unsigned v = a==INT_MIN ? ((unsigned)INT_MAX+1) : -a;
 23ff050:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 23ff054:	bf0c      	ite	eq
 23ff056:	4618      	moveq	r0, r3
 23ff058:	4258      	negne	r0, r3
		ultoa((unsigned)v, buffer + 1, radix);
 23ff05a:	2301      	movs	r3, #1
		*buffer = '-';
 23ff05c:	700a      	strb	r2, [r1, #0]
		ultoa((unsigned)v, buffer + 1, radix);
 23ff05e:	462a      	mov	r2, r5
 23ff060:	4419      	add	r1, r3
	}else{
		ultoa(a, buffer, radix);
 23ff062:	f7ff ffca 	bl	23feffa <ultoa>
	}
	return buffer;
}
 23ff066:	4620      	mov	r0, r4
 23ff068:	bd38      	pop	{r3, r4, r5, pc}
		ultoa(a, buffer, radix);
 23ff06a:	2301      	movs	r3, #1
 23ff06c:	e7f9      	b.n	23ff062 <itoa+0x1e>
	...

023ff070 <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_>:

void module_user_init_hook()
{
#if HAL_PLATFORM_NEWLIB
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
        _impure_ptr = r;
 23ff070:	4b01      	ldr	r3, [pc, #4]	; (23ff078 <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_+0x8>)
 23ff072:	6018      	str	r0, [r3, #0]
    }, nullptr);
 23ff074:	4770      	bx	lr
 23ff076:	bf00      	nop
 23ff078:	1007ad50 	.word	0x1007ad50

023ff07c <serialEventRun>:
{
 23ff07c:	b508      	push	{r3, lr}
    if (serialEvent && Serial.available()>0)
 23ff07e:	4b0f      	ldr	r3, [pc, #60]	; (23ff0bc <serialEventRun+0x40>)
 23ff080:	b143      	cbz	r3, 23ff094 <serialEventRun+0x18>
 23ff082:	f7ff ff47 	bl	23fef14 <_Z16_fetch_usbserialv>
 23ff086:	6803      	ldr	r3, [r0, #0]
 23ff088:	691b      	ldr	r3, [r3, #16]
 23ff08a:	4798      	blx	r3
 23ff08c:	2800      	cmp	r0, #0
 23ff08e:	dd01      	ble.n	23ff094 <serialEventRun+0x18>
        serialEvent();
 23ff090:	e000      	b.n	23ff094 <serialEventRun+0x18>
 23ff092:	bf00      	nop
    if (serialEvent1 && Serial1.available()>0)
 23ff094:	4b0a      	ldr	r3, [pc, #40]	; (23ff0c0 <serialEventRun+0x44>)
 23ff096:	b143      	cbz	r3, 23ff0aa <serialEventRun+0x2e>
 23ff098:	f000 f96a 	bl	23ff370 <_Z22__fetch_global_Serial1v>
 23ff09c:	6803      	ldr	r3, [r0, #0]
 23ff09e:	691b      	ldr	r3, [r3, #16]
 23ff0a0:	4798      	blx	r3
 23ff0a2:	2800      	cmp	r0, #0
 23ff0a4:	dd01      	ble.n	23ff0aa <serialEventRun+0x2e>
        serialEvent1();
 23ff0a6:	e000      	b.n	23ff0aa <serialEventRun+0x2e>
 23ff0a8:	bf00      	nop
    if (serialEvent2) serialEventRun2();
 23ff0aa:	4b06      	ldr	r3, [pc, #24]	; (23ff0c4 <serialEventRun+0x48>)
 23ff0ac:	b10b      	cbz	r3, 23ff0b2 <serialEventRun+0x36>
 23ff0ae:	f000 f9a5 	bl	23ff3fc <_Z15serialEventRun2v>
    if (serialEvent3) serialEventRun3();
 23ff0b2:	4b05      	ldr	r3, [pc, #20]	; (23ff0c8 <serialEventRun+0x4c>)
 23ff0b4:	b10b      	cbz	r3, 23ff0ba <serialEventRun+0x3e>
 23ff0b6:	f000 f9d7 	bl	23ff468 <_Z15serialEventRun3v>
}
 23ff0ba:	bd08      	pop	{r3, pc}
	...

023ff0cc <_post_loop>:
{
 23ff0cc:	b508      	push	{r3, lr}
	serialEventRun();
 23ff0ce:	f7ff ffd5 	bl	23ff07c <serialEventRun>
		return !thread || !thread->isRunning();
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
 23ff0d2:	f7fe fb61 	bl	23fd798 <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
 23ff0d6:	4b01      	ldr	r3, [pc, #4]	; (23ff0dc <_post_loop+0x10>)
 23ff0d8:	6018      	str	r0, [r3, #0]
}
 23ff0da:	bd08      	pop	{r3, pc}
 23ff0dc:	1007aef0 	.word	0x1007aef0

023ff0e0 <_Z33system_initialize_user_backup_ramv>:
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
 23ff0e0:	4805      	ldr	r0, [pc, #20]	; (23ff0f8 <_Z33system_initialize_user_backup_ramv+0x18>)
 23ff0e2:	4a06      	ldr	r2, [pc, #24]	; (23ff0fc <_Z33system_initialize_user_backup_ramv+0x1c>)
{
 23ff0e4:	b508      	push	{r3, lr}
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
 23ff0e6:	1a12      	subs	r2, r2, r0
 23ff0e8:	4905      	ldr	r1, [pc, #20]	; (23ff100 <_Z33system_initialize_user_backup_ramv+0x20>)
 23ff0ea:	f000 f9dc 	bl	23ff4a6 <memcpy>
    __backup_sram_signature = signature;
 23ff0ee:	4b05      	ldr	r3, [pc, #20]	; (23ff104 <_Z33system_initialize_user_backup_ramv+0x24>)
 23ff0f0:	4a05      	ldr	r2, [pc, #20]	; (23ff108 <_Z33system_initialize_user_backup_ramv+0x28>)
 23ff0f2:	601a      	str	r2, [r3, #0]
}
 23ff0f4:	bd08      	pop	{r3, pc}
 23ff0f6:	bf00      	nop
 23ff0f8:	1007b400 	.word	0x1007b400
 23ff0fc:	1007b404 	.word	0x1007b404
 23ff100:	085ff79c 	.word	0x085ff79c
 23ff104:	1007b400 	.word	0x1007b400
 23ff108:	9a271c1e 	.word	0x9a271c1e

023ff10c <_Z27ctrl_request_custom_handlerP12ctrl_request>:
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
 23ff10c:	2300      	movs	r3, #0
void __attribute((weak)) ctrl_request_custom_handler(ctrl_request* req) {
 23ff10e:	b507      	push	{r0, r1, r2, lr}
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
 23ff110:	461a      	mov	r2, r3
 23ff112:	f06f 0177 	mvn.w	r1, #119	; 0x77
 23ff116:	9300      	str	r3, [sp, #0]
 23ff118:	f7fe fdd0 	bl	23fdcbc <system_ctrl_set_result>
}
 23ff11c:	b003      	add	sp, #12
 23ff11e:	f85d fb04 	ldr.w	pc, [sp], #4
	...

023ff124 <_ZL20ctrl_request_handlerP12ctrl_request>:
static void ctrl_request_handler(ctrl_request* req) {
 23ff124:	b507      	push	{r0, r1, r2, lr}
    switch (req->type) {
 23ff126:	8843      	ldrh	r3, [r0, #2]
 23ff128:	2b0a      	cmp	r3, #10
 23ff12a:	d008      	beq.n	23ff13e <_ZL20ctrl_request_handlerP12ctrl_request+0x1a>
 23ff12c:	2b50      	cmp	r3, #80	; 0x50
 23ff12e:	d10b      	bne.n	23ff148 <_ZL20ctrl_request_handlerP12ctrl_request+0x24>
        if (log_process_ctrl_request_callback) {
 23ff130:	4b09      	ldr	r3, [pc, #36]	; (23ff158 <_ZL20ctrl_request_handlerP12ctrl_request+0x34>)
 23ff132:	681b      	ldr	r3, [r3, #0]
 23ff134:	b14b      	cbz	r3, 23ff14a <_ZL20ctrl_request_handlerP12ctrl_request+0x26>
}
 23ff136:	b003      	add	sp, #12
 23ff138:	f85d eb04 	ldr.w	lr, [sp], #4
            log_process_ctrl_request_callback(req);
 23ff13c:	4718      	bx	r3
        ctrl_request_custom_handler(req);
 23ff13e:	f7ff ffe5 	bl	23ff10c <_Z27ctrl_request_custom_handlerP12ctrl_request>
}
 23ff142:	b003      	add	sp, #12
 23ff144:	f85d fb04 	ldr.w	pc, [sp], #4
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
 23ff148:	2300      	movs	r3, #0
 23ff14a:	461a      	mov	r2, r3
 23ff14c:	f06f 0177 	mvn.w	r1, #119	; 0x77
 23ff150:	9300      	str	r3, [sp, #0]
 23ff152:	f7fe fdb3 	bl	23fdcbc <system_ctrl_set_result>
}
 23ff156:	e7f4      	b.n	23ff142 <_ZL20ctrl_request_handlerP12ctrl_request+0x1e>
 23ff158:	1007aeec 	.word	0x1007aeec

023ff15c <module_user_init_hook>:
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
 23ff15c:	2100      	movs	r1, #0
{
 23ff15e:	b510      	push	{r4, lr}
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
 23ff160:	4811      	ldr	r0, [pc, #68]	; (23ff1a8 <module_user_init_hook+0x4c>)
 23ff162:	f7fe fedf 	bl	23fdf24 <newlib_impure_ptr_callback>
#endif // HAL_PLATFORM_NEWLIB

#if HAL_PLATFORM_BACKUP_RAM
    backup_ram_was_valid_ = __backup_sram_signature == signature;
 23ff166:	4b11      	ldr	r3, [pc, #68]	; (23ff1ac <module_user_init_hook+0x50>)
 23ff168:	681a      	ldr	r2, [r3, #0]
 23ff16a:	4b11      	ldr	r3, [pc, #68]	; (23ff1b0 <module_user_init_hook+0x54>)
 23ff16c:	429a      	cmp	r2, r3
 23ff16e:	bf0c      	ite	eq
 23ff170:	2201      	moveq	r2, #1
 23ff172:	2200      	movne	r2, #0
 23ff174:	4b0f      	ldr	r3, [pc, #60]	; (23ff1b4 <module_user_init_hook+0x58>)
 23ff176:	701a      	strb	r2, [r3, #0]
    if (!backup_ram_was_valid_) {
 23ff178:	d001      	beq.n	23ff17e <module_user_init_hook+0x22>
        system_initialize_user_backup_ram();
 23ff17a:	f7ff ffb1 	bl	23ff0e0 <_Z33system_initialize_user_backup_ramv>
    }
#endif

#if HAL_PLATFORM_RNG
    // Initialize the default stdlib PRNG using hardware RNG as a seed
    const uint32_t seed = HAL_RNG_GetRandomNumber();
 23ff17e:	f7fe faef 	bl	23fd760 <HAL_RNG_GetRandomNumber>
 23ff182:	4604      	mov	r4, r0
    srand(seed);
 23ff184:	f000 f9a4 	bl	23ff4d0 <srand>

    // If the user defines random_seed_from_cloud, call it with a seed value
    // generated by a hardware RNG as well.
    if (random_seed_from_cloud) {
 23ff188:	4b0b      	ldr	r3, [pc, #44]	; (23ff1b8 <module_user_init_hook+0x5c>)
 23ff18a:	b113      	cbz	r3, 23ff192 <module_user_init_hook+0x36>
        random_seed_from_cloud(seed);
 23ff18c:	4620      	mov	r0, r4
 23ff18e:	e000      	b.n	23ff192 <module_user_init_hook+0x36>
 23ff190:	bf00      	nop
    }
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);
 23ff192:	2100      	movs	r1, #0
 23ff194:	4808      	ldr	r0, [pc, #32]	; (23ff1b8 <module_user_init_hook+0x5c>)
 23ff196:	f7fe fdbb 	bl	23fdd10 <spark_set_random_seed_from_cloud_handler>

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
}
 23ff19a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
 23ff19e:	2100      	movs	r1, #0
 23ff1a0:	4806      	ldr	r0, [pc, #24]	; (23ff1bc <module_user_init_hook+0x60>)
 23ff1a2:	f7fe bd7d 	b.w	23fdca0 <system_ctrl_set_app_request_handler>
 23ff1a6:	bf00      	nop
 23ff1a8:	023ff071 	.word	0x023ff071
 23ff1ac:	1007b400 	.word	0x1007b400
 23ff1b0:	9a271c1e 	.word	0x9a271c1e
 23ff1b4:	1007aee8 	.word	0x1007aee8
 23ff1b8:	00000000 	.word	0x00000000
 23ff1bc:	023ff125 	.word	0x023ff125

023ff1c0 <pinAvailable>:
/*
 * @brief Perform safety check on desired pin to see if it's already
 * being used.  Return 0 if used, otherwise return 1 if available.
 */
bool pinAvailable(uint16_t pin) {
  if (pin >= TOTAL_PINS) {
 23ff1c0:	281b      	cmp	r0, #27
bool pinAvailable(uint16_t pin) {
 23ff1c2:	b537      	push	{r0, r1, r2, r4, r5, lr}
 23ff1c4:	4604      	mov	r4, r0
  if (pin >= TOTAL_PINS) {
 23ff1c6:	d902      	bls.n	23ff1ce <pinAvailable+0xe>
    return false;
 23ff1c8:	2000      	movs	r0, #0
    return false; // 'pin' is used
  }
#endif

  return true; // 'pin' is available
}
 23ff1ca:	b003      	add	sp, #12
 23ff1cc:	bd30      	pop	{r4, r5, pc}
  if((pin == SCK || pin == MOSI || pin == MISO) && hal_spi_is_enabled(SPI.interface()) == true)
 23ff1ce:	f1a0 030f 	sub.w	r3, r0, #15
 23ff1d2:	2b02      	cmp	r3, #2
 23ff1d4:	d90b      	bls.n	23ff1ee <pinAvailable+0x2e>
  if((pin == SCL || pin == SDA) && hal_i2c_is_enabled(Wire.interface(), nullptr) == true)
 23ff1d6:	2801      	cmp	r0, #1
 23ff1d8:	d821      	bhi.n	23ff21e <pinAvailable+0x5e>
 23ff1da:	f000 f875 	bl	23ff2c8 <_Z19__fetch_global_Wirev>
 23ff1de:	2100      	movs	r1, #0
 23ff1e0:	7c00      	ldrb	r0, [r0, #16]
 23ff1e2:	f7fe fb81 	bl	23fd8e8 <hal_i2c_is_enabled>
  if((pin == RX || pin == TX) && hal_usart_is_enabled(Serial1.interface()) == true)
 23ff1e6:	f080 0001 	eor.w	r0, r0, #1
 23ff1ea:	b2c0      	uxtb	r0, r0
 23ff1ec:	e7ed      	b.n	23ff1ca <pinAvailable+0xa>

template <hal_spi_interface_t Interface>
class SpiProxy {
public:
    static SPIClass& instance() {
        static SPIClass instance(Interface);
 23ff1ee:	4d11      	ldr	r5, [pc, #68]	; (23ff234 <pinAvailable+0x74>)
 23ff1f0:	e8d5 1f8f 	ldab	r1, [r5]
 23ff1f4:	f011 0101 	ands.w	r1, r1, #1
 23ff1f8:	d10b      	bne.n	23ff212 <pinAvailable+0x52>
 23ff1fa:	4628      	mov	r0, r5
 23ff1fc:	9101      	str	r1, [sp, #4]
 23ff1fe:	f7fc fa0f 	bl	23fb620 <__cxa_guard_acquire>
 23ff202:	9901      	ldr	r1, [sp, #4]
 23ff204:	b128      	cbz	r0, 23ff212 <pinAvailable+0x52>
 23ff206:	480c      	ldr	r0, [pc, #48]	; (23ff238 <pinAvailable+0x78>)
 23ff208:	f7ff fbb8 	bl	23fe97c <_ZN8SPIClassC1E19hal_spi_interface_t>
 23ff20c:	4628      	mov	r0, r5
 23ff20e:	f7fc fa0c 	bl	23fb62a <__cxa_guard_release>
  if((pin == SCK || pin == MOSI || pin == MISO) && hal_spi_is_enabled(SPI.interface()) == true)
 23ff212:	4b09      	ldr	r3, [pc, #36]	; (23ff238 <pinAvailable+0x78>)
 23ff214:	7818      	ldrb	r0, [r3, #0]
 23ff216:	f7fe fbe5 	bl	23fd9e4 <hal_spi_is_enabled>
 23ff21a:	2800      	cmp	r0, #0
 23ff21c:	d1d4      	bne.n	23ff1c8 <pinAvailable+0x8>
  if((pin == RX || pin == TX) && hal_usart_is_enabled(Serial1.interface()) == true)
 23ff21e:	3c08      	subs	r4, #8
 23ff220:	2c01      	cmp	r4, #1
 23ff222:	d805      	bhi.n	23ff230 <pinAvailable+0x70>
 23ff224:	f000 f8a4 	bl	23ff370 <_Z22__fetch_global_Serial1v>
 23ff228:	7c00      	ldrb	r0, [r0, #16]
 23ff22a:	f7fe fc67 	bl	23fdafc <hal_usart_is_enabled>
 23ff22e:	e7da      	b.n	23ff1e6 <pinAvailable+0x26>
  return true; // 'pin' is available
 23ff230:	2001      	movs	r0, #1
 23ff232:	e7ca      	b.n	23ff1ca <pinAvailable+0xa>
 23ff234:	1007ae80 	.word	0x1007ae80
 23ff238:	1007ae84 	.word	0x1007ae84

023ff23c <pinMode>:
  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
 23ff23c:	281b      	cmp	r0, #27
{
 23ff23e:	b538      	push	{r3, r4, r5, lr}
 23ff240:	4604      	mov	r4, r0
 23ff242:	460d      	mov	r5, r1
  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
 23ff244:	d80a      	bhi.n	23ff25c <pinMode+0x20>
 23ff246:	29ff      	cmp	r1, #255	; 0xff
 23ff248:	d008      	beq.n	23ff25c <pinMode+0x20>
  if( !pinAvailable(pin) ) {
 23ff24a:	f7ff ffb9 	bl	23ff1c0 <pinAvailable>
 23ff24e:	b128      	cbz	r0, 23ff25c <pinMode+0x20>
  hal_gpio_mode(pin, setMode);
 23ff250:	4629      	mov	r1, r5
 23ff252:	4620      	mov	r0, r4
}
 23ff254:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  hal_gpio_mode(pin, setMode);
 23ff258:	f7fe baac 	b.w	23fd7b4 <hal_gpio_mode>
}
 23ff25c:	bd38      	pop	{r3, r4, r5, pc}

023ff25e <digitalWrite>:

/*
 * @brief Sets a GPIO pin to HIGH or LOW.
 */
void digitalWrite(hal_pin_t pin, uint8_t value)
{
 23ff25e:	b538      	push	{r3, r4, r5, lr}
 23ff260:	4604      	mov	r4, r0
 23ff262:	460d      	mov	r5, r1
    PinMode mode = hal_gpio_get_mode(pin);
 23ff264:	f7fe fab4 	bl	23fd7d0 <hal_gpio_get_mode>
    if (mode==PIN_MODE_NONE || is_input_mode(mode))
 23ff268:	28ff      	cmp	r0, #255	; 0xff
 23ff26a:	d010      	beq.n	23ff28e <digitalWrite+0x30>
            mode == INPUT_PULLDOWN ||
 23ff26c:	2806      	cmp	r0, #6
 23ff26e:	d804      	bhi.n	23ff27a <digitalWrite+0x1c>
 23ff270:	234d      	movs	r3, #77	; 0x4d
 23ff272:	fa23 f000 	lsr.w	r0, r3, r0
 23ff276:	07c3      	lsls	r3, r0, #31
 23ff278:	d409      	bmi.n	23ff28e <digitalWrite+0x30>
        return;
  // Safety check
  if( !pinAvailable(pin) ) {
 23ff27a:	4620      	mov	r0, r4
 23ff27c:	f7ff ffa0 	bl	23ff1c0 <pinAvailable>
 23ff280:	b128      	cbz	r0, 23ff28e <digitalWrite+0x30>
    return;
  }

  hal_gpio_write(pin, value);
 23ff282:	4629      	mov	r1, r5
 23ff284:	4620      	mov	r0, r4
}
 23ff286:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  hal_gpio_write(pin, value);
 23ff28a:	f7fe baaf 	b.w	23fd7ec <hal_gpio_write>
}
 23ff28e:	bd38      	pop	{r3, r4, r5, pc}

023ff290 <__tcf_0>:
}
#endif

TwoWire& __fetch_global_Wire()
{
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
 23ff290:	4770      	bx	lr
	...

023ff294 <_Z17acquireWireBufferv>:
{
 23ff294:	b538      	push	{r3, r4, r5, lr}
	hal_i2c_config_t config = {
 23ff296:	4b0a      	ldr	r3, [pc, #40]	; (23ff2c0 <_Z17acquireWireBufferv+0x2c>)
{
 23ff298:	4604      	mov	r4, r0
	hal_i2c_config_t config = {
 23ff29a:	6003      	str	r3, [r0, #0]
 23ff29c:	2301      	movs	r3, #1
		.rx_buffer = new (std::nothrow) uint8_t[i2c_buffer_size],
 23ff29e:	4909      	ldr	r1, [pc, #36]	; (23ff2c4 <_Z17acquireWireBufferv+0x30>)
	hal_i2c_config_t config = {
 23ff2a0:	6143      	str	r3, [r0, #20]
		.rx_buffer = new (std::nothrow) uint8_t[i2c_buffer_size],
 23ff2a2:	2020      	movs	r0, #32
 23ff2a4:	f000 f8f4 	bl	23ff490 <_ZnajRKSt9nothrow_t>
	};
 23ff2a8:	2520      	movs	r5, #32
 23ff2aa:	6060      	str	r0, [r4, #4]
		.tx_buffer = new (std::nothrow) uint8_t[i2c_buffer_size],
 23ff2ac:	4905      	ldr	r1, [pc, #20]	; (23ff2c4 <_Z17acquireWireBufferv+0x30>)
 23ff2ae:	4628      	mov	r0, r5
	};
 23ff2b0:	60a5      	str	r5, [r4, #8]
		.tx_buffer = new (std::nothrow) uint8_t[i2c_buffer_size],
 23ff2b2:	f000 f8ed 	bl	23ff490 <_ZnajRKSt9nothrow_t>
	};
 23ff2b6:	e9c4 0503 	strd	r0, r5, [r4, #12]
}
 23ff2ba:	4620      	mov	r0, r4
 23ff2bc:	bd38      	pop	{r3, r4, r5, pc}
 23ff2be:	bf00      	nop
 23ff2c0:	00010018 	.word	0x00010018
 23ff2c4:	023fff64 	.word	0x023fff64

023ff2c8 <_Z19__fetch_global_Wirev>:
{
 23ff2c8:	b530      	push	{r4, r5, lr}
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
 23ff2ca:	4d0e      	ldr	r5, [pc, #56]	; (23ff304 <_Z19__fetch_global_Wirev+0x3c>)
{
 23ff2cc:	b087      	sub	sp, #28
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
 23ff2ce:	e8d5 1f8f 	ldab	r1, [r5]
 23ff2d2:	f011 0401 	ands.w	r4, r1, #1
 23ff2d6:	d111      	bne.n	23ff2fc <_Z19__fetch_global_Wirev+0x34>
 23ff2d8:	4628      	mov	r0, r5
 23ff2da:	f7fc f9a1 	bl	23fb620 <__cxa_guard_acquire>
 23ff2de:	b168      	cbz	r0, 23ff2fc <_Z19__fetch_global_Wirev+0x34>
 23ff2e0:	4668      	mov	r0, sp
 23ff2e2:	f7ff ffd7 	bl	23ff294 <_Z17acquireWireBufferv>
 23ff2e6:	466a      	mov	r2, sp
 23ff2e8:	4621      	mov	r1, r4
 23ff2ea:	4807      	ldr	r0, [pc, #28]	; (23ff308 <_Z19__fetch_global_Wirev+0x40>)
 23ff2ec:	f7ff f962 	bl	23fe5b4 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>
 23ff2f0:	4628      	mov	r0, r5
 23ff2f2:	f7fc f99a 	bl	23fb62a <__cxa_guard_release>
 23ff2f6:	4805      	ldr	r0, [pc, #20]	; (23ff30c <_Z19__fetch_global_Wirev+0x44>)
 23ff2f8:	f000 f8cf 	bl	23ff49a <atexit>
	return wire;
}
 23ff2fc:	4802      	ldr	r0, [pc, #8]	; (23ff308 <_Z19__fetch_global_Wirev+0x40>)
 23ff2fe:	b007      	add	sp, #28
 23ff300:	bd30      	pop	{r4, r5, pc}
 23ff302:	bf00      	nop
 23ff304:	1007aef4 	.word	0x1007aef4
 23ff308:	1007aef8 	.word	0x1007aef8
 23ff30c:	023ff291 	.word	0x023ff291

023ff310 <__tcf_0>:
}
#endif

USARTSerial& __fetch_global_Serial1()
{
    static USARTSerial serial1(HAL_USART_SERIAL1, acquireSerial1Buffer());
 23ff310:	4770      	bx	lr
	...

023ff314 <_ZN12_GLOBAL__N_118defaultUsartConfigEv>:
hal_usart_buffer_config_t defaultUsartConfig() {
 23ff314:	b538      	push	{r3, r4, r5, lr}
    hal_usart_buffer_config_t config = {
 23ff316:	2514      	movs	r5, #20
hal_usart_buffer_config_t defaultUsartConfig() {
 23ff318:	4604      	mov	r4, r0
    hal_usart_buffer_config_t config = {
 23ff31a:	462a      	mov	r2, r5
 23ff31c:	2100      	movs	r1, #0
 23ff31e:	f000 f8cf 	bl	23ff4c0 <memset>
 23ff322:	8025      	strh	r5, [r4, #0]
 23ff324:	2540      	movs	r5, #64	; 0x40
        .rx_buffer = new (std::nothrow) uint8_t[bufferSize],
 23ff326:	4907      	ldr	r1, [pc, #28]	; (23ff344 <_ZN12_GLOBAL__N_118defaultUsartConfigEv+0x30>)
 23ff328:	4628      	mov	r0, r5
    hal_usart_buffer_config_t config = {
 23ff32a:	8125      	strh	r5, [r4, #8]
 23ff32c:	8225      	strh	r5, [r4, #16]
        .rx_buffer = new (std::nothrow) uint8_t[bufferSize],
 23ff32e:	f000 f8af 	bl	23ff490 <_ZnajRKSt9nothrow_t>
        .tx_buffer = new (std::nothrow) uint8_t[bufferSize],
 23ff332:	4904      	ldr	r1, [pc, #16]	; (23ff344 <_ZN12_GLOBAL__N_118defaultUsartConfigEv+0x30>)
    };
 23ff334:	6060      	str	r0, [r4, #4]
        .tx_buffer = new (std::nothrow) uint8_t[bufferSize],
 23ff336:	4628      	mov	r0, r5
 23ff338:	f000 f8aa 	bl	23ff490 <_ZnajRKSt9nothrow_t>
    };
 23ff33c:	60e0      	str	r0, [r4, #12]
}
 23ff33e:	4620      	mov	r0, r4
 23ff340:	bd38      	pop	{r3, r4, r5, pc}
 23ff342:	bf00      	nop
 23ff344:	023fff64 	.word	0x023fff64

023ff348 <__tcf_2>:
 23ff348:	4770      	bx	lr

023ff34a <__tcf_1>:
 23ff34a:	4770      	bx	lr

023ff34c <_Z20acquireSerial1Bufferv>:
{
 23ff34c:	b510      	push	{r4, lr}
 23ff34e:	4604      	mov	r4, r0
    return defaultUsartConfig();
 23ff350:	f7ff ffe0 	bl	23ff314 <_ZN12_GLOBAL__N_118defaultUsartConfigEv>
}
 23ff354:	4620      	mov	r0, r4
 23ff356:	bd10      	pop	{r4, pc}

023ff358 <_Z20acquireSerial2Bufferv>:
 23ff358:	b510      	push	{r4, lr}
 23ff35a:	4604      	mov	r4, r0
 23ff35c:	f7ff ffda 	bl	23ff314 <_ZN12_GLOBAL__N_118defaultUsartConfigEv>
 23ff360:	4620      	mov	r0, r4
 23ff362:	bd10      	pop	{r4, pc}

023ff364 <_Z20acquireSerial3Bufferv>:
 23ff364:	b510      	push	{r4, lr}
 23ff366:	4604      	mov	r4, r0
 23ff368:	f7ff ffd4 	bl	23ff314 <_ZN12_GLOBAL__N_118defaultUsartConfigEv>
 23ff36c:	4620      	mov	r0, r4
 23ff36e:	bd10      	pop	{r4, pc}

023ff370 <_Z22__fetch_global_Serial1v>:
{
 23ff370:	b530      	push	{r4, r5, lr}
    static USARTSerial serial1(HAL_USART_SERIAL1, acquireSerial1Buffer());
 23ff372:	4d0e      	ldr	r5, [pc, #56]	; (23ff3ac <_Z22__fetch_global_Serial1v+0x3c>)
{
 23ff374:	b087      	sub	sp, #28
    static USARTSerial serial1(HAL_USART_SERIAL1, acquireSerial1Buffer());
 23ff376:	e8d5 1f8f 	ldab	r1, [r5]
 23ff37a:	f011 0401 	ands.w	r4, r1, #1
 23ff37e:	d111      	bne.n	23ff3a4 <_Z22__fetch_global_Serial1v+0x34>
 23ff380:	4628      	mov	r0, r5
 23ff382:	f7fc f94d 	bl	23fb620 <__cxa_guard_acquire>
 23ff386:	b168      	cbz	r0, 23ff3a4 <_Z22__fetch_global_Serial1v+0x34>
 23ff388:	a801      	add	r0, sp, #4
 23ff38a:	f7ff ffdf 	bl	23ff34c <_Z20acquireSerial1Bufferv>
 23ff38e:	4621      	mov	r1, r4
 23ff390:	aa01      	add	r2, sp, #4
 23ff392:	4807      	ldr	r0, [pc, #28]	; (23ff3b0 <_Z22__fetch_global_Serial1v+0x40>)
 23ff394:	f7ff fd48 	bl	23fee28 <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t>
 23ff398:	4628      	mov	r0, r5
 23ff39a:	f7fc f946 	bl	23fb62a <__cxa_guard_release>
 23ff39e:	4805      	ldr	r0, [pc, #20]	; (23ff3b4 <_Z22__fetch_global_Serial1v+0x44>)
 23ff3a0:	f000 f87b 	bl	23ff49a <atexit>
    return serial1;
}
 23ff3a4:	4802      	ldr	r0, [pc, #8]	; (23ff3b0 <_Z22__fetch_global_Serial1v+0x40>)
 23ff3a6:	b007      	add	sp, #28
 23ff3a8:	bd30      	pop	{r4, r5, pc}
 23ff3aa:	bf00      	nop
 23ff3ac:	1007af0c 	.word	0x1007af0c
 23ff3b0:	1007af18 	.word	0x1007af18
 23ff3b4:	023ff311 	.word	0x023ff311

023ff3b8 <_Z22__fetch_global_Serial2v>:

#if Wiring_Serial2
USARTSerial& __fetch_global_Serial2()
{
 23ff3b8:	b510      	push	{r4, lr}
	static USARTSerial serial2(HAL_USART_SERIAL2, acquireSerial2Buffer());
 23ff3ba:	4c0d      	ldr	r4, [pc, #52]	; (23ff3f0 <_Z22__fetch_global_Serial2v+0x38>)
{
 23ff3bc:	b086      	sub	sp, #24
	static USARTSerial serial2(HAL_USART_SERIAL2, acquireSerial2Buffer());
 23ff3be:	e8d4 3f8f 	ldab	r3, [r4]
 23ff3c2:	07db      	lsls	r3, r3, #31
 23ff3c4:	d411      	bmi.n	23ff3ea <_Z22__fetch_global_Serial2v+0x32>
 23ff3c6:	4620      	mov	r0, r4
 23ff3c8:	f7fc f92a 	bl	23fb620 <__cxa_guard_acquire>
 23ff3cc:	b168      	cbz	r0, 23ff3ea <_Z22__fetch_global_Serial2v+0x32>
 23ff3ce:	a801      	add	r0, sp, #4
 23ff3d0:	f7ff ffc2 	bl	23ff358 <_Z20acquireSerial2Bufferv>
 23ff3d4:	2101      	movs	r1, #1
 23ff3d6:	aa01      	add	r2, sp, #4
 23ff3d8:	4806      	ldr	r0, [pc, #24]	; (23ff3f4 <_Z22__fetch_global_Serial2v+0x3c>)
 23ff3da:	f7ff fd25 	bl	23fee28 <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t>
 23ff3de:	4620      	mov	r0, r4
 23ff3e0:	f7fc f923 	bl	23fb62a <__cxa_guard_release>
 23ff3e4:	4804      	ldr	r0, [pc, #16]	; (23ff3f8 <_Z22__fetch_global_Serial2v+0x40>)
 23ff3e6:	f000 f858 	bl	23ff49a <atexit>
	return serial2;
}
 23ff3ea:	4802      	ldr	r0, [pc, #8]	; (23ff3f4 <_Z22__fetch_global_Serial2v+0x3c>)
 23ff3ec:	b006      	add	sp, #24
 23ff3ee:	bd10      	pop	{r4, pc}
 23ff3f0:	1007af10 	.word	0x1007af10
 23ff3f4:	1007af2c 	.word	0x1007af2c
 23ff3f8:	023ff34b 	.word	0x023ff34b

023ff3fc <_Z15serialEventRun2v>:

void serialEventRun2()
{
 23ff3fc:	b510      	push	{r4, lr}
    __handleSerialEvent(Serial2, serialEvent2);
 23ff3fe:	f7ff ffdb 	bl	23ff3b8 <_Z22__fetch_global_Serial2v>

inline void __handleSerialEvent(USARTSerial& serial, void (*handler)(void)) __attribute__((always_inline));

inline void __handleSerialEvent(USARTSerial& serial, void (*handler)(void))
{
    if (handler && serial.isEnabled() && serial.available()>0)
 23ff402:	4b07      	ldr	r3, [pc, #28]	; (23ff420 <_Z15serialEventRun2v+0x24>)
 23ff404:	4604      	mov	r4, r0
 23ff406:	b153      	cbz	r3, 23ff41e <_Z15serialEventRun2v+0x22>
 23ff408:	f7ff fd22 	bl	23fee50 <_ZN11USARTSerial9isEnabledEv>
 23ff40c:	b138      	cbz	r0, 23ff41e <_Z15serialEventRun2v+0x22>
 23ff40e:	6823      	ldr	r3, [r4, #0]
 23ff410:	4620      	mov	r0, r4
 23ff412:	691b      	ldr	r3, [r3, #16]
 23ff414:	4798      	blx	r3
 23ff416:	2800      	cmp	r0, #0
 23ff418:	dd01      	ble.n	23ff41e <_Z15serialEventRun2v+0x22>
        handler();
 23ff41a:	e000      	b.n	23ff41e <_Z15serialEventRun2v+0x22>
 23ff41c:	bf00      	nop
}
 23ff41e:	bd10      	pop	{r4, pc}
 23ff420:	00000000 	.word	0x00000000

023ff424 <_Z22__fetch_global_Serial3v>:
#endif

#if Wiring_Serial3
USARTSerial& __fetch_global_Serial3()
{
 23ff424:	b510      	push	{r4, lr}
	static USARTSerial serial3(HAL_USART_SERIAL3, acquireSerial3Buffer());
 23ff426:	4c0d      	ldr	r4, [pc, #52]	; (23ff45c <_Z22__fetch_global_Serial3v+0x38>)
{
 23ff428:	b086      	sub	sp, #24
	static USARTSerial serial3(HAL_USART_SERIAL3, acquireSerial3Buffer());
 23ff42a:	e8d4 3f8f 	ldab	r3, [r4]
 23ff42e:	07db      	lsls	r3, r3, #31
 23ff430:	d411      	bmi.n	23ff456 <_Z22__fetch_global_Serial3v+0x32>
 23ff432:	4620      	mov	r0, r4
 23ff434:	f7fc f8f4 	bl	23fb620 <__cxa_guard_acquire>
 23ff438:	b168      	cbz	r0, 23ff456 <_Z22__fetch_global_Serial3v+0x32>
 23ff43a:	a801      	add	r0, sp, #4
 23ff43c:	f7ff ff92 	bl	23ff364 <_Z20acquireSerial3Bufferv>
 23ff440:	2102      	movs	r1, #2
 23ff442:	aa01      	add	r2, sp, #4
 23ff444:	4806      	ldr	r0, [pc, #24]	; (23ff460 <_Z22__fetch_global_Serial3v+0x3c>)
 23ff446:	f7ff fcef 	bl	23fee28 <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t>
 23ff44a:	4620      	mov	r0, r4
 23ff44c:	f7fc f8ed 	bl	23fb62a <__cxa_guard_release>
 23ff450:	4804      	ldr	r0, [pc, #16]	; (23ff464 <_Z22__fetch_global_Serial3v+0x40>)
 23ff452:	f000 f822 	bl	23ff49a <atexit>
	return serial3;
}
 23ff456:	4802      	ldr	r0, [pc, #8]	; (23ff460 <_Z22__fetch_global_Serial3v+0x3c>)
 23ff458:	b006      	add	sp, #24
 23ff45a:	bd10      	pop	{r4, pc}
 23ff45c:	1007af14 	.word	0x1007af14
 23ff460:	1007af40 	.word	0x1007af40
 23ff464:	023ff349 	.word	0x023ff349

023ff468 <_Z15serialEventRun3v>:

void serialEventRun3()
{
 23ff468:	b510      	push	{r4, lr}
    __handleSerialEvent(Serial3, serialEvent3);
 23ff46a:	f7ff ffdb 	bl	23ff424 <_Z22__fetch_global_Serial3v>
    if (handler && serial.isEnabled() && serial.available()>0)
 23ff46e:	4b07      	ldr	r3, [pc, #28]	; (23ff48c <_Z15serialEventRun3v+0x24>)
 23ff470:	4604      	mov	r4, r0
 23ff472:	b153      	cbz	r3, 23ff48a <_Z15serialEventRun3v+0x22>
 23ff474:	f7ff fcec 	bl	23fee50 <_ZN11USARTSerial9isEnabledEv>
 23ff478:	b138      	cbz	r0, 23ff48a <_Z15serialEventRun3v+0x22>
 23ff47a:	6823      	ldr	r3, [r4, #0]
 23ff47c:	4620      	mov	r0, r4
 23ff47e:	691b      	ldr	r3, [r3, #16]
 23ff480:	4798      	blx	r3
 23ff482:	2800      	cmp	r0, #0
 23ff484:	dd01      	ble.n	23ff48a <_Z15serialEventRun3v+0x22>
        handler();
 23ff486:	e000      	b.n	23ff48a <_Z15serialEventRun3v+0x22>
 23ff488:	bf00      	nop
}
 23ff48a:	bd10      	pop	{r4, pc}
 23ff48c:	00000000 	.word	0x00000000

023ff490 <_ZnajRKSt9nothrow_t>:
 23ff490:	f7fc b8b5 	b.w	23fb5fe <_Znaj>

023ff494 <_ZSt25__throw_bad_function_callv>:
 23ff494:	b508      	push	{r3, lr}
 23ff496:	f7fe fd1b 	bl	23fded0 <abort>

023ff49a <atexit>:
 23ff49a:	2300      	movs	r3, #0
 23ff49c:	4601      	mov	r1, r0
 23ff49e:	461a      	mov	r2, r3
 23ff4a0:	4618      	mov	r0, r3
 23ff4a2:	f000 b869 	b.w	23ff578 <__register_exitproc>

023ff4a6 <memcpy>:
 23ff4a6:	440a      	add	r2, r1
 23ff4a8:	1e43      	subs	r3, r0, #1
 23ff4aa:	4291      	cmp	r1, r2
 23ff4ac:	d100      	bne.n	23ff4b0 <memcpy+0xa>
 23ff4ae:	4770      	bx	lr
 23ff4b0:	b510      	push	{r4, lr}
 23ff4b2:	f811 4b01 	ldrb.w	r4, [r1], #1
 23ff4b6:	4291      	cmp	r1, r2
 23ff4b8:	f803 4f01 	strb.w	r4, [r3, #1]!
 23ff4bc:	d1f9      	bne.n	23ff4b2 <memcpy+0xc>
 23ff4be:	bd10      	pop	{r4, pc}

023ff4c0 <memset>:
 23ff4c0:	4402      	add	r2, r0
 23ff4c2:	4603      	mov	r3, r0
 23ff4c4:	4293      	cmp	r3, r2
 23ff4c6:	d100      	bne.n	23ff4ca <memset+0xa>
 23ff4c8:	4770      	bx	lr
 23ff4ca:	f803 1b01 	strb.w	r1, [r3], #1
 23ff4ce:	e7f9      	b.n	23ff4c4 <memset+0x4>

023ff4d0 <srand>:
 23ff4d0:	b538      	push	{r3, r4, r5, lr}
 23ff4d2:	4b10      	ldr	r3, [pc, #64]	; (23ff514 <srand+0x44>)
 23ff4d4:	4604      	mov	r4, r0
 23ff4d6:	681d      	ldr	r5, [r3, #0]
 23ff4d8:	6bab      	ldr	r3, [r5, #56]	; 0x38
 23ff4da:	b9b3      	cbnz	r3, 23ff50a <srand+0x3a>
 23ff4dc:	2018      	movs	r0, #24
 23ff4de:	f7fe fccd 	bl	23fde7c <malloc>
 23ff4e2:	4602      	mov	r2, r0
 23ff4e4:	63a8      	str	r0, [r5, #56]	; 0x38
 23ff4e6:	b920      	cbnz	r0, 23ff4f2 <srand+0x22>
 23ff4e8:	4b0b      	ldr	r3, [pc, #44]	; (23ff518 <srand+0x48>)
 23ff4ea:	2142      	movs	r1, #66	; 0x42
 23ff4ec:	480b      	ldr	r0, [pc, #44]	; (23ff51c <srand+0x4c>)
 23ff4ee:	f7fe fd0b 	bl	23fdf08 <__assert_func>
 23ff4f2:	490b      	ldr	r1, [pc, #44]	; (23ff520 <srand+0x50>)
 23ff4f4:	4b0b      	ldr	r3, [pc, #44]	; (23ff524 <srand+0x54>)
 23ff4f6:	e9c0 1300 	strd	r1, r3, [r0]
 23ff4fa:	4b0b      	ldr	r3, [pc, #44]	; (23ff528 <srand+0x58>)
 23ff4fc:	2100      	movs	r1, #0
 23ff4fe:	6083      	str	r3, [r0, #8]
 23ff500:	230b      	movs	r3, #11
 23ff502:	8183      	strh	r3, [r0, #12]
 23ff504:	2001      	movs	r0, #1
 23ff506:	e9c2 0104 	strd	r0, r1, [r2, #16]
 23ff50a:	6bab      	ldr	r3, [r5, #56]	; 0x38
 23ff50c:	2200      	movs	r2, #0
 23ff50e:	611c      	str	r4, [r3, #16]
 23ff510:	615a      	str	r2, [r3, #20]
 23ff512:	bd38      	pop	{r3, r4, r5, pc}
 23ff514:	1007ad50 	.word	0x1007ad50
 23ff518:	023fff65 	.word	0x023fff65
 23ff51c:	023fff7c 	.word	0x023fff7c
 23ff520:	abcd330e 	.word	0xabcd330e
 23ff524:	e66d1234 	.word	0xe66d1234
 23ff528:	0005deec 	.word	0x0005deec

023ff52c <strcpy>:
 23ff52c:	4603      	mov	r3, r0
 23ff52e:	f811 2b01 	ldrb.w	r2, [r1], #1
 23ff532:	f803 2b01 	strb.w	r2, [r3], #1
 23ff536:	2a00      	cmp	r2, #0
 23ff538:	d1f9      	bne.n	23ff52e <strcpy+0x2>
 23ff53a:	4770      	bx	lr

023ff53c <strdup>:
 23ff53c:	4b02      	ldr	r3, [pc, #8]	; (23ff548 <strdup+0xc>)
 23ff53e:	4601      	mov	r1, r0
 23ff540:	6818      	ldr	r0, [r3, #0]
 23ff542:	f000 b803 	b.w	23ff54c <_strdup_r>
 23ff546:	bf00      	nop
 23ff548:	1007ad50 	.word	0x1007ad50

023ff54c <_strdup_r>:
 23ff54c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 23ff54e:	4604      	mov	r4, r0
 23ff550:	4608      	mov	r0, r1
 23ff552:	460d      	mov	r5, r1
 23ff554:	f7fc f82c 	bl	23fb5b0 <strlen>
 23ff558:	1c42      	adds	r2, r0, #1
 23ff55a:	4620      	mov	r0, r4
 23ff55c:	4611      	mov	r1, r2
 23ff55e:	9201      	str	r2, [sp, #4]
 23ff560:	f7fe fcc4 	bl	23fdeec <_malloc_r>
 23ff564:	4604      	mov	r4, r0
 23ff566:	b118      	cbz	r0, 23ff570 <_strdup_r+0x24>
 23ff568:	9a01      	ldr	r2, [sp, #4]
 23ff56a:	4629      	mov	r1, r5
 23ff56c:	f7ff ff9b 	bl	23ff4a6 <memcpy>
 23ff570:	4620      	mov	r0, r4
 23ff572:	b003      	add	sp, #12
 23ff574:	bd30      	pop	{r4, r5, pc}
	...

023ff578 <__register_exitproc>:
 23ff578:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 23ff57c:	f8df 80bc 	ldr.w	r8, [pc, #188]	; 23ff63c <__register_exitproc+0xc4>
 23ff580:	4606      	mov	r6, r0
 23ff582:	461f      	mov	r7, r3
 23ff584:	460d      	mov	r5, r1
 23ff586:	f8d8 0000 	ldr.w	r0, [r8]
 23ff58a:	4691      	mov	r9, r2
 23ff58c:	f000 f858 	bl	23ff640 <__retarget_lock_acquire_recursive>
 23ff590:	4b26      	ldr	r3, [pc, #152]	; (23ff62c <__register_exitproc+0xb4>)
 23ff592:	681c      	ldr	r4, [r3, #0]
 23ff594:	b934      	cbnz	r4, 23ff5a4 <__register_exitproc+0x2c>
 23ff596:	4c26      	ldr	r4, [pc, #152]	; (23ff630 <__register_exitproc+0xb8>)
 23ff598:	601c      	str	r4, [r3, #0]
 23ff59a:	4b26      	ldr	r3, [pc, #152]	; (23ff634 <__register_exitproc+0xbc>)
 23ff59c:	b113      	cbz	r3, 23ff5a4 <__register_exitproc+0x2c>
 23ff59e:	681b      	ldr	r3, [r3, #0]
 23ff5a0:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
 23ff5a4:	6863      	ldr	r3, [r4, #4]
 23ff5a6:	2b1f      	cmp	r3, #31
 23ff5a8:	dd07      	ble.n	23ff5ba <__register_exitproc+0x42>
 23ff5aa:	f8d8 0000 	ldr.w	r0, [r8]
 23ff5ae:	f000 f849 	bl	23ff644 <__retarget_lock_release_recursive>
 23ff5b2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 23ff5b6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 23ff5ba:	b35e      	cbz	r6, 23ff614 <__register_exitproc+0x9c>
 23ff5bc:	f8d4 0088 	ldr.w	r0, [r4, #136]	; 0x88
 23ff5c0:	b988      	cbnz	r0, 23ff5e6 <__register_exitproc+0x6e>
 23ff5c2:	4b1d      	ldr	r3, [pc, #116]	; (23ff638 <__register_exitproc+0xc0>)
 23ff5c4:	b923      	cbnz	r3, 23ff5d0 <__register_exitproc+0x58>
 23ff5c6:	f8d8 0000 	ldr.w	r0, [r8]
 23ff5ca:	f000 f83a 	bl	23ff642 <__retarget_lock_release>
 23ff5ce:	e7f0      	b.n	23ff5b2 <__register_exitproc+0x3a>
 23ff5d0:	f44f 7084 	mov.w	r0, #264	; 0x108
 23ff5d4:	f7fe fc52 	bl	23fde7c <malloc>
 23ff5d8:	2800      	cmp	r0, #0
 23ff5da:	d0f4      	beq.n	23ff5c6 <__register_exitproc+0x4e>
 23ff5dc:	2300      	movs	r3, #0
 23ff5de:	e9c0 3340 	strd	r3, r3, [r0, #256]	; 0x100
 23ff5e2:	f8c4 0088 	str.w	r0, [r4, #136]	; 0x88
 23ff5e6:	6863      	ldr	r3, [r4, #4]
 23ff5e8:	2201      	movs	r2, #1
 23ff5ea:	2e02      	cmp	r6, #2
 23ff5ec:	f840 9023 	str.w	r9, [r0, r3, lsl #2]
 23ff5f0:	fa02 f203 	lsl.w	r2, r2, r3
 23ff5f4:	eb00 0183 	add.w	r1, r0, r3, lsl #2
 23ff5f8:	f8d0 3100 	ldr.w	r3, [r0, #256]	; 0x100
 23ff5fc:	ea43 0302 	orr.w	r3, r3, r2
 23ff600:	f8c0 3100 	str.w	r3, [r0, #256]	; 0x100
 23ff604:	f8c1 7080 	str.w	r7, [r1, #128]	; 0x80
 23ff608:	bf02      	ittt	eq
 23ff60a:	f8d0 3104 	ldreq.w	r3, [r0, #260]	; 0x104
 23ff60e:	4313      	orreq	r3, r2
 23ff610:	f8c0 3104 	streq.w	r3, [r0, #260]	; 0x104
 23ff614:	6863      	ldr	r3, [r4, #4]
 23ff616:	f8d8 0000 	ldr.w	r0, [r8]
 23ff61a:	1c5a      	adds	r2, r3, #1
 23ff61c:	3302      	adds	r3, #2
 23ff61e:	6062      	str	r2, [r4, #4]
 23ff620:	f844 5023 	str.w	r5, [r4, r3, lsl #2]
 23ff624:	f000 f80e 	bl	23ff644 <__retarget_lock_release_recursive>
 23ff628:	2000      	movs	r0, #0
 23ff62a:	e7c4      	b.n	23ff5b6 <__register_exitproc+0x3e>
 23ff62c:	1007afe0 	.word	0x1007afe0
 23ff630:	1007af54 	.word	0x1007af54
 23ff634:	00000000 	.word	0x00000000
 23ff638:	023fde7d 	.word	0x023fde7d
 23ff63c:	1007adb4 	.word	0x1007adb4

023ff640 <__retarget_lock_acquire_recursive>:
 23ff640:	4770      	bx	lr

023ff642 <__retarget_lock_release>:
 23ff642:	4770      	bx	lr

023ff644 <__retarget_lock_release_recursive>:
 23ff644:	4770      	bx	lr
	...

023ff648 <dynalib_user>:
 23ff648:	b5c1 023f b5e9 023f b5ed 023f 0000 0000     ..?...?...?.....
 23ff658:	6143 6c6c 6f20 206e 7570 6572 7620 7269     Call on pure vir
 23ff668:	7574 6c61 2000 2026 5a00 6e6f 7365 435f     tual. & .Zones_C
 23ff678:	203a 4300 756f 746e 7265 6920 2073 6e6f     : .Counter is on
 23ff688:	696c 656e 4900 6120 206d 6572 6461 0079     line.I am ready.
 23ff698:	0030 6f43 6e75 6574 3a72 0020 6e45 7274     0.Counter: .Entr
 23ff6a8:	2079 4500 6978 2074                          y .Exit .

023ff6b1 <_ZL4font>:
 23ff6b1:	0000 0000 3e00 4f5b 3e5b 6b3e 6b4f 1c3e     .....>[O[>>kOk>.
 23ff6c1:	7c3e 1c3e 3c18 3c7e 1c18 7d57 1c57 5e1c     >|>..<~<..W}W..^
 23ff6d1:	5e7f 001c 3c18 0018 e7ff e7c3 00ff 2418     .^...<.........$
 23ff6e1:	0018 e7ff e7db 30ff 3a48 0e06 2926 2979     .......0H:..&)y)
 23ff6f1:	4026 057f 0705 7f40 2505 5a3f e73c 5a3c     &@....@..%?Z<.<Z
 23ff701:	3e7f 1c1c 0808 1c1c 7f3e 2214 227f 5f14     .>......>.."."._
 23ff711:	005f 5f5f 0906 017f 007f 8966 6a95 6060     _.__......f..j``
 23ff721:	6060 9460 ffa2 94a2 0408 047e 1008 7e20     ```.......~... ~
 23ff731:	1020 0808 1c2a 0808 2a1c 0808 101e 1010      ...*....*......
 23ff741:	0c10 0c1e 0c1e 3830 383e 0630 3e0e 060e     ......08>80..>..
 23ff751:	0000 0000 0000 5f00 0000 0700 0700 1400     ......._........
 23ff761:	147f 147f 2a24 2a7f 2312 0813 6264 4936     ....$*.*.#..db6I
 23ff771:	2056 0050 0708 0003 1c00 4122 0000 2241     V P......."A..A"
 23ff781:	001c 1c2a 1c7f 082a 3e08 0808 8000 3070     ..*...*..>....p0
 23ff791:	0800 0808 0808 0000 6060 2000 0810 0204     ........``. ....
 23ff7a1:	513e 4549 003e 7f42 0040 4972 4949 2146     >QIE>.B.@.rIIIF!
 23ff7b1:	4941 334d 1418 7f12 2710 4545 3945 4a3c     AIM3.....'EEE9<J
 23ff7c1:	4949 4131 1121 0709 4936 4949 4636 4949     II1A!...6III6FII
 23ff7d1:	1e29 0000 0014 0000 3440 0000 0800 2214     ).......@4....."
 23ff7e1:	1441 1414 1414 4100 1422 0208 5901 0609     A......A"....Y..
 23ff7f1:	413e 595d 7c4e 1112 7c12 497f 4949 3e36     >A]YN|...|.III6>
 23ff801:	4141 2241 417f 4141 7f3e 4949 4149 097f     AAA".AAA>.IIIA..
 23ff811:	0909 3e01 4141 7351 087f 0808 007f 7f41     ...>AAQs......A.
 23ff821:	0041 4020 3f41 7f01 1408 4122 407f 4040     A. @A?...."A.@@@
 23ff831:	7f40 1c02 7f02 047f 1008 3e7f 4141 3e41     @..........>AAA>
 23ff841:	097f 0909 3e06 5141 5e21 097f 2919 2646     .....>AQ!^...)F&
 23ff851:	4949 3249 0103 017f 3f03 4040 3f40 201f     III2.....?@@@?. 
 23ff861:	2040 3f1f 3840 3f40 1463 1408 0363 7804     @ .?@8@?c...c..x
 23ff871:	0304 5961 4d49 0043 417f 4141 0402 1008     ..aYIMC..AAA....
 23ff881:	0020 4141 7f41 0204 0201 4004 4040 4040      .AAA......@@@@@
 23ff891:	0300 0807 2000 5454 4078 287f 4444 3838     ..... TTx@.(DD88
 23ff8a1:	4444 2844 4438 2844 387f 5454 1854 0800     DDD(8DD(.8TTT...
 23ff8b1:	097e 1802 a4a4 789c 087f 0404 0078 7d44     ~......x....x.D}
 23ff8c1:	0040 4020 3d40 7f00 2810 0044 4100 407f     @. @@=...(D..A.@
 23ff8d1:	7c00 7804 7804 087c 0404 3878 4444 3844     .|.x.x|...x8DDD8
 23ff8e1:	18fc 2424 1818 2424 fc18 087c 0404 4808     ..$$..$$..|....H
 23ff8f1:	5454 2454 0404 443f 3c24 4040 7c20 201c     TTT$..?D$<@@ |. 
 23ff901:	2040 3c1c 3040 3c40 2844 2810 4c44 9090     @ .<@0@<D(.(DL..
 23ff911:	7c90 6444 4c54 0044 3608 0041 0000 0077     .|DdTLD..6A...w.
 23ff921:	0000 3641 0008 0102 0402 3c02 2326 3c26     ..A6.......<&#&<
 23ff931:	a11e 61a1 3a12 4040 7a20 5438 5554 2159     ...a.:@@ z8TTUY!
 23ff941:	5555 4179 5422 7854 2142 5455 4078 5420     UUyA"TTxB!UTx@ T
 23ff951:	7955 0c40 521e 1272 5539 5555 3959 5454     Uy@..Rr.9UUUY9TT
 23ff961:	5954 5539 5454 0058 4500 417c 0200 7d45     TY9UTTX..E|A..E}
 23ff971:	0042 4501 407c 127d 1211 f07d 2528 f028     B..E|@}...}.(%(.
 23ff981:	547c 4555 2000 5454 547c 0a7c 7f09 3249     |TUE. TT|T|...I2
 23ff991:	4949 3249 443a 4444 323a 484a 3048 413a     III2:DDD:2JHH0:A
 23ff9a1:	2141 3a7a 4042 7820 9d00 a0a0 3d7d 4242     A!z:B@ x....}=BB
 23ff9b1:	3d42 403d 4040 3c3d ff24 2424 7e48 4349     B==@@@=<$.$$H~IC
 23ff9c1:	2b66 fc2f 2b2f 09ff f629 c020 7e88 0309     f+/./+..). ..~..
 23ff9d1:	5420 7954 0041 4400 417d 4830 4a48 3832      TTyA..D}A0HHJ28
 23ff9e1:	4040 7a22 7a00 0a0a 7d72 190d 7d31 2926     @@"z.z..r}..1}&)
 23ff9f1:	2f29 2628 2929 2629 4830 404d 3820 0808     )/(&)))&0HM@ 8..
 23ffa01:	0808 0808 0808 2f38 c810 baac 102f 3428     ......8/..../.(4
 23ffa11:	00fa 7b00 0000 1408 142a 2222 2a14 0814     ...{....*."".*..
 23ffa21:	0055 0055 aa55 aa55 aa55 55ff 55ff 00ff     U.U.U.U.U..U.U..
 23ffa31:	0000 00ff 1010 ff10 1400 1414 00ff 1010     ................
 23ffa41:	00ff 10ff f010 f010 1414 fc14 1400 f714     ................
 23ffa51:	ff00 0000 00ff 14ff f414 fc04 1414 1017     ................
 23ffa61:	101f 1f10 1f10 1414 1f14 1000 1010 00f0     ................
 23ffa71:	0000 1f00 1010 1010 101f 1010 f010 0010     ................
 23ffa81:	0000 10ff 1010 1010 1010 1010 10ff 0000     ................
 23ffa91:	ff00 0014 ff00 ff00 0000 101f 0017 fc00     ................
 23ffaa1:	f404 1414 1017 1417 f414 f404 0000 00ff     ................
 23ffab1:	14f7 1414 1414 1414 00f7 14f7 1414 1417     ................
 23ffac1:	1010 101f 141f 1414 14f4 1010 10f0 00f0     ................
 23ffad1:	1f00 1f10 0000 1f00 0014 0000 14fc 0000     ................
 23ffae1:	10f0 10f0 ff10 ff10 1414 ff14 1014 1010     ................
 23ffaf1:	001f 0000 f000 ff10 ffff ffff f0f0 f0f0     ................
 23ffb01:	fff0 ffff 0000 0000 ff00 0fff 0f0f 0f0f     ................
 23ffb11:	4438 3844 fc44 4a4a 344a 027e 0602 0206     8DD8D.JJJ4~.....
 23ffb21:	027e 027e 5563 4149 3863 4444 043c 7e40     ~.~.cUIAc8DD<.@~
 23ffb31:	1e20 0620 7e02 0202 a599 a5e7 1c99 492a      . ..~........*I
 23ffb41:	1c2a 724c 7201 304c 4d4a 304d 4830 4878     *.Lr.rL0JMM00HxH
 23ffb51:	bc30 5a62 3d46 493e 4949 7e00 0101 7e01     0.bZF=>III.~...~
 23ffb61:	2a2a 2a2a 442a 5f44 4444 5140 444a 4040     *****DD_DD@QJD@@
 23ffb71:	4a44 4051 0000 01ff e003 ff80 0000 0808     DJQ@............
 23ffb81:	6b6b 3608 3612 3624 0f06 0f09 0006 1800     kk.6.6$6........
 23ffb91:	0018 0000 1010 3000 ff40 0101 1f00 0101     .......0@.......
 23ffba1:	001e 1d19 1217 3c00 3c3c 003c 0000 0000     .......<<<<.....
 23ffbb1:	0000                                         ...

023ffbb4 <_ZTV12Adafruit_GFX>:
	...
 23ffbc4:	c48d 023f e8c9 023f b609 023f bf3f 023f     ..?...?...?.?.?.
 23ffbd4:	bf41 023f bf73 023f bf4f 023f bf61 023f     A.?.s.?.O.?.a.?.
 23ffbe4:	be81 023f bf3f 023f c169 023f c167 023f     ..?.?.?.i.?.g.?.
 23ffbf4:	bf8b 023f bfc9 023f c003 023f c049 023f     ..?...?...?.I.?.
 23ffc04:	c065 023f c0e7 023f                         e.?...?.

023ffc0c <_ZTV15Adafruit_SPITFT>:
	...
 23ffc1c:	c48d 023f e8c9 023f cd19 023f c7af 023f     ..?...?...?...?.
 23ffc2c:	ccdb 023f c8cf 023f cb87 023f cb2f 023f     ..?...?...?./.?.
 23ffc3c:	be81 023f c7db 023f c169 023f cc55 023f     ..?...?.i.?.U.?.
 23ffc4c:	cab3 023f ca33 023f c96f 023f c049 023f     ..?.3.?.o.?.I.?.
 23ffc5c:	c065 023f c0e7 023f b609 023f b609 023f     e.?...?...?...?.

023ffc6c <_ZL11cmd_240x240>:
 23ffc6c:	0109 9680 8011 3aff 5581 360a 0801 042a     .......:.U.6..*.
 23ffc7c:	0000 f000 042b 0000 f000 8021 130a 0a80     ....+.....!.....
 23ffc8c:	8029 00ff                                   )...

023ffc90 <_ZTV15Adafruit_ST7789>:
	...
 23ffc98:	cddf 023f ce47 023f c48d 023f e8c9 023f     ..?.G.?...?...?.
 23ffca8:	cd19 023f c7af 023f ccdb 023f c8cf 023f     ..?...?...?...?.
 23ffcb8:	cb87 023f cb2f 023f be81 023f c7db 023f     ..?./.?...?...?.
 23ffcc8:	cde1 023f cc55 023f cab3 023f ca33 023f     ..?.U.?...?.3.?.
 23ffcd8:	c96f 023f c049 023f c065 023f c0e7 023f     o.?.I.?.e.?...?.
 23ffce8:	cf11 023f cf31 023f                         ..?.1.?.

023ffcf0 <_ZTV15Adafruit_ST77xx>:
	...
 23ffcf8:	ce9d 023f cf83 023f c48d 023f e8c9 023f     ..?...?...?...?.
 23ffd08:	cd19 023f c7af 023f ccdb 023f c8cf 023f     ..?...?...?...?.
 23ffd18:	cb87 023f cb2f 023f be81 023f c7db 023f     ..?./.?...?...?.
 23ffd28:	ce9f 023f cc55 023f cab3 023f ca33 023f     ..?.U.?...?.3.?.
 23ffd38:	c96f 023f c049 023f c065 023f c0e7 023f     o.?.I.?.e.?...?.
 23ffd48:	cf11 023f cf31 023f                         ..?.1.?.

023ffd50 <_ZTV7VL53L1X>:
	...
 23ffd58:	d0d7 023f d0b7 023f d0a1 023f d05d 023f     ..?...?...?.].?.
 23ffd68:	d093 023f d079 023f d05f 023f               ..?.y.?._.?.

023ffd74 <_ZL29VL51L1X_DEFAULT_CONFIGURATION>:
 23ffd74:	0100 0101 0002 0802 0800 0110 0001 0000     ................
 23ffd84:	ff00 0f00 0000 0000 2000 000b 0200 210a     ......... .....!
 23ffd94:	0000 0005 0000 c800 0000 ff38 0001 0008     ..........8.....
 23ffda4:	0100 0fdb f101 010d 0068 0880 00b8 0000     ........h.......
 23ffdb4:	0f00 0089 0000 0000 0000 0f01 0e0d 000e     ................
 23ffdc4:	0200 ffc7 009b 0000 0001 0000               ............

023ffdd0 <_ZTVSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE>:
	...
 23ffdd8:	dfb5 023f dfbb 023f dff9 023f dfc9 023f     ..?...?...?...?.
 23ffde8:	dfb7 023f                                   ..?.

023ffdec <_ZTVN5spark13EthernetClassE>:
	...
 23ffdf4:	e53f 023f e535 023f e52b 023f e521 023f     ?.?.5.?.+.?.!.?.
 23ffe04:	e515 023f e509 023f e7a5 023f e7ad 023f     ..?...?...?...?.
 23ffe14:	e4fd 023f e4f5 023f e4eb 023f e4e1 023f     ..?...?...?...?.
 23ffe24:	e7dd 023f                                   ..?.

023ffe28 <_ZTV7TwoWire>:
	...
 23ffe30:	e55d 023f e5a7 023f e57f 023f e55f 023f     ].?...?...?._.?.
 23ffe40:	e587 023f e58f 023f e597 023f e59f 023f     ..?...?...?...?.

023ffe50 <_ZTV9IPAddress>:
	...
 23ffe58:	e675 023f e665 023f e667 023f 7061 0070     u.?.e.?.g.?.app.

023ffe68 <_ZTVN5spark12NetworkClassE>:
	...
 23ffe70:	e765 023f e76f 023f e779 023f e783 023f     e.?.o.?.y.?...?.
 23ffe80:	e78d 023f e799 023f e7a5 023f e7ad 023f     ..?...?...?...?.
 23ffe90:	e7b5 023f e7c1 023f e7c9 023f e7d3 023f     ..?...?...?...?.
 23ffea0:	e7dd 023f                                   ..?.

023ffea4 <_ZN12_GLOBAL__N_1L14clock_divisorsE>:
 23ffea4:	0800 1810 2820 3830 5925 252d 2d6d 6425     .... (08%Y-%m-%d
 23ffeb4:	2554 3a48 4d25 253a 2553 007a 7361 7463     T%H:%M:%S%z.asct
 23ffec4:	6d69 0065                                   ime.

023ffec8 <_ZTV11USARTSerial>:
	...
 23ffed0:	edad 023f ee19 023f edf1 023f e8c9 023f     ..?...?...?...?.
 23ffee0:	edc1 023f eddd 023f edcf 023f edeb 023f     ..?...?...?...?.
 23ffef0:	edaf 023f edb3 023f                         ..?...?.

023ffef8 <_ZTV9USBSerial>:
	...
 23fff00:	ee5d 023f eec5 023f ee9b 023f e8c9 023f     ].?...?...?...?.
 23fff10:	ee8d 023f ee5f 023f ee6f 023f eebf 023f     ..?._.?.o.?...?.
 23fff20:	ee7f 023f ee57 023f                         ..?.W.?.

023fff28 <_ZTVN5spark9WiFiClassE>:
	...
 23fff30:	efbb 023f efb1 023f efa7 023f ef5d 023f     ..?...?...?.].?.
 23fff40:	ef9b 023f ef8f 023f e7a5 023f e7ad 023f     ..?...?...?...?.
 23fff50:	ef83 023f ef7b 023f ef71 023f ef67 023f     ..?.{.?.q.?.g.?.
 23fff60:	e7dd 023f                                   ..?.

023fff64 <_ZSt7nothrow>:
 23fff64:	5200 4545 544e 6d20 6c61 6f6c 2063 7573     .REENT malloc su
 23fff74:	6363 6565 6564 0064 742f 706d 6a2f 6e65     cceeded./tmp/jen
 23fff84:	696b 736e 472d 4343 312d 2d30 6970 6570     kins-GCC-10-pipe
 23fff94:	696c 656e 342d 5f38 3032 3032 3131 3432     line-48_20201124
 23fffa4:	315f 3036 3136 3038 3336 2f39 7273 2f63     _1606180639/src/
 23fffb4:	656e 6c77 6269 6e2f 7765 696c 2f62 696c     newlib/newlib/li
 23fffc4:	6362 732f 6474 696c 2f62 6172 646e 632e     bc/stdlib/rand.c
	...

023fffd5 <link_const_data_end>:
 23fffd5:	00          	.byte	0x00
	...

023fffd8 <link_constructors_location>:
 23fffd8:	023fbe41 	.word	0x023fbe41
 23fffdc:	023fdfa5 	.word	0x023fdfa5
 23fffe0:	023fe549 	.word	0x023fe549
 23fffe4:	023fe755 	.word	0x023fe755
 23fffe8:	023fe8b5 	.word	0x023fe8b5
 23fffec:	023fe965 	.word	0x023fe965
 23ffff0:	023fed75 	.word	0x023fed75
 23ffff4:	023fed99 	.word	0x023fed99
 23ffff8:	023fefc5 	.word	0x023fefc5
