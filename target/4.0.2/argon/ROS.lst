
/Users/friedl/Desktop/Projects/ROS/target/4.0.2/argon/ROS.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .module_info  00000018  000b4000  000b4000  00004000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .dynalib      00000004  000b4018  000b4018  00004018  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .text         000051a0  000b4020  000b4020  00004020  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .note.gnu.build-id 00000024  000b91c0  000b91c0  000091c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .ARM.exidx    00000008  000b91e4  000b91e4  000091e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .backup       00000004  2003f400  000b91ec  0000f400  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         0000006c  2003e584  000b91f0  0001e584  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00000200  2003e5f0  2003e5f0  0002e5f0  2**2
                  ALLOC
  8 .module_info_suffix 00000028  000b925c  000b925c  0002925c  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  9 .module_info_crc 00000004  000b9284  000b9284  00029284  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
 10 .debug_info   00152f79  00000000  00000000  00029288  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 0001713b  00000000  00000000  0017c201  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_loc    000483f1  00000000  00000000  0019333c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_aranges 00003440  00000000  00000000  001db72d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_ranges 0000b1e8  00000000  00000000  001deb6d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_macro  00041f8c  00000000  00000000  001e9d55  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_line   00051719  00000000  00000000  0022bce1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_str    0013de97  00000000  00000000  0027d3fa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_frame  00009ad4  00000000  00000000  003bb294  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

000b4020 <module_user_pre_init>:
/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   b4020:	4809      	ldr	r0, [pc, #36]	; (b4048 <module_user_pre_init+0x28>)
   b4022:	490a      	ldr	r1, [pc, #40]	; (b404c <module_user_pre_init+0x2c>)
   b4024:	4288      	cmp	r0, r1
void* module_user_pre_init() {
   b4026:	b508      	push	{r3, lr}
    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   b4028:	d005      	beq.n	b4036 <module_user_pre_init+0x16>
   b402a:	4a09      	ldr	r2, [pc, #36]	; (b4050 <module_user_pre_init+0x30>)
   b402c:	4282      	cmp	r2, r0
   b402e:	d002      	beq.n	b4036 <module_user_pre_init+0x16>
    {
        memcpy(&link_global_data_start, &link_global_data_initial_values, link_global_data_size);
   b4030:	1a12      	subs	r2, r2, r0
   b4032:	f004 fb11 	bl	b8658 <memcpy>
    }

    memset(&link_bss_location, 0, link_bss_size );
   b4036:	4807      	ldr	r0, [pc, #28]	; (b4054 <module_user_pre_init+0x34>)
   b4038:	4a07      	ldr	r2, [pc, #28]	; (b4058 <module_user_pre_init+0x38>)
   b403a:	2100      	movs	r1, #0
   b403c:	1a12      	subs	r2, r2, r0
   b403e:	f004 fb19 	bl	b8674 <memset>
    return &link_global_data_start;
}
   b4042:	4801      	ldr	r0, [pc, #4]	; (b4048 <module_user_pre_init+0x28>)
   b4044:	bd08      	pop	{r3, pc}
   b4046:	bf00      	nop
   b4048:	2003e584 	.word	0x2003e584
   b404c:	000b91f0 	.word	0x000b91f0
   b4050:	2003e5f0 	.word	0x2003e5f0
   b4054:	2003e5f0 	.word	0x2003e5f0
   b4058:	2003e7ed 	.word	0x2003e7ed

000b405c <module_user_init>:
extern constructor_ptr_t link_constructors_location[];
extern constructor_ptr_t link_constructors_end;
#define link_constructors_size   ((unsigned long)&link_constructors_end  -  (unsigned long)&link_constructors_location )

void module_user_init()
{
   b405c:	b570      	push	{r4, r5, r6, lr}
    module_user_init_hook();

    // invoke constructors
    for (size_t ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   b405e:	4e07      	ldr	r6, [pc, #28]	; (b407c <module_user_init+0x20>)
   b4060:	4c07      	ldr	r4, [pc, #28]	; (b4080 <module_user_init+0x24>)
    module_user_init_hook();
   b4062:	f003 fbbd 	bl	b77e0 <module_user_init_hook>
    for (size_t ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   b4066:	1ba4      	subs	r4, r4, r6
   b4068:	08a4      	lsrs	r4, r4, #2
   b406a:	2500      	movs	r5, #0
   b406c:	42ac      	cmp	r4, r5
   b406e:	d100      	bne.n	b4072 <module_user_init+0x16>
    {
        link_constructors_location[ctor_num]();
    }
}
   b4070:	bd70      	pop	{r4, r5, r6, pc}
        link_constructors_location[ctor_num]();
   b4072:	f856 3b04 	ldr.w	r3, [r6], #4
   b4076:	4798      	blx	r3
    for (size_t ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   b4078:	3501      	adds	r5, #1
   b407a:	e7f7      	b.n	b406c <module_user_init+0x10>
   b407c:	000b9198 	.word	0x000b9198
   b4080:	000b91bc 	.word	0x000b91bc

000b4084 <module_user_setup>:

/**
 * Export these functions with a fuller name so they don't clash with the setup/loop wrappers in the system module.
 */
void module_user_setup() {
    setup();
   b4084:	f000 b948 	b.w	b4318 <setup>

000b4088 <module_user_loop>:
}

void module_user_loop() {
   b4088:	b508      	push	{r3, lr}
    loop();
   b408a:	f000 fbd7 	bl	b483c <loop>
    _post_loop();
}
   b408e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    _post_loop();
   b4092:	f003 bb5d 	b.w	b7750 <_post_loop>

000b4096 <_Znwj>:
 * Implement C++ new/delete operators using the heap
 */

void *operator new(size_t size)
{
	return malloc(size);
   b4096:	f002 ba6d 	b.w	b6574 <malloc>

000b409a <_Znaj>:
   b409a:	f002 ba6b 	b.w	b6574 <malloc>

000b409e <_ZdlPvj>:
	free(p);
}

void operator delete(void *p, size_t size)
{
	free(p);
   b409e:	f002 ba71 	b.w	b6584 <free>
	...

000b40a4 <__cxa_pure_virtual>:
int __wrap_printf(const char* fmt, ...) {
    return -1;
}

/* Default implementation for call made to pure virtual function. */
void __cxa_pure_virtual() {
   b40a4:	b508      	push	{r3, lr}
  PANIC(PureVirtualCall,"Call on pure virtual");
   b40a6:	4a03      	ldr	r2, [pc, #12]	; (b40b4 <__cxa_pure_virtual+0x10>)
   b40a8:	4903      	ldr	r1, [pc, #12]	; (b40b8 <__cxa_pure_virtual+0x14>)
   b40aa:	200c      	movs	r0, #12
   b40ac:	f002 f9ae 	bl	b640c <panic_>
  while (1);
   b40b0:	e7fe      	b.n	b40b0 <__cxa_pure_virtual+0xc>
   b40b2:	bf00      	nop
   b40b4:	000b616d 	.word	0x000b616d
   b40b8:	000b881c 	.word	0x000b881c

000b40bc <__cxa_guard_acquire>:

/* Provide default implemenation for __cxa_guard_acquire() and
 * __cxa_guard_release(). Note: these must be revisited if a multitasking
 * OS is ported to this platform. */
__extension__ typedef int __guard __attribute__((mode (__DI__)));
int __cxa_guard_acquire(__guard *g) {return !*(char *)(g);};
   b40bc:	7800      	ldrb	r0, [r0, #0]
   b40be:	fab0 f080 	clz	r0, r0
   b40c2:	0940      	lsrs	r0, r0, #5
   b40c4:	4770      	bx	lr

000b40c6 <__cxa_guard_release>:
void __cxa_guard_release (__guard *g) {*(char *)g = 1;};
   b40c6:	2301      	movs	r3, #1
   b40c8:	7003      	strb	r3, [r0, #0]
   b40ca:	4770      	bx	lr

000b40cc <_Z3TFTv>:
  // delay(500);
}


//void tftPrintTest() {
  void TFT() {
   b40cc:	b538      	push	{r3, r4, r5, lr}
  @brief  Set whether text that is too long for the screen width should
          automatically wrap around to the next line (else clip right).
  @param  w  true for wrapping, false for clipping
  */
  /**********************************************************************/
  void setTextWrap(boolean w) { wrap = w; }
   b40ce:	4d12      	ldr	r5, [pc, #72]	; (b4118 <_Z3TFTv+0x4c>)
   b40d0:	2100      	movs	r1, #0
  tft.setTextWrap(false);
  tft.fillScreen(ST77XX_BLACK);
   b40d2:	4628      	mov	r0, r5
   b40d4:	76e9      	strb	r1, [r5, #27]
   b40d6:	f000 fcb7 	bl	b4a48 <_ZN12Adafruit_GFX10fillScreenEt>
  void setTextColor(uint16_t c) { textcolor = textbgcolor = c; }
   b40da:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   b40de:	f04f 121e 	mov.w	r2, #1966110	; 0x1e001e
  tft.setCursor(30, 30);
  tft.setTextColor(ST77XX_WHITE);
  tft.setTextSize(36);
   b40e2:	2124      	movs	r1, #36	; 0x24
   b40e4:	4628      	mov	r0, r5
   b40e6:	e9c5 2304 	strd	r2, r3, [r5, #16]
   b40ea:	f000 ff52 	bl	b4f92 <_ZN12Adafruit_GFX11setTextSizeEh>
  tft.print(counter);
   b40ee:	4b0b      	ldr	r3, [pc, #44]	; (b411c <_Z3TFTv+0x50>)
   b40f0:	681c      	ldr	r4, [r3, #0]
// FIXME: avoids 'comparison of constant '0' with boolean expression is always false'
#if __GNUC__ >= 9
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wbool-compare"
#endif // __GNUC__ >= 9
        if (n < 0 && base == 10) {
   b40f2:	2c00      	cmp	r4, #0
   b40f4:	da0e      	bge.n	b4114 <_Z3TFTv+0x48>
            t = print('-');
   b40f6:	212d      	movs	r1, #45	; 0x2d
   b40f8:	4628      	mov	r0, r5
   b40fa:	f002 ff61 	bl	b6fc0 <_ZN5Print5printEc>
            val = -n;
   b40fe:	4261      	negs	r1, r4
            val = n;
        }
#if __GNUC__ >= 9
#pragma GCC diagnostic pop
#endif // __GNUC__ >= 9
        return printNumber(val, base) + t;
   b4100:	4805      	ldr	r0, [pc, #20]	; (b4118 <_Z3TFTv+0x4c>)
   b4102:	220a      	movs	r2, #10
   b4104:	f002 ff5f 	bl	b6fc6 <_ZN5Print11printNumberEmh>
  delay(1500);
}
   b4108:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  delay(1500);
   b410c:	f240 50dc 	movw	r0, #1500	; 0x5dc
   b4110:	f002 ba68 	b.w	b65e4 <delay>
            val = n;
   b4114:	4621      	mov	r1, r4
   b4116:	e7f3      	b.n	b4100 <_Z3TFTv+0x34>
   b4118:	2003e668 	.word	0x2003e668
   b411c:	2003e640 	.word	0x2003e640

000b4120 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      explicit __shared_count(const __weak_count<_Lp>& __r);

      // Does not throw if __r._M_get_use_count() == 0, caller must check.
      explicit __shared_count(const __weak_count<_Lp>& __r, std::nothrow_t);

      ~__shared_count() noexcept
   b4120:	b538      	push	{r3, r4, r5, lr}
      {
	if (_M_pi != nullptr)
   b4122:	6804      	ldr	r4, [r0, #0]
      ~__shared_count() noexcept
   b4124:	4605      	mov	r5, r0
	if (_M_pi != nullptr)
   b4126:	b17c      	cbz	r4, b4148 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>
      if (--_M_use_count == 0)
   b4128:	6863      	ldr	r3, [r4, #4]
   b412a:	3b01      	subs	r3, #1
   b412c:	6063      	str	r3, [r4, #4]
   b412e:	b95b      	cbnz	r3, b4148 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>
          _M_dispose();
   b4130:	6823      	ldr	r3, [r4, #0]
   b4132:	4620      	mov	r0, r4
   b4134:	689b      	ldr	r3, [r3, #8]
   b4136:	4798      	blx	r3
          if (--_M_weak_count == 0)
   b4138:	68a3      	ldr	r3, [r4, #8]
   b413a:	3b01      	subs	r3, #1
   b413c:	60a3      	str	r3, [r4, #8]
   b413e:	b91b      	cbnz	r3, b4148 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>
            _M_destroy();
   b4140:	6823      	ldr	r3, [r4, #0]
   b4142:	4620      	mov	r0, r4
   b4144:	68db      	ldr	r3, [r3, #12]
   b4146:	4798      	blx	r3
	  _M_pi->_M_release();
      }
   b4148:	4628      	mov	r0, r5
   b414a:	bd38      	pop	{r3, r4, r5, pc}

000b414c <_Z17zones_calibrationv>:
void zones_calibration() {
   b414c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  center[0] = 231; //167
   b4150:	f8df 91b8 	ldr.w	r9, [pc, #440]	; b430c <_Z17zones_calibrationv+0x1c0>
  ROI_width = 8;
   b4154:	f8df b1b8 	ldr.w	fp, [pc, #440]	; b4310 <_Z17zones_calibrationv+0x1c4>
  Zone = 0;
   b4158:	4d61      	ldr	r5, [pc, #388]	; (b42e0 <_Z17zones_calibrationv+0x194>)
  sum_zone_0 = 0;
   b415a:	f8df 81b8 	ldr.w	r8, [pc, #440]	; b4314 <_Z17zones_calibrationv+0x1c8>
  sum_zone_1 = 0;
   b415e:	4f61      	ldr	r7, [pc, #388]	; (b42e4 <_Z17zones_calibrationv+0x198>)
  distance = 0;
   b4160:	4e61      	ldr	r6, [pc, #388]	; (b42e8 <_Z17zones_calibrationv+0x19c>)
      distanceSensor.setIntermeasurementPeriod(55);
   b4162:	4c62      	ldr	r4, [pc, #392]	; (b42ec <_Z17zones_calibrationv+0x1a0>)
  center[1] = 167; //231 
   b4164:	22e7      	movs	r2, #231	; 0xe7
   b4166:	23a7      	movs	r3, #167	; 0xa7
   b4168:	e9c9 2300 	strd	r2, r3, [r9]
  ROI_height = 8;
   b416c:	4a60      	ldr	r2, [pc, #384]	; (b42f0 <_Z17zones_calibrationv+0x1a4>)
   b416e:	2308      	movs	r3, #8
void zones_calibration() {
   b4170:	b091      	sub	sp, #68	; 0x44
  delay(500);
   b4172:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
  ROI_height = 8;
   b4176:	6013      	str	r3, [r2, #0]
  ROI_width = 8;
   b4178:	f8cb 3000 	str.w	r3, [fp]
  delay(500);
   b417c:	f002 fa32 	bl	b65e4 <delay>
  number_attempts = 20;
   b4180:	495c      	ldr	r1, [pc, #368]	; (b42f4 <_Z17zones_calibrationv+0x1a8>)
  Zone = 0;
   b4182:	2300      	movs	r3, #0
  number_attempts = 20;
   b4184:	2214      	movs	r2, #20
  Zone = 0;
   b4186:	602b      	str	r3, [r5, #0]
  sum_zone_0 = 0;
   b4188:	f8c8 3000 	str.w	r3, [r8]
  sum_zone_1 = 0;
   b418c:	603b      	str	r3, [r7, #0]
  distance = 0;
   b418e:	8033      	strh	r3, [r6, #0]
  number_attempts = 20;
   b4190:	600a      	str	r2, [r1, #0]
  for (int i=0; i<number_attempts; i++){
   b4192:	469a      	mov	sl, r3
   b4194:	4b57      	ldr	r3, [pc, #348]	; (b42f4 <_Z17zones_calibrationv+0x1a8>)
   b4196:	681a      	ldr	r2, [r3, #0]
   b4198:	4552      	cmp	r2, sl
   b419a:	dd5c      	ble.n	b4256 <_Z17zones_calibrationv+0x10a>
      distanceSensor.setIntermeasurementPeriod(55);
   b419c:	2137      	movs	r1, #55	; 0x37
   b419e:	4620      	mov	r0, r4
   b41a0:	f001 fce3 	bl	b5b6a <_ZN10SFEVL53L1X25setIntermeasurementPeriodEt>
      distanceSensor.setDistanceModeLong();
   b41a4:	4620      	mov	r0, r4
   b41a6:	f001 fcdc 	bl	b5b62 <_ZN10SFEVL53L1X19setDistanceModeLongEv>
      distanceSensor.setROI(ROI_height, ROI_width, center[0]);  // first value: height of the zone, second value: width of the zone
   b41aa:	4951      	ldr	r1, [pc, #324]	; (b42f0 <_Z17zones_calibrationv+0x1a4>)
   b41ac:	f899 3000 	ldrb.w	r3, [r9]
   b41b0:	f89b 2000 	ldrb.w	r2, [fp]
   b41b4:	7809      	ldrb	r1, [r1, #0]
   b41b6:	4620      	mov	r0, r4
   b41b8:	f001 fce5 	bl	b5b86 <_ZN10SFEVL53L1X6setROIEhhh>
      delay(50);
   b41bc:	2032      	movs	r0, #50	; 0x32
   b41be:	f002 fa11 	bl	b65e4 <delay>
      distanceSensor.setTimingBudgetInMs(50);
   b41c2:	2132      	movs	r1, #50	; 0x32
   b41c4:	4620      	mov	r0, r4
   b41c6:	f001 fcc9 	bl	b5b5c <_ZN10SFEVL53L1X19setTimingBudgetInMsEt>
      distanceSensor.startRanging(); //Write configuration bytes to initiate measurement
   b41ca:	4620      	mov	r0, r4
   b41cc:	f001 fcc0 	bl	b5b50 <_ZN10SFEVL53L1X12startRangingEv>
      distance = distanceSensor.getDistance(); //Get the result of the measurement from the sensor
   b41d0:	4620      	mov	r0, r4
   b41d2:	f001 fccd 	bl	b5b70 <_ZN10SFEVL53L1X11getDistanceEv>
   b41d6:	8030      	strh	r0, [r6, #0]
      distanceSensor.stopRanging();      
   b41d8:	4620      	mov	r0, r4
   b41da:	f001 fcbc 	bl	b5b56 <_ZN10SFEVL53L1X11stopRangingEv>
      sum_zone_0 = sum_zone_0 + distance;
   b41de:	f8d8 2000 	ldr.w	r2, [r8]
   b41e2:	8833      	ldrh	r3, [r6, #0]
   b41e4:	4413      	add	r3, r2
   b41e6:	f8c8 3000 	str.w	r3, [r8]
      Zone++;
   b41ea:	682b      	ldr	r3, [r5, #0]
      Zone = Zone%2;
   b41ec:	3301      	adds	r3, #1
   b41ee:	f003 0301 	and.w	r3, r3, #1
   b41f2:	bf48      	it	mi
   b41f4:	425b      	negmi	r3, r3
      distanceSensor.setIntermeasurementPeriod(55);
   b41f6:	2137      	movs	r1, #55	; 0x37
   b41f8:	4620      	mov	r0, r4
      Zone = Zone%2;
   b41fa:	602b      	str	r3, [r5, #0]
      distanceSensor.setIntermeasurementPeriod(55);
   b41fc:	f001 fcb5 	bl	b5b6a <_ZN10SFEVL53L1X25setIntermeasurementPeriodEt>
      distanceSensor.setDistanceModeLong();
   b4200:	4620      	mov	r0, r4
   b4202:	f001 fcae 	bl	b5b62 <_ZN10SFEVL53L1X19setDistanceModeLongEv>
      distanceSensor.setROI(ROI_height, ROI_width, center[1]);  // first value: height of the zone, second value: width of the zone
   b4206:	493a      	ldr	r1, [pc, #232]	; (b42f0 <_Z17zones_calibrationv+0x1a4>)
   b4208:	f899 3004 	ldrb.w	r3, [r9, #4]
   b420c:	f89b 2000 	ldrb.w	r2, [fp]
   b4210:	7809      	ldrb	r1, [r1, #0]
   b4212:	4620      	mov	r0, r4
   b4214:	f001 fcb7 	bl	b5b86 <_ZN10SFEVL53L1X6setROIEhhh>
      delay(50);
   b4218:	2032      	movs	r0, #50	; 0x32
   b421a:	f002 f9e3 	bl	b65e4 <delay>
      distanceSensor.setTimingBudgetInMs(50);
   b421e:	2132      	movs	r1, #50	; 0x32
   b4220:	4620      	mov	r0, r4
   b4222:	f001 fc9b 	bl	b5b5c <_ZN10SFEVL53L1X19setTimingBudgetInMsEt>
      distanceSensor.startRanging(); //Write configuration bytes to initiate measurement
   b4226:	4620      	mov	r0, r4
   b4228:	f001 fc92 	bl	b5b50 <_ZN10SFEVL53L1X12startRangingEv>
      distance = distanceSensor.getDistance(); //Get the result of the measurement from the sensor
   b422c:	4620      	mov	r0, r4
   b422e:	f001 fc9f 	bl	b5b70 <_ZN10SFEVL53L1X11getDistanceEv>
   b4232:	8030      	strh	r0, [r6, #0]
      distanceSensor.stopRanging();      
   b4234:	4620      	mov	r0, r4
   b4236:	f001 fc8e 	bl	b5b56 <_ZN10SFEVL53L1X11stopRangingEv>
      sum_zone_1 = sum_zone_1 + distance;
   b423a:	683a      	ldr	r2, [r7, #0]
   b423c:	8833      	ldrh	r3, [r6, #0]
   b423e:	4413      	add	r3, r2
   b4240:	603b      	str	r3, [r7, #0]
      Zone++;
   b4242:	682b      	ldr	r3, [r5, #0]
      Zone = Zone%2;
   b4244:	3301      	adds	r3, #1
   b4246:	f003 0301 	and.w	r3, r3, #1
   b424a:	bf48      	it	mi
   b424c:	425b      	negmi	r3, r3
   b424e:	602b      	str	r3, [r5, #0]
  for (int i=0; i<number_attempts; i++){
   b4250:	f10a 0a01 	add.w	sl, sl, #1
   b4254:	e79e      	b.n	b4194 <_Z17zones_calibrationv+0x48>
  calibrated_zone_0 = sum_zone_0 / number_attempts;
   b4256:	f8d8 3000 	ldr.w	r3, [r8]
   b425a:	fb93 f3f2 	sdiv	r3, r3, r2
   b425e:	ee00 3a10 	vmov	s0, r3
   b4262:	4b25      	ldr	r3, [pc, #148]	; (b42f8 <_Z17zones_calibrationv+0x1ac>)
  calibrated_zone_1 = sum_zone_1 / number_attempts;
   b4264:	4d25      	ldr	r5, [pc, #148]	; (b42fc <_Z17zones_calibrationv+0x1b0>)
  calibrated_zone_0 = sum_zone_0 / number_attempts;
   b4266:	eeb8 0ac0 	vcvt.f32.s32	s0, s0
  Particle.publish("Zones_C: ", String(calibrated_zone_0) + " & " + String(calibrated_zone_1), PRIVATE);
   b426a:	2106      	movs	r1, #6
  calibrated_zone_0 = sum_zone_0 / number_attempts;
   b426c:	ed83 0a00 	vstr	s0, [r3]
  calibrated_zone_1 = sum_zone_1 / number_attempts;
   b4270:	683b      	ldr	r3, [r7, #0]
   b4272:	fb93 f3f2 	sdiv	r3, r3, r2
   b4276:	ee07 3a90 	vmov	s15, r3
   b427a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
  Particle.publish("Zones_C: ", String(calibrated_zone_0) + " & " + String(calibrated_zone_1), PRIVATE);
   b427e:	a804      	add	r0, sp, #16
  calibrated_zone_1 = sum_zone_1 / number_attempts;
   b4280:	edc5 7a00 	vstr	s15, [r5]
  Particle.publish("Zones_C: ", String(calibrated_zone_0) + " & " + String(calibrated_zone_1), PRIVATE);
   b4284:	f003 f874 	bl	b7370 <_ZN6StringC1Efi>
};

class StringSumHelper : public String
{
public:
	StringSumHelper(const String &s) : String(s) {}
   b4288:	a904      	add	r1, sp, #16
   b428a:	a808      	add	r0, sp, #32
   b428c:	f003 f840 	bl	b7310 <_ZN6StringC1ERKS_>
   b4290:	491b      	ldr	r1, [pc, #108]	; (b4300 <_Z17zones_calibrationv+0x1b4>)
   b4292:	a808      	add	r0, sp, #32
   b4294:	f003 f8a9 	bl	b73ea <_ZplRK15StringSumHelperPKc>
   b4298:	ed95 0a00 	vldr	s0, [r5]
   b429c:	4604      	mov	r4, r0
   b429e:	2106      	movs	r1, #6
   b42a0:	a80c      	add	r0, sp, #48	; 0x30
   b42a2:	f003 f865 	bl	b7370 <_ZN6StringC1Efi>
   b42a6:	a90c      	add	r1, sp, #48	; 0x30
   b42a8:	4620      	mov	r0, r4
   b42aa:	f003 f892 	bl	b73d2 <_ZplRK15StringSumHelperRK6String>
	const char * c_str() const { return buffer; }
   b42ae:	4b15      	ldr	r3, [pc, #84]	; (b4304 <_Z17zones_calibrationv+0x1b8>)
   b42b0:	6802      	ldr	r2, [r0, #0]
inline particle::Flags<TagT, ValueT>::Flags(Flag<TagT, ValueT> flag) :
        val_(flag.value()) {
}

template<typename TagT, typename ValueT>
inline particle::Flags<TagT, ValueT>::Flags(ValueT val) :
   b42b2:	781b      	ldrb	r3, [r3, #0]
        return publish(eventName, eventData, DEFAULT_CLOUD_EVENT_TTL, flags1, flags2);
    }

    inline particle::Future<bool> publish(const char *eventName, const char *eventData, int ttl, PublishFlags flags1, PublishFlags flags2 = PublishFlags())
    {
        return publish_event(eventName, eventData, ttl, flags1 | flags2);
   b42b4:	4914      	ldr	r1, [pc, #80]	; (b4308 <_Z17zones_calibrationv+0x1bc>)
   b42b6:	f88d 3000 	strb.w	r3, [sp]
   b42ba:	a802      	add	r0, sp, #8
   b42bc:	233c      	movs	r3, #60	; 0x3c
   b42be:	f002 faf7 	bl	b68b0 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>
	  __r._M_ptr = 0;
	}

      __shared_ptr(const __shared_ptr&) noexcept = default;
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
   b42c2:	a803      	add	r0, sp, #12
   b42c4:	f7ff ff2c 	bl	b4120 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   b42c8:	a80c      	add	r0, sp, #48	; 0x30
   b42ca:	f002 ffb3 	bl	b7234 <_ZN6StringD1Ev>
class StringSumHelper : public String
   b42ce:	a808      	add	r0, sp, #32
   b42d0:	f002 ffb0 	bl	b7234 <_ZN6StringD1Ev>
   b42d4:	a804      	add	r0, sp, #16
   b42d6:	f002 ffad 	bl	b7234 <_ZN6StringD1Ev>
}
   b42da:	b011      	add	sp, #68	; 0x44
   b42dc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   b42e0:	2003e624 	.word	0x2003e624
   b42e4:	2003e664 	.word	0x2003e664
   b42e8:	2003e644 	.word	0x2003e644
   b42ec:	2003e648 	.word	0x2003e648
   b42f0:	2003e610 	.word	0x2003e610
   b42f4:	2003e65c 	.word	0x2003e65c
   b42f8:	2003e638 	.word	0x2003e638
   b42fc:	2003e63c 	.word	0x2003e63c
   b4300:	000b8831 	.word	0x000b8831
   b4304:	2003e634 	.word	0x2003e634
   b4308:	000b8835 	.word	0x000b8835
   b430c:	2003e62c 	.word	0x2003e62c
   b4310:	2003e614 	.word	0x2003e614
   b4314:	2003e660 	.word	0x2003e660

000b4318 <setup>:
void setup(void) {
   b4318:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  Serial.begin(9600);
   b431a:	f003 f947 	bl	b75ac <_Z16_fetch_usbserialv>
   b431e:	f44f 5116 	mov.w	r1, #9600	; 0x2580
   b4322:	f003 f937 	bl	b7594 <_ZN9USBSerial5beginEl>
  tft.init(240, 320);                           // Init ST7789 320x240
   b4326:	f44f 72a0 	mov.w	r2, #320	; 0x140
   b432a:	21f0      	movs	r1, #240	; 0xf0
   b432c:	481a      	ldr	r0, [pc, #104]	; (b4398 <setup+0x80>)
   b432e:	f001 faa1 	bl	b5874 <_ZN15Adafruit_ST77894initEtt>

#ifdef __cplusplus
extern "C" {
#endif

inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
   b4332:	f001 ff23 	bl	b617c <HAL_Timer_Get_Milli_Seconds>
  tft.fillScreen(ST77XX_BLACK);
   b4336:	2100      	movs	r1, #0
   b4338:	4817      	ldr	r0, [pc, #92]	; (b4398 <setup+0x80>)
   b433a:	f000 fb85 	bl	b4a48 <_ZN12Adafruit_GFX10fillScreenEt>
   b433e:	f001 ff1d 	bl	b617c <HAL_Timer_Get_Milli_Seconds>
  Wire.begin();
   b4342:	f003 fb03 	bl	b794c <_Z19__fetch_global_Wirev>
   b4346:	f002 fca7 	bl	b6c98 <_ZN7TwoWire5beginEv>
  zones_calibration();
   b434a:	f7ff feff 	bl	b414c <_Z17zones_calibrationv>
  if (distanceSensor.init() == false)
   b434e:	4813      	ldr	r0, [pc, #76]	; (b439c <setup+0x84>)
   b4350:	f001 fbf6 	bl	b5b40 <_ZN10SFEVL53L1X4initEv>
   b4354:	4602      	mov	r2, r0
   b4356:	b958      	cbnz	r0, b4370 <setup+0x58>
   b4358:	4b11      	ldr	r3, [pc, #68]	; (b43a0 <setup+0x88>)
   b435a:	4912      	ldr	r1, [pc, #72]	; (b43a4 <setup+0x8c>)
   b435c:	781b      	ldrb	r3, [r3, #0]
   b435e:	f88d 3000 	strb.w	r3, [sp]
   b4362:	a802      	add	r0, sp, #8
   b4364:	233c      	movs	r3, #60	; 0x3c
   b4366:	f002 faa3 	bl	b68b0 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>
   b436a:	a803      	add	r0, sp, #12
   b436c:	f7ff fed8 	bl	b4120 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
    delay(2000);
   b4370:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
   b4374:	f002 f936 	bl	b65e4 <delay>
   b4378:	4b0b      	ldr	r3, [pc, #44]	; (b43a8 <setup+0x90>)
   b437a:	490c      	ldr	r1, [pc, #48]	; (b43ac <setup+0x94>)
   b437c:	781b      	ldrb	r3, [r3, #0]
   b437e:	f88d 3000 	strb.w	r3, [sp]
   b4382:	2200      	movs	r2, #0
   b4384:	233c      	movs	r3, #60	; 0x3c
   b4386:	a802      	add	r0, sp, #8
   b4388:	f002 fa92 	bl	b68b0 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>
   b438c:	a803      	add	r0, sp, #12
   b438e:	f7ff fec7 	bl	b4120 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   b4392:	b005      	add	sp, #20
   b4394:	f85d fb04 	ldr.w	pc, [sp], #4
   b4398:	2003e668 	.word	0x2003e668
   b439c:	2003e648 	.word	0x2003e648
   b43a0:	2003e628 	.word	0x2003e628
   b43a4:	000b883f 	.word	0x000b883f
   b43a8:	2003e634 	.word	0x2003e634
   b43ac:	000b8851 	.word	0x000b8851

000b43b0 <_Z5countv>:
void count() {
   b43b0:	b570      	push	{r4, r5, r6, lr}
    if ((Entry_state == 1) && (Exit_state == 0)) { 
   b43b2:	4e32      	ldr	r6, [pc, #200]	; (b447c <_Z5countv+0xcc>)
   b43b4:	4c32      	ldr	r4, [pc, #200]	; (b4480 <_Z5countv+0xd0>)
   b43b6:	6833      	ldr	r3, [r6, #0]
   b43b8:	2b01      	cmp	r3, #1
void count() {
   b43ba:	b08c      	sub	sp, #48	; 0x30
    if ((Entry_state == 1) && (Exit_state == 0)) { 
   b43bc:	d155      	bne.n	b446a <_Z5countv+0xba>
   b43be:	4b31      	ldr	r3, [pc, #196]	; (b4484 <_Z5countv+0xd4>)
   b43c0:	681d      	ldr	r5, [r3, #0]
   b43c2:	2d00      	cmp	r5, #0
   b43c4:	d153      	bne.n	b446e <_Z5countv+0xbe>
        counter = counter + 1;
   b43c6:	6823      	ldr	r3, [r4, #0]
	StringSumHelper(const char *p) : String(p) {}
   b43c8:	492f      	ldr	r1, [pc, #188]	; (b4488 <_Z5countv+0xd8>)
   b43ca:	3301      	adds	r3, #1
   b43cc:	a808      	add	r0, sp, #32
   b43ce:	6023      	str	r3, [r4, #0]
   b43d0:	f002 ff7b 	bl	b72ca <_ZN6StringC1EPK19__FlashStringHelper>
        Particle.publish("Counter: " + String(counter), PRIVATE);
   b43d4:	220a      	movs	r2, #10
   b43d6:	6821      	ldr	r1, [r4, #0]
   b43d8:	a804      	add	r0, sp, #16
   b43da:	f002 ffb6 	bl	b734a <_ZN6StringC1Eih>
   b43de:	a904      	add	r1, sp, #16
   b43e0:	a808      	add	r0, sp, #32
   b43e2:	f002 fff6 	bl	b73d2 <_ZplRK15StringSumHelperRK6String>
	const char * c_str() const { return buffer; }
   b43e6:	4b29      	ldr	r3, [pc, #164]	; (b448c <_Z5countv+0xdc>)
   b43e8:	6801      	ldr	r1, [r0, #0]
   b43ea:	781b      	ldrb	r3, [r3, #0]
   b43ec:	f88d 3000 	strb.w	r3, [sp]
   b43f0:	462a      	mov	r2, r5
   b43f2:	233c      	movs	r3, #60	; 0x3c
   b43f4:	a802      	add	r0, sp, #8
   b43f6:	f002 fa5b 	bl	b68b0 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>
   b43fa:	a803      	add	r0, sp, #12
   b43fc:	f7ff fe90 	bl	b4120 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   b4400:	a804      	add	r0, sp, #16
   b4402:	f002 ff17 	bl	b7234 <_ZN6StringD1Ev>
class StringSumHelper : public String
   b4406:	a808      	add	r0, sp, #32
   b4408:	f002 ff14 	bl	b7234 <_ZN6StringD1Ev>
        TFT();
   b440c:	f7ff fe5e 	bl	b40cc <_Z3TFTv>
        Entry_state = 0;
   b4410:	6035      	str	r5, [r6, #0]
    if ((Entry_state == 0) && (Exit_state == 1)) { 
   b4412:	4d1c      	ldr	r5, [pc, #112]	; (b4484 <_Z5countv+0xd4>)
   b4414:	682b      	ldr	r3, [r5, #0]
   b4416:	2b01      	cmp	r3, #1
   b4418:	d129      	bne.n	b446e <_Z5countv+0xbe>
        counter = counter - 1;    
   b441a:	6823      	ldr	r3, [r4, #0]
	StringSumHelper(const char *p) : String(p) {}
   b441c:	491a      	ldr	r1, [pc, #104]	; (b4488 <_Z5countv+0xd8>)
   b441e:	3b01      	subs	r3, #1
   b4420:	a808      	add	r0, sp, #32
   b4422:	6023      	str	r3, [r4, #0]
   b4424:	f002 ff51 	bl	b72ca <_ZN6StringC1EPK19__FlashStringHelper>
        Particle.publish("Counter: " + String(counter), PRIVATE);
   b4428:	220a      	movs	r2, #10
   b442a:	6821      	ldr	r1, [r4, #0]
   b442c:	a804      	add	r0, sp, #16
   b442e:	f002 ff8c 	bl	b734a <_ZN6StringC1Eih>
   b4432:	a904      	add	r1, sp, #16
   b4434:	a808      	add	r0, sp, #32
   b4436:	f002 ffcc 	bl	b73d2 <_ZplRK15StringSumHelperRK6String>
	const char * c_str() const { return buffer; }
   b443a:	4b14      	ldr	r3, [pc, #80]	; (b448c <_Z5countv+0xdc>)
   b443c:	6801      	ldr	r1, [r0, #0]
   b443e:	781b      	ldrb	r3, [r3, #0]
   b4440:	f88d 3000 	strb.w	r3, [sp]
   b4444:	2200      	movs	r2, #0
   b4446:	233c      	movs	r3, #60	; 0x3c
   b4448:	a802      	add	r0, sp, #8
   b444a:	f002 fa31 	bl	b68b0 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>
   b444e:	a803      	add	r0, sp, #12
   b4450:	f7ff fe66 	bl	b4120 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   b4454:	a804      	add	r0, sp, #16
   b4456:	f002 feed 	bl	b7234 <_ZN6StringD1Ev>
class StringSumHelper : public String
   b445a:	a808      	add	r0, sp, #32
   b445c:	f002 feea 	bl	b7234 <_ZN6StringD1Ev>
        TFT();
   b4460:	f7ff fe34 	bl	b40cc <_Z3TFTv>
        Exit_state = 0;
   b4464:	2300      	movs	r3, #0
   b4466:	602b      	str	r3, [r5, #0]
   b4468:	e001      	b.n	b446e <_Z5countv+0xbe>
    if ((Entry_state == 0) && (Exit_state == 1)) { 
   b446a:	2b00      	cmp	r3, #0
   b446c:	d0d1      	beq.n	b4412 <_Z5countv+0x62>
    if (counter <= 0) {
   b446e:	6823      	ldr	r3, [r4, #0]
   b4470:	2b00      	cmp	r3, #0
        counter = 0;
   b4472:	bfdc      	itt	le
   b4474:	2300      	movle	r3, #0
   b4476:	6023      	strle	r3, [r4, #0]
}
   b4478:	b00c      	add	sp, #48	; 0x30
   b447a:	bd70      	pop	{r4, r5, r6, pc}
   b447c:	2003e5f0 	.word	0x2003e5f0
   b4480:	2003e640 	.word	0x2003e640
   b4484:	2003e5f4 	.word	0x2003e5f4
   b4488:	000b885c 	.word	0x000b885c
   b448c:	2003e634 	.word	0x2003e634

000b4490 <_Z20people_counter_arrayv>:
void people_counter_array() {
   b4490:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    if (PathTrack[0][0] < PathTrack[0][1]) {
   b4492:	4b29      	ldr	r3, [pc, #164]	; (b4538 <_Z20people_counter_arrayv+0xa8>)
   b4494:	4d29      	ldr	r5, [pc, #164]	; (b453c <_Z20people_counter_arrayv+0xac>)
    if ((PathTrack[2][0] > PathTrack[1][0]) &&  (PathTrack[2][1] > PathTrack[1][1])) {
   b4496:	691e      	ldr	r6, [r3, #16]
    if (PathTrack[0][0] < PathTrack[0][1]) {
   b4498:	e9d3 2100 	ldrd	r2, r1, [r3]
    if (PathTrack[1][0] > PathTrack[1][1]) {
   b449c:	e9d3 0402 	ldrd	r0, r4, [r3, #8]
        ROUTE[0] = 2;
   b44a0:	428a      	cmp	r2, r1
   b44a2:	bfb4      	ite	lt
   b44a4:	2201      	movlt	r2, #1
   b44a6:	2202      	movge	r2, #2
        ROUTE[1] = 1;
   b44a8:	42a0      	cmp	r0, r4
   b44aa:	bfd4      	ite	le
   b44ac:	2102      	movle	r1, #2
   b44ae:	2101      	movgt	r1, #1
    if ((PathTrack[2][0] > PathTrack[1][0]) &&  (PathTrack[2][1] > PathTrack[1][1])) {
   b44b0:	42b0      	cmp	r0, r6
   b44b2:	602a      	str	r2, [r5, #0]
    if (PathTrack[1][0] > PathTrack[1][1]) {
   b44b4:	6069      	str	r1, [r5, #4]
    if ((PathTrack[2][0] > PathTrack[1][0]) &&  (PathTrack[2][1] > PathTrack[1][1])) {
   b44b6:	da26      	bge.n	b4506 <_Z20people_counter_arrayv+0x76>
   b44b8:	695b      	ldr	r3, [r3, #20]
        ROUTE[2] = 1;
   b44ba:	429c      	cmp	r4, r3
   b44bc:	bfac      	ite	ge
   b44be:	2402      	movge	r4, #2
   b44c0:	2401      	movlt	r4, #1
    if ((ROUTE[0] == 1) && (ROUTE[1] == 1) && (ROUTE[2] == 1))  {
   b44c2:	2a01      	cmp	r2, #1
   b44c4:	60ac      	str	r4, [r5, #8]
   b44c6:	d120      	bne.n	b450a <_Z20people_counter_arrayv+0x7a>
   b44c8:	2901      	cmp	r1, #1
   b44ca:	d113      	bne.n	b44f4 <_Z20people_counter_arrayv+0x64>
   b44cc:	2c01      	cmp	r4, #1
   b44ce:	d111      	bne.n	b44f4 <_Z20people_counter_arrayv+0x64>
   b44d0:	4b1b      	ldr	r3, [pc, #108]	; (b4540 <_Z20people_counter_arrayv+0xb0>)
   b44d2:	491c      	ldr	r1, [pc, #112]	; (b4544 <_Z20people_counter_arrayv+0xb4>)
   b44d4:	781b      	ldrb	r3, [r3, #0]
   b44d6:	f88d 3000 	strb.w	r3, [sp]
   b44da:	2200      	movs	r2, #0
   b44dc:	233c      	movs	r3, #60	; 0x3c
   b44de:	a802      	add	r0, sp, #8
   b44e0:	f002 f9e6 	bl	b68b0 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>
   b44e4:	a803      	add	r0, sp, #12
   b44e6:	f7ff fe1b 	bl	b4120 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
        Entry_state = 1;
   b44ea:	4b17      	ldr	r3, [pc, #92]	; (b4548 <_Z20people_counter_arrayv+0xb8>)
   b44ec:	601c      	str	r4, [r3, #0]
        Exit_state = 0;
   b44ee:	4b17      	ldr	r3, [pc, #92]	; (b454c <_Z20people_counter_arrayv+0xbc>)
   b44f0:	2200      	movs	r2, #0
   b44f2:	601a      	str	r2, [r3, #0]
    ROUTE[0] = 0;
   b44f4:	2300      	movs	r3, #0
    ROUTE[1] = 0;
   b44f6:	e9c5 3300 	strd	r3, r3, [r5]
    ROUTE[2] = 0;
   b44fa:	60ab      	str	r3, [r5, #8]
}
   b44fc:	b004      	add	sp, #16
   b44fe:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    count();
   b4502:	f7ff bf55 	b.w	b43b0 <_Z5countv>
        ROUTE[2] = 2;
   b4506:	2402      	movs	r4, #2
   b4508:	e7db      	b.n	b44c2 <_Z20people_counter_arrayv+0x32>
    } else if ((ROUTE[0] == 2) && (ROUTE[1] == 2) && (ROUTE[2] == 1)) {
   b450a:	2902      	cmp	r1, #2
   b450c:	d1f2      	bne.n	b44f4 <_Z20people_counter_arrayv+0x64>
   b450e:	2c01      	cmp	r4, #1
   b4510:	d1f0      	bne.n	b44f4 <_Z20people_counter_arrayv+0x64>
   b4512:	4b0b      	ldr	r3, [pc, #44]	; (b4540 <_Z20people_counter_arrayv+0xb0>)
   b4514:	490e      	ldr	r1, [pc, #56]	; (b4550 <_Z20people_counter_arrayv+0xc0>)
   b4516:	781b      	ldrb	r3, [r3, #0]
   b4518:	f88d 3000 	strb.w	r3, [sp]
   b451c:	2200      	movs	r2, #0
   b451e:	233c      	movs	r3, #60	; 0x3c
   b4520:	a802      	add	r0, sp, #8
   b4522:	f002 f9c5 	bl	b68b0 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>
   b4526:	a803      	add	r0, sp, #12
   b4528:	f7ff fdfa 	bl	b4120 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
        Entry_state = 0;
   b452c:	4b06      	ldr	r3, [pc, #24]	; (b4548 <_Z20people_counter_arrayv+0xb8>)
   b452e:	2200      	movs	r2, #0
   b4530:	601a      	str	r2, [r3, #0]
        Exit_state = 1;
   b4532:	4b06      	ldr	r3, [pc, #24]	; (b454c <_Z20people_counter_arrayv+0xbc>)
   b4534:	601c      	str	r4, [r3, #0]
   b4536:	e7dd      	b.n	b44f4 <_Z20people_counter_arrayv+0x64>
   b4538:	2003e5f8 	.word	0x2003e5f8
   b453c:	2003e618 	.word	0x2003e618
   b4540:	2003e634 	.word	0x2003e634
   b4544:	000b8866 	.word	0x000b8866
   b4548:	2003e5f0 	.word	0x2003e5f0
   b454c:	2003e5f4 	.word	0x2003e5f4
   b4550:	000b886d 	.word	0x000b886d

000b4554 <_Z4Pathv>:
void Path() {
   b4554:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    number_attempts = 2;
   b4558:	f8df a14c 	ldr.w	sl, [pc, #332]	; b46a8 <_Z4Pathv+0x154>
    distance = 0;
   b455c:	4e4b      	ldr	r6, [pc, #300]	; (b468c <_Z4Pathv+0x138>)
   b455e:	4f4c      	ldr	r7, [pc, #304]	; (b4690 <_Z4Pathv+0x13c>)
            sum_zone_0 = 0;
   b4560:	f8df 8148 	ldr.w	r8, [pc, #328]	; b46ac <_Z4Pathv+0x158>
            sum_zone_1 = 0;
   b4564:	f8df b148 	ldr.w	fp, [pc, #328]	; b46b0 <_Z4Pathv+0x15c>
    number_attempts = 2;
   b4568:	2302      	movs	r3, #2
   b456a:	f8ca 3000 	str.w	r3, [sl]
    Zone = 0;
   b456e:	4b49      	ldr	r3, [pc, #292]	; (b4694 <_Z4Pathv+0x140>)
    distance = 0;
   b4570:	2500      	movs	r5, #0
   b4572:	8035      	strh	r5, [r6, #0]
    Zone = 0;
   b4574:	601d      	str	r5, [r3, #0]
            sum_zone_0 = 0;
   b4576:	2300      	movs	r3, #0
            distanceSensor.setIntermeasurementPeriod(35);
   b4578:	4c47      	ldr	r4, [pc, #284]	; (b4698 <_Z4Pathv+0x144>)
            sum_zone_0 = 0;
   b457a:	f8c8 3000 	str.w	r3, [r8]
            sum_zone_1 = 0;
   b457e:	f8cb 3000 	str.w	r3, [fp]
        for (int i=0; i<number_attempts; i++) {
   b4582:	9301      	str	r3, [sp, #4]
   b4584:	f8da 3000 	ldr.w	r3, [sl]
   b4588:	9a01      	ldr	r2, [sp, #4]
   b458a:	4293      	cmp	r3, r2
   b458c:	dd72      	ble.n	b4674 <_Z4Pathv+0x120>
            distanceSensor.setIntermeasurementPeriod(35);
   b458e:	2123      	movs	r1, #35	; 0x23
   b4590:	4620      	mov	r0, r4
   b4592:	f001 faea 	bl	b5b6a <_ZN10SFEVL53L1X25setIntermeasurementPeriodEt>
            distanceSensor.setDistanceModeLong();
   b4596:	4620      	mov	r0, r4
   b4598:	f001 fae3 	bl	b5b62 <_ZN10SFEVL53L1X19setDistanceModeLongEv>
            distanceSensor.setROI(ROI_height, ROI_width, center[0]);    // first value: height of the zone, second value: width of the zone
   b459c:	4b3f      	ldr	r3, [pc, #252]	; (b469c <_Z4Pathv+0x148>)
   b459e:	4a40      	ldr	r2, [pc, #256]	; (b46a0 <_Z4Pathv+0x14c>)
   b45a0:	4940      	ldr	r1, [pc, #256]	; (b46a4 <_Z4Pathv+0x150>)
   b45a2:	781b      	ldrb	r3, [r3, #0]
   b45a4:	7812      	ldrb	r2, [r2, #0]
   b45a6:	7809      	ldrb	r1, [r1, #0]
            Zone = Zone%2;
   b45a8:	f8df 90e8 	ldr.w	r9, [pc, #232]	; b4694 <_Z4Pathv+0x140>
            distanceSensor.setROI(ROI_height, ROI_width, center[0]);    // first value: height of the zone, second value: width of the zone
   b45ac:	4620      	mov	r0, r4
   b45ae:	f001 faea 	bl	b5b86 <_ZN10SFEVL53L1X6setROIEhhh>
            delay(30);
   b45b2:	201e      	movs	r0, #30
   b45b4:	f002 f816 	bl	b65e4 <delay>
            distanceSensor.setTimingBudgetInMs(33);
   b45b8:	2121      	movs	r1, #33	; 0x21
   b45ba:	4620      	mov	r0, r4
   b45bc:	f001 face 	bl	b5b5c <_ZN10SFEVL53L1X19setTimingBudgetInMsEt>
            distanceSensor.startRanging();                              //Write configuration bytes to initiate measurement
   b45c0:	4620      	mov	r0, r4
   b45c2:	f001 fac5 	bl	b5b50 <_ZN10SFEVL53L1X12startRangingEv>
            distance = distanceSensor.getDistance();                  //Get the result of the measurement from the sensor
   b45c6:	4620      	mov	r0, r4
   b45c8:	f001 fad2 	bl	b5b70 <_ZN10SFEVL53L1X11getDistanceEv>
   b45cc:	8030      	strh	r0, [r6, #0]
            distanceSensor.stopRanging();      
   b45ce:	4620      	mov	r0, r4
   b45d0:	f001 fac1 	bl	b5b56 <_ZN10SFEVL53L1X11stopRangingEv>
            sum_zone_0 = sum_zone_0 + distance;
   b45d4:	f8d8 2000 	ldr.w	r2, [r8]
   b45d8:	8833      	ldrh	r3, [r6, #0]
   b45da:	4413      	add	r3, r2
   b45dc:	f8c8 3000 	str.w	r3, [r8]
            Zone++;
   b45e0:	f8d9 3000 	ldr.w	r3, [r9]
            Zone = Zone%2;
   b45e4:	3301      	adds	r3, #1
   b45e6:	f003 0301 	and.w	r3, r3, #1
   b45ea:	bf48      	it	mi
   b45ec:	425b      	negmi	r3, r3
            delay(10);
   b45ee:	200a      	movs	r0, #10
            Zone = Zone%2;
   b45f0:	f8c9 3000 	str.w	r3, [r9]
            delay(10);
   b45f4:	f001 fff6 	bl	b65e4 <delay>
            distanceSensor.setIntermeasurementPeriod(35);
   b45f8:	2123      	movs	r1, #35	; 0x23
   b45fa:	4620      	mov	r0, r4
   b45fc:	f001 fab5 	bl	b5b6a <_ZN10SFEVL53L1X25setIntermeasurementPeriodEt>
            distanceSensor.setDistanceModeLong();
   b4600:	4620      	mov	r0, r4
   b4602:	f001 faae 	bl	b5b62 <_ZN10SFEVL53L1X19setDistanceModeLongEv>
            distanceSensor.setROI(ROI_height, ROI_width, center[1]);    // first value: height of the zone, second value: width of the zone
   b4606:	4b25      	ldr	r3, [pc, #148]	; (b469c <_Z4Pathv+0x148>)
   b4608:	4a25      	ldr	r2, [pc, #148]	; (b46a0 <_Z4Pathv+0x14c>)
   b460a:	4926      	ldr	r1, [pc, #152]	; (b46a4 <_Z4Pathv+0x150>)
   b460c:	791b      	ldrb	r3, [r3, #4]
   b460e:	7812      	ldrb	r2, [r2, #0]
   b4610:	7809      	ldrb	r1, [r1, #0]
   b4612:	4620      	mov	r0, r4
   b4614:	f001 fab7 	bl	b5b86 <_ZN10SFEVL53L1X6setROIEhhh>
            delay(30);
   b4618:	201e      	movs	r0, #30
   b461a:	f001 ffe3 	bl	b65e4 <delay>
            distanceSensor.setTimingBudgetInMs(33);
   b461e:	2121      	movs	r1, #33	; 0x21
   b4620:	4620      	mov	r0, r4
   b4622:	f001 fa9b 	bl	b5b5c <_ZN10SFEVL53L1X19setTimingBudgetInMsEt>
            distanceSensor.startRanging();                              //Write configuration bytes to initiate measurement
   b4626:	4620      	mov	r0, r4
   b4628:	f001 fa92 	bl	b5b50 <_ZN10SFEVL53L1X12startRangingEv>
            distance = distanceSensor.getDistance();                  //Get the result of the measurement from the sensor
   b462c:	4620      	mov	r0, r4
   b462e:	f001 fa9f 	bl	b5b70 <_ZN10SFEVL53L1X11getDistanceEv>
   b4632:	8030      	strh	r0, [r6, #0]
            distanceSensor.stopRanging();      
   b4634:	4620      	mov	r0, r4
   b4636:	f001 fa8e 	bl	b5b56 <_ZN10SFEVL53L1X11stopRangingEv>
            sum_zone_1 = sum_zone_1 + distance;
   b463a:	f8db 3000 	ldr.w	r3, [fp]
   b463e:	8832      	ldrh	r2, [r6, #0]
            PathTrack[k][0] = sum_zone_0 / number_attempts;
   b4640:	f8da 1000 	ldr.w	r1, [sl]
            sum_zone_1 = sum_zone_1 + distance;
   b4644:	441a      	add	r2, r3
            Zone++;
   b4646:	f8d9 3000 	ldr.w	r3, [r9]
            sum_zone_1 = sum_zone_1 + distance;
   b464a:	f8cb 2000 	str.w	r2, [fp]
            Zone = Zone%2;
   b464e:	3301      	adds	r3, #1
   b4650:	f003 0301 	and.w	r3, r3, #1
   b4654:	bf48      	it	mi
   b4656:	425b      	negmi	r3, r3
   b4658:	f8c9 3000 	str.w	r3, [r9]
            PathTrack[k][0] = sum_zone_0 / number_attempts;
   b465c:	f8d8 3000 	ldr.w	r3, [r8]
   b4660:	fb93 f3f1 	sdiv	r3, r3, r1
   b4664:	603b      	str	r3, [r7, #0]
        for (int i=0; i<number_attempts; i++) {
   b4666:	9b01      	ldr	r3, [sp, #4]
            PathTrack[k][1] = sum_zone_1 / number_attempts;
   b4668:	fb92 f2f1 	sdiv	r2, r2, r1
        for (int i=0; i<number_attempts; i++) {
   b466c:	3301      	adds	r3, #1
            PathTrack[k][1] = sum_zone_1 / number_attempts;
   b466e:	607a      	str	r2, [r7, #4]
        for (int i=0; i<number_attempts; i++) {
   b4670:	9301      	str	r3, [sp, #4]
   b4672:	e787      	b.n	b4584 <_Z4Pathv+0x30>
    for (int k=0; k<3; k++) {  
   b4674:	3501      	adds	r5, #1
   b4676:	2d03      	cmp	r5, #3
   b4678:	f107 0708 	add.w	r7, r7, #8
   b467c:	f47f af7b 	bne.w	b4576 <_Z4Pathv+0x22>
}    
   b4680:	b003      	add	sp, #12
   b4682:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
      people_counter_array();   
   b4686:	f7ff bf03 	b.w	b4490 <_Z20people_counter_arrayv>
   b468a:	bf00      	nop
   b468c:	2003e644 	.word	0x2003e644
   b4690:	2003e5f8 	.word	0x2003e5f8
   b4694:	2003e624 	.word	0x2003e624
   b4698:	2003e648 	.word	0x2003e648
   b469c:	2003e62c 	.word	0x2003e62c
   b46a0:	2003e614 	.word	0x2003e614
   b46a4:	2003e610 	.word	0x2003e610
   b46a8:	2003e65c 	.word	0x2003e65c
   b46ac:	2003e660 	.word	0x2003e660
   b46b0:	2003e664 	.word	0x2003e664

000b46b4 <_Z13measure_zonesv>:
void measure_zones() {
   b46b4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    distance = 0;
   b46b8:	4f54      	ldr	r7, [pc, #336]	; (b480c <_Z13measure_zonesv+0x158>)
    sum_zone_0 = 0;
   b46ba:	f8df 9170 	ldr.w	r9, [pc, #368]	; b482c <_Z13measure_zonesv+0x178>
    sum_zone_1 = 0;
   b46be:	f8df a170 	ldr.w	sl, [pc, #368]	; b4830 <_Z13measure_zonesv+0x17c>
    number_attempts = 1;
   b46c2:	f8df b170 	ldr.w	fp, [pc, #368]	; b4834 <_Z13measure_zonesv+0x180>
    Zone = 0;
   b46c6:	4e52      	ldr	r6, [pc, #328]	; (b4810 <_Z13measure_zonesv+0x15c>)
      distanceSensor.setIntermeasurementPeriod(35);
   b46c8:	4c52      	ldr	r4, [pc, #328]	; (b4814 <_Z13measure_zonesv+0x160>)
    distance = 0;
   b46ca:	2500      	movs	r5, #0
    number_attempts = 1;
   b46cc:	2301      	movs	r3, #1
    distance = 0;
   b46ce:	803d      	strh	r5, [r7, #0]
    sum_zone_0 = 0;
   b46d0:	f8c9 5000 	str.w	r5, [r9]
    sum_zone_1 = 0;
   b46d4:	f8ca 5000 	str.w	r5, [sl]
    number_attempts = 1;
   b46d8:	f8cb 3000 	str.w	r3, [fp]
    Zone = 0;
   b46dc:	6035      	str	r5, [r6, #0]
      distanceSensor.setIntermeasurementPeriod(35);
   b46de:	2123      	movs	r1, #35	; 0x23
   b46e0:	4620      	mov	r0, r4
   b46e2:	f001 fa42 	bl	b5b6a <_ZN10SFEVL53L1X25setIntermeasurementPeriodEt>
      distanceSensor.setDistanceModeLong();
   b46e6:	4620      	mov	r0, r4
   b46e8:	f001 fa3b 	bl	b5b62 <_ZN10SFEVL53L1X19setDistanceModeLongEv>
      distanceSensor.setROI(ROI_height, ROI_width, center[0]);  // first value: height of the zone, second value: width of the zone
   b46ec:	f8df 8148 	ldr.w	r8, [pc, #328]	; b4838 <_Z13measure_zonesv+0x184>
   b46f0:	4b49      	ldr	r3, [pc, #292]	; (b4818 <_Z13measure_zonesv+0x164>)
   b46f2:	494a      	ldr	r1, [pc, #296]	; (b481c <_Z13measure_zonesv+0x168>)
   b46f4:	f898 2000 	ldrb.w	r2, [r8]
   b46f8:	781b      	ldrb	r3, [r3, #0]
   b46fa:	7809      	ldrb	r1, [r1, #0]
   b46fc:	4620      	mov	r0, r4
   b46fe:	f001 fa42 	bl	b5b86 <_ZN10SFEVL53L1X6setROIEhhh>
      delay(25);
   b4702:	2019      	movs	r0, #25
   b4704:	f001 ff6e 	bl	b65e4 <delay>
      distanceSensor.setTimingBudgetInMs(33);
   b4708:	2121      	movs	r1, #33	; 0x21
   b470a:	4620      	mov	r0, r4
   b470c:	f001 fa26 	bl	b5b5c <_ZN10SFEVL53L1X19setTimingBudgetInMsEt>
      distanceSensor.startRanging();                            //Write configuration bytes to initiate measurement
   b4710:	4620      	mov	r0, r4
   b4712:	f001 fa1d 	bl	b5b50 <_ZN10SFEVL53L1X12startRangingEv>
      distance = distanceSensor.getDistance();                  //Get the result of the measurement from the sensor
   b4716:	4620      	mov	r0, r4
   b4718:	f001 fa2a 	bl	b5b70 <_ZN10SFEVL53L1X11getDistanceEv>
   b471c:	8038      	strh	r0, [r7, #0]
      distanceSensor.stopRanging();      
   b471e:	4620      	mov	r0, r4
   b4720:	f001 fa19 	bl	b5b56 <_ZN10SFEVL53L1X11stopRangingEv>
      sum_zone_0 = sum_zone_0 + distance;
   b4724:	f8d9 2000 	ldr.w	r2, [r9]
   b4728:	883b      	ldrh	r3, [r7, #0]
   b472a:	4413      	add	r3, r2
   b472c:	f8c9 3000 	str.w	r3, [r9]
      Zone++;
   b4730:	6833      	ldr	r3, [r6, #0]
      Zone = Zone%2;
   b4732:	3301      	adds	r3, #1
   b4734:	f003 0301 	and.w	r3, r3, #1
   b4738:	bf48      	it	mi
   b473a:	425b      	negmi	r3, r3
      distanceSensor.setIntermeasurementPeriod(35);
   b473c:	2123      	movs	r1, #35	; 0x23
   b473e:	4620      	mov	r0, r4
      Zone = Zone%2;
   b4740:	6033      	str	r3, [r6, #0]
      distanceSensor.setIntermeasurementPeriod(35);
   b4742:	f001 fa12 	bl	b5b6a <_ZN10SFEVL53L1X25setIntermeasurementPeriodEt>
      distanceSensor.setDistanceModeLong();
   b4746:	4620      	mov	r0, r4
   b4748:	f001 fa0b 	bl	b5b62 <_ZN10SFEVL53L1X19setDistanceModeLongEv>
      distanceSensor.setROI(ROI_height, ROI_width, center[1]);  // first value: height of the zone, second value: width of the zone
   b474c:	4b32      	ldr	r3, [pc, #200]	; (b4818 <_Z13measure_zonesv+0x164>)
   b474e:	4933      	ldr	r1, [pc, #204]	; (b481c <_Z13measure_zonesv+0x168>)
   b4750:	791b      	ldrb	r3, [r3, #4]
   b4752:	f898 2000 	ldrb.w	r2, [r8]
   b4756:	7809      	ldrb	r1, [r1, #0]
   b4758:	4620      	mov	r0, r4
   b475a:	f001 fa14 	bl	b5b86 <_ZN10SFEVL53L1X6setROIEhhh>
      delay(25);
   b475e:	2019      	movs	r0, #25
   b4760:	f001 ff40 	bl	b65e4 <delay>
      distanceSensor.setTimingBudgetInMs(33);
   b4764:	2121      	movs	r1, #33	; 0x21
   b4766:	4620      	mov	r0, r4
   b4768:	f001 f9f8 	bl	b5b5c <_ZN10SFEVL53L1X19setTimingBudgetInMsEt>
      distanceSensor.startRanging();                            //Write configuration bytes to initiate measurement
   b476c:	4620      	mov	r0, r4
   b476e:	f001 f9ef 	bl	b5b50 <_ZN10SFEVL53L1X12startRangingEv>
      distance = distanceSensor.getDistance();                  //Get the result of the measurement from the sensor
   b4772:	4620      	mov	r0, r4
   b4774:	f001 f9fc 	bl	b5b70 <_ZN10SFEVL53L1X11getDistanceEv>
   b4778:	8038      	strh	r0, [r7, #0]
      distanceSensor.stopRanging();      
   b477a:	4620      	mov	r0, r4
   b477c:	f001 f9eb 	bl	b5b56 <_ZN10SFEVL53L1X11stopRangingEv>
      sum_zone_1 = sum_zone_1 + distance;
   b4780:	f8da 3000 	ldr.w	r3, [sl]
   b4784:	f8b7 8000 	ldrh.w	r8, [r7]
   b4788:	4498      	add	r8, r3
      Zone++;
   b478a:	6833      	ldr	r3, [r6, #0]
      sum_zone_1 = sum_zone_1 + distance;
   b478c:	f8ca 8000 	str.w	r8, [sl]
      Zone = Zone%2;
   b4790:	3301      	adds	r3, #1
   b4792:	f003 0301 	and.w	r3, r3, #1
   b4796:	bf48      	it	mi
   b4798:	425b      	negmi	r3, r3
   b479a:	6033      	str	r3, [r6, #0]
    for (int i=0; i<number_attempts; i++) {
   b479c:	f8db 3000 	ldr.w	r3, [fp]
   b47a0:	3501      	adds	r5, #1
   b47a2:	42ab      	cmp	r3, r5
   b47a4:	dc9b      	bgt.n	b46de <_Z13measure_zonesv+0x2a>
    if ((sum_zone_0 <= (calibrated_zone_0 * 0.75)) || (sum_zone_1 <= (calibrated_zone_1 * 0.75))) {
   b47a6:	f8d9 0000 	ldr.w	r0, [r9]
   b47aa:	f003 fa8b 	bl	b7cc4 <__aeabi_i2d>
   b47ae:	4b1c      	ldr	r3, [pc, #112]	; (b4820 <_Z13measure_zonesv+0x16c>)
   b47b0:	4604      	mov	r4, r0
   b47b2:	6818      	ldr	r0, [r3, #0]
   b47b4:	460d      	mov	r5, r1
   b47b6:	f003 fa97 	bl	b7ce8 <__aeabi_f2d>
   b47ba:	4b1a      	ldr	r3, [pc, #104]	; (b4824 <_Z13measure_zonesv+0x170>)
   b47bc:	2200      	movs	r2, #0
   b47be:	f003 faeb 	bl	b7d98 <__aeabi_dmul>
   b47c2:	4602      	mov	r2, r0
   b47c4:	460b      	mov	r3, r1
   b47c6:	4620      	mov	r0, r4
   b47c8:	4629      	mov	r1, r5
   b47ca:	f003 fd61 	bl	b8290 <__aeabi_dcmple>
   b47ce:	b998      	cbnz	r0, b47f8 <_Z13measure_zonesv+0x144>
   b47d0:	4640      	mov	r0, r8
   b47d2:	f003 fa77 	bl	b7cc4 <__aeabi_i2d>
   b47d6:	4b14      	ldr	r3, [pc, #80]	; (b4828 <_Z13measure_zonesv+0x174>)
   b47d8:	4604      	mov	r4, r0
   b47da:	6818      	ldr	r0, [r3, #0]
   b47dc:	460d      	mov	r5, r1
   b47de:	f003 fa83 	bl	b7ce8 <__aeabi_f2d>
   b47e2:	4b10      	ldr	r3, [pc, #64]	; (b4824 <_Z13measure_zonesv+0x170>)
   b47e4:	2200      	movs	r2, #0
   b47e6:	f003 fad7 	bl	b7d98 <__aeabi_dmul>
   b47ea:	4602      	mov	r2, r0
   b47ec:	460b      	mov	r3, r1
   b47ee:	4620      	mov	r0, r4
   b47f0:	4629      	mov	r1, r5
   b47f2:	f003 fd4d 	bl	b8290 <__aeabi_dcmple>
   b47f6:	b130      	cbz	r0, b4806 <_Z13measure_zonesv+0x152>
        delay(10);
   b47f8:	200a      	movs	r0, #10
   b47fa:	f001 fef3 	bl	b65e4 <delay>
}
   b47fe:	e8bd 4ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
        Path();
   b4802:	f7ff bea7 	b.w	b4554 <_Z4Pathv>
}
   b4806:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   b480a:	bf00      	nop
   b480c:	2003e644 	.word	0x2003e644
   b4810:	2003e624 	.word	0x2003e624
   b4814:	2003e648 	.word	0x2003e648
   b4818:	2003e62c 	.word	0x2003e62c
   b481c:	2003e610 	.word	0x2003e610
   b4820:	2003e638 	.word	0x2003e638
   b4824:	3fe80000 	.word	0x3fe80000
   b4828:	2003e63c 	.word	0x2003e63c
   b482c:	2003e660 	.word	0x2003e660
   b4830:	2003e664 	.word	0x2003e664
   b4834:	2003e65c 	.word	0x2003e65c
   b4838:	2003e614 	.word	0x2003e614

000b483c <loop>:
  measure_zones();
   b483c:	f7ff bf3a 	b.w	b46b4 <_Z13measure_zonesv>

000b4840 <_GLOBAL__sub_I_distanceSensor>:
        val_(val) {
   b4840:	4b0b      	ldr	r3, [pc, #44]	; (b4870 <_GLOBAL__sub_I_distanceSensor+0x30>)
   b4842:	2200      	movs	r2, #0
}
   b4844:	b510      	push	{r4, lr}
   b4846:	701a      	strb	r2, [r3, #0]
   b4848:	4b0a      	ldr	r3, [pc, #40]	; (b4874 <_GLOBAL__sub_I_distanceSensor+0x34>)
   b484a:	2201      	movs	r2, #1
   b484c:	701a      	strb	r2, [r3, #0]
SFEVL53L1X distanceSensor(Wire);
   b484e:	f003 f87d 	bl	b794c <_Z19__fetch_global_Wirev>
   b4852:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   b4856:	4601      	mov	r1, r0
   b4858:	461a      	mov	r2, r3
   b485a:	4807      	ldr	r0, [pc, #28]	; (b4878 <_GLOBAL__sub_I_distanceSensor+0x38>)
   b485c:	f001 f946 	bl	b5aec <_ZN10SFEVL53L1XC1ER7TwoWireii>
}
   b4860:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
Adafruit_ST7789 tft = Adafruit_ST7789(TFT_CS, TFT_DC, TFT_RST);   // Hardware SPI
   b4864:	4805      	ldr	r0, [pc, #20]	; (b487c <_GLOBAL__sub_I_distanceSensor+0x3c>)
   b4866:	2306      	movs	r3, #6
   b4868:	2205      	movs	r2, #5
   b486a:	210e      	movs	r1, #14
   b486c:	f000 bff8 	b.w	b5860 <_ZN15Adafruit_ST7789C1Eaaa>
   b4870:	2003e628 	.word	0x2003e628
   b4874:	2003e634 	.word	0x2003e634
   b4878:	2003e648 	.word	0x2003e648
   b487c:	2003e668 	.word	0x2003e668

000b4880 <_ZN12Adafruit_GFX9writeLineEsssst>:
    @param    y1  End point y coordinate
    @param    color 16-bit 5-6-5 Color to draw with
*/
/**************************************************************************/
void Adafruit_GFX::writeLine(int16_t x0, int16_t y0, int16_t x1, int16_t y1,
        uint16_t color) {
   b4880:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b4884:	b085      	sub	sp, #20
   b4886:	461f      	mov	r7, r3
   b4888:	f9bd 8038 	ldrsh.w	r8, [sp, #56]	; 0x38
   b488c:	f8bd 303c 	ldrh.w	r3, [sp, #60]	; 0x3c
#if defined(ESP8266)
    yield();
#endif
    int16_t steep = abs(y1 - y0) > abs(x1 - x0);
   b4890:	eba8 0902 	sub.w	r9, r8, r2
   b4894:	eba7 0a01 	sub.w	sl, r7, r1
   b4898:	f1b9 0f00 	cmp.w	r9, #0
   b489c:	bfb8      	it	lt
   b489e:	f1c9 0900 	rsblt	r9, r9, #0
   b48a2:	f1ba 0f00 	cmp.w	sl, #0
   b48a6:	bfb8      	it	lt
   b48a8:	f1ca 0a00 	rsblt	sl, sl, #0
    if (steep) {
   b48ac:	45d1      	cmp	r9, sl
        uint16_t color) {
   b48ae:	4683      	mov	fp, r0
   b48b0:	460c      	mov	r4, r1
   b48b2:	4615      	mov	r5, r2
    if (steep) {
   b48b4:	dd04      	ble.n	b48c0 <_ZN12Adafruit_GFX9writeLineEsssst+0x40>
   b48b6:	463a      	mov	r2, r7
        _swap_int16_t(x0, y0);
   b48b8:	462c      	mov	r4, r5
        _swap_int16_t(x1, y1);
   b48ba:	4647      	mov	r7, r8
        _swap_int16_t(x0, y0);
   b48bc:	460d      	mov	r5, r1
        _swap_int16_t(x1, y1);
   b48be:	4690      	mov	r8, r2
    }

    if (x0 > x1) {
   b48c0:	42bc      	cmp	r4, r7
   b48c2:	dd05      	ble.n	b48d0 <_ZN12Adafruit_GFX9writeLineEsssst+0x50>
   b48c4:	462a      	mov	r2, r5
        _swap_int16_t(x0, x1);
        _swap_int16_t(y0, y1);
   b48c6:	4645      	mov	r5, r8
   b48c8:	4690      	mov	r8, r2
    if (x0 > x1) {
   b48ca:	4622      	mov	r2, r4
   b48cc:	463c      	mov	r4, r7
   b48ce:	4617      	mov	r7, r2
    }

    int16_t dx, dy;
    dx = x1 - x0;
   b48d0:	1b3e      	subs	r6, r7, r4
   b48d2:	b2b2      	uxth	r2, r6
   b48d4:	9200      	str	r2, [sp, #0]
    dy = abs(y1 - y0);
   b48d6:	eba8 0205 	sub.w	r2, r8, r5
   b48da:	ea82 71e2 	eor.w	r1, r2, r2, asr #31
   b48de:	eba1 71e2 	sub.w	r1, r1, r2, asr #31

    int16_t err = dx / 2;
   b48e2:	f3c6 32c0 	ubfx	r2, r6, #15, #1
   b48e6:	fa02 f686 	sxtah	r6, r2, r6
    int16_t ystep;

    if (y0 < y1) {
        ystep = 1;
    } else {
        ystep = -1;
   b48ea:	4545      	cmp	r5, r8
   b48ec:	bfb4      	ite	lt
   b48ee:	2201      	movlt	r2, #1
   b48f0:	f04f 32ff 	movge.w	r2, #4294967295	; 0xffffffff
    dy = abs(y1 - y0);
   b48f4:	9101      	str	r1, [sp, #4]
    int16_t err = dx / 2;
   b48f6:	1076      	asrs	r6, r6, #1
        ystep = -1;
   b48f8:	9202      	str	r2, [sp, #8]
    }

    for (; x0<=x1; x0++) {
   b48fa:	42bc      	cmp	r4, r7
   b48fc:	dc1c      	bgt.n	b4938 <_ZN12Adafruit_GFX9writeLineEsssst+0xb8>
        if (steep) {
            writePixel(y0, x0, color);
   b48fe:	f8db 2000 	ldr.w	r2, [fp]
   b4902:	9303      	str	r3, [sp, #12]
        if (steep) {
   b4904:	45d1      	cmp	r9, sl
            writePixel(y0, x0, color);
   b4906:	f8d2 8018 	ldr.w	r8, [r2, #24]
   b490a:	bfc7      	ittee	gt
   b490c:	4629      	movgt	r1, r5
   b490e:	4622      	movgt	r2, r4
        } else {
            writePixel(x0, y0, color);
   b4910:	462a      	movle	r2, r5
   b4912:	4621      	movle	r1, r4
   b4914:	4658      	mov	r0, fp
   b4916:	47c0      	blx	r8
        }
        err -= dy;
   b4918:	9a01      	ldr	r2, [sp, #4]
            writePixel(x0, y0, color);
   b491a:	9b03      	ldr	r3, [sp, #12]
        err -= dy;
   b491c:	1ab6      	subs	r6, r6, r2
   b491e:	b2b1      	uxth	r1, r6
   b4920:	b236      	sxth	r6, r6
        if (err < 0) {
   b4922:	2e00      	cmp	r6, #0
   b4924:	da05      	bge.n	b4932 <_ZN12Adafruit_GFX9writeLineEsssst+0xb2>
            y0 += ystep;
   b4926:	9a02      	ldr	r2, [sp, #8]
   b4928:	4415      	add	r5, r2
            err += dx;
   b492a:	9a00      	ldr	r2, [sp, #0]
   b492c:	1856      	adds	r6, r2, r1
            y0 += ystep;
   b492e:	b22d      	sxth	r5, r5
            err += dx;
   b4930:	b236      	sxth	r6, r6
    for (; x0<=x1; x0++) {
   b4932:	3401      	adds	r4, #1
   b4934:	b224      	sxth	r4, r4
   b4936:	e7e0      	b.n	b48fa <_ZN12Adafruit_GFX9writeLineEsssst+0x7a>
        }
    }
}
   b4938:	b005      	add	sp, #20
   b493a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

000b493e <_ZN12Adafruit_GFX10startWriteEv>:
/*!
   @brief    Start a display-writing routine, overwrite in subclasses.
*/
/**************************************************************************/
void Adafruit_GFX::startWrite(){
}
   b493e:	4770      	bx	lr

000b4940 <_ZN12Adafruit_GFX10writePixelEsst>:
    @param   x   x coordinate
    @param   y   y coordinate
   @param    color 16-bit 5-6-5 Color to fill with
*/
/**************************************************************************/
void Adafruit_GFX::writePixel(int16_t x, int16_t y, uint16_t color){
   b4940:	b410      	push	{r4}
    drawPixel(x, y, color);
   b4942:	6804      	ldr	r4, [r0, #0]
   b4944:	6924      	ldr	r4, [r4, #16]
   b4946:	46a4      	mov	ip, r4
}
   b4948:	f85d 4b04 	ldr.w	r4, [sp], #4
    drawPixel(x, y, color);
   b494c:	4760      	bx	ip

000b494e <_ZN12Adafruit_GFX14writeFastVLineEssst>:
    @param    h   Height in pixels
   @param    color 16-bit 5-6-5 Color to fill with
*/
/**************************************************************************/
void Adafruit_GFX::writeFastVLine(int16_t x, int16_t y,
        int16_t h, uint16_t color) {
   b494e:	b430      	push	{r4, r5}
    // Overwrite in subclasses if startWrite is defined!
    // Can be just writeLine(x, y, x, y+h-1, color);
    // or writeFillRect(x, y, 1, h, color);
    drawFastVLine(x, y, h, color);
   b4950:	6804      	ldr	r4, [r0, #0]
        int16_t h, uint16_t color) {
   b4952:	f8bd 5008 	ldrh.w	r5, [sp, #8]
    drawFastVLine(x, y, h, color);
   b4956:	9502      	str	r5, [sp, #8]
   b4958:	6ba4      	ldr	r4, [r4, #56]	; 0x38
   b495a:	46a4      	mov	ip, r4
}
   b495c:	bc30      	pop	{r4, r5}
    drawFastVLine(x, y, h, color);
   b495e:	4760      	bx	ip

000b4960 <_ZN12Adafruit_GFX14writeFastHLineEssst>:
    @param    w   Width in pixels
   @param    color 16-bit 5-6-5 Color to fill with
*/
/**************************************************************************/
void Adafruit_GFX::writeFastHLine(int16_t x, int16_t y,
        int16_t w, uint16_t color) {
   b4960:	b430      	push	{r4, r5}
    // Overwrite in subclasses if startWrite is defined!
    // Example: writeLine(x, y, x+w-1, y, color);
    // or writeFillRect(x, y, w, 1, color);
    drawFastHLine(x, y, w, color);
   b4962:	6804      	ldr	r4, [r0, #0]
        int16_t w, uint16_t color) {
   b4964:	f8bd 5008 	ldrh.w	r5, [sp, #8]
    drawFastHLine(x, y, w, color);
   b4968:	9502      	str	r5, [sp, #8]
   b496a:	6be4      	ldr	r4, [r4, #60]	; 0x3c
   b496c:	46a4      	mov	ip, r4
}
   b496e:	bc30      	pop	{r4, r5}
    drawFastHLine(x, y, w, color);
   b4970:	4760      	bx	ip

000b4972 <_ZN12Adafruit_GFX13writeFillRectEsssst>:
    @param    h   Height in pixels
   @param    color 16-bit 5-6-5 Color to fill with
*/
/**************************************************************************/
void Adafruit_GFX::writeFillRect(int16_t x, int16_t y, int16_t w, int16_t h,
        uint16_t color) {
   b4972:	b470      	push	{r4, r5, r6}
   b4974:	f9bd 500c 	ldrsh.w	r5, [sp, #12]
   b4978:	f8bd 6010 	ldrh.w	r6, [sp, #16]
    // Overwrite in subclasses if desired!
    fillRect(x,y,w,h,color);
   b497c:	6804      	ldr	r4, [r0, #0]
   b497e:	e9cd 5603 	strd	r5, r6, [sp, #12]
   b4982:	6c24      	ldr	r4, [r4, #64]	; 0x40
   b4984:	46a4      	mov	ip, r4
}
   b4986:	bc70      	pop	{r4, r5, r6}
    fillRect(x,y,w,h,color);
   b4988:	4760      	bx	ip

000b498a <_ZN12Adafruit_GFX13drawFastVLineEssst>:
    @param    h   Height in pixels
   @param    color 16-bit 5-6-5 Color to fill with
*/
/**************************************************************************/
void Adafruit_GFX::drawFastVLine(int16_t x, int16_t y,
        int16_t h, uint16_t color) {
   b498a:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   b498e:	461c      	mov	r4, r3
    startWrite();
   b4990:	6803      	ldr	r3, [r0, #0]
        int16_t h, uint16_t color) {
   b4992:	f8bd 8020 	ldrh.w	r8, [sp, #32]
    startWrite();
   b4996:	695b      	ldr	r3, [r3, #20]
        int16_t h, uint16_t color) {
   b4998:	4605      	mov	r5, r0
   b499a:	4616      	mov	r6, r2
    writeLine(x, y, x, y+h-1, color);
   b499c:	3c01      	subs	r4, #1
   b499e:	4434      	add	r4, r6
        int16_t h, uint16_t color) {
   b49a0:	460f      	mov	r7, r1
    writeLine(x, y, x, y+h-1, color);
   b49a2:	b224      	sxth	r4, r4
    startWrite();
   b49a4:	4798      	blx	r3
    writeLine(x, y, x, y+h-1, color);
   b49a6:	682b      	ldr	r3, [r5, #0]
   b49a8:	f8cd 8004 	str.w	r8, [sp, #4]
   b49ac:	9400      	str	r4, [sp, #0]
   b49ae:	6a9c      	ldr	r4, [r3, #40]	; 0x28
   b49b0:	4628      	mov	r0, r5
   b49b2:	463b      	mov	r3, r7
   b49b4:	4632      	mov	r2, r6
   b49b6:	4639      	mov	r1, r7
   b49b8:	47a0      	blx	r4
    endWrite();
   b49ba:	682b      	ldr	r3, [r5, #0]
   b49bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b49be:	4628      	mov	r0, r5
}
   b49c0:	b002      	add	sp, #8
   b49c2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    endWrite();
   b49c6:	4718      	bx	r3

000b49c8 <_ZN12Adafruit_GFX13drawFastHLineEssst>:
    @param    w   Width in pixels
   @param    color 16-bit 5-6-5 Color to fill with
*/
/**************************************************************************/
void Adafruit_GFX::drawFastHLine(int16_t x, int16_t y,
        int16_t w, uint16_t color) {
   b49c8:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   b49cc:	461d      	mov	r5, r3
    startWrite();
   b49ce:	6803      	ldr	r3, [r0, #0]
        int16_t w, uint16_t color) {
   b49d0:	f8bd 8020 	ldrh.w	r8, [sp, #32]
    startWrite();
   b49d4:	695b      	ldr	r3, [r3, #20]
        int16_t w, uint16_t color) {
   b49d6:	4604      	mov	r4, r0
   b49d8:	4617      	mov	r7, r2
   b49da:	460e      	mov	r6, r1
    startWrite();
   b49dc:	4798      	blx	r3
    writeLine(x, y, x+w-1, y, color);
   b49de:	e9cd 7800 	strd	r7, r8, [sp]
   b49e2:	6822      	ldr	r2, [r4, #0]
   b49e4:	1e6b      	subs	r3, r5, #1
   b49e6:	4433      	add	r3, r6
   b49e8:	6a95      	ldr	r5, [r2, #40]	; 0x28
   b49ea:	4620      	mov	r0, r4
   b49ec:	b21b      	sxth	r3, r3
   b49ee:	463a      	mov	r2, r7
   b49f0:	4631      	mov	r1, r6
   b49f2:	47a8      	blx	r5
    endWrite();
   b49f4:	6823      	ldr	r3, [r4, #0]
   b49f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b49f8:	4620      	mov	r0, r4
}
   b49fa:	b002      	add	sp, #8
   b49fc:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    endWrite();
   b4a00:	4718      	bx	r3

000b4a02 <_ZN12Adafruit_GFX8fillRectEsssst>:
    @param    h   Height in pixels
   @param    color 16-bit 5-6-5 Color to fill with
*/
/**************************************************************************/
void Adafruit_GFX::fillRect(int16_t x, int16_t y, int16_t w, int16_t h,
        uint16_t color) {
   b4a02:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
   b4a06:	461e      	mov	r6, r3
    startWrite();
   b4a08:	6803      	ldr	r3, [r0, #0]
        uint16_t color) {
   b4a0a:	f9bd 9028 	ldrsh.w	r9, [sp, #40]	; 0x28
    startWrite();
   b4a0e:	695b      	ldr	r3, [r3, #20]
        uint16_t color) {
   b4a10:	f8bd 802c 	ldrh.w	r8, [sp, #44]	; 0x2c
   b4a14:	460c      	mov	r4, r1
   b4a16:	4605      	mov	r5, r0
   b4a18:	4617      	mov	r7, r2
    startWrite();
   b4a1a:	4798      	blx	r3
    for (int16_t i=x; i<x+w; i++) {
   b4a1c:	4426      	add	r6, r4
   b4a1e:	42b4      	cmp	r4, r6
        writeFastVLine(i, y, h, color);
   b4a20:	682b      	ldr	r3, [r5, #0]
    for (int16_t i=x; i<x+w; i++) {
   b4a22:	da0b      	bge.n	b4a3c <_ZN12Adafruit_GFX8fillRectEsssst+0x3a>
        writeFastVLine(i, y, h, color);
   b4a24:	f8cd 8000 	str.w	r8, [sp]
   b4a28:	f8d3 a020 	ldr.w	sl, [r3, #32]
   b4a2c:	4621      	mov	r1, r4
   b4a2e:	464b      	mov	r3, r9
   b4a30:	463a      	mov	r2, r7
   b4a32:	4628      	mov	r0, r5
   b4a34:	3401      	adds	r4, #1
   b4a36:	47d0      	blx	sl
    for (int16_t i=x; i<x+w; i++) {
   b4a38:	b224      	sxth	r4, r4
   b4a3a:	e7f0      	b.n	b4a1e <_ZN12Adafruit_GFX8fillRectEsssst+0x1c>
    }
    endWrite();
   b4a3c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b4a3e:	4628      	mov	r0, r5
}
   b4a40:	b002      	add	sp, #8
   b4a42:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    endWrite();
   b4a46:	4718      	bx	r3

000b4a48 <_ZN12Adafruit_GFX10fillScreenEt>:
/*!
   @brief    Fill the screen completely with one color. Update in subclasses if desired!
    @param    color 16-bit 5-6-5 Color to fill with
*/
/**************************************************************************/
void Adafruit_GFX::fillScreen(uint16_t color) {
   b4a48:	b513      	push	{r0, r1, r4, lr}
    fillRect(0, 0, _width, _height, color);
   b4a4a:	6802      	ldr	r2, [r0, #0]
   b4a4c:	9101      	str	r1, [sp, #4]
   b4a4e:	f9b0 100e 	ldrsh.w	r1, [r0, #14]
   b4a52:	9100      	str	r1, [sp, #0]
   b4a54:	6c14      	ldr	r4, [r2, #64]	; 0x40
   b4a56:	f9b0 300c 	ldrsh.w	r3, [r0, #12]
   b4a5a:	2200      	movs	r2, #0
   b4a5c:	4611      	mov	r1, r2
   b4a5e:	47a0      	blx	r4
}
   b4a60:	b002      	add	sp, #8
   b4a62:	bd10      	pop	{r4, pc}

000b4a64 <_ZN12Adafruit_GFX8drawLineEsssst>:
    @param    y1  End point y coordinate
    @param    color 16-bit 5-6-5 Color to draw with
*/
/**************************************************************************/
void Adafruit_GFX::drawLine(int16_t x0, int16_t y0, int16_t x1, int16_t y1,
        uint16_t color) {
   b4a64:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
    // Update in subclasses if desired!
    if(x0 == x1){
   b4a68:	4299      	cmp	r1, r3
        uint16_t color) {
   b4a6a:	4616      	mov	r6, r2
   b4a6c:	f9bd 7028 	ldrsh.w	r7, [sp, #40]	; 0x28
   b4a70:	f8bd 902c 	ldrh.w	r9, [sp, #44]	; 0x2c
        if(y0 > y1) _swap_int16_t(y0, y1);
        drawFastVLine(x0, y0, y1 - y0 + 1, color);
   b4a74:	6802      	ldr	r2, [r0, #0]
        uint16_t color) {
   b4a76:	4680      	mov	r8, r0
   b4a78:	460d      	mov	r5, r1
   b4a7a:	461c      	mov	r4, r3
    if(x0 == x1){
   b4a7c:	d113      	bne.n	b4aa6 <_ZN12Adafruit_GFX8drawLineEsssst+0x42>
        if(y0 > y1) _swap_int16_t(y0, y1);
   b4a7e:	42be      	cmp	r6, r7
   b4a80:	bfc8      	it	gt
   b4a82:	4633      	movgt	r3, r6
        drawFastVLine(x0, y0, y1 - y0 + 1, color);
   b4a84:	f8cd 9028 	str.w	r9, [sp, #40]	; 0x28
        if(y0 > y1) _swap_int16_t(y0, y1);
   b4a88:	bfc4      	itt	gt
   b4a8a:	463e      	movgt	r6, r7
   b4a8c:	461f      	movgt	r7, r3
        drawFastVLine(x0, y0, y1 - y0 + 1, color);
   b4a8e:	1c7b      	adds	r3, r7, #1
   b4a90:	6b94      	ldr	r4, [r2, #56]	; 0x38
   b4a92:	1b9b      	subs	r3, r3, r6
    } else if(y0 == y1){
        if(x0 > x1) _swap_int16_t(x0, x1);
        drawFastHLine(x0, y0, x1 - x0 + 1, color);
   b4a94:	b21b      	sxth	r3, r3
   b4a96:	4632      	mov	r2, r6
   b4a98:	4629      	mov	r1, r5
   b4a9a:	4640      	mov	r0, r8
   b4a9c:	46a4      	mov	ip, r4
    } else {
        startWrite();
        writeLine(x0, y0, x1, y1, color);
        endWrite();
    }
}
   b4a9e:	b003      	add	sp, #12
   b4aa0:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
        drawFastHLine(x0, y0, x1 - x0 + 1, color);
   b4aa4:	4760      	bx	ip
    } else if(y0 == y1){
   b4aa6:	42be      	cmp	r6, r7
   b4aa8:	d10a      	bne.n	b4ac0 <_ZN12Adafruit_GFX8drawLineEsssst+0x5c>
        if(x0 > x1) _swap_int16_t(x0, x1);
   b4aaa:	4299      	cmp	r1, r3
   b4aac:	bfc2      	ittt	gt
   b4aae:	460b      	movgt	r3, r1
   b4ab0:	4625      	movgt	r5, r4
   b4ab2:	461c      	movgt	r4, r3
        drawFastHLine(x0, y0, x1 - x0 + 1, color);
   b4ab4:	1c63      	adds	r3, r4, #1
   b4ab6:	f8cd 9028 	str.w	r9, [sp, #40]	; 0x28
   b4aba:	6bd4      	ldr	r4, [r2, #60]	; 0x3c
   b4abc:	1b5b      	subs	r3, r3, r5
   b4abe:	e7e9      	b.n	b4a94 <_ZN12Adafruit_GFX8drawLineEsssst+0x30>
        startWrite();
   b4ac0:	6953      	ldr	r3, [r2, #20]
   b4ac2:	4798      	blx	r3
        writeLine(x0, y0, x1, y1, color);
   b4ac4:	e9cd 7900 	strd	r7, r9, [sp]
   b4ac8:	f8d8 3000 	ldr.w	r3, [r8]
   b4acc:	4640      	mov	r0, r8
   b4ace:	6a9f      	ldr	r7, [r3, #40]	; 0x28
   b4ad0:	4632      	mov	r2, r6
   b4ad2:	4623      	mov	r3, r4
   b4ad4:	4629      	mov	r1, r5
   b4ad6:	47b8      	blx	r7
        endWrite();
   b4ad8:	f8d8 3000 	ldr.w	r3, [r8]
   b4adc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b4ade:	4640      	mov	r0, r8
}
   b4ae0:	b003      	add	sp, #12
   b4ae2:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
        endWrite();
   b4ae6:	4718      	bx	r3

000b4ae8 <_ZN12Adafruit_GFX8drawRectEsssst>:
    @param    h   Height in pixels
    @param    color 16-bit 5-6-5 Color to draw with
*/
/**************************************************************************/
void Adafruit_GFX::drawRect(int16_t x, int16_t y, int16_t w, int16_t h,
        uint16_t color) {
   b4ae8:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
   b4aec:	461d      	mov	r5, r3
    startWrite();
   b4aee:	6803      	ldr	r3, [r0, #0]
        uint16_t color) {
   b4af0:	f8bd 802c 	ldrh.w	r8, [sp, #44]	; 0x2c
    startWrite();
   b4af4:	695b      	ldr	r3, [r3, #20]
        uint16_t color) {
   b4af6:	f9bd 9028 	ldrsh.w	r9, [sp, #40]	; 0x28
   b4afa:	4604      	mov	r4, r0
   b4afc:	460f      	mov	r7, r1
   b4afe:	4616      	mov	r6, r2
    startWrite();
   b4b00:	4798      	blx	r3
    writeFastHLine(x, y, w, color);
   b4b02:	6823      	ldr	r3, [r4, #0]
   b4b04:	f8cd 8000 	str.w	r8, [sp]
   b4b08:	f8d3 a024 	ldr.w	sl, [r3, #36]	; 0x24
   b4b0c:	4632      	mov	r2, r6
   b4b0e:	462b      	mov	r3, r5
   b4b10:	4639      	mov	r1, r7
   b4b12:	4620      	mov	r0, r4
   b4b14:	47d0      	blx	sl
    writeFastHLine(x, y+h-1, w, color);
   b4b16:	6823      	ldr	r3, [r4, #0]
   b4b18:	f8cd 8000 	str.w	r8, [sp]
   b4b1c:	f109 32ff 	add.w	r2, r9, #4294967295	; 0xffffffff
   b4b20:	4432      	add	r2, r6
   b4b22:	f8d3 a024 	ldr.w	sl, [r3, #36]	; 0x24
   b4b26:	4639      	mov	r1, r7
   b4b28:	462b      	mov	r3, r5
   b4b2a:	4620      	mov	r0, r4
   b4b2c:	b212      	sxth	r2, r2
   b4b2e:	47d0      	blx	sl
    writeFastVLine(x, y, h, color);
   b4b30:	6823      	ldr	r3, [r4, #0]
   b4b32:	f8cd 8000 	str.w	r8, [sp]
   b4b36:	f8d3 a020 	ldr.w	sl, [r3, #32]
   b4b3a:	4632      	mov	r2, r6
   b4b3c:	464b      	mov	r3, r9
   b4b3e:	4639      	mov	r1, r7
   b4b40:	4620      	mov	r0, r4
   b4b42:	47d0      	blx	sl
    writeFastVLine(x+w-1, y, h, color);
   b4b44:	1e6b      	subs	r3, r5, #1
   b4b46:	19d9      	adds	r1, r3, r7
   b4b48:	6823      	ldr	r3, [r4, #0]
   b4b4a:	f8cd 8000 	str.w	r8, [sp]
   b4b4e:	6a1d      	ldr	r5, [r3, #32]
   b4b50:	4620      	mov	r0, r4
   b4b52:	464b      	mov	r3, r9
   b4b54:	4632      	mov	r2, r6
   b4b56:	b209      	sxth	r1, r1
   b4b58:	47a8      	blx	r5
    endWrite();
   b4b5a:	6823      	ldr	r3, [r4, #0]
   b4b5c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b4b5e:	4620      	mov	r0, r4
}
   b4b60:	b002      	add	sp, #8
   b4b62:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    endWrite();
   b4b66:	4718      	bx	r3

000b4b68 <_ZN12Adafruit_GFX13invertDisplayEb>:
    @param   i  True if you want to invert, false to make 'normal'
*/
/**************************************************************************/
void Adafruit_GFX::invertDisplay(boolean i) {
    // Do nothing, must be subclassed if supported by hardware
}
   b4b68:	4770      	bx	lr

000b4b6a <_ZN12Adafruit_GFX11setRotationEh>:
    rotation = (x & 3);
   b4b6a:	f001 0303 	and.w	r3, r1, #3
            _height = HEIGHT;
   b4b6e:	f9b0 200a 	ldrsh.w	r2, [r0, #10]
    rotation = (x & 3);
   b4b72:	7683      	strb	r3, [r0, #26]
    switch(rotation) {
   b4b74:	07c9      	lsls	r1, r1, #31
            _width  = WIDTH;
   b4b76:	f9b0 3008 	ldrsh.w	r3, [r0, #8]
   b4b7a:	bf59      	ittee	pl
   b4b7c:	8183      	strhpl	r3, [r0, #12]
            _height = HEIGHT;
   b4b7e:	81c2      	strhpl	r2, [r0, #14]
            _width  = HEIGHT;
   b4b80:	8182      	strhmi	r2, [r0, #12]
            _height = WIDTH;
   b4b82:	81c3      	strhmi	r3, [r0, #14]
}
   b4b84:	4770      	bx	lr
	...

000b4b88 <_ZN12Adafruit_GFXC1Ess>:
Adafruit_GFX::Adafruit_GFX(int16_t w, int16_t h):
   b4b88:	b530      	push	{r4, r5, lr}
WIDTH(w), HEIGHT(h)
   b4b8a:	8142      	strh	r2, [r0, #10]
    _height   = HEIGHT;
   b4b8c:	81c2      	strh	r2, [r0, #14]
    textsize_x = textsize_y  = 1;
   b4b8e:	4a07      	ldr	r2, [pc, #28]	; (b4bac <_ZN12Adafruit_GFXC1Ess+0x24>)
WIDTH(w), HEIGHT(h)
   b4b90:	4d07      	ldr	r5, [pc, #28]	; (b4bb0 <_ZN12Adafruit_GFXC1Ess+0x28>)
   b4b92:	8101      	strh	r1, [r0, #8]
    Print() : write_error(0) {}
   b4b94:	2400      	movs	r4, #0
    _width    = WIDTH;
   b4b96:	8181      	strh	r1, [r0, #12]
    textsize_x = textsize_y  = 1;
   b4b98:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   b4b9c:	e9c0 1205 	strd	r1, r2, [r0, #20]
   b4ba0:	6044      	str	r4, [r0, #4]
WIDTH(w), HEIGHT(h)
   b4ba2:	6005      	str	r5, [r0, #0]
    cursor_y  = cursor_x    = 0;
   b4ba4:	6104      	str	r4, [r0, #16]
    _cp437    = false;
   b4ba6:	7704      	strb	r4, [r0, #28]
    gfxFont   = NULL;
   b4ba8:	6204      	str	r4, [r0, #32]
}
   b4baa:	bd30      	pop	{r4, r5, pc}
   b4bac:	01000101 	.word	0x01000101
   b4bb0:	000b8d7c 	.word	0x000b8d7c

000b4bb4 <_ZN12Adafruit_GFX8drawCharEsshtthh>:
  uint16_t color, uint16_t bg, uint8_t size_x, uint8_t size_y) {
   b4bb4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b4bb8:	ed2d 8b02 	vpush	{d8}
   b4bbc:	b091      	sub	sp, #68	; 0x44
   b4bbe:	4616      	mov	r6, r2
    if(!gfxFont) { // 'Classic' built-in font
   b4bc0:	6a02      	ldr	r2, [r0, #32]
  uint16_t color, uint16_t bg, uint8_t size_x, uint8_t size_y) {
   b4bc2:	f8bd 8074 	ldrh.w	r8, [sp, #116]	; 0x74
   b4bc6:	f89d 5078 	ldrb.w	r5, [sp, #120]	; 0x78
   b4bca:	f89d 407c 	ldrb.w	r4, [sp, #124]	; 0x7c
   b4bce:	9103      	str	r1, [sp, #12]
   b4bd0:	461f      	mov	r7, r3
   b4bd2:	f8bd 3070 	ldrh.w	r3, [sp, #112]	; 0x70
   b4bd6:	9304      	str	r3, [sp, #16]
   b4bd8:	4683      	mov	fp, r0
    if(!gfxFont) { // 'Classic' built-in font
   b4bda:	2a00      	cmp	r2, #0
   b4bdc:	f040 80c5 	bne.w	b4d6a <_ZN12Adafruit_GFX8drawCharEsshtthh+0x1b6>
        if((x >= _width)            || // Clip right
   b4be0:	f9b0 300c 	ldrsh.w	r3, [r0, #12]
   b4be4:	428b      	cmp	r3, r1
   b4be6:	f340 814c 	ble.w	b4e82 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x2ce>
   b4bea:	f9b0 300e 	ldrsh.w	r3, [r0, #14]
   b4bee:	42b3      	cmp	r3, r6
   b4bf0:	f340 8147 	ble.w	b4e82 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x2ce>
           ((x + 6 * size_x - 1) < 0) || // Clip left
   b4bf4:	2306      	movs	r3, #6
   b4bf6:	fb13 1305 	smlabb	r3, r3, r5, r1
           (y >= _height)           || // Clip bottom
   b4bfa:	2b00      	cmp	r3, #0
   b4bfc:	f340 8141 	ble.w	b4e82 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x2ce>
           ((y + 8 * size_y - 1) < 0))   // Clip top
   b4c00:	eb06 03c4 	add.w	r3, r6, r4, lsl #3
           ((x + 6 * size_x - 1) < 0) || // Clip left
   b4c04:	2b00      	cmp	r3, #0
   b4c06:	f340 813c 	ble.w	b4e82 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x2ce>
        if(!_cp437 && (c >= 176)) c++; // Handle 'classic' charset behavior
   b4c0a:	7f03      	ldrb	r3, [r0, #28]
   b4c0c:	b91b      	cbnz	r3, b4c16 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x62>
   b4c0e:	2faf      	cmp	r7, #175	; 0xaf
   b4c10:	bf84      	itt	hi
   b4c12:	3701      	addhi	r7, #1
   b4c14:	b2ff      	uxtbhi	r7, r7
        startWrite();
   b4c16:	f8db 3000 	ldr.w	r3, [fp]
   b4c1a:	4658      	mov	r0, fp
   b4c1c:	695b      	ldr	r3, [r3, #20]
   b4c1e:	4798      	blx	r3
            uint8_t line = pgm_read_byte(&font[c * 5 + i]);
   b4c20:	2205      	movs	r2, #5
   b4c22:	9209      	str	r2, [sp, #36]	; 0x24
        for(int8_t i=0; i<5; i++ ) { // Char bitmap = 5 columns
   b4c24:	2200      	movs	r2, #0
   b4c26:	9205      	str	r2, [sp, #20]
            uint8_t line = pgm_read_byte(&font[c * 5 + i]);
   b4c28:	4a98      	ldr	r2, [pc, #608]	; (b4e8c <_ZN12Adafruit_GFX8drawCharEsshtthh+0x2d8>)
   b4c2a:	eb07 0387 	add.w	r3, r7, r7, lsl #2
   b4c2e:	18d3      	adds	r3, r2, r3
   b4c30:	930c      	str	r3, [sp, #48]	; 0x30
                        writePixel(x+i, y+j, color);
   b4c32:	b2b3      	uxth	r3, r6
   b4c34:	9306      	str	r3, [sp, #24]
            uint8_t line = pgm_read_byte(&font[c * 5 + i]);
   b4c36:	9a05      	ldr	r2, [sp, #20]
   b4c38:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   b4c3a:	5c9b      	ldrb	r3, [r3, r2]
   b4c3c:	9307      	str	r3, [sp, #28]
                        writeFillRect(x+i*size_x, y+j*size_y, size_x, size_y, bg);
   b4c3e:	b2ab      	uxth	r3, r5
   b4c40:	930b      	str	r3, [sp, #44]	; 0x2c
   b4c42:	f8bd 300c 	ldrh.w	r3, [sp, #12]
   b4c46:	9308      	str	r3, [sp, #32]
   b4c48:	9b03      	ldr	r3, [sp, #12]
   b4c4a:	fb02 f905 	mul.w	r9, r2, r5
   b4c4e:	fa19 f983 	uxtah	r9, r9, r3
   b4c52:	fa0f f389 	sxth.w	r3, r9
   b4c56:	ee08 3a10 	vmov	s16, r3
   b4c5a:	2308      	movs	r3, #8
   b4c5c:	930a      	str	r3, [sp, #40]	; 0x28
                        writePixel(x+i, y+j, bg);
   b4c5e:	9b03      	ldr	r3, [sp, #12]
   b4c60:	eb02 0a03 	add.w	sl, r2, r3
            for(int8_t j=0; j<8; j++, line >>= 1) {
   b4c64:	f04f 0900 	mov.w	r9, #0
                        writePixel(x+i, y+j, bg);
   b4c68:	fa0f fa8a 	sxth.w	sl, sl
                if(line & 1) {
   b4c6c:	9a07      	ldr	r2, [sp, #28]
                        writePixel(x+i, y+j, color);
   b4c6e:	f8db 3000 	ldr.w	r3, [fp]
                if(line & 1) {
   b4c72:	07d2      	lsls	r2, r2, #31
   b4c74:	d552      	bpl.n	b4d1c <_ZN12Adafruit_GFX8drawCharEsshtthh+0x168>
                    if(size_x == 1 && size_y == 1)
   b4c76:	2d01      	cmp	r5, #1
                        writePixel(x+i, y+j, color);
   b4c78:	fa1f f289 	uxth.w	r2, r9
                    if(size_x == 1 && size_y == 1)
   b4c7c:	d13e      	bne.n	b4cfc <_ZN12Adafruit_GFX8drawCharEsshtthh+0x148>
   b4c7e:	2c01      	cmp	r4, #1
   b4c80:	d13c      	bne.n	b4cfc <_ZN12Adafruit_GFX8drawCharEsshtthh+0x148>
                        writePixel(x+i, y+j, color);
   b4c82:	699b      	ldr	r3, [r3, #24]
   b4c84:	9906      	ldr	r1, [sp, #24]
   b4c86:	461f      	mov	r7, r3
   b4c88:	9b04      	ldr	r3, [sp, #16]
   b4c8a:	440a      	add	r2, r1
                        writePixel(x+i, y+j, bg);
   b4c8c:	b212      	sxth	r2, r2
   b4c8e:	4651      	mov	r1, sl
   b4c90:	4658      	mov	r0, fp
   b4c92:	47b8      	blx	r7
            for(int8_t j=0; j<8; j++, line >>= 1) {
   b4c94:	f109 0301 	add.w	r3, r9, #1
   b4c98:	fa4f f983 	sxtb.w	r9, r3
   b4c9c:	9b07      	ldr	r3, [sp, #28]
   b4c9e:	085b      	lsrs	r3, r3, #1
   b4ca0:	9307      	str	r3, [sp, #28]
   b4ca2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   b4ca4:	3b01      	subs	r3, #1
   b4ca6:	f013 03ff 	ands.w	r3, r3, #255	; 0xff
   b4caa:	930a      	str	r3, [sp, #40]	; 0x28
   b4cac:	d1de      	bne.n	b4c6c <_ZN12Adafruit_GFX8drawCharEsshtthh+0xb8>
        for(int8_t i=0; i<5; i++ ) { // Char bitmap = 5 columns
   b4cae:	9f05      	ldr	r7, [sp, #20]
   b4cb0:	3701      	adds	r7, #1
   b4cb2:	b27b      	sxtb	r3, r7
   b4cb4:	9305      	str	r3, [sp, #20]
   b4cb6:	9b09      	ldr	r3, [sp, #36]	; 0x24
   b4cb8:	3b01      	subs	r3, #1
   b4cba:	f013 03ff 	ands.w	r3, r3, #255	; 0xff
   b4cbe:	9309      	str	r3, [sp, #36]	; 0x24
   b4cc0:	d1b9      	bne.n	b4c36 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x82>
        if(bg != color) { // If opaque, draw vertical line for last column
   b4cc2:	9b04      	ldr	r3, [sp, #16]
   b4cc4:	4543      	cmp	r3, r8
   b4cc6:	d00f      	beq.n	b4ce8 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x134>
            if(size_x == 1 && size_y == 1) writeFastVLine(x+5, y, 8, bg);
   b4cc8:	2d01      	cmp	r5, #1
   b4cca:	f8db 3000 	ldr.w	r3, [fp]
   b4cce:	d13b      	bne.n	b4d48 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x194>
   b4cd0:	2c01      	cmp	r4, #1
   b4cd2:	d139      	bne.n	b4d48 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x194>
   b4cd4:	9908      	ldr	r1, [sp, #32]
   b4cd6:	f8cd 8000 	str.w	r8, [sp]
   b4cda:	3105      	adds	r1, #5
   b4cdc:	6a1c      	ldr	r4, [r3, #32]
   b4cde:	4632      	mov	r2, r6
   b4ce0:	2308      	movs	r3, #8
   b4ce2:	b209      	sxth	r1, r1
   b4ce4:	4658      	mov	r0, fp
   b4ce6:	47a0      	blx	r4
        endWrite();
   b4ce8:	f8db 3000 	ldr.w	r3, [fp]
   b4cec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b4cee:	4658      	mov	r0, fp
}
   b4cf0:	b011      	add	sp, #68	; 0x44
   b4cf2:	ecbd 8b02 	vpop	{d8}
   b4cf6:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
        endWrite();
   b4cfa:	4718      	bx	r3
                        writeFillRect(x+i*size_x, y+j*size_y, size_x, size_y, color);
   b4cfc:	9906      	ldr	r1, [sp, #24]
   b4cfe:	fb14 f202 	smulbb	r2, r4, r2
   b4d02:	440a      	add	r2, r1
   b4d04:	9904      	ldr	r1, [sp, #16]
   b4d06:	9101      	str	r1, [sp, #4]
                        writeFillRect(x+i*size_x, y+j*size_y, size_x, size_y, bg);
   b4d08:	9400      	str	r4, [sp, #0]
   b4d0a:	69db      	ldr	r3, [r3, #28]
   b4d0c:	ee18 1a10 	vmov	r1, s16
   b4d10:	461f      	mov	r7, r3
   b4d12:	b212      	sxth	r2, r2
   b4d14:	462b      	mov	r3, r5
   b4d16:	4658      	mov	r0, fp
   b4d18:	47b8      	blx	r7
   b4d1a:	e7bb      	b.n	b4c94 <_ZN12Adafruit_GFX8drawCharEsshtthh+0xe0>
                } else if(bg != color) {
   b4d1c:	9a04      	ldr	r2, [sp, #16]
   b4d1e:	4542      	cmp	r2, r8
   b4d20:	d0b8      	beq.n	b4c94 <_ZN12Adafruit_GFX8drawCharEsshtthh+0xe0>
                    if(size_x == 1 && size_y == 1)
   b4d22:	2d01      	cmp	r5, #1
                        writePixel(x+i, y+j, color);
   b4d24:	fa1f f289 	uxth.w	r2, r9
                    if(size_x == 1 && size_y == 1)
   b4d28:	d107      	bne.n	b4d3a <_ZN12Adafruit_GFX8drawCharEsshtthh+0x186>
   b4d2a:	2c01      	cmp	r4, #1
   b4d2c:	d105      	bne.n	b4d3a <_ZN12Adafruit_GFX8drawCharEsshtthh+0x186>
                        writePixel(x+i, y+j, bg);
   b4d2e:	699b      	ldr	r3, [r3, #24]
   b4d30:	9906      	ldr	r1, [sp, #24]
   b4d32:	461f      	mov	r7, r3
   b4d34:	440a      	add	r2, r1
   b4d36:	4643      	mov	r3, r8
   b4d38:	e7a8      	b.n	b4c8c <_ZN12Adafruit_GFX8drawCharEsshtthh+0xd8>
                        writeFillRect(x+i*size_x, y+j*size_y, size_x, size_y, bg);
   b4d3a:	9906      	ldr	r1, [sp, #24]
   b4d3c:	f8cd 8004 	str.w	r8, [sp, #4]
   b4d40:	fb14 f202 	smulbb	r2, r4, r2
   b4d44:	440a      	add	r2, r1
   b4d46:	e7df      	b.n	b4d08 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x154>
            else          writeFillRect(x+5*size_x, y, size_x, 8*size_y, bg);
   b4d48:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   b4d4a:	f8cd 8004 	str.w	r8, [sp, #4]
   b4d4e:	eb02 0182 	add.w	r1, r2, r2, lsl #2
   b4d52:	9a08      	ldr	r2, [sp, #32]
   b4d54:	00e4      	lsls	r4, r4, #3
   b4d56:	440a      	add	r2, r1
   b4d58:	4611      	mov	r1, r2
   b4d5a:	9400      	str	r4, [sp, #0]
   b4d5c:	69dc      	ldr	r4, [r3, #28]
   b4d5e:	4632      	mov	r2, r6
   b4d60:	462b      	mov	r3, r5
   b4d62:	b209      	sxth	r1, r1
   b4d64:	4658      	mov	r0, fp
   b4d66:	47a0      	blx	r4
        endWrite();
   b4d68:	e7be      	b.n	b4ce8 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x134>
        c -= (uint8_t)pgm_read_byte(&gfxFont->first);
   b4d6a:	7a13      	ldrb	r3, [r2, #8]
    return gfxFont->glyph + c;
   b4d6c:	6851      	ldr	r1, [r2, #4]
    return gfxFont->bitmap;
   b4d6e:	6812      	ldr	r2, [r2, #0]
   b4d70:	920b      	str	r2, [sp, #44]	; 0x2c
        c -= (uint8_t)pgm_read_byte(&gfxFont->first);
   b4d72:	1aff      	subs	r7, r7, r3
    return gfxFont->glyph + c;
   b4d74:	b2ff      	uxtb	r7, r7
   b4d76:	eb01 03c7 	add.w	r3, r1, r7, lsl #3
        uint16_t bo = pgm_read_word(&glyph->bitmapOffset);
   b4d7a:	f831 2037 	ldrh.w	r2, [r1, r7, lsl #3]
   b4d7e:	9206      	str	r2, [sp, #24]
        uint8_t  w  = pgm_read_byte(&glyph->width),
   b4d80:	789a      	ldrb	r2, [r3, #2]
   b4d82:	9209      	str	r2, [sp, #36]	; 0x24
                 h  = pgm_read_byte(&glyph->height);
   b4d84:	78da      	ldrb	r2, [r3, #3]
   b4d86:	920c      	str	r2, [sp, #48]	; 0x30
        if(size_x > 1 || size_y > 1) {
   b4d88:	2d01      	cmp	r5, #1
        int8_t   xo = pgm_read_byte(&glyph->xOffset),
   b4d8a:	f993 2005 	ldrsb.w	r2, [r3, #5]
                 yo = pgm_read_byte(&glyph->yOffset);
   b4d8e:	f993 a006 	ldrsb.w	sl, [r3, #6]
        int8_t   xo = pgm_read_byte(&glyph->xOffset),
   b4d92:	920a      	str	r2, [sp, #40]	; 0x28
        if(size_x > 1 || size_y > 1) {
   b4d94:	d801      	bhi.n	b4d9a <_ZN12Adafruit_GFX8drawCharEsshtthh+0x1e6>
   b4d96:	2c01      	cmp	r4, #1
   b4d98:	d957      	bls.n	b4e4a <_ZN12Adafruit_GFX8drawCharEsshtthh+0x296>
            xo16 = xo;
   b4d9a:	f9bd 3028 	ldrsh.w	r3, [sp, #40]	; 0x28
   b4d9e:	9308      	str	r3, [sp, #32]
            yo16 = yo;
   b4da0:	fa0f f38a 	sxth.w	r3, sl
   b4da4:	9307      	str	r3, [sp, #28]
        startWrite();
   b4da6:	f8db 3000 	ldr.w	r3, [fp]
   b4daa:	4658      	mov	r0, fp
   b4dac:	695b      	ldr	r3, [r3, #20]
   b4dae:	4798      	blx	r3
                        writeFillRect(x+(xo16+xx)*size_x, y+(yo16+yy)*size_y,
   b4db0:	b2b3      	uxth	r3, r6
        uint8_t  xx, yy, bits = 0, bit = 0;
   b4db2:	f04f 0800 	mov.w	r8, #0
                        writeFillRect(x+(xo16+xx)*size_x, y+(yo16+yy)*size_y,
   b4db6:	930e      	str	r3, [sp, #56]	; 0x38
                        writePixel(x+xo+xx, y+yo+yy, color);
   b4db8:	fa1a f386 	uxtah	r3, sl, r6
        uint8_t  xx, yy, bits = 0, bit = 0;
   b4dbc:	46c1      	mov	r9, r8
        for(yy=0; yy<h; yy++) {
   b4dbe:	4647      	mov	r7, r8
                        writePixel(x+xo+xx, y+yo+yy, color);
   b4dc0:	930f      	str	r3, [sp, #60]	; 0x3c
        for(yy=0; yy<h; yy++) {
   b4dc2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   b4dc4:	429f      	cmp	r7, r3
   b4dc6:	d28f      	bcs.n	b4ce8 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x134>
                        writeFillRect(x+(xo16+xx)*size_x, y+(yo16+yy)*size_y,
   b4dc8:	9b07      	ldr	r3, [sp, #28]
   b4dca:	9a0e      	ldr	r2, [sp, #56]	; 0x38
   b4dcc:	443b      	add	r3, r7
   b4dce:	fb03 2304 	mla	r3, r3, r4, r2
            for(xx=0; xx<w; xx++) {
   b4dd2:	2200      	movs	r2, #0
   b4dd4:	9205      	str	r2, [sp, #20]
                        writePixel(x+xo+xx, y+yo+yy, color);
   b4dd6:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
                        writeFillRect(x+(xo16+xx)*size_x, y+(yo16+yy)*size_y,
   b4dd8:	b21b      	sxth	r3, r3
                        writePixel(x+xo+xx, y+yo+yy, color);
   b4dda:	eb02 0a07 	add.w	sl, r2, r7
                        writeFillRect(x+(xo16+xx)*size_x, y+(yo16+yy)*size_y,
   b4dde:	ee08 3a10 	vmov	s16, r3
                        writePixel(x+xo+xx, y+yo+yy, color);
   b4de2:	fa0f fa8a 	sxth.w	sl, sl
                        writeFillRect(x+(xo16+xx)*size_x, y+(yo16+yy)*size_y,
   b4de6:	4643      	mov	r3, r8
            for(xx=0; xx<w; xx++) {
   b4de8:	9a09      	ldr	r2, [sp, #36]	; 0x24
   b4dea:	9905      	ldr	r1, [sp, #20]
   b4dec:	4291      	cmp	r1, r2
   b4dee:	d241      	bcs.n	b4e74 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x2c0>
                if(!(bit++ & 7)) {
   b4df0:	1c5a      	adds	r2, r3, #1
   b4df2:	b2d2      	uxtb	r2, r2
   b4df4:	075b      	lsls	r3, r3, #29
   b4df6:	920d      	str	r2, [sp, #52]	; 0x34
   b4df8:	d107      	bne.n	b4e0a <_ZN12Adafruit_GFX8drawCharEsshtthh+0x256>
                    bits = pgm_read_byte(&bitmap[bo++]);
   b4dfa:	9b06      	ldr	r3, [sp, #24]
   b4dfc:	9906      	ldr	r1, [sp, #24]
   b4dfe:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   b4e00:	3301      	adds	r3, #1
   b4e02:	b29b      	uxth	r3, r3
   b4e04:	f812 9001 	ldrb.w	r9, [r2, r1]
   b4e08:	9306      	str	r3, [sp, #24]
                if(bits & 0x80) {
   b4e0a:	f019 0f80 	tst.w	r9, #128	; 0x80
   b4e0e:	d012      	beq.n	b4e36 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x282>
                    if(size_x == 1 && size_y == 1) {
   b4e10:	2d01      	cmp	r5, #1
                        writePixel(x+xo+xx, y+yo+yy, color);
   b4e12:	f8db 3000 	ldr.w	r3, [fp]
                        writeFillRect(x+i*size_x, y+j*size_y, size_x, size_y, bg);
   b4e16:	f8bd 100c 	ldrh.w	r1, [sp, #12]
                    if(size_x == 1 && size_y == 1) {
   b4e1a:	d11a      	bne.n	b4e52 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x29e>
   b4e1c:	2c01      	cmp	r4, #1
   b4e1e:	d118      	bne.n	b4e52 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x29e>
                        writePixel(x+xo+xx, y+yo+yy, color);
   b4e20:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   b4e22:	699b      	ldr	r3, [r3, #24]
   b4e24:	4411      	add	r1, r2
   b4e26:	9a05      	ldr	r2, [sp, #20]
   b4e28:	4411      	add	r1, r2
   b4e2a:	461e      	mov	r6, r3
   b4e2c:	4652      	mov	r2, sl
   b4e2e:	9b04      	ldr	r3, [sp, #16]
   b4e30:	b209      	sxth	r1, r1
   b4e32:	4658      	mov	r0, fp
   b4e34:	47b0      	blx	r6
            for(xx=0; xx<w; xx++) {
   b4e36:	9e05      	ldr	r6, [sp, #20]
   b4e38:	3601      	adds	r6, #1
   b4e3a:	b2f3      	uxtb	r3, r6
                bits <<= 1;
   b4e3c:	ea4f 0949 	mov.w	r9, r9, lsl #1
            for(xx=0; xx<w; xx++) {
   b4e40:	9305      	str	r3, [sp, #20]
                bits <<= 1;
   b4e42:	fa5f f989 	uxtb.w	r9, r9
                if(!(bit++ & 7)) {
   b4e46:	9b0d      	ldr	r3, [sp, #52]	; 0x34
            for(xx=0; xx<w; xx++) {
   b4e48:	e7ce      	b.n	b4de8 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x234>
        int16_t  xo16 = 0, yo16 = 0;
   b4e4a:	2300      	movs	r3, #0
   b4e4c:	e9cd 3307 	strd	r3, r3, [sp, #28]
   b4e50:	e7a9      	b.n	b4da6 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x1f2>
                        writeFillRect(x+(xo16+xx)*size_x, y+(yo16+yy)*size_y,
   b4e52:	9805      	ldr	r0, [sp, #20]
   b4e54:	9a08      	ldr	r2, [sp, #32]
   b4e56:	4402      	add	r2, r0
   b4e58:	fb02 1105 	mla	r1, r2, r5, r1
   b4e5c:	9a04      	ldr	r2, [sp, #16]
   b4e5e:	e9cd 4200 	strd	r4, r2, [sp]
   b4e62:	69db      	ldr	r3, [r3, #28]
   b4e64:	ee18 2a10 	vmov	r2, s16
   b4e68:	461e      	mov	r6, r3
   b4e6a:	b209      	sxth	r1, r1
   b4e6c:	462b      	mov	r3, r5
   b4e6e:	4658      	mov	r0, fp
   b4e70:	47b0      	blx	r6
   b4e72:	e7e0      	b.n	b4e36 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x282>
   b4e74:	9b09      	ldr	r3, [sp, #36]	; 0x24
        for(yy=0; yy<h; yy++) {
   b4e76:	3701      	adds	r7, #1
   b4e78:	4498      	add	r8, r3
   b4e7a:	fa5f f888 	uxtb.w	r8, r8
   b4e7e:	b2ff      	uxtb	r7, r7
   b4e80:	e79f      	b.n	b4dc2 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x20e>
}
   b4e82:	b011      	add	sp, #68	; 0x44
   b4e84:	ecbd 8b02 	vpop	{d8}
   b4e88:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   b4e8c:	000b8873 	.word	0x000b8873

000b4e90 <_ZN12Adafruit_GFX5writeEh>:
size_t Adafruit_GFX::write(uint8_t c) {
   b4e90:	b5f0      	push	{r4, r5, r6, r7, lr}
    if(!gfxFont) { // 'Classic' built-in font
   b4e92:	6a02      	ldr	r2, [r0, #32]
size_t Adafruit_GFX::write(uint8_t c) {
   b4e94:	b085      	sub	sp, #20
   b4e96:	4604      	mov	r4, r0
   b4e98:	460b      	mov	r3, r1
    if(!gfxFont) { // 'Classic' built-in font
   b4e9a:	2a00      	cmp	r2, #0
   b4e9c:	d134      	bne.n	b4f08 <_ZN12Adafruit_GFX5writeEh+0x78>
        if(c == '\n') {                        // Newline?
   b4e9e:	290a      	cmp	r1, #10
   b4ea0:	d108      	bne.n	b4eb4 <_ZN12Adafruit_GFX5writeEh+0x24>
            cursor_y += textsize_y * 8;        // advance y one line
   b4ea2:	8a43      	ldrh	r3, [r0, #18]
            cursor_x  = 0;                     // Reset x to zero,
   b4ea4:	8202      	strh	r2, [r0, #16]
            cursor_y += textsize_y * 8;        // advance y one line
   b4ea6:	7e42      	ldrb	r2, [r0, #25]
   b4ea8:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
            cursor_y += (int16_t)textsize_y *
   b4eac:	8263      	strh	r3, [r4, #18]
}
   b4eae:	2001      	movs	r0, #1
   b4eb0:	b005      	add	sp, #20
   b4eb2:	bdf0      	pop	{r4, r5, r6, r7, pc}
        } else if(c != '\r') {                 // Ignore carriage returns
   b4eb4:	290d      	cmp	r1, #13
   b4eb6:	d0fa      	beq.n	b4eae <_ZN12Adafruit_GFX5writeEh+0x1e>
            if(wrap && ((cursor_x + textsize_x * 6) > _width)) { // Off right?
   b4eb8:	7ee1      	ldrb	r1, [r4, #27]
   b4eba:	7e00      	ldrb	r0, [r0, #24]
            cursor_y += textsize_y * 8;        // advance y one line
   b4ebc:	7e65      	ldrb	r5, [r4, #25]
            if(wrap && ((cursor_x + textsize_x * 6) > _width)) { // Off right?
   b4ebe:	b171      	cbz	r1, b4ede <_ZN12Adafruit_GFX5writeEh+0x4e>
   b4ec0:	f9b4 6010 	ldrsh.w	r6, [r4, #16]
   b4ec4:	2106      	movs	r1, #6
   b4ec6:	fb11 6100 	smlabb	r1, r1, r0, r6
   b4eca:	f9b4 600c 	ldrsh.w	r6, [r4, #12]
   b4ece:	42b1      	cmp	r1, r6
            cursor_y += textsize_y * 8;        // advance y one line
   b4ed0:	bfc1      	itttt	gt
   b4ed2:	f9b4 1012 	ldrshgt.w	r1, [r4, #18]
                cursor_x  = 0;                 // Reset x to zero,
   b4ed6:	8222      	strhgt	r2, [r4, #16]
                cursor_y += textsize_y * 8;    // advance y one line
   b4ed8:	eb01 02c5 	addgt.w	r2, r1, r5, lsl #3
   b4edc:	8262      	strhgt	r2, [r4, #18]
            drawChar(cursor_x, cursor_y, c, textcolor, textbgcolor, textsize_x, textsize_y);
   b4ede:	8ae2      	ldrh	r2, [r4, #22]
   b4ee0:	9201      	str	r2, [sp, #4]
   b4ee2:	8aa2      	ldrh	r2, [r4, #20]
   b4ee4:	9200      	str	r2, [sp, #0]
   b4ee6:	e9cd 0502 	strd	r0, r5, [sp, #8]
   b4eea:	f9b4 2012 	ldrsh.w	r2, [r4, #18]
   b4eee:	f9b4 1010 	ldrsh.w	r1, [r4, #16]
   b4ef2:	4620      	mov	r0, r4
   b4ef4:	f7ff fe5e 	bl	b4bb4 <_ZN12Adafruit_GFX8drawCharEsshtthh>
            cursor_x += textsize_x * 6;          // Advance x one char
   b4ef8:	7e23      	ldrb	r3, [r4, #24]
   b4efa:	8a22      	ldrh	r2, [r4, #16]
   b4efc:	eb03 0343 	add.w	r3, r3, r3, lsl #1
   b4f00:	eb02 0343 	add.w	r3, r2, r3, lsl #1
                cursor_x += (uint8_t)pgm_read_byte(&glyph->xAdvance) * (int16_t)textsize_x;
   b4f04:	8223      	strh	r3, [r4, #16]
   b4f06:	e7d2      	b.n	b4eae <_ZN12Adafruit_GFX5writeEh+0x1e>
        if(c == '\n') {
   b4f08:	290a      	cmp	r1, #10
   b4f0a:	d107      	bne.n	b4f1c <_ZN12Adafruit_GFX5writeEh+0x8c>
            cursor_x  = 0;
   b4f0c:	2300      	movs	r3, #0
   b4f0e:	8203      	strh	r3, [r0, #16]
            cursor_y += (int16_t)textsize_y *
   b4f10:	7e41      	ldrb	r1, [r0, #25]
                        (uint8_t)pgm_read_byte(&gfxFont->yAdvance);
   b4f12:	7a92      	ldrb	r2, [r2, #10]
            cursor_y += (int16_t)textsize_y *
   b4f14:	8a43      	ldrh	r3, [r0, #18]
   b4f16:	fb01 3302 	mla	r3, r1, r2, r3
   b4f1a:	e7c7      	b.n	b4eac <_ZN12Adafruit_GFX5writeEh+0x1c>
        } else if(c != '\r') {
   b4f1c:	290d      	cmp	r1, #13
   b4f1e:	d0c6      	beq.n	b4eae <_ZN12Adafruit_GFX5writeEh+0x1e>
            uint8_t first = pgm_read_byte(&gfxFont->first);
   b4f20:	7a15      	ldrb	r5, [r2, #8]
            if((c >= first) && (c <= (uint8_t)pgm_read_byte(&gfxFont->last))) {
   b4f22:	42a9      	cmp	r1, r5
   b4f24:	d3c3      	bcc.n	b4eae <_ZN12Adafruit_GFX5writeEh+0x1e>
   b4f26:	7a51      	ldrb	r1, [r2, #9]
   b4f28:	4299      	cmp	r1, r3
   b4f2a:	d3c0      	bcc.n	b4eae <_ZN12Adafruit_GFX5writeEh+0x1e>
    return gfxFont->glyph + c;
   b4f2c:	6851      	ldr	r1, [r2, #4]
                GFXglyph *glyph  = pgm_read_glyph_ptr(gfxFont, c - first);
   b4f2e:	1b5d      	subs	r5, r3, r5
    return gfxFont->glyph + c;
   b4f30:	b2ed      	uxtb	r5, r5
   b4f32:	eb01 05c5 	add.w	r5, r1, r5, lsl #3
                uint8_t   w     = pgm_read_byte(&glyph->width),
   b4f36:	78a8      	ldrb	r0, [r5, #2]
                if((w > 0) && (h > 0)) { // Is there an associated bitmap?
   b4f38:	b328      	cbz	r0, b4f86 <_ZN12Adafruit_GFX5writeEh+0xf6>
   b4f3a:	78e9      	ldrb	r1, [r5, #3]
   b4f3c:	b319      	cbz	r1, b4f86 <_ZN12Adafruit_GFX5writeEh+0xf6>
                    if(wrap && ((cursor_x + textsize_x * (xo + w)) > _width)) {
   b4f3e:	7ee1      	ldrb	r1, [r4, #27]
            if(wrap && ((cursor_x + textsize_x * 6) > _width)) { // Off right?
   b4f40:	7e26      	ldrb	r6, [r4, #24]
            cursor_y += textsize_y * 8;        // advance y one line
   b4f42:	7e67      	ldrb	r7, [r4, #25]
                    if(wrap && ((cursor_x + textsize_x * (xo + w)) > _width)) {
   b4f44:	b191      	cbz	r1, b4f6c <_ZN12Adafruit_GFX5writeEh+0xdc>
   b4f46:	f995 1005 	ldrsb.w	r1, [r5, #5]
   b4f4a:	4408      	add	r0, r1
   b4f4c:	f9b4 1010 	ldrsh.w	r1, [r4, #16]
   b4f50:	fb06 1100 	mla	r1, r6, r0, r1
   b4f54:	f9b4 000c 	ldrsh.w	r0, [r4, #12]
   b4f58:	4281      	cmp	r1, r0
   b4f5a:	dd07      	ble.n	b4f6c <_ZN12Adafruit_GFX5writeEh+0xdc>
                        cursor_x  = 0;
   b4f5c:	2000      	movs	r0, #0
   b4f5e:	8220      	strh	r0, [r4, #16]
            cursor_y += textsize_y * 8;        // advance y one line
   b4f60:	f9b4 1012 	ldrsh.w	r1, [r4, #18]
                          (uint8_t)pgm_read_byte(&gfxFont->yAdvance);
   b4f64:	7a92      	ldrb	r2, [r2, #10]
                        cursor_y += (int16_t)textsize_y *
   b4f66:	fb02 1207 	mla	r2, r2, r7, r1
   b4f6a:	8262      	strh	r2, [r4, #18]
                    drawChar(cursor_x, cursor_y, c, textcolor, textbgcolor, textsize_x, textsize_y);
   b4f6c:	8ae2      	ldrh	r2, [r4, #22]
   b4f6e:	9201      	str	r2, [sp, #4]
   b4f70:	8aa2      	ldrh	r2, [r4, #20]
   b4f72:	9200      	str	r2, [sp, #0]
   b4f74:	e9cd 6702 	strd	r6, r7, [sp, #8]
   b4f78:	f9b4 2012 	ldrsh.w	r2, [r4, #18]
   b4f7c:	f9b4 1010 	ldrsh.w	r1, [r4, #16]
   b4f80:	4620      	mov	r0, r4
   b4f82:	f7ff fe17 	bl	b4bb4 <_ZN12Adafruit_GFX8drawCharEsshtthh>
                cursor_x += (uint8_t)pgm_read_byte(&glyph->xAdvance) * (int16_t)textsize_x;
   b4f86:	7929      	ldrb	r1, [r5, #4]
   b4f88:	7e22      	ldrb	r2, [r4, #24]
   b4f8a:	8a23      	ldrh	r3, [r4, #16]
   b4f8c:	fb01 3302 	mla	r3, r1, r2, r3
   b4f90:	e7b8      	b.n	b4f04 <_ZN12Adafruit_GFX5writeEh+0x74>

000b4f92 <_ZN12Adafruit_GFX11setTextSizeEh>:
    textsize_x = (s_x > 0) ? s_x : 1;
   b4f92:	2901      	cmp	r1, #1
   b4f94:	bf38      	it	cc
   b4f96:	2101      	movcc	r1, #1
   b4f98:	7601      	strb	r1, [r0, #24]
    textsize_y = (s_y > 0) ? s_y : 1;
   b4f9a:	7641      	strb	r1, [r0, #25]
}
   b4f9c:	4770      	bx	lr

000b4f9e <_ZN15Adafruit_SPITFT11SPI_SCK_LOWEv.isra.0>:
  #endif
 #else  // !HAS_PORT_SET_CLR
    *swspi.sckPort   &= swspi.sckPinMaskClr;
 #endif // end !HAS_PORT_SET_CLR
#else  // !USE_FAST_PINIO
    digitalWrite(swspi._sck, LOW);
   b4f9e:	2100      	movs	r1, #0
   b4fa0:	b280      	uxth	r0, r0
   b4fa2:	f002 bc9e 	b.w	b78e2 <digitalWrite>

000b4fa6 <_ZN15Adafruit_SPITFT12SPI_SCK_HIGHEv.isra.0>:
    digitalWrite(swspi._sck, HIGH);
   b4fa6:	2101      	movs	r1, #1
   b4fa8:	b280      	uxth	r0, r0
   b4faa:	f002 bc9a 	b.w	b78e2 <digitalWrite>

000b4fae <_ZN15Adafruit_SPITFT12SPI_MOSI_LOWEv.isra.0>:
    digitalWrite(swspi._mosi, LOW);
   b4fae:	2100      	movs	r1, #0
   b4fb0:	b280      	uxth	r0, r0
   b4fb2:	f002 bc96 	b.w	b78e2 <digitalWrite>

000b4fb6 <_ZN15Adafruit_SPITFT13SPI_MOSI_HIGHEv.isra.0>:
    digitalWrite(swspi._mosi, HIGH);
   b4fb6:	2101      	movs	r1, #1
   b4fb8:	b280      	uxth	r0, r0
   b4fba:	f002 bc92 	b.w	b78e2 <digitalWrite>

000b4fbe <_ZN15Adafruit_SPITFT10SPI_DC_LOWEv.isra.0>:
      #endif // end !KINETISK
     #else  // !HAS_PORT_SET_CLR
        *dcPort   &= dcPinMaskClr;
     #endif // end !HAS_PORT_SET_CLR
    #else  // !USE_FAST_PINIO
        digitalWrite(_dc, LOW);
   b4fbe:	2100      	movs	r1, #0
   b4fc0:	b280      	uxth	r0, r0
   b4fc2:	f002 bc8e 	b.w	b78e2 <digitalWrite>

000b4fc6 <_ZN15Adafruit_SPITFT11SPI_DC_HIGHEv.isra.0>:
        digitalWrite(_dc, HIGH);
   b4fc6:	2101      	movs	r1, #1
   b4fc8:	b280      	uxth	r0, r0
   b4fca:	f002 bc8a 	b.w	b78e2 <digitalWrite>
	...

000b4fd0 <_ZN15Adafruit_SPITFTC1EttP8SPIClassaaa>:
Adafruit_SPITFT::Adafruit_SPITFT(uint16_t w, uint16_t h, SPIClass *spiClass,
   b4fd0:	b538      	push	{r3, r4, r5, lr}
  connection(TFT_HARD_SPI), _rst(rst), _cs(cs), _dc(dc) {
   b4fd2:	b212      	sxth	r2, r2
Adafruit_SPITFT::Adafruit_SPITFT(uint16_t w, uint16_t h, SPIClass *spiClass,
   b4fd4:	4604      	mov	r4, r0
  connection(TFT_HARD_SPI), _rst(rst), _cs(cs), _dc(dc) {
   b4fd6:	b209      	sxth	r1, r1
Adafruit_SPITFT::Adafruit_SPITFT(uint16_t w, uint16_t h, SPIClass *spiClass,
   b4fd8:	461d      	mov	r5, r3
  connection(TFT_HARD_SPI), _rst(rst), _cs(cs), _dc(dc) {
   b4fda:	f7ff fdd5 	bl	b4b88 <_ZN12Adafruit_GFXC1Ess>
   b4fde:	4b0c      	ldr	r3, [pc, #48]	; (b5010 <_ZN15Adafruit_SPITFTC1EttP8SPIClassaaa+0x40>)
   b4fe0:	6023      	str	r3, [r4, #0]
   b4fe2:	f99d 3018 	ldrsb.w	r3, [sp, #24]
   b4fe6:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
   b4fea:	f99d 3010 	ldrsb.w	r3, [sp, #16]
   b4fee:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
   b4ff2:	2200      	movs	r2, #0
   b4ff4:	f99d 3014 	ldrsb.w	r3, [sp, #20]
   b4ff8:	f884 203c 	strb.w	r2, [r4, #60]	; 0x3c
   b4ffc:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
   b5000:	6422      	str	r2, [r4, #64]	; 0x40
   b5002:	f8a4 2044 	strh.w	r2, [r4, #68]	; 0x44
   b5006:	64a2      	str	r2, [r4, #72]	; 0x48
    hwspi._spi = spiClass;
   b5008:	6265      	str	r5, [r4, #36]	; 0x24
}
   b500a:	4620      	mov	r0, r4
   b500c:	bd38      	pop	{r3, r4, r5, pc}
   b500e:	bf00      	nop
   b5010:	000b8dd4 	.word	0x000b8dd4

000b5014 <_ZN15Adafruit_SPITFTC1Ettaaa>:
Adafruit_SPITFT::Adafruit_SPITFT(uint16_t w, uint16_t h, int8_t cs,
   b5014:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}

template <hal_spi_interface_t Interface>
class SpiProxy {
public:
    static SPIClass& instance() {
        static SPIClass instance(Interface);
   b5018:	f8df 8058 	ldr.w	r8, [pc, #88]	; b5074 <_ZN15Adafruit_SPITFTC1Ettaaa+0x60>
   b501c:	4604      	mov	r4, r0
   b501e:	f898 0000 	ldrb.w	r0, [r8]
   b5022:	f3bf 8f5b 	dmb	ish
   b5026:	460d      	mov	r5, r1
   b5028:	f010 0101 	ands.w	r1, r0, #1
   b502c:	b086      	sub	sp, #24
   b502e:	4616      	mov	r6, r2
   b5030:	461f      	mov	r7, r3
   b5032:	d10b      	bne.n	b504c <_ZN15Adafruit_SPITFTC1Ettaaa+0x38>
   b5034:	4640      	mov	r0, r8
   b5036:	9105      	str	r1, [sp, #20]
   b5038:	f7ff f840 	bl	b40bc <__cxa_guard_acquire>
   b503c:	9905      	ldr	r1, [sp, #20]
   b503e:	b128      	cbz	r0, b504c <_ZN15Adafruit_SPITFTC1Ettaaa+0x38>
   b5040:	480b      	ldr	r0, [pc, #44]	; (b5070 <_ZN15Adafruit_SPITFTC1Ettaaa+0x5c>)
   b5042:	f001 ffeb 	bl	b701c <_ZN8SPIClassC1E19hal_spi_interface_t>
   b5046:	4640      	mov	r0, r8
   b5048:	f7ff f83d 	bl	b40c6 <__cxa_guard_release>
  int8_t dc, int8_t rst) : Adafruit_SPITFT(w, h, &SPI, cs, dc, rst) {
   b504c:	f99d 3034 	ldrsb.w	r3, [sp, #52]	; 0x34
   b5050:	9302      	str	r3, [sp, #8]
   b5052:	f99d 3030 	ldrsb.w	r3, [sp, #48]	; 0x30
   b5056:	4632      	mov	r2, r6
   b5058:	e9cd 7300 	strd	r7, r3, [sp]
   b505c:	4629      	mov	r1, r5
   b505e:	4b04      	ldr	r3, [pc, #16]	; (b5070 <_ZN15Adafruit_SPITFTC1Ettaaa+0x5c>)
   b5060:	4620      	mov	r0, r4
   b5062:	f7ff ffb5 	bl	b4fd0 <_ZN15Adafruit_SPITFTC1EttP8SPIClassaaa>
}
   b5066:	4620      	mov	r0, r4
   b5068:	b006      	add	sp, #24
   b506a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   b506e:	bf00      	nop
   b5070:	2003e6bc 	.word	0x2003e6bc
   b5074:	2003e6b8 	.word	0x2003e6b8

000b5078 <_ZN15Adafruit_SPITFT7initSPIEmh>:
void Adafruit_SPITFT::initSPI(uint32_t freq, uint8_t spiMode) {
   b5078:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    if(!freq) freq = DEFAULT_SPI_FREQ; // If no freq specified, use default
   b507a:	4f49      	ldr	r7, [pc, #292]	; (b51a0 <_ZN15Adafruit_SPITFT7initSPIEmh+0x128>)
void Adafruit_SPITFT::initSPI(uint32_t freq, uint8_t spiMode) {
   b507c:	4604      	mov	r4, r0
    if(_cs >= 0) {
   b507e:	f990 003e 	ldrsb.w	r0, [r0, #62]	; 0x3e
    if(!freq) freq = DEFAULT_SPI_FREQ; // If no freq specified, use default
   b5082:	2900      	cmp	r1, #0
   b5084:	bf18      	it	ne
   b5086:	460f      	movne	r7, r1
    if(_cs >= 0) {
   b5088:	2800      	cmp	r0, #0
void Adafruit_SPITFT::initSPI(uint32_t freq, uint8_t spiMode) {
   b508a:	4616      	mov	r6, r2
    if(_cs >= 0) {
   b508c:	db09      	blt.n	b50a2 <_ZN15Adafruit_SPITFT7initSPIEmh+0x2a>
        pinMode(_cs, OUTPUT);
   b508e:	2101      	movs	r1, #1
   b5090:	b280      	uxth	r0, r0
   b5092:	f002 fc15 	bl	b78c0 <pinMode>
        digitalWrite(_cs, HIGH); // Deselect
   b5096:	f994 003e 	ldrsb.w	r0, [r4, #62]	; 0x3e
   b509a:	2101      	movs	r1, #1
   b509c:	b280      	uxth	r0, r0
   b509e:	f002 fc20 	bl	b78e2 <digitalWrite>
    pinMode(_dc, OUTPUT);
   b50a2:	f994 003f 	ldrsb.w	r0, [r4, #63]	; 0x3f
   b50a6:	2101      	movs	r1, #1
   b50a8:	b280      	uxth	r0, r0
   b50aa:	f002 fc09 	bl	b78c0 <pinMode>
    digitalWrite(_dc, HIGH); // Data mode
   b50ae:	f994 003f 	ldrsb.w	r0, [r4, #63]	; 0x3f
   b50b2:	2101      	movs	r1, #1
   b50b4:	b280      	uxth	r0, r0
   b50b6:	f002 fc14 	bl	b78e2 <digitalWrite>
    if(connection == TFT_HARD_SPI) {
   b50ba:	f894 503c 	ldrb.w	r5, [r4, #60]	; 0x3c
   b50be:	bb85      	cbnz	r5, b5122 <_ZN15Adafruit_SPITFT7initSPIEmh+0xaa>
    SPI_CLK_SYSTEM = 0,         // represents the system clock speed
    SPI_CLK_ARDUINO = 16*MHZ,
};

namespace particle {
class SPISettings : public Printable {
   b50c0:	2301      	movs	r3, #1
            hwspi._spi->begin();
   b50c2:	6a60      	ldr	r0, [r4, #36]	; 0x24
   b50c4:	f884 502c 	strb.w	r5, [r4, #44]	; 0x2c
   b50c8:	6327      	str	r7, [r4, #48]	; 0x30
   b50ca:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
   b50ce:	f884 6035 	strb.w	r6, [r4, #53]	; 0x35
        hwspi._mode    = spiMode; // Save spiMode value for later
   b50d2:	63a6      	str	r6, [r4, #56]	; 0x38
            hwspi._spi->begin();
   b50d4:	f001 ffac 	bl	b7030 <_ZN8SPIClass5beginEv>
    if(_rst >= 0) {
   b50d8:	f994 003d 	ldrsb.w	r0, [r4, #61]	; 0x3d
   b50dc:	2800      	cmp	r0, #0
   b50de:	db5e      	blt.n	b519e <_ZN15Adafruit_SPITFT7initSPIEmh+0x126>
        pinMode(_rst, OUTPUT);
   b50e0:	2101      	movs	r1, #1
   b50e2:	b280      	uxth	r0, r0
   b50e4:	f002 fbec 	bl	b78c0 <pinMode>
        digitalWrite(_rst, HIGH);
   b50e8:	f994 003d 	ldrsb.w	r0, [r4, #61]	; 0x3d
   b50ec:	2101      	movs	r1, #1
   b50ee:	b280      	uxth	r0, r0
   b50f0:	f002 fbf7 	bl	b78e2 <digitalWrite>
        delay(100);
   b50f4:	2064      	movs	r0, #100	; 0x64
   b50f6:	f001 fa75 	bl	b65e4 <delay>
        digitalWrite(_rst, LOW);
   b50fa:	f994 003d 	ldrsb.w	r0, [r4, #61]	; 0x3d
   b50fe:	2100      	movs	r1, #0
   b5100:	b280      	uxth	r0, r0
   b5102:	f002 fbee 	bl	b78e2 <digitalWrite>
        delay(100);
   b5106:	2064      	movs	r0, #100	; 0x64
   b5108:	f001 fa6c 	bl	b65e4 <delay>
        digitalWrite(_rst, HIGH);
   b510c:	f994 003d 	ldrsb.w	r0, [r4, #61]	; 0x3d
   b5110:	2101      	movs	r1, #1
   b5112:	b280      	uxth	r0, r0
   b5114:	f002 fbe5 	bl	b78e2 <digitalWrite>
}
   b5118:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
        delay(200);
   b511c:	20c8      	movs	r0, #200	; 0xc8
   b511e:	f001 ba61 	b.w	b65e4 <delay>
    } else if(connection == TFT_SOFT_SPI) {
   b5122:	2d01      	cmp	r5, #1
   b5124:	d120      	bne.n	b5168 <_ZN15Adafruit_SPITFT7initSPIEmh+0xf0>
        pinMode(swspi._mosi, OUTPUT);
   b5126:	f994 0024 	ldrsb.w	r0, [r4, #36]	; 0x24
   b512a:	4629      	mov	r1, r5
   b512c:	b280      	uxth	r0, r0
   b512e:	f002 fbc7 	bl	b78c0 <pinMode>
        digitalWrite(swspi._mosi, LOW);
   b5132:	f994 0024 	ldrsb.w	r0, [r4, #36]	; 0x24
   b5136:	2100      	movs	r1, #0
   b5138:	b280      	uxth	r0, r0
   b513a:	f002 fbd2 	bl	b78e2 <digitalWrite>
        pinMode(swspi._sck, OUTPUT);
   b513e:	f994 0026 	ldrsb.w	r0, [r4, #38]	; 0x26
   b5142:	4629      	mov	r1, r5
   b5144:	b280      	uxth	r0, r0
   b5146:	f002 fbbb 	bl	b78c0 <pinMode>
        digitalWrite(swspi._sck, LOW);
   b514a:	f994 0026 	ldrsb.w	r0, [r4, #38]	; 0x26
   b514e:	2100      	movs	r1, #0
   b5150:	b280      	uxth	r0, r0
   b5152:	f002 fbc6 	bl	b78e2 <digitalWrite>
        if(swspi._miso >= 0) {
   b5156:	f994 0025 	ldrsb.w	r0, [r4, #37]	; 0x25
   b515a:	2800      	cmp	r0, #0
   b515c:	dbbc      	blt.n	b50d8 <_ZN15Adafruit_SPITFT7initSPIEmh+0x60>
            pinMode(swspi._miso, INPUT);
   b515e:	2100      	movs	r1, #0
   b5160:	b280      	uxth	r0, r0
   b5162:	f002 fbad 	bl	b78c0 <pinMode>
   b5166:	e7b7      	b.n	b50d8 <_ZN15Adafruit_SPITFT7initSPIEmh+0x60>
        pinMode(tft8._wr, OUTPUT);
   b5168:	f994 0025 	ldrsb.w	r0, [r4, #37]	; 0x25
   b516c:	2101      	movs	r1, #1
   b516e:	b280      	uxth	r0, r0
   b5170:	f002 fba6 	bl	b78c0 <pinMode>
        digitalWrite(tft8._wr, HIGH);
   b5174:	f994 0025 	ldrsb.w	r0, [r4, #37]	; 0x25
   b5178:	2101      	movs	r1, #1
   b517a:	b280      	uxth	r0, r0
   b517c:	f002 fbb1 	bl	b78e2 <digitalWrite>
        if(tft8._rd >= 0) {
   b5180:	f994 0026 	ldrsb.w	r0, [r4, #38]	; 0x26
   b5184:	2800      	cmp	r0, #0
   b5186:	dba7      	blt.n	b50d8 <_ZN15Adafruit_SPITFT7initSPIEmh+0x60>
            pinMode(tft8._rd, OUTPUT);
   b5188:	2101      	movs	r1, #1
   b518a:	b280      	uxth	r0, r0
   b518c:	f002 fb98 	bl	b78c0 <pinMode>
            digitalWrite(tft8._rd, HIGH);
   b5190:	f994 0026 	ldrsb.w	r0, [r4, #38]	; 0x26
   b5194:	2101      	movs	r1, #1
   b5196:	b280      	uxth	r0, r0
   b5198:	f002 fba3 	bl	b78e2 <digitalWrite>
   b519c:	e79c      	b.n	b50d8 <_ZN15Adafruit_SPITFT7initSPIEmh+0x60>
}
   b519e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   b51a0:	00f42400 	.word	0x00f42400

000b51a4 <_ZN15Adafruit_SPITFT21SPI_BEGIN_TRANSACTIONEv>:
    if(connection == TFT_HARD_SPI) {
   b51a4:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
   b51a8:	b923      	cbnz	r3, b51b4 <_ZN15Adafruit_SPITFT21SPI_BEGIN_TRANSACTIONEv+0x10>
        hwspi._spi->beginTransaction(hwspi.settings);
   b51aa:	f100 0128 	add.w	r1, r0, #40	; 0x28
   b51ae:	6a40      	ldr	r0, [r0, #36]	; 0x24
   b51b0:	f001 bf6c 	b.w	b708c <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE>
}
   b51b4:	4770      	bx	lr

000b51b6 <_ZN15Adafruit_SPITFT10startWriteEv>:
void Adafruit_SPITFT::startWrite(void) {
   b51b6:	b510      	push	{r4, lr}
   b51b8:	4604      	mov	r4, r0
    SPI_BEGIN_TRANSACTION();
   b51ba:	f7ff fff3 	bl	b51a4 <_ZN15Adafruit_SPITFT21SPI_BEGIN_TRANSACTIONEv>
    if(_cs >= 0) SPI_CS_LOW();
   b51be:	f994 003e 	ldrsb.w	r0, [r4, #62]	; 0x3e
   b51c2:	2800      	cmp	r0, #0
   b51c4:	db05      	blt.n	b51d2 <_ZN15Adafruit_SPITFT10startWriteEv+0x1c>
}
   b51c6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        digitalWrite(_cs, LOW);
   b51ca:	2100      	movs	r1, #0
   b51cc:	b280      	uxth	r0, r0
   b51ce:	f002 bb88 	b.w	b78e2 <digitalWrite>
   b51d2:	bd10      	pop	{r4, pc}

000b51d4 <_ZN15Adafruit_SPITFT19SPI_END_TRANSACTIONEv>:
    if(connection == TFT_HARD_SPI) {
   b51d4:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
   b51d8:	b913      	cbnz	r3, b51e0 <_ZN15Adafruit_SPITFT19SPI_END_TRANSACTIONEv+0xc>
        hwspi._spi->endTransaction();
   b51da:	6a40      	ldr	r0, [r0, #36]	; 0x24
   b51dc:	f001 bf3c 	b.w	b7058 <_ZN8SPIClass14endTransactionEv>
}
   b51e0:	4770      	bx	lr

000b51e2 <_ZN15Adafruit_SPITFT8endWriteEv>:
void Adafruit_SPITFT::endWrite(void) {
   b51e2:	b510      	push	{r4, lr}
   b51e4:	4604      	mov	r4, r0
    if(_cs >= 0) SPI_CS_HIGH();
   b51e6:	f990 003e 	ldrsb.w	r0, [r0, #62]	; 0x3e
   b51ea:	2800      	cmp	r0, #0
   b51ec:	db03      	blt.n	b51f6 <_ZN15Adafruit_SPITFT8endWriteEv+0x14>
        digitalWrite(_cs, HIGH);
   b51ee:	2101      	movs	r1, #1
   b51f0:	b280      	uxth	r0, r0
   b51f2:	f002 fb76 	bl	b78e2 <digitalWrite>
    SPI_END_TRANSACTION();
   b51f6:	4620      	mov	r0, r4
   b51f8:	f7ff ffec 	bl	b51d4 <_ZN15Adafruit_SPITFT19SPI_END_TRANSACTIONEv>
}
   b51fc:	bd10      	pop	{r4, pc}

000b51fe <_ZN15Adafruit_SPITFT13TFT_WR_STROBEEv>:

/*!
    @brief  Set the WR line LOW, then HIGH. Used for parallel-connected
            interfaces when writing data.
*/
inline void Adafruit_SPITFT::TFT_WR_STROBE(void) {
   b51fe:	b510      	push	{r4, lr}
   b5200:	4604      	mov	r4, r0
 #else  // !HAS_PORT_SET_CLR
    *tft8.wrPort   &= tft8.wrPinMaskClr;
    *tft8.wrPort   |= tft8.wrPinMaskSet;
 #endif // end !HAS_PORT_SET_CLR
#else  // !USE_FAST_PINIO
    digitalWrite(tft8._wr, LOW);
   b5202:	f990 0025 	ldrsb.w	r0, [r0, #37]	; 0x25
   b5206:	2100      	movs	r1, #0
   b5208:	b280      	uxth	r0, r0
   b520a:	f002 fb6a 	bl	b78e2 <digitalWrite>
    digitalWrite(tft8._wr, HIGH);
   b520e:	f994 0025 	ldrsb.w	r0, [r4, #37]	; 0x25
   b5212:	2101      	movs	r1, #1
#endif // end !USE_FAST_PINIO
}
   b5214:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    digitalWrite(tft8._wr, HIGH);
   b5218:	b280      	uxth	r0, r0
   b521a:	f002 bb62 	b.w	b78e2 <digitalWrite>

000b521e <_ZN15Adafruit_SPITFT10writeColorEtm>:
void Adafruit_SPITFT::writeColor(uint16_t color, uint32_t len) {
   b521e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   b5222:	4605      	mov	r5, r0
   b5224:	460e      	mov	r6, r1
    if(!len) return; // Avoid 0-byte transfers
   b5226:	4614      	mov	r4, r2
   b5228:	b17a      	cbz	r2, b524a <_ZN15Adafruit_SPITFT10writeColorEtm+0x2c>
    if(connection == TFT_HARD_SPI) {
   b522a:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
    uint8_t hi = color >> 8, lo = color;
   b522e:	ea4f 2811 	mov.w	r8, r1, lsr #8
   b5232:	b2cf      	uxtb	r7, r1
    if(connection == TFT_HARD_SPI) {
   b5234:	b95b      	cbnz	r3, b524e <_ZN15Adafruit_SPITFT10writeColorEtm+0x30>
            hwspi._spi->transfer(hi);
   b5236:	4641      	mov	r1, r8
   b5238:	6a68      	ldr	r0, [r5, #36]	; 0x24
   b523a:	f001 ff95 	bl	b7168 <_ZN8SPIClass8transferEh>
            hwspi._spi->transfer(lo);
   b523e:	6a68      	ldr	r0, [r5, #36]	; 0x24
   b5240:	4639      	mov	r1, r7
   b5242:	f001 ff91 	bl	b7168 <_ZN8SPIClass8transferEh>
        while(len--) {
   b5246:	3c01      	subs	r4, #1
   b5248:	d1f5      	bne.n	b5236 <_ZN15Adafruit_SPITFT10writeColorEtm+0x18>
}
   b524a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    } else if(connection == TFT_SOFT_SPI) {
   b524e:	2b01      	cmp	r3, #1
   b5250:	d11e      	bne.n	b5290 <_ZN15Adafruit_SPITFT10writeColorEtm+0x72>
            for(uint16_t bit=0, x=color; bit<16; bit++) {
   b5252:	46b0      	mov	r8, r6
   b5254:	2710      	movs	r7, #16
                if(x & 0x8000) SPI_MOSI_HIGH();
   b5256:	f418 4f00 	tst.w	r8, #32768	; 0x8000
   b525a:	f995 0024 	ldrsb.w	r0, [r5, #36]	; 0x24
   b525e:	d014      	beq.n	b528a <_ZN15Adafruit_SPITFT10writeColorEtm+0x6c>
   b5260:	f7ff fea9 	bl	b4fb6 <_ZN15Adafruit_SPITFT13SPI_MOSI_HIGHEv.isra.0>
                SPI_SCK_HIGH();
   b5264:	f995 0026 	ldrsb.w	r0, [r5, #38]	; 0x26
            for(uint16_t bit=0, x=color; bit<16; bit++) {
   b5268:	3f01      	subs	r7, #1
                SPI_SCK_HIGH();
   b526a:	f7ff fe9c 	bl	b4fa6 <_ZN15Adafruit_SPITFT12SPI_SCK_HIGHEv.isra.0>
                x <<= 1;
   b526e:	ea4f 0848 	mov.w	r8, r8, lsl #1
                SPI_SCK_LOW();
   b5272:	f995 0026 	ldrsb.w	r0, [r5, #38]	; 0x26
            for(uint16_t bit=0, x=color; bit<16; bit++) {
   b5276:	b2bf      	uxth	r7, r7
                SPI_SCK_LOW();
   b5278:	f7ff fe91 	bl	b4f9e <_ZN15Adafruit_SPITFT11SPI_SCK_LOWEv.isra.0>
                x <<= 1;
   b527c:	fa1f f888 	uxth.w	r8, r8
            for(uint16_t bit=0, x=color; bit<16; bit++) {
   b5280:	2f00      	cmp	r7, #0
   b5282:	d1e8      	bne.n	b5256 <_ZN15Adafruit_SPITFT10writeColorEtm+0x38>
        while(len--) {
   b5284:	3c01      	subs	r4, #1
   b5286:	d1e4      	bne.n	b5252 <_ZN15Adafruit_SPITFT10writeColorEtm+0x34>
   b5288:	e7df      	b.n	b524a <_ZN15Adafruit_SPITFT10writeColorEtm+0x2c>
                else           SPI_MOSI_LOW();
   b528a:	f7ff fe90 	bl	b4fae <_ZN15Adafruit_SPITFT12SPI_MOSI_LOWEv.isra.0>
   b528e:	e7e9      	b.n	b5264 <_ZN15Adafruit_SPITFT10writeColorEtm+0x46>
        if(hi == lo) {
   b5290:	45b8      	cmp	r8, r7
   b5292:	d0da      	beq.n	b524a <_ZN15Adafruit_SPITFT10writeColorEtm+0x2c>
                TFT_WR_STROBE();
   b5294:	4628      	mov	r0, r5
   b5296:	f7ff ffb2 	bl	b51fe <_ZN15Adafruit_SPITFT13TFT_WR_STROBEEv>
            while(len--) {
   b529a:	3c01      	subs	r4, #1
   b529c:	d1fa      	bne.n	b5294 <_ZN15Adafruit_SPITFT10writeColorEtm+0x76>
   b529e:	e7d4      	b.n	b524a <_ZN15Adafruit_SPITFT10writeColorEtm+0x2c>

000b52a0 <_ZN15Adafruit_SPITFT23writeFillRectPreclippedEsssst>:
  int16_t w, int16_t h, uint16_t color) {
   b52a0:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   b52a4:	461d      	mov	r5, r3
    setAddrWindow(x, y, w, h);
   b52a6:	f8bd 3020 	ldrh.w	r3, [sp, #32]
   b52aa:	9300      	str	r3, [sp, #0]
   b52ac:	6803      	ldr	r3, [r0, #0]
  int16_t w, int16_t h, uint16_t color) {
   b52ae:	f9bd 7020 	ldrsh.w	r7, [sp, #32]
    setAddrWindow(x, y, w, h);
   b52b2:	f8d3 8054 	ldr.w	r8, [r3, #84]	; 0x54
  int16_t w, int16_t h, uint16_t color) {
   b52b6:	f8bd 6024 	ldrh.w	r6, [sp, #36]	; 0x24
    setAddrWindow(x, y, w, h);
   b52ba:	b2ab      	uxth	r3, r5
   b52bc:	b292      	uxth	r2, r2
   b52be:	b289      	uxth	r1, r1
  int16_t w, int16_t h, uint16_t color) {
   b52c0:	4604      	mov	r4, r0
    setAddrWindow(x, y, w, h);
   b52c2:	47c0      	blx	r8
    writeColor(color, (uint32_t)w * h);
   b52c4:	fb05 f207 	mul.w	r2, r5, r7
   b52c8:	4631      	mov	r1, r6
   b52ca:	4620      	mov	r0, r4
}
   b52cc:	b002      	add	sp, #8
   b52ce:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    writeColor(color, (uint32_t)w * h);
   b52d2:	f7ff bfa4 	b.w	b521e <_ZN15Adafruit_SPITFT10writeColorEtm>

000b52d6 <_ZN15Adafruit_SPITFT13writeFillRectEsssst>:
  int16_t w, int16_t h, uint16_t color) {
   b52d6:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   b52da:	f9bd 4020 	ldrsh.w	r4, [sp, #32]
    if(w && h) {                            // Nonzero width and height?
   b52de:	2b00      	cmp	r3, #0
   b52e0:	d046      	beq.n	b5370 <_ZN15Adafruit_SPITFT13writeFillRectEsssst+0x9a>
   b52e2:	2c00      	cmp	r4, #0
   b52e4:	d044      	beq.n	b5370 <_ZN15Adafruit_SPITFT13writeFillRectEsssst+0x9a>
        if(w < 0) {                         // If negative width...
   b52e6:	2b00      	cmp	r3, #0
   b52e8:	da05      	bge.n	b52f6 <_ZN15Adafruit_SPITFT13writeFillRectEsssst+0x20>
            x +=  w + 1;                    //   Move X to left edge
   b52ea:	3101      	adds	r1, #1
   b52ec:	fa11 f183 	uxtah	r1, r1, r3
            w  = -w;                        //   Use positive width
   b52f0:	425b      	negs	r3, r3
            x +=  w + 1;                    //   Move X to left edge
   b52f2:	b209      	sxth	r1, r1
            w  = -w;                        //   Use positive width
   b52f4:	b21b      	sxth	r3, r3
        if(x < _width) {                    // Not off right
   b52f6:	f9b0 600c 	ldrsh.w	r6, [r0, #12]
   b52fa:	428e      	cmp	r6, r1
   b52fc:	dd38      	ble.n	b5370 <_ZN15Adafruit_SPITFT13writeFillRectEsssst+0x9a>
            if(h < 0) {                     // If negative height...
   b52fe:	2c00      	cmp	r4, #0
   b5300:	da05      	bge.n	b530e <_ZN15Adafruit_SPITFT13writeFillRectEsssst+0x38>
                y +=  h + 1;                //   Move Y to top edge
   b5302:	3201      	adds	r2, #1
   b5304:	fa12 f284 	uxtah	r2, r2, r4
                h  = -h;                    //   Use positive height
   b5308:	4264      	negs	r4, r4
                y +=  h + 1;                //   Move Y to top edge
   b530a:	b212      	sxth	r2, r2
                h  = -h;                    //   Use positive height
   b530c:	b224      	sxth	r4, r4
            if(y < _height) {               // Not off bottom
   b530e:	f9b0 500e 	ldrsh.w	r5, [r0, #14]
   b5312:	4295      	cmp	r5, r2
   b5314:	dd2c      	ble.n	b5370 <_ZN15Adafruit_SPITFT13writeFillRectEsssst+0x9a>
                int16_t x2 = x + w - 1;
   b5316:	eb01 0803 	add.w	r8, r1, r3
   b531a:	fa1f f888 	uxth.w	r8, r8
   b531e:	f108 3cff 	add.w	ip, r8, #4294967295	; 0xffffffff
   b5322:	fa0f fc8c 	sxth.w	ip, ip
                if(x2 >= 0) {               // Not off left
   b5326:	f1bc 0f00 	cmp.w	ip, #0
   b532a:	db21      	blt.n	b5370 <_ZN15Adafruit_SPITFT13writeFillRectEsssst+0x9a>
                    int16_t y2 = y + h - 1;
   b532c:	eb02 0e04 	add.w	lr, r2, r4
   b5330:	fa1f fe8e 	uxth.w	lr, lr
   b5334:	f10e 37ff 	add.w	r7, lr, #4294967295	; 0xffffffff
   b5338:	b23f      	sxth	r7, r7
                    if(y2 >= 0) {           // Not off top
   b533a:	2f00      	cmp	r7, #0
   b533c:	db18      	blt.n	b5370 <_ZN15Adafruit_SPITFT13writeFillRectEsssst+0x9a>
                        if(x  <  0)       { x = 0; w = x2 + 1; } // Clip left
   b533e:	2900      	cmp	r1, #0
   b5340:	bfbc      	itt	lt
   b5342:	fa0f f388 	sxthlt.w	r3, r8
   b5346:	2100      	movlt	r1, #0
                        if(y  <  0)       { y = 0; h = y2 + 1; } // Clip top
   b5348:	2a00      	cmp	r2, #0
   b534a:	bfbc      	itt	lt
   b534c:	fa0f f48e 	sxthlt.w	r4, lr
   b5350:	2200      	movlt	r2, #0
                        if(x2 >= _width)  { w = _width  - x;   } // Clip right
   b5352:	4566      	cmp	r6, ip
   b5354:	bfdc      	itt	le
   b5356:	1a73      	suble	r3, r6, r1
   b5358:	b21b      	sxthle	r3, r3
                        if(y2 >= _height) { h = _height - y;   } // Clip bottom
   b535a:	42bd      	cmp	r5, r7
   b535c:	bfd8      	it	le
   b535e:	1aac      	suble	r4, r5, r2
                        writeFillRectPreclipped(x, y, w, h, color);
   b5360:	f8bd 5024 	ldrh.w	r5, [sp, #36]	; 0x24
                        if(y2 >= _height) { h = _height - y;   } // Clip bottom
   b5364:	bfd8      	it	le
   b5366:	b224      	sxthle	r4, r4
                        writeFillRectPreclipped(x, y, w, h, color);
   b5368:	e9cd 4500 	strd	r4, r5, [sp]
   b536c:	f7ff ff98 	bl	b52a0 <_ZN15Adafruit_SPITFT23writeFillRectPreclippedEsssst>
}
   b5370:	b002      	add	sp, #8
   b5372:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000b5376 <_ZN15Adafruit_SPITFT8fillRectEsssst>:
  uint16_t color) {
   b5376:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   b537a:	4680      	mov	r8, r0
   b537c:	f9bd 7028 	ldrsh.w	r7, [sp, #40]	; 0x28
   b5380:	f8bd 902c 	ldrh.w	r9, [sp, #44]	; 0x2c
   b5384:	460c      	mov	r4, r1
   b5386:	4615      	mov	r5, r2
    if(w && h) {                            // Nonzero width and height?
   b5388:	461e      	mov	r6, r3
   b538a:	2b00      	cmp	r3, #0
   b538c:	d052      	beq.n	b5434 <_ZN15Adafruit_SPITFT8fillRectEsssst+0xbe>
   b538e:	2f00      	cmp	r7, #0
   b5390:	d050      	beq.n	b5434 <_ZN15Adafruit_SPITFT8fillRectEsssst+0xbe>
        if(w < 0) {                         // If negative width...
   b5392:	2b00      	cmp	r3, #0
   b5394:	da05      	bge.n	b53a2 <_ZN15Adafruit_SPITFT8fillRectEsssst+0x2c>
            x +=  w + 1;                    //   Move X to left edge
   b5396:	3401      	adds	r4, #1
   b5398:	fa14 f483 	uxtah	r4, r4, r3
            w  = -w;                        //   Use positive width
   b539c:	425e      	negs	r6, r3
            x +=  w + 1;                    //   Move X to left edge
   b539e:	b224      	sxth	r4, r4
            w  = -w;                        //   Use positive width
   b53a0:	b236      	sxth	r6, r6
        if(x < _width) {                    // Not off right
   b53a2:	f9b8 300c 	ldrsh.w	r3, [r8, #12]
   b53a6:	42a3      	cmp	r3, r4
   b53a8:	dd44      	ble.n	b5434 <_ZN15Adafruit_SPITFT8fillRectEsssst+0xbe>
            if(h < 0) {                     // If negative height...
   b53aa:	2f00      	cmp	r7, #0
   b53ac:	da05      	bge.n	b53ba <_ZN15Adafruit_SPITFT8fillRectEsssst+0x44>
                y +=  h + 1;                //   Move Y to top edge
   b53ae:	3501      	adds	r5, #1
   b53b0:	fa15 f587 	uxtah	r5, r5, r7
                h  = -h;                    //   Use positive height
   b53b4:	427f      	negs	r7, r7
                y +=  h + 1;                //   Move Y to top edge
   b53b6:	b22d      	sxth	r5, r5
                h  = -h;                    //   Use positive height
   b53b8:	b23f      	sxth	r7, r7
            if(y < _height) {               // Not off bottom
   b53ba:	f9b8 200e 	ldrsh.w	r2, [r8, #14]
   b53be:	42aa      	cmp	r2, r5
   b53c0:	dd38      	ble.n	b5434 <_ZN15Adafruit_SPITFT8fillRectEsssst+0xbe>
                int16_t x2 = x + w - 1;
   b53c2:	eb04 0e06 	add.w	lr, r4, r6
   b53c6:	fa1f fe8e 	uxth.w	lr, lr
   b53ca:	f10e 30ff 	add.w	r0, lr, #4294967295	; 0xffffffff
   b53ce:	b200      	sxth	r0, r0
                if(x2 >= 0) {               // Not off left
   b53d0:	2800      	cmp	r0, #0
   b53d2:	db2f      	blt.n	b5434 <_ZN15Adafruit_SPITFT8fillRectEsssst+0xbe>
                    int16_t y2 = y + h - 1;
   b53d4:	eb05 0c07 	add.w	ip, r5, r7
   b53d8:	fa1f fc8c 	uxth.w	ip, ip
   b53dc:	f10c 31ff 	add.w	r1, ip, #4294967295	; 0xffffffff
   b53e0:	b209      	sxth	r1, r1
                    if(y2 >= 0) {           // Not off top
   b53e2:	2900      	cmp	r1, #0
   b53e4:	db26      	blt.n	b5434 <_ZN15Adafruit_SPITFT8fillRectEsssst+0xbe>
                        if(x  <  0)       { x = 0; w = x2 + 1; } // Clip left
   b53e6:	2c00      	cmp	r4, #0
   b53e8:	bfbc      	itt	lt
   b53ea:	fa0f f68e 	sxthlt.w	r6, lr
   b53ee:	2400      	movlt	r4, #0
                        if(y  <  0)       { y = 0; h = y2 + 1; } // Clip top
   b53f0:	2d00      	cmp	r5, #0
   b53f2:	bfbc      	itt	lt
   b53f4:	fa0f f78c 	sxthlt.w	r7, ip
   b53f8:	2500      	movlt	r5, #0
                        if(x2 >= _width)  { w = _width  - x;   } // Clip right
   b53fa:	4283      	cmp	r3, r0
   b53fc:	bfdc      	itt	le
   b53fe:	1b1b      	suble	r3, r3, r4
   b5400:	b21e      	sxthle	r6, r3
                        if(y2 >= _height) { h = _height - y;   } // Clip bottom
   b5402:	428a      	cmp	r2, r1
                        startWrite();
   b5404:	f8d8 3000 	ldr.w	r3, [r8]
                        if(y2 >= _height) { h = _height - y;   } // Clip bottom
   b5408:	bfdc      	itt	le
   b540a:	1b52      	suble	r2, r2, r5
   b540c:	b217      	sxthle	r7, r2
                        startWrite();
   b540e:	4640      	mov	r0, r8
   b5410:	695b      	ldr	r3, [r3, #20]
   b5412:	4798      	blx	r3
                        writeFillRectPreclipped(x, y, w, h, color);
   b5414:	4633      	mov	r3, r6
   b5416:	4640      	mov	r0, r8
   b5418:	e9cd 7900 	strd	r7, r9, [sp]
   b541c:	462a      	mov	r2, r5
   b541e:	4621      	mov	r1, r4
   b5420:	f7ff ff3e 	bl	b52a0 <_ZN15Adafruit_SPITFT23writeFillRectPreclippedEsssst>
                        endWrite();
   b5424:	f8d8 3000 	ldr.w	r3, [r8]
   b5428:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b542a:	4640      	mov	r0, r8
}
   b542c:	b003      	add	sp, #12
   b542e:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
                        endWrite();
   b5432:	4718      	bx	r3
}
   b5434:	b003      	add	sp, #12
   b5436:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

000b543a <_ZN15Adafruit_SPITFT13drawFastHLineEssst>:
  uint16_t color) {
   b543a:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
    if((y >= 0) && (y < _height) && w) { // Y on screen, nonzero width
   b543e:	1e17      	subs	r7, r2, #0
  uint16_t color) {
   b5440:	f8bd 8020 	ldrh.w	r8, [sp, #32]
   b5444:	4606      	mov	r6, r0
   b5446:	460c      	mov	r4, r1
   b5448:	461d      	mov	r5, r3
    if((y >= 0) && (y < _height) && w) { // Y on screen, nonzero width
   b544a:	db33      	blt.n	b54b4 <_ZN15Adafruit_SPITFT13drawFastHLineEssst+0x7a>
   b544c:	f9b0 300e 	ldrsh.w	r3, [r0, #14]
   b5450:	42bb      	cmp	r3, r7
   b5452:	dd2f      	ble.n	b54b4 <_ZN15Adafruit_SPITFT13drawFastHLineEssst+0x7a>
   b5454:	2d00      	cmp	r5, #0
   b5456:	d02d      	beq.n	b54b4 <_ZN15Adafruit_SPITFT13drawFastHLineEssst+0x7a>
        if(w < 0) {                      // If negative width...
   b5458:	da05      	bge.n	b5466 <_ZN15Adafruit_SPITFT13drawFastHLineEssst+0x2c>
            x +=  w + 1;                 //   Move X to left edge
   b545a:	3401      	adds	r4, #1
   b545c:	fa14 f485 	uxtah	r4, r4, r5
            w  = -w;                     //   Use positive width
   b5460:	426d      	negs	r5, r5
            x +=  w + 1;                 //   Move X to left edge
   b5462:	b224      	sxth	r4, r4
            w  = -w;                     //   Use positive width
   b5464:	b22d      	sxth	r5, r5
        if(x < _width) {                 // Not off right
   b5466:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
   b546a:	42a3      	cmp	r3, r4
   b546c:	dd22      	ble.n	b54b4 <_ZN15Adafruit_SPITFT13drawFastHLineEssst+0x7a>
            int16_t x2 = x + w - 1;
   b546e:	1961      	adds	r1, r4, r5
   b5470:	b289      	uxth	r1, r1
   b5472:	1e4a      	subs	r2, r1, #1
   b5474:	b212      	sxth	r2, r2
            if(x2 >= 0) {                // Not off left
   b5476:	2a00      	cmp	r2, #0
   b5478:	db1c      	blt.n	b54b4 <_ZN15Adafruit_SPITFT13drawFastHLineEssst+0x7a>
                if(x  <  0)       { x = 0; w = x2 + 1; } // Clip left
   b547a:	2c00      	cmp	r4, #0
   b547c:	bfbc      	itt	lt
   b547e:	b20d      	sxthlt	r5, r1
   b5480:	2400      	movlt	r4, #0
                if(x2 >= _width)  { w = _width  - x;   } // Clip right
   b5482:	4293      	cmp	r3, r2
   b5484:	bfdc      	itt	le
   b5486:	1b1b      	suble	r3, r3, r4
   b5488:	b21d      	sxthle	r5, r3
                startWrite();
   b548a:	6833      	ldr	r3, [r6, #0]
   b548c:	4630      	mov	r0, r6
   b548e:	695b      	ldr	r3, [r3, #20]
   b5490:	4798      	blx	r3
                writeFillRectPreclipped(x, y, w, 1, color);
   b5492:	2301      	movs	r3, #1
   b5494:	9300      	str	r3, [sp, #0]
   b5496:	4630      	mov	r0, r6
   b5498:	462b      	mov	r3, r5
   b549a:	f8cd 8004 	str.w	r8, [sp, #4]
   b549e:	463a      	mov	r2, r7
   b54a0:	4621      	mov	r1, r4
   b54a2:	f7ff fefd 	bl	b52a0 <_ZN15Adafruit_SPITFT23writeFillRectPreclippedEsssst>
                endWrite();
   b54a6:	6833      	ldr	r3, [r6, #0]
   b54a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b54aa:	4630      	mov	r0, r6
}
   b54ac:	b002      	add	sp, #8
   b54ae:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
                endWrite();
   b54b2:	4718      	bx	r3
}
   b54b4:	b002      	add	sp, #8
   b54b6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000b54ba <_ZN15Adafruit_SPITFT13drawFastVLineEssst>:
  uint16_t color) {
   b54ba:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
    if((x >= 0) && (x < _width) && h) { // X on screen, nonzero height
   b54be:	1e0f      	subs	r7, r1, #0
  uint16_t color) {
   b54c0:	f8bd 8020 	ldrh.w	r8, [sp, #32]
   b54c4:	4606      	mov	r6, r0
   b54c6:	4614      	mov	r4, r2
   b54c8:	461d      	mov	r5, r3
    if((x >= 0) && (x < _width) && h) { // X on screen, nonzero height
   b54ca:	db31      	blt.n	b5530 <_ZN15Adafruit_SPITFT13drawFastVLineEssst+0x76>
   b54cc:	f9b0 300c 	ldrsh.w	r3, [r0, #12]
   b54d0:	42bb      	cmp	r3, r7
   b54d2:	dd2d      	ble.n	b5530 <_ZN15Adafruit_SPITFT13drawFastVLineEssst+0x76>
   b54d4:	2d00      	cmp	r5, #0
   b54d6:	d02b      	beq.n	b5530 <_ZN15Adafruit_SPITFT13drawFastVLineEssst+0x76>
        if(h < 0) {                     // If negative height...
   b54d8:	da05      	bge.n	b54e6 <_ZN15Adafruit_SPITFT13drawFastVLineEssst+0x2c>
            y +=  h + 1;                //   Move Y to top edge
   b54da:	3401      	adds	r4, #1
   b54dc:	fa14 f485 	uxtah	r4, r4, r5
            h  = -h;                    //   Use positive height
   b54e0:	426d      	negs	r5, r5
            y +=  h + 1;                //   Move Y to top edge
   b54e2:	b224      	sxth	r4, r4
            h  = -h;                    //   Use positive height
   b54e4:	b22d      	sxth	r5, r5
        if(y < _height) {               // Not off bottom
   b54e6:	f9b6 300e 	ldrsh.w	r3, [r6, #14]
   b54ea:	42a3      	cmp	r3, r4
   b54ec:	dd20      	ble.n	b5530 <_ZN15Adafruit_SPITFT13drawFastVLineEssst+0x76>
            int16_t y2 = y + h - 1;
   b54ee:	1961      	adds	r1, r4, r5
   b54f0:	b289      	uxth	r1, r1
   b54f2:	1e4a      	subs	r2, r1, #1
   b54f4:	b212      	sxth	r2, r2
            if(y2 >= 0) {               // Not off top
   b54f6:	2a00      	cmp	r2, #0
   b54f8:	db1a      	blt.n	b5530 <_ZN15Adafruit_SPITFT13drawFastVLineEssst+0x76>
                if(y  <  0)       { y = 0; h = y2 + 1; } // Clip top
   b54fa:	2c00      	cmp	r4, #0
   b54fc:	bfbc      	itt	lt
   b54fe:	b20d      	sxthlt	r5, r1
   b5500:	2400      	movlt	r4, #0
                if(y2 >= _height) { h = _height - y;   } // Clip bottom
   b5502:	4293      	cmp	r3, r2
   b5504:	bfdc      	itt	le
   b5506:	1b1b      	suble	r3, r3, r4
   b5508:	b21d      	sxthle	r5, r3
                startWrite();
   b550a:	6833      	ldr	r3, [r6, #0]
   b550c:	4630      	mov	r0, r6
   b550e:	695b      	ldr	r3, [r3, #20]
   b5510:	4798      	blx	r3
                writeFillRectPreclipped(x, y, 1, h, color);
   b5512:	4630      	mov	r0, r6
   b5514:	e9cd 5800 	strd	r5, r8, [sp]
   b5518:	2301      	movs	r3, #1
   b551a:	4622      	mov	r2, r4
   b551c:	4639      	mov	r1, r7
   b551e:	f7ff febf 	bl	b52a0 <_ZN15Adafruit_SPITFT23writeFillRectPreclippedEsssst>
                endWrite();
   b5522:	6833      	ldr	r3, [r6, #0]
   b5524:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b5526:	4630      	mov	r0, r6
}
   b5528:	b002      	add	sp, #8
   b552a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
                endWrite();
   b552e:	4718      	bx	r3
}
   b5530:	b002      	add	sp, #8
   b5532:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000b5536 <_ZN15Adafruit_SPITFT14writeFastHLineEssst>:
    if((y >= 0) && (y < _height) && w) { // Y on screen, nonzero width
   b5536:	2a00      	cmp	r2, #0
  uint16_t color) {
   b5538:	b573      	push	{r0, r1, r4, r5, r6, lr}
    if((y >= 0) && (y < _height) && w) { // Y on screen, nonzero width
   b553a:	db27      	blt.n	b558c <_ZN15Adafruit_SPITFT14writeFastHLineEssst+0x56>
   b553c:	f9b0 400e 	ldrsh.w	r4, [r0, #14]
   b5540:	4294      	cmp	r4, r2
   b5542:	dd23      	ble.n	b558c <_ZN15Adafruit_SPITFT14writeFastHLineEssst+0x56>
   b5544:	2b00      	cmp	r3, #0
   b5546:	d021      	beq.n	b558c <_ZN15Adafruit_SPITFT14writeFastHLineEssst+0x56>
        if(w < 0) {                      // If negative width...
   b5548:	da05      	bge.n	b5556 <_ZN15Adafruit_SPITFT14writeFastHLineEssst+0x20>
            x +=  w + 1;                 //   Move X to left edge
   b554a:	3101      	adds	r1, #1
   b554c:	fa11 f183 	uxtah	r1, r1, r3
            w  = -w;                     //   Use positive width
   b5550:	425b      	negs	r3, r3
            x +=  w + 1;                 //   Move X to left edge
   b5552:	b209      	sxth	r1, r1
            w  = -w;                     //   Use positive width
   b5554:	b21b      	sxth	r3, r3
        if(x < _width) {                 // Not off right
   b5556:	f9b0 400c 	ldrsh.w	r4, [r0, #12]
   b555a:	428c      	cmp	r4, r1
   b555c:	dd16      	ble.n	b558c <_ZN15Adafruit_SPITFT14writeFastHLineEssst+0x56>
            int16_t x2 = x + w - 1;
   b555e:	18ce      	adds	r6, r1, r3
   b5560:	b2b6      	uxth	r6, r6
   b5562:	1e75      	subs	r5, r6, #1
   b5564:	b22d      	sxth	r5, r5
            if(x2 >= 0) {                // Not off left
   b5566:	2d00      	cmp	r5, #0
   b5568:	db10      	blt.n	b558c <_ZN15Adafruit_SPITFT14writeFastHLineEssst+0x56>
                if(x  <  0)       { x = 0; w = x2 + 1; } // Clip left
   b556a:	2900      	cmp	r1, #0
   b556c:	bfbc      	itt	lt
   b556e:	b233      	sxthlt	r3, r6
   b5570:	2100      	movlt	r1, #0
                if(x2 >= _width)  { w = _width  - x;   } // Clip right
   b5572:	42ac      	cmp	r4, r5
   b5574:	bfd8      	it	le
   b5576:	1a63      	suble	r3, r4, r1
                writeFillRectPreclipped(x, y, w, 1, color);
   b5578:	f8bd 4018 	ldrh.w	r4, [sp, #24]
   b557c:	9401      	str	r4, [sp, #4]
   b557e:	f04f 0401 	mov.w	r4, #1
                if(x2 >= _width)  { w = _width  - x;   } // Clip right
   b5582:	bfd8      	it	le
   b5584:	b21b      	sxthle	r3, r3
                writeFillRectPreclipped(x, y, w, 1, color);
   b5586:	9400      	str	r4, [sp, #0]
   b5588:	f7ff fe8a 	bl	b52a0 <_ZN15Adafruit_SPITFT23writeFillRectPreclippedEsssst>
}
   b558c:	b002      	add	sp, #8
   b558e:	bd70      	pop	{r4, r5, r6, pc}

000b5590 <_ZN15Adafruit_SPITFT14writeFastVLineEssst>:
  uint16_t color) {
   b5590:	b573      	push	{r0, r1, r4, r5, r6, lr}
    if((x >= 0) && (x < _width) && h) { // X on screen, nonzero height
   b5592:	2900      	cmp	r1, #0
   b5594:	db26      	blt.n	b55e4 <_ZN15Adafruit_SPITFT14writeFastVLineEssst+0x54>
   b5596:	f9b0 400c 	ldrsh.w	r4, [r0, #12]
   b559a:	428c      	cmp	r4, r1
   b559c:	dd22      	ble.n	b55e4 <_ZN15Adafruit_SPITFT14writeFastVLineEssst+0x54>
   b559e:	2b00      	cmp	r3, #0
   b55a0:	d020      	beq.n	b55e4 <_ZN15Adafruit_SPITFT14writeFastVLineEssst+0x54>
        if(h < 0) {                     // If negative height...
   b55a2:	da05      	bge.n	b55b0 <_ZN15Adafruit_SPITFT14writeFastVLineEssst+0x20>
            y +=  h + 1;                //   Move Y to top edge
   b55a4:	3201      	adds	r2, #1
   b55a6:	fa12 f283 	uxtah	r2, r2, r3
            h  = -h;                    //   Use positive height
   b55aa:	425b      	negs	r3, r3
            y +=  h + 1;                //   Move Y to top edge
   b55ac:	b212      	sxth	r2, r2
            h  = -h;                    //   Use positive height
   b55ae:	b21b      	sxth	r3, r3
        if(y < _height) {               // Not off bottom
   b55b0:	f9b0 400e 	ldrsh.w	r4, [r0, #14]
   b55b4:	4294      	cmp	r4, r2
   b55b6:	dd15      	ble.n	b55e4 <_ZN15Adafruit_SPITFT14writeFastVLineEssst+0x54>
            int16_t y2 = y + h - 1;
   b55b8:	18d6      	adds	r6, r2, r3
   b55ba:	b2b6      	uxth	r6, r6
   b55bc:	1e75      	subs	r5, r6, #1
   b55be:	b22d      	sxth	r5, r5
            if(y2 >= 0) {               // Not off top
   b55c0:	2d00      	cmp	r5, #0
   b55c2:	db0f      	blt.n	b55e4 <_ZN15Adafruit_SPITFT14writeFastVLineEssst+0x54>
                if(y  <  0)       { y = 0; h = y2 + 1; } // Clip top
   b55c4:	2a00      	cmp	r2, #0
   b55c6:	bfbc      	itt	lt
   b55c8:	b233      	sxthlt	r3, r6
   b55ca:	2200      	movlt	r2, #0
                if(y2 >= _height) { h = _height - y;   } // Clip bottom
   b55cc:	42ac      	cmp	r4, r5
   b55ce:	bfd8      	it	le
   b55d0:	1aa3      	suble	r3, r4, r2
                writeFillRectPreclipped(x, y, 1, h, color);
   b55d2:	f8bd 4018 	ldrh.w	r4, [sp, #24]
                if(y2 >= _height) { h = _height - y;   } // Clip bottom
   b55d6:	bfd8      	it	le
   b55d8:	b21b      	sxthle	r3, r3
                writeFillRectPreclipped(x, y, 1, h, color);
   b55da:	e9cd 3400 	strd	r3, r4, [sp]
   b55de:	2301      	movs	r3, #1
   b55e0:	f7ff fe5e 	bl	b52a0 <_ZN15Adafruit_SPITFT23writeFillRectPreclippedEsssst>
}
   b55e4:	b002      	add	sp, #8
   b55e6:	bd70      	pop	{r4, r5, r6, pc}

000b55e8 <_ZN15Adafruit_SPITFT8spiWriteEh>:
void Adafruit_SPITFT::spiWrite(uint8_t b) {
   b55e8:	b570      	push	{r4, r5, r6, lr}
    if(connection == TFT_HARD_SPI) {
   b55ea:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
void Adafruit_SPITFT::spiWrite(uint8_t b) {
   b55ee:	4604      	mov	r4, r0
   b55f0:	460d      	mov	r5, r1
    if(connection == TFT_HARD_SPI) {
   b55f2:	b923      	cbnz	r3, b55fe <_ZN15Adafruit_SPITFT8spiWriteEh+0x16>
}
   b55f4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        hwspi._spi->transfer(b);
   b55f8:	6a40      	ldr	r0, [r0, #36]	; 0x24
   b55fa:	f001 bdb5 	b.w	b7168 <_ZN8SPIClass8transferEh>
    } else if(connection == TFT_SOFT_SPI) {
   b55fe:	2b01      	cmp	r3, #1
   b5600:	d118      	bne.n	b5634 <_ZN15Adafruit_SPITFT8spiWriteEh+0x4c>
   b5602:	2608      	movs	r6, #8
            if(b & 0x80) SPI_MOSI_HIGH();
   b5604:	062b      	lsls	r3, r5, #24
   b5606:	f994 0024 	ldrsb.w	r0, [r4, #36]	; 0x24
   b560a:	d510      	bpl.n	b562e <_ZN15Adafruit_SPITFT8spiWriteEh+0x46>
   b560c:	f7ff fcd3 	bl	b4fb6 <_ZN15Adafruit_SPITFT13SPI_MOSI_HIGHEv.isra.0>
            SPI_SCK_HIGH();
   b5610:	f994 0026 	ldrsb.w	r0, [r4, #38]	; 0x26
   b5614:	f7ff fcc7 	bl	b4fa6 <_ZN15Adafruit_SPITFT12SPI_SCK_HIGHEv.isra.0>
        for(uint8_t bit=0; bit<8; bit++) {
   b5618:	3e01      	subs	r6, #1
            SPI_SCK_LOW();
   b561a:	f994 0026 	ldrsb.w	r0, [r4, #38]	; 0x26
   b561e:	f7ff fcbe 	bl	b4f9e <_ZN15Adafruit_SPITFT11SPI_SCK_LOWEv.isra.0>
            b <<= 1;
   b5622:	006d      	lsls	r5, r5, #1
        for(uint8_t bit=0; bit<8; bit++) {
   b5624:	f016 06ff 	ands.w	r6, r6, #255	; 0xff
            b <<= 1;
   b5628:	b2ed      	uxtb	r5, r5
        for(uint8_t bit=0; bit<8; bit++) {
   b562a:	d1eb      	bne.n	b5604 <_ZN15Adafruit_SPITFT8spiWriteEh+0x1c>
}
   b562c:	bd70      	pop	{r4, r5, r6, pc}
            else         SPI_MOSI_LOW();
   b562e:	f7ff fcbe 	bl	b4fae <_ZN15Adafruit_SPITFT12SPI_MOSI_LOWEv.isra.0>
   b5632:	e7ed      	b.n	b5610 <_ZN15Adafruit_SPITFT8spiWriteEh+0x28>
        TFT_WR_STROBE();
   b5634:	f7ff fde3 	bl	b51fe <_ZN15Adafruit_SPITFT13TFT_WR_STROBEEv>
}
   b5638:	e7f8      	b.n	b562c <_ZN15Adafruit_SPITFT8spiWriteEh+0x44>

000b563a <_ZN15Adafruit_SPITFT12writeCommandEh>:
void Adafruit_SPITFT::writeCommand(uint8_t cmd) {
   b563a:	b513      	push	{r0, r1, r4, lr}
   b563c:	4604      	mov	r4, r0
    SPI_DC_LOW();
   b563e:	f990 003f 	ldrsb.w	r0, [r0, #63]	; 0x3f
void Adafruit_SPITFT::writeCommand(uint8_t cmd) {
   b5642:	9101      	str	r1, [sp, #4]
    SPI_DC_LOW();
   b5644:	f7ff fcbb 	bl	b4fbe <_ZN15Adafruit_SPITFT10SPI_DC_LOWEv.isra.0>
    spiWrite(cmd);
   b5648:	4620      	mov	r0, r4
   b564a:	9901      	ldr	r1, [sp, #4]
   b564c:	f7ff ffcc 	bl	b55e8 <_ZN15Adafruit_SPITFT8spiWriteEh>
    SPI_DC_HIGH();
   b5650:	f994 003f 	ldrsb.w	r0, [r4, #63]	; 0x3f
}
   b5654:	b002      	add	sp, #8
   b5656:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    SPI_DC_HIGH();
   b565a:	f7ff bcb4 	b.w	b4fc6 <_ZN15Adafruit_SPITFT11SPI_DC_HIGHEv.isra.0>

000b565e <_ZN15Adafruit_SPITFT13invertDisplayEb>:
void Adafruit_SPITFT::invertDisplay(bool i) {
   b565e:	b570      	push	{r4, r5, r6, lr}
    startWrite();
   b5660:	6803      	ldr	r3, [r0, #0]
void Adafruit_SPITFT::invertDisplay(bool i) {
   b5662:	460d      	mov	r5, r1
    startWrite();
   b5664:	695b      	ldr	r3, [r3, #20]
void Adafruit_SPITFT::invertDisplay(bool i) {
   b5666:	4604      	mov	r4, r0
    startWrite();
   b5668:	4798      	blx	r3
    writeCommand(i ? invertOnCommand : invertOffCommand);
   b566a:	b155      	cbz	r5, b5682 <_ZN15Adafruit_SPITFT13invertDisplayEb+0x24>
   b566c:	f894 1044 	ldrb.w	r1, [r4, #68]	; 0x44
   b5670:	4620      	mov	r0, r4
   b5672:	f7ff ffe2 	bl	b563a <_ZN15Adafruit_SPITFT12writeCommandEh>
    endWrite();
   b5676:	6823      	ldr	r3, [r4, #0]
   b5678:	4620      	mov	r0, r4
   b567a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
}
   b567c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    endWrite();
   b5680:	4718      	bx	r3
    writeCommand(i ? invertOnCommand : invertOffCommand);
   b5682:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
   b5686:	e7f3      	b.n	b5670 <_ZN15Adafruit_SPITFT13invertDisplayEb+0x12>

000b5688 <_ZN15Adafruit_SPITFT11SPI_WRITE16Et>:
void Adafruit_SPITFT::SPI_WRITE16(uint16_t w) {
   b5688:	b570      	push	{r4, r5, r6, lr}
    if(connection == TFT_HARD_SPI) {
   b568a:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
void Adafruit_SPITFT::SPI_WRITE16(uint16_t w) {
   b568e:	4605      	mov	r5, r0
   b5690:	460c      	mov	r4, r1
    if(connection == TFT_HARD_SPI) {
   b5692:	b94b      	cbnz	r3, b56a8 <_ZN15Adafruit_SPITFT11SPI_WRITE16Et+0x20>
        hwspi._spi->transfer(w >> 8);
   b5694:	0a09      	lsrs	r1, r1, #8
   b5696:	6a40      	ldr	r0, [r0, #36]	; 0x24
   b5698:	f001 fd66 	bl	b7168 <_ZN8SPIClass8transferEh>
        hwspi._spi->transfer(w);
   b569c:	6a68      	ldr	r0, [r5, #36]	; 0x24
   b569e:	b2e1      	uxtb	r1, r4
}
   b56a0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        hwspi._spi->transfer(w);
   b56a4:	f001 bd60 	b.w	b7168 <_ZN8SPIClass8transferEh>
    } else if(connection == TFT_SOFT_SPI) {
   b56a8:	2b01      	cmp	r3, #1
   b56aa:	d118      	bne.n	b56de <_ZN15Adafruit_SPITFT11SPI_WRITE16Et+0x56>
   b56ac:	2610      	movs	r6, #16
            if(w & 0x8000) SPI_MOSI_HIGH();
   b56ae:	0423      	lsls	r3, r4, #16
   b56b0:	f995 0024 	ldrsb.w	r0, [r5, #36]	; 0x24
   b56b4:	d510      	bpl.n	b56d8 <_ZN15Adafruit_SPITFT11SPI_WRITE16Et+0x50>
   b56b6:	f7ff fc7e 	bl	b4fb6 <_ZN15Adafruit_SPITFT13SPI_MOSI_HIGHEv.isra.0>
            SPI_SCK_HIGH();
   b56ba:	f995 0026 	ldrsb.w	r0, [r5, #38]	; 0x26
   b56be:	f7ff fc72 	bl	b4fa6 <_ZN15Adafruit_SPITFT12SPI_SCK_HIGHEv.isra.0>
        for(uint8_t bit=0; bit<16; bit++) {
   b56c2:	3e01      	subs	r6, #1
            SPI_SCK_LOW();
   b56c4:	f995 0026 	ldrsb.w	r0, [r5, #38]	; 0x26
   b56c8:	f7ff fc69 	bl	b4f9e <_ZN15Adafruit_SPITFT11SPI_SCK_LOWEv.isra.0>
            w <<= 1;
   b56cc:	0064      	lsls	r4, r4, #1
        for(uint8_t bit=0; bit<16; bit++) {
   b56ce:	f016 06ff 	ands.w	r6, r6, #255	; 0xff
            w <<= 1;
   b56d2:	b2a4      	uxth	r4, r4
        for(uint8_t bit=0; bit<16; bit++) {
   b56d4:	d1eb      	bne.n	b56ae <_ZN15Adafruit_SPITFT11SPI_WRITE16Et+0x26>
}
   b56d6:	bd70      	pop	{r4, r5, r6, pc}
            else           SPI_MOSI_LOW();
   b56d8:	f7ff fc69 	bl	b4fae <_ZN15Adafruit_SPITFT12SPI_MOSI_LOWEv.isra.0>
   b56dc:	e7ed      	b.n	b56ba <_ZN15Adafruit_SPITFT11SPI_WRITE16Et+0x32>
        TFT_WR_STROBE();
   b56de:	f7ff fd8e 	bl	b51fe <_ZN15Adafruit_SPITFT13TFT_WR_STROBEEv>
}
   b56e2:	e7f8      	b.n	b56d6 <_ZN15Adafruit_SPITFT11SPI_WRITE16Et+0x4e>

000b56e4 <_ZN15Adafruit_SPITFT10writePixelEsst>:
void Adafruit_SPITFT::writePixel(int16_t x, int16_t y, uint16_t color) {
   b56e4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    if((x >= 0) && (x < _width) && (y >= 0) && (y < _height)) {
   b56e6:	2900      	cmp	r1, #0
void Adafruit_SPITFT::writePixel(int16_t x, int16_t y, uint16_t color) {
   b56e8:	4604      	mov	r4, r0
   b56ea:	461e      	mov	r6, r3
    if((x >= 0) && (x < _width) && (y >= 0) && (y < _height)) {
   b56ec:	db17      	blt.n	b571e <_ZN15Adafruit_SPITFT10writePixelEsst+0x3a>
   b56ee:	f9b0 300c 	ldrsh.w	r3, [r0, #12]
   b56f2:	428b      	cmp	r3, r1
   b56f4:	dd13      	ble.n	b571e <_ZN15Adafruit_SPITFT10writePixelEsst+0x3a>
   b56f6:	2a00      	cmp	r2, #0
   b56f8:	db11      	blt.n	b571e <_ZN15Adafruit_SPITFT10writePixelEsst+0x3a>
   b56fa:	f9b0 300e 	ldrsh.w	r3, [r0, #14]
   b56fe:	4293      	cmp	r3, r2
   b5700:	dd0d      	ble.n	b571e <_ZN15Adafruit_SPITFT10writePixelEsst+0x3a>
        setAddrWindow(x, y, 1, 1);
   b5702:	6805      	ldr	r5, [r0, #0]
   b5704:	2301      	movs	r3, #1
   b5706:	9300      	str	r3, [sp, #0]
   b5708:	6d6f      	ldr	r7, [r5, #84]	; 0x54
   b570a:	b292      	uxth	r2, r2
   b570c:	b289      	uxth	r1, r1
   b570e:	47b8      	blx	r7
        SPI_WRITE16(color);
   b5710:	4631      	mov	r1, r6
   b5712:	4620      	mov	r0, r4
}
   b5714:	b003      	add	sp, #12
   b5716:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
        SPI_WRITE16(color);
   b571a:	f7ff bfb5 	b.w	b5688 <_ZN15Adafruit_SPITFT11SPI_WRITE16Et>
}
   b571e:	b003      	add	sp, #12
   b5720:	bdf0      	pop	{r4, r5, r6, r7, pc}

000b5722 <_ZN15Adafruit_SPITFT9drawPixelEsst>:
void Adafruit_SPITFT::drawPixel(int16_t x, int16_t y, uint16_t color) {
   b5722:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
    if((x >= 0) && (x < _width) && (y >= 0) && (y < _height)) {
   b5726:	1e0d      	subs	r5, r1, #0
void Adafruit_SPITFT::drawPixel(int16_t x, int16_t y, uint16_t color) {
   b5728:	4604      	mov	r4, r0
   b572a:	4616      	mov	r6, r2
   b572c:	461f      	mov	r7, r3
    if((x >= 0) && (x < _width) && (y >= 0) && (y < _height)) {
   b572e:	db20      	blt.n	b5772 <_ZN15Adafruit_SPITFT9drawPixelEsst+0x50>
   b5730:	f9b0 300c 	ldrsh.w	r3, [r0, #12]
   b5734:	42ab      	cmp	r3, r5
   b5736:	dd1c      	ble.n	b5772 <_ZN15Adafruit_SPITFT9drawPixelEsst+0x50>
   b5738:	2a00      	cmp	r2, #0
   b573a:	db1a      	blt.n	b5772 <_ZN15Adafruit_SPITFT9drawPixelEsst+0x50>
   b573c:	f9b0 300e 	ldrsh.w	r3, [r0, #14]
   b5740:	4293      	cmp	r3, r2
   b5742:	dd16      	ble.n	b5772 <_ZN15Adafruit_SPITFT9drawPixelEsst+0x50>
        startWrite();
   b5744:	6803      	ldr	r3, [r0, #0]
   b5746:	695b      	ldr	r3, [r3, #20]
   b5748:	4798      	blx	r3
        setAddrWindow(x, y, 1, 1);
   b574a:	6822      	ldr	r2, [r4, #0]
   b574c:	2301      	movs	r3, #1
   b574e:	9300      	str	r3, [sp, #0]
   b5750:	f8d2 8054 	ldr.w	r8, [r2, #84]	; 0x54
   b5754:	b2a9      	uxth	r1, r5
   b5756:	b2b2      	uxth	r2, r6
   b5758:	4620      	mov	r0, r4
   b575a:	47c0      	blx	r8
        SPI_WRITE16(color);
   b575c:	4620      	mov	r0, r4
   b575e:	4639      	mov	r1, r7
   b5760:	f7ff ff92 	bl	b5688 <_ZN15Adafruit_SPITFT11SPI_WRITE16Et>
        endWrite();
   b5764:	6823      	ldr	r3, [r4, #0]
   b5766:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b5768:	4620      	mov	r0, r4
}
   b576a:	b002      	add	sp, #8
   b576c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
        endWrite();
   b5770:	4718      	bx	r3
}
   b5772:	b002      	add	sp, #8
   b5774:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000b5778 <_ZN15Adafruit_SPITFT11SPI_WRITE32Em>:
void Adafruit_SPITFT::SPI_WRITE32(uint32_t l) {
   b5778:	b570      	push	{r4, r5, r6, lr}
    if(connection == TFT_HARD_SPI) {
   b577a:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
void Adafruit_SPITFT::SPI_WRITE32(uint32_t l) {
   b577e:	4604      	mov	r4, r0
   b5780:	460d      	mov	r5, r1
    if(connection == TFT_HARD_SPI) {
   b5782:	b99b      	cbnz	r3, b57ac <_ZN15Adafruit_SPITFT11SPI_WRITE32Em+0x34>
        hwspi._spi->transfer(l >> 24);
   b5784:	0e09      	lsrs	r1, r1, #24
   b5786:	6a40      	ldr	r0, [r0, #36]	; 0x24
   b5788:	f001 fcee 	bl	b7168 <_ZN8SPIClass8transferEh>
        hwspi._spi->transfer(l >> 16);
   b578c:	f3c5 4107 	ubfx	r1, r5, #16, #8
   b5790:	6a60      	ldr	r0, [r4, #36]	; 0x24
   b5792:	f001 fce9 	bl	b7168 <_ZN8SPIClass8transferEh>
        hwspi._spi->transfer(l >> 8);
   b5796:	f3c5 2107 	ubfx	r1, r5, #8, #8
   b579a:	6a60      	ldr	r0, [r4, #36]	; 0x24
   b579c:	f001 fce4 	bl	b7168 <_ZN8SPIClass8transferEh>
        hwspi._spi->transfer(l);
   b57a0:	6a60      	ldr	r0, [r4, #36]	; 0x24
   b57a2:	b2e9      	uxtb	r1, r5
}
   b57a4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        hwspi._spi->transfer(l);
   b57a8:	f001 bcde 	b.w	b7168 <_ZN8SPIClass8transferEh>
    } else if(connection == TFT_SOFT_SPI) {
   b57ac:	2b01      	cmp	r3, #1
   b57ae:	d118      	bne.n	b57e2 <_ZN15Adafruit_SPITFT11SPI_WRITE32Em+0x6a>
   b57b0:	2620      	movs	r6, #32
            if(l & 0x80000000) SPI_MOSI_HIGH();
   b57b2:	2d00      	cmp	r5, #0
   b57b4:	f994 0024 	ldrsb.w	r0, [r4, #36]	; 0x24
   b57b8:	da10      	bge.n	b57dc <_ZN15Adafruit_SPITFT11SPI_WRITE32Em+0x64>
   b57ba:	f7ff fbfc 	bl	b4fb6 <_ZN15Adafruit_SPITFT13SPI_MOSI_HIGHEv.isra.0>
            SPI_SCK_HIGH();
   b57be:	f994 0026 	ldrsb.w	r0, [r4, #38]	; 0x26
   b57c2:	f7ff fbf0 	bl	b4fa6 <_ZN15Adafruit_SPITFT12SPI_SCK_HIGHEv.isra.0>
        for(uint8_t bit=0; bit<32; bit++) {
   b57c6:	3e01      	subs	r6, #1
            SPI_SCK_LOW();
   b57c8:	f994 0026 	ldrsb.w	r0, [r4, #38]	; 0x26
   b57cc:	f7ff fbe7 	bl	b4f9e <_ZN15Adafruit_SPITFT11SPI_SCK_LOWEv.isra.0>
        for(uint8_t bit=0; bit<32; bit++) {
   b57d0:	f016 06ff 	ands.w	r6, r6, #255	; 0xff
            l <<= 1;
   b57d4:	ea4f 0545 	mov.w	r5, r5, lsl #1
        for(uint8_t bit=0; bit<32; bit++) {
   b57d8:	d1eb      	bne.n	b57b2 <_ZN15Adafruit_SPITFT11SPI_WRITE32Em+0x3a>
}
   b57da:	bd70      	pop	{r4, r5, r6, pc}
            else               SPI_MOSI_LOW();
   b57dc:	f7ff fbe7 	bl	b4fae <_ZN15Adafruit_SPITFT12SPI_MOSI_LOWEv.isra.0>
   b57e0:	e7ed      	b.n	b57be <_ZN15Adafruit_SPITFT11SPI_WRITE32Em+0x46>
        TFT_WR_STROBE();
   b57e2:	f7ff fd0c 	bl	b51fe <_ZN15Adafruit_SPITFT13TFT_WR_STROBEEv>
}
   b57e6:	e7f8      	b.n	b57da <_ZN15Adafruit_SPITFT11SPI_WRITE32Em+0x62>

000b57e8 <_ZN15Adafruit_ST7789D1Ev>:

//#include "Adafruit_ST77xx.h"
#include "../lib/Adafruit_ST7735_RK/src/Adafruit_ST77xx.h"

/// Subclass of ST77XX type display for ST7789 TFT Driver
class Adafruit_ST7789 : public Adafruit_ST77xx {
   b57e8:	4770      	bx	lr

000b57ea <_ZN15Adafruit_ST778911setRotationEh>:
*/
/**************************************************************************/
void Adafruit_ST7789::setRotation(uint8_t m) {
  uint8_t madctl = 0;

  rotation = m & 3; // can't be higher than 3
   b57ea:	f001 0103 	and.w	r1, r1, #3

  switch (rotation) {
   b57ee:	2902      	cmp	r1, #2
void Adafruit_ST7789::setRotation(uint8_t m) {
   b57f0:	b570      	push	{r4, r5, r6, lr}
   b57f2:	4604      	mov	r4, r0
  rotation = m & 3; // can't be higher than 3
   b57f4:	7681      	strb	r1, [r0, #26]
  switch (rotation) {
   b57f6:	d024      	beq.n	b5842 <_ZN15Adafruit_ST778911setRotationEh+0x58>
   b57f8:	2903      	cmp	r1, #3
   b57fa:	d025      	beq.n	b5848 <_ZN15Adafruit_ST778911setRotationEh+0x5e>
   b57fc:	2901      	cmp	r1, #1
   b57fe:	f890 304c 	ldrb.w	r3, [r0, #76]	; 0x4c
   b5802:	f890 204d 	ldrb.w	r2, [r0, #77]	; 0x4d
   case 0:
     madctl  = ST77XX_MADCTL_MX | ST77XX_MADCTL_MY | ST77XX_MADCTL_RGB;
     _xstart = _colstart;
   b5806:	bf1d      	ittte	ne
   b5808:	f8a0 3040 	strhne.w	r3, [r0, #64]	; 0x40
     _ystart = _rowstart;
   b580c:	f8a0 2042 	strhne.w	r2, [r0, #66]	; 0x42
     madctl  = ST77XX_MADCTL_MX | ST77XX_MADCTL_MY | ST77XX_MADCTL_RGB;
   b5810:	25c0      	movne	r5, #192	; 0xc0
     break;
   case 1:
     madctl  = ST77XX_MADCTL_MY | ST77XX_MADCTL_MV | ST77XX_MADCTL_RGB;
     _xstart = _rowstart;
   b5812:	f8a0 2040 	strheq.w	r2, [r0, #64]	; 0x40
     _ystart = _colstart;
   b5816:	bf04      	itt	eq
   b5818:	f8a0 3042 	strheq.w	r3, [r0, #66]	; 0x42
     madctl  = ST77XX_MADCTL_MY | ST77XX_MADCTL_MV | ST77XX_MADCTL_RGB;
   b581c:	25a0      	moveq	r5, #160	; 0xa0
     madctl  = ST77XX_MADCTL_MX | ST77XX_MADCTL_MV | ST77XX_MADCTL_RGB;
     _xstart = 0;
     _ystart = 0;
     break;
  }
  startWrite();
   b581e:	6823      	ldr	r3, [r4, #0]
   b5820:	4620      	mov	r0, r4
   b5822:	695b      	ldr	r3, [r3, #20]
   b5824:	4798      	blx	r3
  writeCommand(ST77XX_MADCTL);
   b5826:	4620      	mov	r0, r4
   b5828:	2136      	movs	r1, #54	; 0x36
   b582a:	f7ff ff06 	bl	b563a <_ZN15Adafruit_SPITFT12writeCommandEh>
  spiWrite(madctl);
   b582e:	4620      	mov	r0, r4
   b5830:	4629      	mov	r1, r5
   b5832:	f7ff fed9 	bl	b55e8 <_ZN15Adafruit_SPITFT8spiWriteEh>
  endWrite();
   b5836:	6823      	ldr	r3, [r4, #0]
   b5838:	4620      	mov	r0, r4
   b583a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
}
   b583c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  endWrite();
   b5840:	4718      	bx	r3
     _xstart = 0;
   b5842:	2500      	movs	r5, #0
   b5844:	6405      	str	r5, [r0, #64]	; 0x40
     break;
   b5846:	e7ea      	b.n	b581e <_ZN15Adafruit_ST778911setRotationEh+0x34>
     _xstart = 0;
   b5848:	2300      	movs	r3, #0
   b584a:	6403      	str	r3, [r0, #64]	; 0x40
     madctl  = ST77XX_MADCTL_MX | ST77XX_MADCTL_MV | ST77XX_MADCTL_RGB;
   b584c:	2560      	movs	r5, #96	; 0x60
     break;
   b584e:	e7e6      	b.n	b581e <_ZN15Adafruit_ST778911setRotationEh+0x34>

000b5850 <_ZN15Adafruit_ST7789D0Ev>:
   b5850:	b510      	push	{r4, lr}
   b5852:	2150      	movs	r1, #80	; 0x50
   b5854:	4604      	mov	r4, r0
   b5856:	f7fe fc22 	bl	b409e <_ZdlPvj>
   b585a:	4620      	mov	r0, r4
   b585c:	bd10      	pop	{r4, pc}
	...

000b5860 <_ZN15Adafruit_ST7789C1Eaaa>:
Adafruit_ST7789::Adafruit_ST7789(int8_t cs, int8_t dc, int8_t rst) :
   b5860:	b510      	push	{r4, lr}
   b5862:	4604      	mov	r4, r0
  Adafruit_ST77xx(cs, dc, rst) {
   b5864:	f000 f89a 	bl	b599c <_ZN15Adafruit_ST77xxC1Eaaa>
   b5868:	4b01      	ldr	r3, [pc, #4]	; (b5870 <_ZN15Adafruit_ST7789C1Eaaa+0x10>)
   b586a:	6023      	str	r3, [r4, #0]
}
   b586c:	4620      	mov	r0, r4
   b586e:	bd10      	pop	{r4, pc}
   b5870:	000b8e58 	.word	0x000b8e58

000b5874 <_ZN15Adafruit_ST77894initEtt>:
void Adafruit_ST7789::init(uint16_t width, uint16_t height) {
   b5874:	b570      	push	{r4, r5, r6, lr}
  commonInit(NULL);
   b5876:	2100      	movs	r1, #0
void Adafruit_ST7789::init(uint16_t width, uint16_t height) {
   b5878:	4604      	mov	r4, r0
  _colstart = ST7789_240x240_XSTART;
   b587a:	2500      	movs	r5, #0
  commonInit(NULL);
   b587c:	f000 f8e5 	bl	b5a4a <_ZN15Adafruit_ST77xx10commonInitEPKh>
  _width    = 240;
   b5880:	4b07      	ldr	r3, [pc, #28]	; (b58a0 <_ZN15Adafruit_ST77894initEtt+0x2c>)
   b5882:	60e3      	str	r3, [r4, #12]
  displayInit(cmd_240x240);
   b5884:	4620      	mov	r0, r4
   b5886:	4907      	ldr	r1, [pc, #28]	; (b58a4 <_ZN15Adafruit_ST77894initEtt+0x30>)
  _colstart = ST7789_240x240_XSTART;
   b5888:	f8a4 504c 	strh.w	r5, [r4, #76]	; 0x4c
  displayInit(cmd_240x240);
   b588c:	f000 f89a 	bl	b59c4 <_ZN15Adafruit_ST77xx11displayInitEPKh>
  setRotation(0);
   b5890:	6823      	ldr	r3, [r4, #0]
   b5892:	4629      	mov	r1, r5
   b5894:	4620      	mov	r0, r4
   b5896:	6b1b      	ldr	r3, [r3, #48]	; 0x30
}
   b5898:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  setRotation(0);
   b589c:	4718      	bx	r3
   b589e:	bf00      	nop
   b58a0:	014000f0 	.word	0x014000f0
   b58a4:	000b8e2c 	.word	0x000b8e2c

000b58a8 <_ZN15Adafruit_ST77xxD1Ev>:
#define ST77XX_MAGENTA    0xF81F
#define ST77XX_YELLOW     0xFFE0
#define	ST77XX_ORANGE     0xFC00

/// Subclass of SPITFT for ST77xx displays (lots in common!)
class Adafruit_ST77xx : public Adafruit_SPITFT {
   b58a8:	4770      	bx	lr

000b58aa <_ZN15Adafruit_ST77xx11setRotationEh>:
/*!
    @brief  Set origin of (0,0) and orientation of TFT display
    @param  m  The index for rotation, from 0-3 inclusive
*/
/**************************************************************************/
void Adafruit_ST77xx::setRotation(uint8_t m) {
   b58aa:	b570      	push	{r4, r5, r6, lr}
  uint8_t madctl = 0;

  rotation = m % 4; // can't be higher than 3
   b58ac:	f001 0103 	and.w	r1, r1, #3

  switch(rotation) {
   b58b0:	2902      	cmp	r1, #2
   case 0:
     madctl  = ST77XX_MADCTL_MX | ST77XX_MADCTL_MY | ST77XX_MADCTL_RGB;
     _xstart = _colstart;
   b58b2:	f890 204c 	ldrb.w	r2, [r0, #76]	; 0x4c
     _ystart = _rowstart;
   b58b6:	f890 304d 	ldrb.w	r3, [r0, #77]	; 0x4d
  rotation = m % 4; // can't be higher than 3
   b58ba:	7681      	strb	r1, [r0, #26]
void Adafruit_ST77xx::setRotation(uint8_t m) {
   b58bc:	4604      	mov	r4, r0
  switch(rotation) {
   b58be:	d020      	beq.n	b5902 <_ZN15Adafruit_ST77xx11setRotationEh+0x58>
   b58c0:	2903      	cmp	r1, #3
   b58c2:	d024      	beq.n	b590e <_ZN15Adafruit_ST77xx11setRotationEh+0x64>
   b58c4:	2901      	cmp	r1, #1
     _xstart = _colstart;
   b58c6:	bf1d      	ittte	ne
   b58c8:	f8a0 2040 	strhne.w	r2, [r0, #64]	; 0x40
     _ystart = _rowstart;
   b58cc:	f8a0 3042 	strhne.w	r3, [r0, #66]	; 0x42
     madctl  = ST77XX_MADCTL_MX | ST77XX_MADCTL_MY | ST77XX_MADCTL_RGB;
   b58d0:	25c0      	movne	r5, #192	; 0xc0
     break;
   case 1:
     madctl  = ST77XX_MADCTL_MY | ST77XX_MADCTL_MV | ST77XX_MADCTL_RGB;
     _ystart = _colstart;
   b58d2:	f8a0 2042 	strheq.w	r2, [r0, #66]	; 0x42
     _xstart = _rowstart;
   b58d6:	bf04      	itt	eq
   b58d8:	f8a0 3040 	strheq.w	r3, [r0, #64]	; 0x40
     madctl  = ST77XX_MADCTL_MY | ST77XX_MADCTL_MV | ST77XX_MADCTL_RGB;
   b58dc:	25a0      	moveq	r5, #160	; 0xa0
     madctl  = ST77XX_MADCTL_MX | ST77XX_MADCTL_MV | ST77XX_MADCTL_RGB;
     _ystart = _colstart;
     _xstart = _rowstart;
     break;
  }
  startWrite();
   b58de:	6823      	ldr	r3, [r4, #0]
   b58e0:	4620      	mov	r0, r4
   b58e2:	695b      	ldr	r3, [r3, #20]
   b58e4:	4798      	blx	r3
  writeCommand(ST77XX_MADCTL);
   b58e6:	4620      	mov	r0, r4
   b58e8:	2136      	movs	r1, #54	; 0x36
   b58ea:	f7ff fea6 	bl	b563a <_ZN15Adafruit_SPITFT12writeCommandEh>
  spiWrite(madctl);
   b58ee:	4620      	mov	r0, r4
   b58f0:	4629      	mov	r1, r5
   b58f2:	f7ff fe79 	bl	b55e8 <_ZN15Adafruit_SPITFT8spiWriteEh>
  endWrite();
   b58f6:	6823      	ldr	r3, [r4, #0]
   b58f8:	4620      	mov	r0, r4
   b58fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
}
   b58fc:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  endWrite();
   b5900:	4718      	bx	r3
     _xstart = _colstart;
   b5902:	f8a0 2040 	strh.w	r2, [r0, #64]	; 0x40
     _ystart = _rowstart;
   b5906:	f8a0 3042 	strh.w	r3, [r0, #66]	; 0x42
     madctl  = ST77XX_MADCTL_RGB;
   b590a:	2500      	movs	r5, #0
     break;
   b590c:	e7e7      	b.n	b58de <_ZN15Adafruit_ST77xx11setRotationEh+0x34>
     _ystart = _colstart;
   b590e:	f8a0 2042 	strh.w	r2, [r0, #66]	; 0x42
     _xstart = _rowstart;
   b5912:	f8a0 3040 	strh.w	r3, [r0, #64]	; 0x40
     madctl  = ST77XX_MADCTL_MX | ST77XX_MADCTL_MV | ST77XX_MADCTL_RGB;
   b5916:	2560      	movs	r5, #96	; 0x60
     break;
   b5918:	e7e1      	b.n	b58de <_ZN15Adafruit_ST77xx11setRotationEh+0x34>
	...

000b591c <_ZN15Adafruit_ST77xx5beginEm>:
    freq = SPI_DEFAULT_FREQ;
   b591c:	4b06      	ldr	r3, [pc, #24]	; (b5938 <_ZN15Adafruit_ST77xx5beginEm+0x1c>)
   b591e:	2900      	cmp	r1, #0
   b5920:	bf18      	it	ne
   b5922:	460b      	movne	r3, r1
  invertOnCommand  = ST77XX_INVON;
   b5924:	f242 0121 	movw	r1, #8225	; 0x2021
   b5928:	f8a0 1044 	strh.w	r1, [r0, #68]	; 0x44
  _freq = freq;
   b592c:	6483      	str	r3, [r0, #72]	; 0x48
  initSPI(freq);
   b592e:	2200      	movs	r2, #0
   b5930:	4619      	mov	r1, r3
   b5932:	f7ff bba1 	b.w	b5078 <_ZN15Adafruit_SPITFT7initSPIEmh>
   b5936:	bf00      	nop
   b5938:	00f42400 	.word	0x00f42400

000b593c <_ZN15Adafruit_ST77xx13setAddrWindowEtttt>:
  uint16_t h) {
   b593c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  x += _xstart;
   b593e:	f8b0 7040 	ldrh.w	r7, [r0, #64]	; 0x40
  y += _ystart;
   b5942:	f8b0 5042 	ldrh.w	r5, [r0, #66]	; 0x42
  uint16_t h) {
   b5946:	f8bd 6018 	ldrh.w	r6, [sp, #24]
  x += _xstart;
   b594a:	4439      	add	r1, r7
  uint32_t xa = ((uint32_t)x << 16) | (x+w-1);
   b594c:	fa13 f781 	uxtah	r7, r3, r1
  y += _ystart;
   b5950:	442a      	add	r2, r5
  uint32_t ya = ((uint32_t)y << 16) | (y+h-1); 
   b5952:	fa16 f582 	uxtah	r5, r6, r2
  uint32_t xa = ((uint32_t)x << 16) | (x+w-1);
   b5956:	3f01      	subs	r7, #1
  uint16_t h) {
   b5958:	4604      	mov	r4, r0
  uint32_t xa = ((uint32_t)x << 16) | (x+w-1);
   b595a:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
  uint32_t ya = ((uint32_t)y << 16) | (y+h-1); 
   b595e:	3d01      	subs	r5, #1
  writeCommand(ST77XX_CASET); // Column addr set
   b5960:	212a      	movs	r1, #42	; 0x2a
  uint32_t ya = ((uint32_t)y << 16) | (y+h-1); 
   b5962:	ea45 4502 	orr.w	r5, r5, r2, lsl #16
  writeCommand(ST77XX_CASET); // Column addr set
   b5966:	f7ff fe68 	bl	b563a <_ZN15Adafruit_SPITFT12writeCommandEh>
  SPI_WRITE32(xa);
   b596a:	4639      	mov	r1, r7
   b596c:	4620      	mov	r0, r4
   b596e:	f7ff ff03 	bl	b5778 <_ZN15Adafruit_SPITFT11SPI_WRITE32Em>
  writeCommand(ST77XX_RASET); // Row addr set
   b5972:	4620      	mov	r0, r4
   b5974:	212b      	movs	r1, #43	; 0x2b
   b5976:	f7ff fe60 	bl	b563a <_ZN15Adafruit_SPITFT12writeCommandEh>
  SPI_WRITE32(ya);
   b597a:	4629      	mov	r1, r5
   b597c:	4620      	mov	r0, r4
   b597e:	f7ff fefb 	bl	b5778 <_ZN15Adafruit_SPITFT11SPI_WRITE32Em>
  writeCommand(ST77XX_RAMWR); // write to RAM
   b5982:	4620      	mov	r0, r4
   b5984:	212c      	movs	r1, #44	; 0x2c
}
   b5986:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
  writeCommand(ST77XX_RAMWR); // write to RAM
   b598a:	f7ff be56 	b.w	b563a <_ZN15Adafruit_SPITFT12writeCommandEh>

000b598e <_ZN15Adafruit_ST77xxD0Ev>:
   b598e:	b510      	push	{r4, lr}
   b5990:	2150      	movs	r1, #80	; 0x50
   b5992:	4604      	mov	r4, r0
   b5994:	f7fe fb83 	bl	b409e <_ZdlPvj>
   b5998:	4620      	mov	r0, r4
   b599a:	bd10      	pop	{r4, pc}

000b599c <_ZN15Adafruit_ST77xxC1Eaaa>:
Adafruit_ST77xx::Adafruit_ST77xx(int8_t cs, int8_t dc, int8_t rst) :
   b599c:	b513      	push	{r0, r1, r4, lr}
  Adafruit_SPITFT(ST7735_TFTWIDTH_128, ST7735_TFTHEIGHT_160, cs, dc, rst) {
   b599e:	e9cd 2300 	strd	r2, r3, [sp]
   b59a2:	460b      	mov	r3, r1
   b59a4:	22a0      	movs	r2, #160	; 0xa0
   b59a6:	2180      	movs	r1, #128	; 0x80
Adafruit_ST77xx::Adafruit_ST77xx(int8_t cs, int8_t dc, int8_t rst) :
   b59a8:	4604      	mov	r4, r0
  Adafruit_SPITFT(ST7735_TFTWIDTH_128, ST7735_TFTHEIGHT_160, cs, dc, rst) {
   b59aa:	f7ff fb33 	bl	b5014 <_ZN15Adafruit_SPITFTC1Ettaaa>
   b59ae:	4b04      	ldr	r3, [pc, #16]	; (b59c0 <_ZN15Adafruit_ST77xxC1Eaaa+0x24>)
   b59b0:	6023      	str	r3, [r4, #0]
}
   b59b2:	4620      	mov	r0, r4
  Adafruit_SPITFT(ST7735_TFTWIDTH_128, ST7735_TFTHEIGHT_160, cs, dc, rst) {
   b59b4:	2300      	movs	r3, #0
   b59b6:	f8a4 304c 	strh.w	r3, [r4, #76]	; 0x4c
}
   b59ba:	b002      	add	sp, #8
   b59bc:	bd10      	pop	{r4, pc}
   b59be:	bf00      	nop
   b59c0:	000b8eb8 	.word	0x000b8eb8

000b59c4 <_ZN15Adafruit_ST77xx11displayInitEPKh>:
void Adafruit_ST77xx::displayInit(const uint8_t *addr) {
   b59c4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  startWrite();
   b59c8:	6803      	ldr	r3, [r0, #0]
void Adafruit_ST77xx::displayInit(const uint8_t *addr) {
   b59ca:	460c      	mov	r4, r1
  startWrite();
   b59cc:	695b      	ldr	r3, [r3, #20]
void Adafruit_ST77xx::displayInit(const uint8_t *addr) {
   b59ce:	4605      	mov	r5, r0
  startWrite();
   b59d0:	4798      	blx	r3
  numCommands = pgm_read_byte(addr++);   // Number of commands to follow
   b59d2:	f814 7b01 	ldrb.w	r7, [r4], #1
  while(numCommands--) {                 // For each command...
   b59d6:	b397      	cbz	r7, b5a3e <_ZN15Adafruit_ST77xx11displayInitEPKh+0x7a>
    writeCommand(pgm_read_byte(addr++)); // Read, issue command
   b59d8:	4626      	mov	r6, r4
   b59da:	4628      	mov	r0, r5
   b59dc:	f816 1b02 	ldrb.w	r1, [r6], #2
   b59e0:	f7ff fe2b 	bl	b563a <_ZN15Adafruit_SPITFT12writeCommandEh>
    numArgs  = pgm_read_byte(addr++);    // Number of args to follow
   b59e4:	f894 9001 	ldrb.w	r9, [r4, #1]
    numArgs &= ~ST_CMD_DELAY;            // Mask out delay bit
   b59e8:	f009 087f 	and.w	r8, r9, #127	; 0x7f
   b59ec:	4644      	mov	r4, r8
    numArgs  = pgm_read_byte(addr++);    // Number of args to follow
   b59ee:	46b2      	mov	sl, r6
    while(numArgs--) {                   // For each argument...
   b59f0:	3c01      	subs	r4, #1
   b59f2:	b2e4      	uxtb	r4, r4
   b59f4:	2cff      	cmp	r4, #255	; 0xff
   b59f6:	d005      	beq.n	b5a04 <_ZN15Adafruit_ST77xx11displayInitEPKh+0x40>
      spiWrite(pgm_read_byte(addr++));   // Read, issue argument
   b59f8:	f81a 1b01 	ldrb.w	r1, [sl], #1
   b59fc:	4628      	mov	r0, r5
   b59fe:	f7ff fdf3 	bl	b55e8 <_ZN15Adafruit_SPITFT8spiWriteEh>
    while(numArgs--) {                   // For each argument...
   b5a02:	e7f5      	b.n	b59f0 <_ZN15Adafruit_ST77xx11displayInitEPKh+0x2c>
   b5a04:	f995 003e 	ldrsb.w	r0, [r5, #62]	; 0x3e
   b5a08:	2101      	movs	r1, #1
   b5a0a:	b280      	uxth	r0, r0
   b5a0c:	f001 ff69 	bl	b78e2 <digitalWrite>
        digitalWrite(_cs, LOW);
   b5a10:	f995 003e 	ldrsb.w	r0, [r5, #62]	; 0x3e
   b5a14:	2100      	movs	r1, #0
   b5a16:	b280      	uxth	r0, r0
   b5a18:	f001 ff63 	bl	b78e2 <digitalWrite>
    if(ms) {
   b5a1c:	f019 0f80 	tst.w	r9, #128	; 0x80
   b5a20:	eb06 0408 	add.w	r4, r6, r8
   b5a24:	d008      	beq.n	b5a38 <_ZN15Adafruit_ST77xx11displayInitEPKh+0x74>
      ms = pgm_read_byte(addr++); // Read post-command delay time (ms)
   b5a26:	f816 0008 	ldrb.w	r0, [r6, r8]
      if(ms == 255) ms = 500;     // If 255, delay for 500 ms
   b5a2a:	28ff      	cmp	r0, #255	; 0xff
      delay(ms);
   b5a2c:	bf08      	it	eq
   b5a2e:	f44f 70fa 	moveq.w	r0, #500	; 0x1f4
      ms = pgm_read_byte(addr++); // Read post-command delay time (ms)
   b5a32:	3401      	adds	r4, #1
      delay(ms);
   b5a34:	f000 fdd6 	bl	b65e4 <delay>
   b5a38:	3f01      	subs	r7, #1
   b5a3a:	b2ff      	uxtb	r7, r7
   b5a3c:	e7cb      	b.n	b59d6 <_ZN15Adafruit_ST77xx11displayInitEPKh+0x12>
  endWrite();
   b5a3e:	682b      	ldr	r3, [r5, #0]
   b5a40:	4628      	mov	r0, r5
   b5a42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
}
   b5a44:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  endWrite();
   b5a48:	4718      	bx	r3

000b5a4a <_ZN15Adafruit_ST77xx10commonInitEPKh>:
void Adafruit_ST77xx::commonInit(const uint8_t *cmdList) {
   b5a4a:	b538      	push	{r3, r4, r5, lr}
  begin();
   b5a4c:	6803      	ldr	r3, [r0, #0]
void Adafruit_ST77xx::commonInit(const uint8_t *cmdList) {
   b5a4e:	460d      	mov	r5, r1
  begin();
   b5a50:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   b5a52:	2100      	movs	r1, #0
void Adafruit_ST77xx::commonInit(const uint8_t *cmdList) {
   b5a54:	4604      	mov	r4, r0
  begin();
   b5a56:	4798      	blx	r3
  if(cmdList) {
   b5a58:	b12d      	cbz	r5, b5a66 <_ZN15Adafruit_ST77xx10commonInitEPKh+0x1c>
    displayInit(cmdList);
   b5a5a:	4629      	mov	r1, r5
   b5a5c:	4620      	mov	r0, r4
}
   b5a5e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    displayInit(cmdList);
   b5a62:	f7ff bfaf 	b.w	b59c4 <_ZN15Adafruit_ST77xx11displayInitEPKh>
}
   b5a66:	bd38      	pop	{r3, r4, r5, pc}

000b5a68 <_ZN7VL53L1XD1Ev>:
       }
    }
    
   /** Destructor
    */
    virtual ~VL53L1X(){}
   b5a68:	4770      	bx	lr

000b5a6a <_ZN7VL53L1X10VL53L1_OffEv>:
	/**
	 * @brief       PowerOff the sensor
	 * @return      void
	 */
    /* turns off the sensor */
    virtual void VL53L1_Off(void)
   b5a6a:	b508      	push	{r3, lr}
    {
       if(gpio0 >= 0)
   b5a6c:	6880      	ldr	r0, [r0, #8]
   b5a6e:	2800      	cmp	r0, #0
   b5a70:	db03      	blt.n	b5a7a <_ZN7VL53L1X10VL53L1_OffEv+0x10>
       {
         digitalWrite(gpio0, LOW);
   b5a72:	2100      	movs	r1, #0
   b5a74:	b280      	uxth	r0, r0
   b5a76:	f001 ff34 	bl	b78e2 <digitalWrite>
       }
       delay(10);
    }
   b5a7a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
       delay(10);
   b5a7e:	200a      	movs	r0, #10
   b5a80:	f000 bdb0 	b.w	b65e4 <delay>

000b5a84 <_ZN7VL53L1X9VL53L1_OnEv>:
    virtual void VL53L1_On(void)
   b5a84:	b508      	push	{r3, lr}
       if(gpio0 >= 0)
   b5a86:	6880      	ldr	r0, [r0, #8]
   b5a88:	2800      	cmp	r0, #0
   b5a8a:	db03      	blt.n	b5a94 <_ZN7VL53L1X9VL53L1_OnEv+0x10>
         digitalWrite(gpio0, HIGH);
   b5a8c:	2101      	movs	r1, #1
   b5a8e:	b280      	uxth	r0, r0
   b5a90:	f001 ff27 	bl	b78e2 <digitalWrite>
    }
   b5a94:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
       delay(10);
   b5a98:	200a      	movs	r0, #10
   b5a9a:	f000 bda3 	b.w	b65e4 <delay>

000b5a9e <_ZN7VL53L1XD0Ev>:
    virtual ~VL53L1X(){}
   b5a9e:	b510      	push	{r4, lr}
   b5aa0:	211c      	movs	r1, #28
   b5aa2:	4604      	mov	r4, r0
   b5aa4:	f7fe fafb 	bl	b409e <_ZdlPvj>
   b5aa8:	4620      	mov	r0, r4
   b5aaa:	bd10      	pop	{r4, pc}

000b5aac <_ZN7VL53L1X11GetDistanceEPm>:
/**
 * @brief Get ranging result and only that
 * @param pRange_mm  Pointer to range distance
 * @return           0 on success
 */
	int GetDistance(uint32_t *piData)
   b5aac:	b513      	push	{r0, r1, r4, lr}
   b5aae:	460c      	mov	r4, r1
    {
	int status;
	uint16_t distance;
	status = VL53L1X_GetDistance(&distance);
   b5ab0:	f10d 0106 	add.w	r1, sp, #6
   b5ab4:	f000 fb3d 	bl	b6132 <_ZN7VL53L1X19VL53L1X_GetDistanceEPt>
	*piData = (uint32_t) distance;
   b5ab8:	f8bd 3006 	ldrh.w	r3, [sp, #6]
   b5abc:	6023      	str	r3, [r4, #0]
	return status;
    }
   b5abe:	b002      	add	sp, #8
   b5ac0:	bd10      	pop	{r4, pc}

000b5ac2 <_ZN7VL53L1X6ReadIDEv>:
    virtual int ReadID(){
   b5ac2:	b507      	push	{r0, r1, r2, lr}
		VL53L1X_GetSensorId(&sensorId);
   b5ac4:	f10d 0106 	add.w	r1, sp, #6
   b5ac8:	f000 fb22 	bl	b6110 <_ZN7VL53L1X19VL53L1X_GetSensorIdEPt>
		if (sensorId == 0xEEAC)
   b5acc:	f8bd 0006 	ldrh.w	r0, [sp, #6]
	}
   b5ad0:	f64e 63ac 	movw	r3, #61100	; 0xeeac
   b5ad4:	1ac0      	subs	r0, r0, r3
   b5ad6:	bf18      	it	ne
   b5ad8:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
   b5adc:	b003      	add	sp, #12
   b5ade:	f85d fb04 	ldr.w	pc, [sp], #4

000b5ae2 <_ZN7VL53L1X4InitEv>:
    virtual int Init()
   b5ae2:	b508      	push	{r3, lr}
       return VL53L1X_SensorInit();
   b5ae4:	f000 f946 	bl	b5d74 <_ZN7VL53L1X18VL53L1X_SensorInitEv>
    }
   b5ae8:	bd08      	pop	{r3, pc}
	...

000b5aec <_ZN10SFEVL53L1XC1ER7TwoWireii>:
#include <stdlib.h>
#include "Arduino.h"
#include "SparkFun_VL53L1X.h"
#include "vl53l1x_class.h"

SFEVL53L1X::SFEVL53L1X(TwoWire &i2cPort, int shutdownPin, int interruptPin)
   b5aec:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   b5af0:	f04f 0952 	mov.w	r9, #82	; 0x52
{
	_i2cPort = &i2cPort;
	_shutdownPin = shutdownPin;
   b5af4:	e9c0 1200 	strd	r1, r2, [r0]
SFEVL53L1X::SFEVL53L1X(TwoWire &i2cPort, int shutdownPin, int interruptPin)
   b5af8:	f8c0 900c 	str.w	r9, [r0, #12]
	_interruptPin = interruptPin;
   b5afc:	6083      	str	r3, [r0, #8]
SFEVL53L1X::SFEVL53L1X(TwoWire &i2cPort, int shutdownPin, int interruptPin)
   b5afe:	4605      	mov	r5, r0
	_device = new VL53L1X(&i2cPort, shutdownPin, interruptPin);
   b5b00:	201c      	movs	r0, #28
SFEVL53L1X::SFEVL53L1X(TwoWire &i2cPort, int shutdownPin, int interruptPin)
   b5b02:	460f      	mov	r7, r1
   b5b04:	4616      	mov	r6, r2
   b5b06:	4698      	mov	r8, r3
	_device = new VL53L1X(&i2cPort, shutdownPin, interruptPin);
   b5b08:	f7fe fac5 	bl	b4096 <_Znwj>
   b5b0c:	4604      	mov	r4, r0
   b5b0e:	b180      	cbz	r0, b5b32 <_ZN10SFEVL53L1XC1ER7TwoWireii+0x46>
    VL53L1X(TwoWire *i2c, int pin, int pin_gpio1) : RangeSensor(), dev_i2c(i2c), gpio0(pin), gpio1Int(pin_gpio1)
   b5b10:	4b0a      	ldr	r3, [pc, #40]	; (b5b3c <_ZN10SFEVL53L1XC1ER7TwoWireii+0x50>)
       MyDevice.I2cDevAddr=VL53L1X_DEFAULT_DEVICE_ADDRESS;
   b5b12:	f880 9010 	strb.w	r9, [r0, #16]
    VL53L1X(TwoWire *i2c, int pin, int pin_gpio1) : RangeSensor(), dev_i2c(i2c), gpio0(pin), gpio1Int(pin_gpio1)
   b5b16:	e9c0 3700 	strd	r3, r7, [r0]
       if(gpio0 >= 0)
   b5b1a:	2e00      	cmp	r6, #0
       Device = &MyDevice;
   b5b1c:	f100 0310 	add.w	r3, r0, #16
    VL53L1X(TwoWire *i2c, int pin, int pin_gpio1) : RangeSensor(), dev_i2c(i2c), gpio0(pin), gpio1Int(pin_gpio1)
   b5b20:	e9c0 6802 	strd	r6, r8, [r0, #8]
       MyDevice.I2cHandle = i2c;
   b5b24:	6147      	str	r7, [r0, #20]
       Device = &MyDevice;
   b5b26:	6183      	str	r3, [r0, #24]
       if(gpio0 >= 0)
   b5b28:	db03      	blt.n	b5b32 <_ZN10SFEVL53L1XC1ER7TwoWireii+0x46>
         pinMode(gpio0, OUTPUT);
   b5b2a:	2101      	movs	r1, #1
   b5b2c:	b2b0      	uxth	r0, r6
   b5b2e:	f001 fec7 	bl	b78c0 <pinMode>
   b5b32:	612c      	str	r4, [r5, #16]
}
   b5b34:	4628      	mov	r0, r5
   b5b36:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   b5b3a:	bf00      	nop
   b5b3c:	000b8f18 	.word	0x000b8f18

000b5b40 <_ZN10SFEVL53L1X4initEv>:

bool SFEVL53L1X::init()
{
   b5b40:	b508      	push	{r3, lr}
	return _device->VL53L1X_SensorInit();
   b5b42:	6900      	ldr	r0, [r0, #16]
   b5b44:	f000 f916 	bl	b5d74 <_ZN7VL53L1X18VL53L1X_SensorInitEv>
}
   b5b48:	3800      	subs	r0, #0
   b5b4a:	bf18      	it	ne
   b5b4c:	2001      	movne	r0, #1
   b5b4e:	bd08      	pop	{r3, pc}

000b5b50 <_ZN10SFEVL53L1X12startRangingEv>:
	return tmp;
}

void SFEVL53L1X::startRanging()
{
	_device->VL53L1X_StartRanging();
   b5b50:	6900      	ldr	r0, [r0, #16]
   b5b52:	f000 b852 	b.w	b5bfa <_ZN7VL53L1X20VL53L1X_StartRangingEv>

000b5b56 <_ZN10SFEVL53L1X11stopRangingEv>:
}

void SFEVL53L1X::stopRanging()
{
	_device->VL53L1X_StopRanging();
   b5b56:	6900      	ldr	r0, [r0, #16]
   b5b58:	f000 b854 	b.w	b5c04 <_ZN7VL53L1X19VL53L1X_StopRangingEv>

000b5b5c <_ZN10SFEVL53L1X19setTimingBudgetInMsEt>:
	return (bool)dataReady;
}

void SFEVL53L1X::setTimingBudgetInMs(uint16_t timingBudget)
{
	_device->VL53L1X_SetTimingBudgetInMs(timingBudget);
   b5b5c:	6900      	ldr	r0, [r0, #16]
   b5b5e:	f000 b95b 	b.w	b5e18 <_ZN7VL53L1X27VL53L1X_SetTimingBudgetInMsEt>

000b5b62 <_ZN10SFEVL53L1X19setDistanceModeLongEv>:
	return timingBudget;
}

void SFEVL53L1X::setDistanceModeLong()
{
	_device->VL53L1X_SetDistanceMode(2);
   b5b62:	6900      	ldr	r0, [r0, #16]
   b5b64:	2102      	movs	r1, #2
   b5b66:	f000 ba50 	b.w	b600a <_ZN7VL53L1X23VL53L1X_SetDistanceModeEt>

000b5b6a <_ZN10SFEVL53L1X25setIntermeasurementPeriodEt>:
	return distanceMode;
}

void SFEVL53L1X::setIntermeasurementPeriod(uint16_t intermeasurement)
{
	_device->VL53L1X_SetInterMeasurementInMs(intermeasurement);
   b5b6a:	6900      	ldr	r0, [r0, #16]
   b5b6c:	f000 baa8 	b.w	b60c0 <_ZN7VL53L1X31VL53L1X_SetInterMeasurementInMsEt>

000b5b70 <_ZN10SFEVL53L1X11getDistanceEv>:
	_device->VL53L1X_GetSensorId(&id);
	return id;
}

uint16_t SFEVL53L1X::getDistance()
{
   b5b70:	b507      	push	{r0, r1, r2, lr}
	uint16_t distance;
	_device->VL53L1X_GetDistance(&distance);
   b5b72:	f10d 0106 	add.w	r1, sp, #6
   b5b76:	6900      	ldr	r0, [r0, #16]
   b5b78:	f000 fadb 	bl	b6132 <_ZN7VL53L1X19VL53L1X_GetDistanceEPt>
	return (int)distance;
}
   b5b7c:	f8bd 0006 	ldrh.w	r0, [sp, #6]
   b5b80:	b003      	add	sp, #12
   b5b82:	f85d fb04 	ldr.w	pc, [sp], #4

000b5b86 <_ZN10SFEVL53L1X6setROIEhhh>:
	return temp;
}

void SFEVL53L1X::setROI(uint8_t x, uint8_t y, uint8_t opticalCenter)
{
	_device->VL53L1X_SetROI(x, y, opticalCenter);
   b5b86:	6900      	ldr	r0, [r0, #16]
   b5b88:	f000 b841 	b.w	b5c0e <_ZN7VL53L1X14VL53L1X_SetROIEhhh>

000b5b8c <_ZN7VL53L1X15VL53L1_I2CWriteEhtPht>:
	}
	return status;
}

VL53L1X_ERROR VL53L1X::VL53L1_I2CWrite(uint8_t DeviceAddr, uint16_t RegisterAddr, uint8_t *pBuffer, uint16_t NumByteToWrite)
{
   b5b8c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   b5b8e:	4604      	mov	r4, r0
   b5b90:	4615      	mov	r5, r2
#ifdef DEBUG_MODE
	Serial.print("Beginning transmission to ");
	Serial.println(((DeviceAddr) >> 1) & 0x7F);
#endif
	dev_i2c->beginTransmission(((uint8_t)(((DeviceAddr) >> 1) & 0x7F)));
   b5b92:	6840      	ldr	r0, [r0, #4]
{
   b5b94:	f8bd 7020 	ldrh.w	r7, [sp, #32]
	dev_i2c->beginTransmission(((uint8_t)(((DeviceAddr) >> 1) & 0x7F)));
   b5b98:	0849      	lsrs	r1, r1, #1
{
   b5b9a:	461e      	mov	r6, r3
	dev_i2c->beginTransmission(((uint8_t)(((DeviceAddr) >> 1) & 0x7F)));
   b5b9c:	f001 f8ae 	bl	b6cfc <_ZN7TwoWire17beginTransmissionEh>
#ifdef DEBUG_MODE
	Serial.print("Writing port number ");
	Serial.println(RegisterAddr);
#endif
	uint8_t buffer[2];
	buffer[0] = RegisterAddr >> 8;
   b5ba0:	0a2b      	lsrs	r3, r5, #8
	buffer[1] = RegisterAddr & 0xFF;
	dev_i2c->write(buffer, 2);
   b5ba2:	6860      	ldr	r0, [r4, #4]
	buffer[1] = RegisterAddr & 0xFF;
   b5ba4:	f88d 5005 	strb.w	r5, [sp, #5]
	buffer[0] = RegisterAddr >> 8;
   b5ba8:	f88d 3004 	strb.w	r3, [sp, #4]
	dev_i2c->write(buffer, 2);
   b5bac:	6803      	ldr	r3, [r0, #0]
   b5bae:	2202      	movs	r2, #2
   b5bb0:	68db      	ldr	r3, [r3, #12]
   b5bb2:	a901      	add	r1, sp, #4
   b5bb4:	4798      	blx	r3
	for (int i = 0; i < NumByteToWrite; i++)
   b5bb6:	2500      	movs	r5, #0
   b5bb8:	42af      	cmp	r7, r5
		dev_i2c->write(pBuffer[i]);
   b5bba:	6860      	ldr	r0, [r4, #4]
	for (int i = 0; i < NumByteToWrite; i++)
   b5bbc:	dd05      	ble.n	b5bca <_ZN7VL53L1X15VL53L1_I2CWriteEhtPht+0x3e>
		dev_i2c->write(pBuffer[i]);
   b5bbe:	6803      	ldr	r3, [r0, #0]
   b5bc0:	5d71      	ldrb	r1, [r6, r5]
   b5bc2:	689b      	ldr	r3, [r3, #8]
   b5bc4:	4798      	blx	r3
	for (int i = 0; i < NumByteToWrite; i++)
   b5bc6:	3501      	adds	r5, #1
   b5bc8:	e7f6      	b.n	b5bb8 <_ZN7VL53L1X15VL53L1_I2CWriteEhtPht+0x2c>

	dev_i2c->endTransmission(true);
   b5bca:	2101      	movs	r1, #1
   b5bcc:	f001 f89a 	bl	b6d04 <_ZN7TwoWire15endTransmissionEh>
	return 0;
}
   b5bd0:	2000      	movs	r0, #0
   b5bd2:	b003      	add	sp, #12
   b5bd4:	bdf0      	pop	{r4, r5, r6, r7, pc}

000b5bd6 <_ZN7VL53L1X13VL53L1_WrByteEP12VL53L1_Dev_tth>:
{
   b5bd6:	b51f      	push	{r0, r1, r2, r3, r4, lr}
   b5bd8:	f88d 300f 	strb.w	r3, [sp, #15]
	status = VL53L1_I2CWrite(Dev->I2cDevAddr, index, &data, 1);
   b5bdc:	2301      	movs	r3, #1
   b5bde:	7809      	ldrb	r1, [r1, #0]
   b5be0:	9300      	str	r3, [sp, #0]
   b5be2:	f10d 030f 	add.w	r3, sp, #15
   b5be6:	f7ff ffd1 	bl	b5b8c <_ZN7VL53L1X15VL53L1_I2CWriteEhtPht>
}
   b5bea:	b005      	add	sp, #20
   b5bec:	f85d fb04 	ldr.w	pc, [sp], #4

000b5bf0 <_ZN7VL53L1X22VL53L1X_ClearInterruptEv>:
	status = VL53L1_WrByte(Device, SYSTEM__INTERRUPT_CLEAR, 0x01);
   b5bf0:	6981      	ldr	r1, [r0, #24]
   b5bf2:	2301      	movs	r3, #1
   b5bf4:	2286      	movs	r2, #134	; 0x86
   b5bf6:	f7ff bfee 	b.w	b5bd6 <_ZN7VL53L1X13VL53L1_WrByteEP12VL53L1_Dev_tth>

000b5bfa <_ZN7VL53L1X20VL53L1X_StartRangingEv>:
	status = VL53L1_WrByte(Device, SYSTEM__MODE_START, 0x40); /* Enable VL53L1X */
   b5bfa:	6981      	ldr	r1, [r0, #24]
   b5bfc:	2340      	movs	r3, #64	; 0x40
   b5bfe:	2287      	movs	r2, #135	; 0x87
   b5c00:	f7ff bfe9 	b.w	b5bd6 <_ZN7VL53L1X13VL53L1_WrByteEP12VL53L1_Dev_tth>

000b5c04 <_ZN7VL53L1X19VL53L1X_StopRangingEv>:
	status = VL53L1_WrByte(Device, SYSTEM__MODE_START, 0x00); /* Disable VL53L1X */
   b5c04:	6981      	ldr	r1, [r0, #24]
   b5c06:	2300      	movs	r3, #0
   b5c08:	2287      	movs	r2, #135	; 0x87
   b5c0a:	f7ff bfe4 	b.w	b5bd6 <_ZN7VL53L1X13VL53L1_WrByteEP12VL53L1_Dev_tth>

000b5c0e <_ZN7VL53L1X14VL53L1X_SetROIEhhh>:
	if (X > 16)
   b5c0e:	2910      	cmp	r1, #16
{
   b5c10:	b570      	push	{r4, r5, r6, lr}
   b5c12:	460d      	mov	r5, r1
   b5c14:	bf28      	it	cs
   b5c16:	2510      	movcs	r5, #16
	if (Y > 16)
   b5c18:	2a10      	cmp	r2, #16
   b5c1a:	4616      	mov	r6, r2
   b5c1c:	bf28      	it	cs
   b5c1e:	2610      	movcs	r6, #16
	if (X > 10 || Y > 10)
   b5c20:	290a      	cmp	r1, #10
{
   b5c22:	4604      	mov	r4, r0
	if (X > 10 || Y > 10)
   b5c24:	d813      	bhi.n	b5c4e <_ZN7VL53L1X14VL53L1X_SetROIEhhh+0x40>
		opticalCenter = 199;
   b5c26:	2a0b      	cmp	r2, #11
   b5c28:	bf28      	it	cs
   b5c2a:	23c7      	movcs	r3, #199	; 0xc7
	status = VL53L1_WrByte(Device, ROI_CONFIG__USER_ROI_CENTRE_SPAD, opticalCenter);
   b5c2c:	69a1      	ldr	r1, [r4, #24]
   b5c2e:	227f      	movs	r2, #127	; 0x7f
   b5c30:	4620      	mov	r0, r4
   b5c32:	f7ff ffd0 	bl	b5bd6 <_ZN7VL53L1X13VL53L1_WrByteEP12VL53L1_Dev_tth>
						   (Y - 1) << 4 | (X - 1));
   b5c36:	3d01      	subs	r5, #1
   b5c38:	1e73      	subs	r3, r6, #1
   b5c3a:	ea45 1303 	orr.w	r3, r5, r3, lsl #4
	status = VL53L1_WrByte(Device, ROI_CONFIG__USER_ROI_REQUESTED_GLOBAL_XY_SIZE,
   b5c3e:	69a1      	ldr	r1, [r4, #24]
   b5c40:	4620      	mov	r0, r4
   b5c42:	b2db      	uxtb	r3, r3
}
   b5c44:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	status = VL53L1_WrByte(Device, ROI_CONFIG__USER_ROI_REQUESTED_GLOBAL_XY_SIZE,
   b5c48:	2280      	movs	r2, #128	; 0x80
   b5c4a:	f7ff bfc4 	b.w	b5bd6 <_ZN7VL53L1X13VL53L1_WrByteEP12VL53L1_Dev_tth>
		opticalCenter = 199;
   b5c4e:	23c7      	movs	r3, #199	; 0xc7
   b5c50:	e7ec      	b.n	b5c2c <_ZN7VL53L1X14VL53L1X_SetROIEhhh+0x1e>

000b5c52 <_ZN7VL53L1X13VL53L1_WrWordEP12VL53L1_Dev_ttt>:
{
   b5c52:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	buffer[0] = data >> 8;
   b5c54:	0a1c      	lsrs	r4, r3, #8
	buffer[1] = data & 0x00FF;
   b5c56:	f88d 300d 	strb.w	r3, [sp, #13]
	status = VL53L1_I2CWrite(Dev->I2cDevAddr, index, (uint8_t *)buffer, 2);
   b5c5a:	2302      	movs	r3, #2
   b5c5c:	7809      	ldrb	r1, [r1, #0]
   b5c5e:	9300      	str	r3, [sp, #0]
   b5c60:	ab03      	add	r3, sp, #12
	buffer[0] = data >> 8;
   b5c62:	f88d 400c 	strb.w	r4, [sp, #12]
	status = VL53L1_I2CWrite(Dev->I2cDevAddr, index, (uint8_t *)buffer, 2);
   b5c66:	f7ff ff91 	bl	b5b8c <_ZN7VL53L1X15VL53L1_I2CWriteEhtPht>
}
   b5c6a:	b004      	add	sp, #16
   b5c6c:	bd10      	pop	{r4, pc}

000b5c6e <_ZN7VL53L1X14VL53L1_WrDWordEP12VL53L1_Dev_ttm>:
{
   b5c6e:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	buffer[0] = (data >> 24) & 0xFF;
   b5c70:	0e1c      	lsrs	r4, r3, #24
   b5c72:	f88d 400c 	strb.w	r4, [sp, #12]
	buffer[1] = (data >> 16) & 0xFF;
   b5c76:	0c1c      	lsrs	r4, r3, #16
   b5c78:	f88d 400d 	strb.w	r4, [sp, #13]
	buffer[3] = (data >> 0) & 0xFF;
   b5c7c:	f88d 300f 	strb.w	r3, [sp, #15]
	buffer[2] = (data >> 8) & 0xFF;
   b5c80:	0a1c      	lsrs	r4, r3, #8
	status = VL53L1_I2CWrite(Dev->I2cDevAddr, index, (uint8_t *)buffer, 4);
   b5c82:	2304      	movs	r3, #4
   b5c84:	7809      	ldrb	r1, [r1, #0]
   b5c86:	9300      	str	r3, [sp, #0]
   b5c88:	ab03      	add	r3, sp, #12
	buffer[2] = (data >> 8) & 0xFF;
   b5c8a:	f88d 400e 	strb.w	r4, [sp, #14]
	status = VL53L1_I2CWrite(Dev->I2cDevAddr, index, (uint8_t *)buffer, 4);
   b5c8e:	f7ff ff7d 	bl	b5b8c <_ZN7VL53L1X15VL53L1_I2CWriteEhtPht>
}
   b5c92:	b004      	add	sp, #16
   b5c94:	bd10      	pop	{r4, pc}

000b5c96 <_ZN7VL53L1X14VL53L1_I2CReadEhtPht>:

VL53L1X_ERROR VL53L1X::VL53L1_I2CRead(uint8_t DeviceAddr, uint16_t RegisterAddr, uint8_t *pBuffer, uint16_t NumByteToRead)
{
   b5c96:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   b5c9a:	4604      	mov	r4, r0
   b5c9c:	4690      	mov	r8, r2
   b5c9e:	461d      	mov	r5, r3
	{
#ifdef DEBUG_MODE
		Serial.print("Beginning transmission to ");
		Serial.println(((DeviceAddr) >> 1) & 0x7F);
#endif
		dev_i2c->beginTransmission(((uint8_t)(((DeviceAddr) >> 1) & 0x7F)));
   b5ca0:	084f      	lsrs	r7, r1, #1
#ifdef DEBUG_MODE
		Serial.print("Writing port number ");
		Serial.println(RegisterAddr);
#endif
		uint8_t buffer[2];
		buffer[0] = RegisterAddr >> 8;
   b5ca2:	ea4f 2912 	mov.w	r9, r2, lsr #8
   b5ca6:	2605      	movs	r6, #5
		dev_i2c->beginTransmission(((uint8_t)(((DeviceAddr) >> 1) & 0x7F)));
   b5ca8:	6860      	ldr	r0, [r4, #4]
   b5caa:	4639      	mov	r1, r7
   b5cac:	f001 f826 	bl	b6cfc <_ZN7TwoWire17beginTransmissionEh>
		buffer[1] = RegisterAddr & 0xFF;
		dev_i2c->write(buffer, 2);
   b5cb0:	6860      	ldr	r0, [r4, #4]
		buffer[0] = RegisterAddr >> 8;
   b5cb2:	f88d 9004 	strb.w	r9, [sp, #4]
		buffer[1] = RegisterAddr & 0xFF;
   b5cb6:	f88d 8005 	strb.w	r8, [sp, #5]
		dev_i2c->write(buffer, 2);
   b5cba:	6803      	ldr	r3, [r0, #0]
   b5cbc:	a901      	add	r1, sp, #4
   b5cbe:	68db      	ldr	r3, [r3, #12]
   b5cc0:	2202      	movs	r2, #2
   b5cc2:	4798      	blx	r3
		status = dev_i2c->endTransmission(false);
   b5cc4:	6860      	ldr	r0, [r4, #4]
   b5cc6:	2100      	movs	r1, #0
   b5cc8:	f001 f81c 	bl	b6d04 <_ZN7TwoWire15endTransmissionEh>

		if (status == 0)
   b5ccc:	b118      	cbz	r0, b5cd6 <_ZN7VL53L1X14VL53L1_I2CReadEhtPht+0x40>
	for (uint8_t x = 0; x < maxAttempts; x++)
   b5cce:	3e01      	subs	r6, #1
   b5cd0:	f016 06ff 	ands.w	r6, r6, #255	; 0xff
   b5cd4:	d1e8      	bne.n	b5ca8 <_ZN7VL53L1X14VL53L1_I2CReadEhtPht+0x12>
		}
#endif
		//End of fix
	}

	dev_i2c->requestFrom(((uint8_t)(((DeviceAddr) >> 1) & 0x7F)), (byte)NumByteToRead);
   b5cd6:	f89d 2028 	ldrb.w	r2, [sp, #40]	; 0x28
   b5cda:	6860      	ldr	r0, [r4, #4]
   b5cdc:	4639      	mov	r1, r7
   b5cde:	f001 f80a 	bl	b6cf6 <_ZN7TwoWire11requestFromEhj>

	int i = 0;
   b5ce2:	3d01      	subs	r5, #1
	while (dev_i2c->available())
   b5ce4:	6860      	ldr	r0, [r4, #4]
   b5ce6:	6803      	ldr	r3, [r0, #0]
   b5ce8:	691b      	ldr	r3, [r3, #16]
   b5cea:	4798      	blx	r3
   b5cec:	b130      	cbz	r0, b5cfc <_ZN7VL53L1X14VL53L1_I2CReadEhtPht+0x66>
	{
		pBuffer[i] = dev_i2c->read();
   b5cee:	6860      	ldr	r0, [r4, #4]
   b5cf0:	6803      	ldr	r3, [r0, #0]
   b5cf2:	695b      	ldr	r3, [r3, #20]
   b5cf4:	4798      	blx	r3
   b5cf6:	f805 0f01 	strb.w	r0, [r5, #1]!
	while (dev_i2c->available())
   b5cfa:	e7f3      	b.n	b5ce4 <_ZN7VL53L1X14VL53L1_I2CReadEhtPht+0x4e>
		i++;
	}

	return 0;
}
   b5cfc:	b003      	add	sp, #12
   b5cfe:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

000b5d02 <_ZN7VL53L1X13VL53L1_RdByteEP12VL53L1_Dev_ttPh>:
{
   b5d02:	b513      	push	{r0, r1, r4, lr}
	status = VL53L1_I2CRead(Dev->I2cDevAddr, index, data, 1);
   b5d04:	2401      	movs	r4, #1
   b5d06:	7809      	ldrb	r1, [r1, #0]
   b5d08:	9400      	str	r4, [sp, #0]
   b5d0a:	f7ff ffc4 	bl	b5c96 <_ZN7VL53L1X14VL53L1_I2CReadEhtPht>
	if (status)
   b5d0e:	3800      	subs	r0, #0
   b5d10:	bf18      	it	ne
   b5d12:	2001      	movne	r0, #1
}
   b5d14:	4240      	negs	r0, r0
   b5d16:	b002      	add	sp, #8
   b5d18:	bd10      	pop	{r4, pc}

000b5d1a <_ZN7VL53L1X28VL53L1X_GetInterruptPolarityEPh>:
{
   b5d1a:	b513      	push	{r0, r1, r4, lr}
	status = VL53L1_RdByte(Device, GPIO_HV_MUX__CTRL, &Temp);
   b5d1c:	2230      	movs	r2, #48	; 0x30
{
   b5d1e:	460c      	mov	r4, r1
	status = VL53L1_RdByte(Device, GPIO_HV_MUX__CTRL, &Temp);
   b5d20:	f10d 0307 	add.w	r3, sp, #7
   b5d24:	6981      	ldr	r1, [r0, #24]
   b5d26:	f7ff ffec 	bl	b5d02 <_ZN7VL53L1X13VL53L1_RdByteEP12VL53L1_Dev_ttPh>
	*pInterruptPolarity = !(Temp >> 4);
   b5d2a:	f89d 3007 	ldrb.w	r3, [sp, #7]
   b5d2e:	ea6f 1313 	mvn.w	r3, r3, lsr #4
   b5d32:	f003 0301 	and.w	r3, r3, #1
   b5d36:	7023      	strb	r3, [r4, #0]
}
   b5d38:	b002      	add	sp, #8
   b5d3a:	bd10      	pop	{r4, pc}

000b5d3c <_ZN7VL53L1X25VL53L1X_CheckForDataReadyEPh>:
{
   b5d3c:	b537      	push	{r0, r1, r2, r4, r5, lr}
   b5d3e:	4605      	mov	r5, r0
   b5d40:	460c      	mov	r4, r1
	status = VL53L1X_GetInterruptPolarity(&IntPol);
   b5d42:	f10d 0107 	add.w	r1, sp, #7
   b5d46:	f7ff ffe8 	bl	b5d1a <_ZN7VL53L1X28VL53L1X_GetInterruptPolarityEPh>
	status = VL53L1_RdByte(Device, GPIO__TIO_HV_STATUS, &Temp);
   b5d4a:	69a9      	ldr	r1, [r5, #24]
   b5d4c:	f10d 0306 	add.w	r3, sp, #6
   b5d50:	2231      	movs	r2, #49	; 0x31
   b5d52:	4628      	mov	r0, r5
   b5d54:	f7ff ffd5 	bl	b5d02 <_ZN7VL53L1X13VL53L1_RdByteEP12VL53L1_Dev_ttPh>
	if (status == 0)
   b5d58:	b950      	cbnz	r0, b5d70 <_ZN7VL53L1X25VL53L1X_CheckForDataReadyEPh+0x34>
		if ((Temp & 1) == IntPol)
   b5d5a:	f89d 3006 	ldrb.w	r3, [sp, #6]
   b5d5e:	f89d 2007 	ldrb.w	r2, [sp, #7]
   b5d62:	f003 0301 	and.w	r3, r3, #1
   b5d66:	429a      	cmp	r2, r3
			*isDataReady = 1;
   b5d68:	bf06      	itte	eq
   b5d6a:	2301      	moveq	r3, #1
   b5d6c:	7023      	strbeq	r3, [r4, #0]
			*isDataReady = 0;
   b5d6e:	7020      	strbne	r0, [r4, #0]
}
   b5d70:	b003      	add	sp, #12
   b5d72:	bd30      	pop	{r4, r5, pc}

000b5d74 <_ZN7VL53L1X18VL53L1X_SensorInitEv>:
{
   b5d74:	b573      	push	{r0, r1, r4, r5, r6, lr}
	uint8_t Addr = 0x00, dataReady = 0, timeout = 0;
   b5d76:	2300      	movs	r3, #0
   b5d78:	4e1c      	ldr	r6, [pc, #112]	; (b5dec <_ZN7VL53L1X18VL53L1X_SensorInitEv+0x78>)
   b5d7a:	f88d 3007 	strb.w	r3, [sp, #7]
{
   b5d7e:	4604      	mov	r4, r0
	uint8_t Addr = 0x00, dataReady = 0, timeout = 0;
   b5d80:	252d      	movs	r5, #45	; 0x2d
		status = VL53L1_WrByte(Device, Addr, VL51L1X_DEFAULT_CONFIGURATION[Addr - 0x2D]);
   b5d82:	b2aa      	uxth	r2, r5
   b5d84:	f816 3b01 	ldrb.w	r3, [r6], #1
   b5d88:	69a1      	ldr	r1, [r4, #24]
   b5d8a:	4620      	mov	r0, r4
	for (Addr = 0x2D; Addr <= 0x87; Addr++)
   b5d8c:	3501      	adds	r5, #1
		status = VL53L1_WrByte(Device, Addr, VL51L1X_DEFAULT_CONFIGURATION[Addr - 0x2D]);
   b5d8e:	f7ff ff22 	bl	b5bd6 <_ZN7VL53L1X13VL53L1_WrByteEP12VL53L1_Dev_tth>
	for (Addr = 0x2D; Addr <= 0x87; Addr++)
   b5d92:	2d88      	cmp	r5, #136	; 0x88
   b5d94:	d1f5      	bne.n	b5d82 <_ZN7VL53L1X18VL53L1X_SensorInitEv+0xe>
	status = VL53L1X_StartRanging();
   b5d96:	4620      	mov	r0, r4
   b5d98:	f7ff ff2f 	bl	b5bfa <_ZN7VL53L1X20VL53L1X_StartRangingEv>
   b5d9c:	2598      	movs	r5, #152	; 0x98
	while (dataReady == 0)
   b5d9e:	f89d 3007 	ldrb.w	r3, [sp, #7]
   b5da2:	b963      	cbnz	r3, b5dbe <_ZN7VL53L1X18VL53L1X_SensorInitEv+0x4a>
		status = VL53L1X_CheckForDataReady(&dataReady);
   b5da4:	f10d 0107 	add.w	r1, sp, #7
   b5da8:	4620      	mov	r0, r4
		if (timeout++ > 150)
   b5daa:	3d01      	subs	r5, #1
		status = VL53L1X_CheckForDataReady(&dataReady);
   b5dac:	f7ff ffc6 	bl	b5d3c <_ZN7VL53L1X25VL53L1X_CheckForDataReadyEPh>
		if (timeout++ > 150)
   b5db0:	f015 05ff 	ands.w	r5, r5, #255	; 0xff
   b5db4:	d017      	beq.n	b5de6 <_ZN7VL53L1X18VL53L1X_SensorInitEv+0x72>
		delay(1);
   b5db6:	2001      	movs	r0, #1
   b5db8:	f000 fc14 	bl	b65e4 <delay>
	while (dataReady == 0)
   b5dbc:	e7ef      	b.n	b5d9e <_ZN7VL53L1X18VL53L1X_SensorInitEv+0x2a>
	status = VL53L1X_ClearInterrupt();
   b5dbe:	4620      	mov	r0, r4
   b5dc0:	f7ff ff16 	bl	b5bf0 <_ZN7VL53L1X22VL53L1X_ClearInterruptEv>
	status = VL53L1X_StopRanging();
   b5dc4:	4620      	mov	r0, r4
   b5dc6:	f7ff ff1d 	bl	b5c04 <_ZN7VL53L1X19VL53L1X_StopRangingEv>
	status = VL53L1_WrByte(Device, VL53L1_VHV_CONFIG__TIMEOUT_MACROP_LOOP_BOUND, 0x09); /* two bounds VHV */
   b5dca:	69a1      	ldr	r1, [r4, #24]
   b5dcc:	2309      	movs	r3, #9
   b5dce:	2208      	movs	r2, #8
   b5dd0:	4620      	mov	r0, r4
   b5dd2:	f7ff ff00 	bl	b5bd6 <_ZN7VL53L1X13VL53L1_WrByteEP12VL53L1_Dev_tth>
	status = VL53L1_WrByte(Device, 0x0B, 0);											/* start VHV from the previous temperature */
   b5dd6:	69a1      	ldr	r1, [r4, #24]
   b5dd8:	2300      	movs	r3, #0
   b5dda:	220b      	movs	r2, #11
   b5ddc:	4620      	mov	r0, r4
   b5dde:	f7ff fefa 	bl	b5bd6 <_ZN7VL53L1X13VL53L1_WrByteEP12VL53L1_Dev_tth>
}
   b5de2:	b002      	add	sp, #8
   b5de4:	bd70      	pop	{r4, r5, r6, pc}
			return VL53L1_ERROR_TIME_OUT;
   b5de6:	f06f 0006 	mvn.w	r0, #6
   b5dea:	e7fa      	b.n	b5de2 <_ZN7VL53L1X18VL53L1X_SensorInitEv+0x6e>
   b5dec:	000b8f34 	.word	0x000b8f34

000b5df0 <_ZN7VL53L1X23VL53L1X_GetDistanceModeEPt>:
{
   b5df0:	b513      	push	{r0, r1, r4, lr}
	status = VL53L1_RdByte(Device, PHASECAL_CONFIG__TIMEOUT_MACROP, &TempDM);
   b5df2:	224b      	movs	r2, #75	; 0x4b
   b5df4:	f10d 0307 	add.w	r3, sp, #7
{
   b5df8:	460c      	mov	r4, r1
	status = VL53L1_RdByte(Device, PHASECAL_CONFIG__TIMEOUT_MACROP, &TempDM);
   b5dfa:	6981      	ldr	r1, [r0, #24]
   b5dfc:	f7ff ff81 	bl	b5d02 <_ZN7VL53L1X13VL53L1_RdByteEP12VL53L1_Dev_ttPh>
	if (TempDM == 0x14)
   b5e00:	f89d 3007 	ldrb.w	r3, [sp, #7]
   b5e04:	2b14      	cmp	r3, #20
   b5e06:	d103      	bne.n	b5e10 <_ZN7VL53L1X23VL53L1X_GetDistanceModeEPt+0x20>
		*DM = 1;
   b5e08:	2301      	movs	r3, #1
		*DM = 2;
   b5e0a:	8023      	strh	r3, [r4, #0]
}
   b5e0c:	b002      	add	sp, #8
   b5e0e:	bd10      	pop	{r4, pc}
	if (TempDM == 0x0A)
   b5e10:	2b0a      	cmp	r3, #10
   b5e12:	d1fb      	bne.n	b5e0c <_ZN7VL53L1X23VL53L1X_GetDistanceModeEPt+0x1c>
		*DM = 2;
   b5e14:	2302      	movs	r3, #2
   b5e16:	e7f8      	b.n	b5e0a <_ZN7VL53L1X23VL53L1X_GetDistanceModeEPt+0x1a>

000b5e18 <_ZN7VL53L1X27VL53L1X_SetTimingBudgetInMsEt>:
{
   b5e18:	b573      	push	{r0, r1, r4, r5, r6, lr}
   b5e1a:	460d      	mov	r5, r1
	status = VL53L1X_GetDistanceMode(&DM);
   b5e1c:	f10d 0106 	add.w	r1, sp, #6
{
   b5e20:	4604      	mov	r4, r0
	status = VL53L1X_GetDistanceMode(&DM);
   b5e22:	f7ff ffe5 	bl	b5df0 <_ZN7VL53L1X23VL53L1X_GetDistanceModeEPt>
	if (DM == 0)
   b5e26:	f8bd 3006 	ldrh.w	r3, [sp, #6]
	status = VL53L1X_GetDistanceMode(&DM);
   b5e2a:	4606      	mov	r6, r0
	if (DM == 0)
   b5e2c:	b153      	cbz	r3, b5e44 <_ZN7VL53L1X27VL53L1X_SetTimingBudgetInMsEt+0x2c>
	else if (DM == 1)
   b5e2e:	2b01      	cmp	r3, #1
   b5e30:	d152      	bne.n	b5ed8 <_ZN7VL53L1X27VL53L1X_SetTimingBudgetInMsEt+0xc0>
		switch (TimingBudgetInMs)
   b5e32:	2d32      	cmp	r5, #50	; 0x32
   b5e34:	d032      	beq.n	b5e9c <_ZN7VL53L1X27VL53L1X_SetTimingBudgetInMsEt+0x84>
   b5e36:	d807      	bhi.n	b5e48 <_ZN7VL53L1X27VL53L1X_SetTimingBudgetInMsEt+0x30>
   b5e38:	2d14      	cmp	r5, #20
   b5e3a:	d025      	beq.n	b5e88 <_ZN7VL53L1X27VL53L1X_SetTimingBudgetInMsEt+0x70>
   b5e3c:	2d21      	cmp	r5, #33	; 0x21
   b5e3e:	d02b      	beq.n	b5e98 <_ZN7VL53L1X27VL53L1X_SetTimingBudgetInMsEt+0x80>
   b5e40:	2d0f      	cmp	r5, #15
   b5e42:	d012      	beq.n	b5e6a <_ZN7VL53L1X27VL53L1X_SetTimingBudgetInMsEt+0x52>
		return 1;
   b5e44:	2601      	movs	r6, #1
   b5e46:	e01c      	b.n	b5e82 <_ZN7VL53L1X27VL53L1X_SetTimingBudgetInMsEt+0x6a>
		switch (TimingBudgetInMs)
   b5e48:	2dc8      	cmp	r5, #200	; 0xc8
   b5e4a:	d031      	beq.n	b5eb0 <_ZN7VL53L1X27VL53L1X_SetTimingBudgetInMsEt+0x98>
   b5e4c:	f5b5 7ffa 	cmp.w	r5, #500	; 0x1f4
   b5e50:	d038      	beq.n	b5ec4 <_ZN7VL53L1X27VL53L1X_SetTimingBudgetInMsEt+0xac>
   b5e52:	2d64      	cmp	r5, #100	; 0x64
   b5e54:	d1f6      	bne.n	b5e44 <_ZN7VL53L1X27VL53L1X_SetTimingBudgetInMsEt+0x2c>
			VL53L1_WrWord(Device, RANGE_CONFIG__TIMEOUT_MACROP_A_HI,
   b5e56:	f240 23e1 	movw	r3, #737	; 0x2e1
   b5e5a:	69a1      	ldr	r1, [r4, #24]
   b5e5c:	225e      	movs	r2, #94	; 0x5e
   b5e5e:	4620      	mov	r0, r4
   b5e60:	f7ff fef7 	bl	b5c52 <_ZN7VL53L1X13VL53L1_WrWordEP12VL53L1_Dev_ttt>
			VL53L1_WrWord(Device, RANGE_CONFIG__TIMEOUT_MACROP_B_HI,
   b5e64:	f44f 7362 	mov.w	r3, #904	; 0x388
   b5e68:	e006      	b.n	b5e78 <_ZN7VL53L1X27VL53L1X_SetTimingBudgetInMsEt+0x60>
			VL53L1_WrWord(Device, RANGE_CONFIG__TIMEOUT_MACROP_A_HI,
   b5e6a:	231d      	movs	r3, #29
   b5e6c:	69a1      	ldr	r1, [r4, #24]
   b5e6e:	225e      	movs	r2, #94	; 0x5e
   b5e70:	4620      	mov	r0, r4
   b5e72:	f7ff feee 	bl	b5c52 <_ZN7VL53L1X13VL53L1_WrWordEP12VL53L1_Dev_ttt>
			VL53L1_WrWord(Device, RANGE_CONFIG__TIMEOUT_MACROP_B_HI,
   b5e76:	2327      	movs	r3, #39	; 0x27
			VL53L1_WrWord(Device, RANGE_CONFIG__TIMEOUT_MACROP_B_HI,
   b5e78:	69a1      	ldr	r1, [r4, #24]
   b5e7a:	2261      	movs	r2, #97	; 0x61
   b5e7c:	4620      	mov	r0, r4
   b5e7e:	f7ff fee8 	bl	b5c52 <_ZN7VL53L1X13VL53L1_WrWordEP12VL53L1_Dev_ttt>
}
   b5e82:	4630      	mov	r0, r6
   b5e84:	b002      	add	sp, #8
   b5e86:	bd70      	pop	{r4, r5, r6, pc}
			VL53L1_WrWord(Device, RANGE_CONFIG__TIMEOUT_MACROP_A_HI,
   b5e88:	2351      	movs	r3, #81	; 0x51
			VL53L1_WrWord(Device, RANGE_CONFIG__TIMEOUT_MACROP_A_HI,
   b5e8a:	69a1      	ldr	r1, [r4, #24]
   b5e8c:	225e      	movs	r2, #94	; 0x5e
   b5e8e:	4620      	mov	r0, r4
   b5e90:	f7ff fedf 	bl	b5c52 <_ZN7VL53L1X13VL53L1_WrWordEP12VL53L1_Dev_ttt>
			VL53L1_WrWord(Device, RANGE_CONFIG__TIMEOUT_MACROP_B_HI,
   b5e94:	236e      	movs	r3, #110	; 0x6e
   b5e96:	e7ef      	b.n	b5e78 <_ZN7VL53L1X27VL53L1X_SetTimingBudgetInMsEt+0x60>
			VL53L1_WrWord(Device, RANGE_CONFIG__TIMEOUT_MACROP_A_HI,
   b5e98:	23d6      	movs	r3, #214	; 0xd6
   b5e9a:	e7f6      	b.n	b5e8a <_ZN7VL53L1X27VL53L1X_SetTimingBudgetInMsEt+0x72>
			VL53L1_WrWord(Device, RANGE_CONFIG__TIMEOUT_MACROP_A_HI,
   b5e9c:	f44f 73d7 	mov.w	r3, #430	; 0x1ae
   b5ea0:	69a1      	ldr	r1, [r4, #24]
   b5ea2:	225e      	movs	r2, #94	; 0x5e
   b5ea4:	4620      	mov	r0, r4
   b5ea6:	f7ff fed4 	bl	b5c52 <_ZN7VL53L1X13VL53L1_WrWordEP12VL53L1_Dev_ttt>
			VL53L1_WrWord(Device, RANGE_CONFIG__TIMEOUT_MACROP_B_HI,
   b5eaa:	f44f 73f4 	mov.w	r3, #488	; 0x1e8
   b5eae:	e7e3      	b.n	b5e78 <_ZN7VL53L1X27VL53L1X_SetTimingBudgetInMsEt+0x60>
			VL53L1_WrWord(Device, RANGE_CONFIG__TIMEOUT_MACROP_A_HI,
   b5eb0:	f240 33e1 	movw	r3, #993	; 0x3e1
   b5eb4:	69a1      	ldr	r1, [r4, #24]
   b5eb6:	225e      	movs	r2, #94	; 0x5e
   b5eb8:	4620      	mov	r0, r4
   b5eba:	f7ff feca 	bl	b5c52 <_ZN7VL53L1X13VL53L1_WrWordEP12VL53L1_Dev_ttt>
			VL53L1_WrWord(Device, RANGE_CONFIG__TIMEOUT_MACROP_B_HI,
   b5ebe:	f240 4396 	movw	r3, #1174	; 0x496
   b5ec2:	e7d9      	b.n	b5e78 <_ZN7VL53L1X27VL53L1X_SetTimingBudgetInMsEt+0x60>
			VL53L1_WrWord(Device, RANGE_CONFIG__TIMEOUT_MACROP_A_HI,
   b5ec4:	f240 5391 	movw	r3, #1425	; 0x591
   b5ec8:	69a1      	ldr	r1, [r4, #24]
   b5eca:	225e      	movs	r2, #94	; 0x5e
   b5ecc:	4620      	mov	r0, r4
   b5ece:	f7ff fec0 	bl	b5c52 <_ZN7VL53L1X13VL53L1_WrWordEP12VL53L1_Dev_ttt>
			VL53L1_WrWord(Device, RANGE_CONFIG__TIMEOUT_MACROP_B_HI,
   b5ed2:	f240 53c1 	movw	r3, #1473	; 0x5c1
   b5ed6:	e7cf      	b.n	b5e78 <_ZN7VL53L1X27VL53L1X_SetTimingBudgetInMsEt+0x60>
		switch (TimingBudgetInMs)
   b5ed8:	2d64      	cmp	r5, #100	; 0x64
   b5eda:	d027      	beq.n	b5f2c <_ZN7VL53L1X27VL53L1X_SetTimingBudgetInMsEt+0x114>
   b5edc:	d80d      	bhi.n	b5efa <_ZN7VL53L1X27VL53L1X_SetTimingBudgetInMsEt+0xe2>
   b5ede:	2d21      	cmp	r5, #33	; 0x21
   b5ee0:	d01a      	beq.n	b5f18 <_ZN7VL53L1X27VL53L1X_SetTimingBudgetInMsEt+0x100>
   b5ee2:	2d32      	cmp	r5, #50	; 0x32
   b5ee4:	d01a      	beq.n	b5f1c <_ZN7VL53L1X27VL53L1X_SetTimingBudgetInMsEt+0x104>
   b5ee6:	2d14      	cmp	r5, #20
   b5ee8:	d1ac      	bne.n	b5e44 <_ZN7VL53L1X27VL53L1X_SetTimingBudgetInMsEt+0x2c>
			VL53L1_WrWord(Device, RANGE_CONFIG__TIMEOUT_MACROP_A_HI,
   b5eea:	231e      	movs	r3, #30
   b5eec:	69a1      	ldr	r1, [r4, #24]
   b5eee:	225e      	movs	r2, #94	; 0x5e
   b5ef0:	4620      	mov	r0, r4
   b5ef2:	f7ff feae 	bl	b5c52 <_ZN7VL53L1X13VL53L1_WrWordEP12VL53L1_Dev_ttt>
			VL53L1_WrWord(Device, RANGE_CONFIG__TIMEOUT_MACROP_B_HI,
   b5ef6:	2322      	movs	r3, #34	; 0x22
   b5ef8:	e7be      	b.n	b5e78 <_ZN7VL53L1X27VL53L1X_SetTimingBudgetInMsEt+0x60>
		switch (TimingBudgetInMs)
   b5efa:	2dc8      	cmp	r5, #200	; 0xc8
   b5efc:	d020      	beq.n	b5f40 <_ZN7VL53L1X27VL53L1X_SetTimingBudgetInMsEt+0x128>
   b5efe:	f5b5 7ffa 	cmp.w	r5, #500	; 0x1f4
   b5f02:	d19f      	bne.n	b5e44 <_ZN7VL53L1X27VL53L1X_SetTimingBudgetInMsEt+0x2c>
			VL53L1_WrWord(Device, RANGE_CONFIG__TIMEOUT_MACROP_A_HI,
   b5f04:	f240 438f 	movw	r3, #1167	; 0x48f
   b5f08:	69a1      	ldr	r1, [r4, #24]
   b5f0a:	225e      	movs	r2, #94	; 0x5e
   b5f0c:	4620      	mov	r0, r4
   b5f0e:	f7ff fea0 	bl	b5c52 <_ZN7VL53L1X13VL53L1_WrWordEP12VL53L1_Dev_ttt>
			VL53L1_WrWord(Device, RANGE_CONFIG__TIMEOUT_MACROP_B_HI,
   b5f12:	f240 43a4 	movw	r3, #1188	; 0x4a4
   b5f16:	e7af      	b.n	b5e78 <_ZN7VL53L1X27VL53L1X_SetTimingBudgetInMsEt+0x60>
			VL53L1_WrWord(Device, RANGE_CONFIG__TIMEOUT_MACROP_A_HI,
   b5f18:	2360      	movs	r3, #96	; 0x60
   b5f1a:	e7b6      	b.n	b5e8a <_ZN7VL53L1X27VL53L1X_SetTimingBudgetInMsEt+0x72>
			VL53L1_WrWord(Device, RANGE_CONFIG__TIMEOUT_MACROP_A_HI,
   b5f1c:	23ad      	movs	r3, #173	; 0xad
   b5f1e:	69a1      	ldr	r1, [r4, #24]
   b5f20:	225e      	movs	r2, #94	; 0x5e
   b5f22:	4620      	mov	r0, r4
   b5f24:	f7ff fe95 	bl	b5c52 <_ZN7VL53L1X13VL53L1_WrWordEP12VL53L1_Dev_ttt>
			VL53L1_WrWord(Device, RANGE_CONFIG__TIMEOUT_MACROP_B_HI,
   b5f28:	23c6      	movs	r3, #198	; 0xc6
   b5f2a:	e7a5      	b.n	b5e78 <_ZN7VL53L1X27VL53L1X_SetTimingBudgetInMsEt+0x60>
			VL53L1_WrWord(Device, RANGE_CONFIG__TIMEOUT_MACROP_A_HI,
   b5f2c:	f44f 73e6 	mov.w	r3, #460	; 0x1cc
   b5f30:	69a1      	ldr	r1, [r4, #24]
   b5f32:	225e      	movs	r2, #94	; 0x5e
   b5f34:	4620      	mov	r0, r4
   b5f36:	f7ff fe8c 	bl	b5c52 <_ZN7VL53L1X13VL53L1_WrWordEP12VL53L1_Dev_ttt>
			VL53L1_WrWord(Device, RANGE_CONFIG__TIMEOUT_MACROP_B_HI,
   b5f3a:	f44f 73f5 	mov.w	r3, #490	; 0x1ea
   b5f3e:	e79b      	b.n	b5e78 <_ZN7VL53L1X27VL53L1X_SetTimingBudgetInMsEt+0x60>
			VL53L1_WrWord(Device, RANGE_CONFIG__TIMEOUT_MACROP_A_HI,
   b5f40:	f240 23d9 	movw	r3, #729	; 0x2d9
   b5f44:	69a1      	ldr	r1, [r4, #24]
   b5f46:	225e      	movs	r2, #94	; 0x5e
   b5f48:	4620      	mov	r0, r4
   b5f4a:	f7ff fe82 	bl	b5c52 <_ZN7VL53L1X13VL53L1_WrWordEP12VL53L1_Dev_ttt>
			VL53L1_WrWord(Device, RANGE_CONFIG__TIMEOUT_MACROP_B_HI,
   b5f4e:	f44f 733e 	mov.w	r3, #760	; 0x2f8
   b5f52:	e791      	b.n	b5e78 <_ZN7VL53L1X27VL53L1X_SetTimingBudgetInMsEt+0x60>

000b5f54 <_ZN7VL53L1X13VL53L1_RdWordEP12VL53L1_Dev_ttPt>:
{
   b5f54:	b51f      	push	{r0, r1, r2, r3, r4, lr}
   b5f56:	461c      	mov	r4, r3
	uint8_t buffer[2] = {0, 0};
   b5f58:	2300      	movs	r3, #0
   b5f5a:	f8ad 300c 	strh.w	r3, [sp, #12]
	status = VL53L1_I2CRead(Dev->I2cDevAddr, index, buffer, 2);
   b5f5e:	2302      	movs	r3, #2
   b5f60:	7809      	ldrb	r1, [r1, #0]
   b5f62:	9300      	str	r3, [sp, #0]
   b5f64:	ab03      	add	r3, sp, #12
   b5f66:	f7ff fe96 	bl	b5c96 <_ZN7VL53L1X14VL53L1_I2CReadEhtPht>
	if (!status)
   b5f6a:	b930      	cbnz	r0, b5f7a <_ZN7VL53L1X13VL53L1_RdWordEP12VL53L1_Dev_ttPt+0x26>
		*data = (buffer[0] << 8) + buffer[1];
   b5f6c:	f89d 200c 	ldrb.w	r2, [sp, #12]
   b5f70:	f89d 300d 	ldrb.w	r3, [sp, #13]
   b5f74:	eb03 2302 	add.w	r3, r3, r2, lsl #8
   b5f78:	8023      	strh	r3, [r4, #0]
}
   b5f7a:	b004      	add	sp, #16
   b5f7c:	bd10      	pop	{r4, pc}

000b5f7e <_ZN7VL53L1X27VL53L1X_GetTimingBudgetInMsEPt>:
{
   b5f7e:	b513      	push	{r0, r1, r4, lr}
	status = VL53L1_RdWord(Device, RANGE_CONFIG__TIMEOUT_MACROP_A_HI, &Temp);
   b5f80:	225e      	movs	r2, #94	; 0x5e
   b5f82:	f10d 0306 	add.w	r3, sp, #6
{
   b5f86:	460c      	mov	r4, r1
	status = VL53L1_RdWord(Device, RANGE_CONFIG__TIMEOUT_MACROP_A_HI, &Temp);
   b5f88:	6981      	ldr	r1, [r0, #24]
   b5f8a:	f7ff ffe3 	bl	b5f54 <_ZN7VL53L1X13VL53L1_RdWordEP12VL53L1_Dev_ttPt>
	switch (Temp)
   b5f8e:	f8bd 3006 	ldrh.w	r3, [sp, #6]
   b5f92:	f5b3 7fd7 	cmp.w	r3, #430	; 0x1ae
   b5f96:	d034      	beq.n	b6002 <_ZN7VL53L1X27VL53L1X_GetTimingBudgetInMsEPt+0x84>
   b5f98:	d810      	bhi.n	b5fbc <_ZN7VL53L1X27VL53L1X_GetTimingBudgetInMsEPt+0x3e>
   b5f9a:	2b51      	cmp	r3, #81	; 0x51
   b5f9c:	d02f      	beq.n	b5ffe <_ZN7VL53L1X27VL53L1X_GetTimingBudgetInMsEPt+0x80>
   b5f9e:	d805      	bhi.n	b5fac <_ZN7VL53L1X27VL53L1X_GetTimingBudgetInMsEPt+0x2e>
   b5fa0:	2b1d      	cmp	r3, #29
   b5fa2:	d028      	beq.n	b5ff6 <_ZN7VL53L1X27VL53L1X_GetTimingBudgetInMsEPt+0x78>
   b5fa4:	2b1e      	cmp	r3, #30
   b5fa6:	d02a      	beq.n	b5ffe <_ZN7VL53L1X27VL53L1X_GetTimingBudgetInMsEPt+0x80>
		*pTimingBudget = 0;
   b5fa8:	2300      	movs	r3, #0
   b5faa:	e025      	b.n	b5ff8 <_ZN7VL53L1X27VL53L1X_GetTimingBudgetInMsEPt+0x7a>
	switch (Temp)
   b5fac:	2bad      	cmp	r3, #173	; 0xad
   b5fae:	d028      	beq.n	b6002 <_ZN7VL53L1X27VL53L1X_GetTimingBudgetInMsEPt+0x84>
   b5fb0:	2bd6      	cmp	r3, #214	; 0xd6
   b5fb2:	d001      	beq.n	b5fb8 <_ZN7VL53L1X27VL53L1X_GetTimingBudgetInMsEPt+0x3a>
   b5fb4:	2b60      	cmp	r3, #96	; 0x60
   b5fb6:	d1f7      	bne.n	b5fa8 <_ZN7VL53L1X27VL53L1X_GetTimingBudgetInMsEPt+0x2a>
		*pTimingBudget = 33;
   b5fb8:	2321      	movs	r3, #33	; 0x21
   b5fba:	e01d      	b.n	b5ff8 <_ZN7VL53L1X27VL53L1X_GetTimingBudgetInMsEPt+0x7a>
	switch (Temp)
   b5fbc:	f240 32e1 	movw	r2, #993	; 0x3e1
   b5fc0:	4293      	cmp	r3, r2
   b5fc2:	d020      	beq.n	b6006 <_ZN7VL53L1X27VL53L1X_GetTimingBudgetInMsEPt+0x88>
   b5fc4:	d80c      	bhi.n	b5fe0 <_ZN7VL53L1X27VL53L1X_GetTimingBudgetInMsEPt+0x62>
   b5fc6:	f240 22d9 	movw	r2, #729	; 0x2d9
   b5fca:	4293      	cmp	r3, r2
   b5fcc:	d01b      	beq.n	b6006 <_ZN7VL53L1X27VL53L1X_GetTimingBudgetInMsEPt+0x88>
   b5fce:	f240 22e1 	movw	r2, #737	; 0x2e1
   b5fd2:	4293      	cmp	r3, r2
   b5fd4:	d002      	beq.n	b5fdc <_ZN7VL53L1X27VL53L1X_GetTimingBudgetInMsEPt+0x5e>
   b5fd6:	f5b3 7fe6 	cmp.w	r3, #460	; 0x1cc
   b5fda:	d1e5      	bne.n	b5fa8 <_ZN7VL53L1X27VL53L1X_GetTimingBudgetInMsEPt+0x2a>
		*pTimingBudget = 100;
   b5fdc:	2364      	movs	r3, #100	; 0x64
   b5fde:	e00b      	b.n	b5ff8 <_ZN7VL53L1X27VL53L1X_GetTimingBudgetInMsEPt+0x7a>
	switch (Temp)
   b5fe0:	f240 428f 	movw	r2, #1167	; 0x48f
   b5fe4:	4293      	cmp	r3, r2
   b5fe6:	d003      	beq.n	b5ff0 <_ZN7VL53L1X27VL53L1X_GetTimingBudgetInMsEPt+0x72>
   b5fe8:	f240 5291 	movw	r2, #1425	; 0x591
   b5fec:	4293      	cmp	r3, r2
   b5fee:	d1db      	bne.n	b5fa8 <_ZN7VL53L1X27VL53L1X_GetTimingBudgetInMsEPt+0x2a>
		*pTimingBudget = 500;
   b5ff0:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
   b5ff4:	e000      	b.n	b5ff8 <_ZN7VL53L1X27VL53L1X_GetTimingBudgetInMsEPt+0x7a>
		*pTimingBudget = 15;
   b5ff6:	230f      	movs	r3, #15
		*pTimingBudget = 0;
   b5ff8:	8023      	strh	r3, [r4, #0]
}
   b5ffa:	b002      	add	sp, #8
   b5ffc:	bd10      	pop	{r4, pc}
		*pTimingBudget = 20;
   b5ffe:	2314      	movs	r3, #20
   b6000:	e7fa      	b.n	b5ff8 <_ZN7VL53L1X27VL53L1X_GetTimingBudgetInMsEPt+0x7a>
		*pTimingBudget = 50;
   b6002:	2332      	movs	r3, #50	; 0x32
   b6004:	e7f8      	b.n	b5ff8 <_ZN7VL53L1X27VL53L1X_GetTimingBudgetInMsEPt+0x7a>
		*pTimingBudget = 200;
   b6006:	23c8      	movs	r3, #200	; 0xc8
   b6008:	e7f6      	b.n	b5ff8 <_ZN7VL53L1X27VL53L1X_GetTimingBudgetInMsEPt+0x7a>

000b600a <_ZN7VL53L1X23VL53L1X_SetDistanceModeEt>:
{
   b600a:	b537      	push	{r0, r1, r2, r4, r5, lr}
   b600c:	460d      	mov	r5, r1
	status = VL53L1X_GetTimingBudgetInMs(&TB);
   b600e:	f10d 0106 	add.w	r1, sp, #6
{
   b6012:	4604      	mov	r4, r0
	status = VL53L1X_GetTimingBudgetInMs(&TB);
   b6014:	f7ff ffb3 	bl	b5f7e <_ZN7VL53L1X27VL53L1X_GetTimingBudgetInMsEPt>
	switch (DM)
   b6018:	2d01      	cmp	r5, #1
   b601a:	d008      	beq.n	b602e <_ZN7VL53L1X23VL53L1X_SetDistanceModeEt+0x24>
   b601c:	2d02      	cmp	r5, #2
   b601e:	d02d      	beq.n	b607c <_ZN7VL53L1X23VL53L1X_SetDistanceModeEt+0x72>
	status = VL53L1X_SetTimingBudgetInMs(TB);
   b6020:	f8bd 1006 	ldrh.w	r1, [sp, #6]
   b6024:	4620      	mov	r0, r4
   b6026:	f7ff fef7 	bl	b5e18 <_ZN7VL53L1X27VL53L1X_SetTimingBudgetInMsEt>
}
   b602a:	b003      	add	sp, #12
   b602c:	bd30      	pop	{r4, r5, pc}
		status = VL53L1_WrByte(Device, PHASECAL_CONFIG__TIMEOUT_MACROP, 0x14);
   b602e:	69a1      	ldr	r1, [r4, #24]
   b6030:	2314      	movs	r3, #20
   b6032:	224b      	movs	r2, #75	; 0x4b
   b6034:	4620      	mov	r0, r4
   b6036:	f7ff fdce 	bl	b5bd6 <_ZN7VL53L1X13VL53L1_WrByteEP12VL53L1_Dev_tth>
		status = VL53L1_WrByte(Device, RANGE_CONFIG__VCSEL_PERIOD_A, 0x07);
   b603a:	69a1      	ldr	r1, [r4, #24]
   b603c:	2307      	movs	r3, #7
   b603e:	2260      	movs	r2, #96	; 0x60
   b6040:	4620      	mov	r0, r4
   b6042:	f7ff fdc8 	bl	b5bd6 <_ZN7VL53L1X13VL53L1_WrByteEP12VL53L1_Dev_tth>
		status = VL53L1_WrByte(Device, RANGE_CONFIG__VCSEL_PERIOD_B, 0x05);
   b6046:	69a1      	ldr	r1, [r4, #24]
   b6048:	2305      	movs	r3, #5
   b604a:	2263      	movs	r2, #99	; 0x63
   b604c:	4620      	mov	r0, r4
   b604e:	f7ff fdc2 	bl	b5bd6 <_ZN7VL53L1X13VL53L1_WrByteEP12VL53L1_Dev_tth>
		status = VL53L1_WrByte(Device, RANGE_CONFIG__VALID_PHASE_HIGH, 0x38);
   b6052:	69a1      	ldr	r1, [r4, #24]
   b6054:	2338      	movs	r3, #56	; 0x38
   b6056:	2269      	movs	r2, #105	; 0x69
   b6058:	4620      	mov	r0, r4
   b605a:	f7ff fdbc 	bl	b5bd6 <_ZN7VL53L1X13VL53L1_WrByteEP12VL53L1_Dev_tth>
		status = VL53L1_WrWord(Device, SD_CONFIG__WOI_SD0, 0x0705);
   b605e:	f240 7305 	movw	r3, #1797	; 0x705
   b6062:	69a1      	ldr	r1, [r4, #24]
   b6064:	2278      	movs	r2, #120	; 0x78
   b6066:	4620      	mov	r0, r4
   b6068:	f7ff fdf3 	bl	b5c52 <_ZN7VL53L1X13VL53L1_WrWordEP12VL53L1_Dev_ttt>
		status = VL53L1_WrWord(Device, SD_CONFIG__INITIAL_PHASE_SD0, 0x0606);
   b606c:	f240 6306 	movw	r3, #1542	; 0x606
		status = VL53L1_WrWord(Device, SD_CONFIG__INITIAL_PHASE_SD0, 0x0E0E);
   b6070:	69a1      	ldr	r1, [r4, #24]
   b6072:	227a      	movs	r2, #122	; 0x7a
   b6074:	4620      	mov	r0, r4
   b6076:	f7ff fdec 	bl	b5c52 <_ZN7VL53L1X13VL53L1_WrWordEP12VL53L1_Dev_ttt>
		break;
   b607a:	e7d1      	b.n	b6020 <_ZN7VL53L1X23VL53L1X_SetDistanceModeEt+0x16>
		status = VL53L1_WrByte(Device, PHASECAL_CONFIG__TIMEOUT_MACROP, 0x0A);
   b607c:	69a1      	ldr	r1, [r4, #24]
   b607e:	230a      	movs	r3, #10
   b6080:	224b      	movs	r2, #75	; 0x4b
   b6082:	4620      	mov	r0, r4
   b6084:	f7ff fda7 	bl	b5bd6 <_ZN7VL53L1X13VL53L1_WrByteEP12VL53L1_Dev_tth>
		status = VL53L1_WrByte(Device, RANGE_CONFIG__VCSEL_PERIOD_A, 0x0F);
   b6088:	69a1      	ldr	r1, [r4, #24]
   b608a:	230f      	movs	r3, #15
   b608c:	2260      	movs	r2, #96	; 0x60
   b608e:	4620      	mov	r0, r4
   b6090:	f7ff fda1 	bl	b5bd6 <_ZN7VL53L1X13VL53L1_WrByteEP12VL53L1_Dev_tth>
		status = VL53L1_WrByte(Device, RANGE_CONFIG__VCSEL_PERIOD_B, 0x0D);
   b6094:	69a1      	ldr	r1, [r4, #24]
   b6096:	230d      	movs	r3, #13
   b6098:	2263      	movs	r2, #99	; 0x63
   b609a:	4620      	mov	r0, r4
   b609c:	f7ff fd9b 	bl	b5bd6 <_ZN7VL53L1X13VL53L1_WrByteEP12VL53L1_Dev_tth>
		status = VL53L1_WrByte(Device, RANGE_CONFIG__VALID_PHASE_HIGH, 0xB8);
   b60a0:	69a1      	ldr	r1, [r4, #24]
   b60a2:	23b8      	movs	r3, #184	; 0xb8
   b60a4:	2269      	movs	r2, #105	; 0x69
   b60a6:	4620      	mov	r0, r4
   b60a8:	f7ff fd95 	bl	b5bd6 <_ZN7VL53L1X13VL53L1_WrByteEP12VL53L1_Dev_tth>
		status = VL53L1_WrWord(Device, SD_CONFIG__WOI_SD0, 0x0F0D);
   b60ac:	f640 730d 	movw	r3, #3853	; 0xf0d
   b60b0:	69a1      	ldr	r1, [r4, #24]
   b60b2:	2278      	movs	r2, #120	; 0x78
   b60b4:	4620      	mov	r0, r4
   b60b6:	f7ff fdcc 	bl	b5c52 <_ZN7VL53L1X13VL53L1_WrWordEP12VL53L1_Dev_ttt>
		status = VL53L1_WrWord(Device, SD_CONFIG__INITIAL_PHASE_SD0, 0x0E0E);
   b60ba:	f640 630e 	movw	r3, #3598	; 0xe0e
   b60be:	e7d7      	b.n	b6070 <_ZN7VL53L1X23VL53L1X_SetDistanceModeEt+0x66>

000b60c0 <_ZN7VL53L1X31VL53L1X_SetInterMeasurementInMsEt>:
{
   b60c0:	b573      	push	{r0, r1, r4, r5, r6, lr}
	status = VL53L1_RdWord(Device, VL53L1_RESULT__OSC_CALIBRATE_VAL, &ClockPLL);
   b60c2:	22de      	movs	r2, #222	; 0xde
{
   b60c4:	460e      	mov	r6, r1
	status = VL53L1_RdWord(Device, VL53L1_RESULT__OSC_CALIBRATE_VAL, &ClockPLL);
   b60c6:	f10d 0306 	add.w	r3, sp, #6
   b60ca:	6981      	ldr	r1, [r0, #24]
{
   b60cc:	4604      	mov	r4, r0
	status = VL53L1_RdWord(Device, VL53L1_RESULT__OSC_CALIBRATE_VAL, &ClockPLL);
   b60ce:	f7ff ff41 	bl	b5f54 <_ZN7VL53L1X13VL53L1_RdWordEP12VL53L1_Dev_ttPt>
	ClockPLL = ClockPLL & 0x3FF;
   b60d2:	f8bd 3006 	ldrh.w	r3, [sp, #6]
   b60d6:	f3c3 0309 	ubfx	r3, r3, #0, #10
	status = VL53L1_RdWord(Device, VL53L1_RESULT__OSC_CALIBRATE_VAL, &ClockPLL);
   b60da:	4605      	mov	r5, r0
				   (uint32_t)(ClockPLL * InterMeasMs * 1.075));
   b60dc:	fb06 f003 	mul.w	r0, r6, r3
	ClockPLL = ClockPLL & 0x3FF;
   b60e0:	f8ad 3006 	strh.w	r3, [sp, #6]
				   (uint32_t)(ClockPLL * InterMeasMs * 1.075));
   b60e4:	f001 fdee 	bl	b7cc4 <__aeabi_i2d>
   b60e8:	a307      	add	r3, pc, #28	; (adr r3, b6108 <_ZN7VL53L1X31VL53L1X_SetInterMeasurementInMsEt+0x48>)
   b60ea:	e9d3 2300 	ldrd	r2, r3, [r3]
   b60ee:	f001 fe53 	bl	b7d98 <__aeabi_dmul>
	VL53L1_WrDWord(Device, VL53L1_SYSTEM__INTERMEASUREMENT_PERIOD,
   b60f2:	f002 f8eb 	bl	b82cc <__aeabi_d2uiz>
   b60f6:	69a1      	ldr	r1, [r4, #24]
   b60f8:	4603      	mov	r3, r0
   b60fa:	226c      	movs	r2, #108	; 0x6c
   b60fc:	4620      	mov	r0, r4
   b60fe:	f7ff fdb6 	bl	b5c6e <_ZN7VL53L1X14VL53L1_WrDWordEP12VL53L1_Dev_ttm>
}
   b6102:	4628      	mov	r0, r5
   b6104:	b002      	add	sp, #8
   b6106:	bd70      	pop	{r4, r5, r6, pc}
   b6108:	33333333 	.word	0x33333333
   b610c:	3ff13333 	.word	0x3ff13333

000b6110 <_ZN7VL53L1X19VL53L1X_GetSensorIdEPt>:
{
   b6110:	b513      	push	{r0, r1, r4, lr}
	uint16_t tmp = 0;
   b6112:	2300      	movs	r3, #0
{
   b6114:	460c      	mov	r4, r1
	uint16_t tmp = 0;
   b6116:	f8ad 3006 	strh.w	r3, [sp, #6]
	status = VL53L1_RdWord(Device, VL53L1_IDENTIFICATION__MODEL_ID, &tmp);
   b611a:	6981      	ldr	r1, [r0, #24]
   b611c:	f10d 0306 	add.w	r3, sp, #6
   b6120:	f240 120f 	movw	r2, #271	; 0x10f
   b6124:	f7ff ff16 	bl	b5f54 <_ZN7VL53L1X13VL53L1_RdWordEP12VL53L1_Dev_ttPt>
	*sensorId = tmp;
   b6128:	f8bd 3006 	ldrh.w	r3, [sp, #6]
   b612c:	8023      	strh	r3, [r4, #0]
}
   b612e:	b002      	add	sp, #8
   b6130:	bd10      	pop	{r4, pc}

000b6132 <_ZN7VL53L1X19VL53L1X_GetDistanceEPt>:
{
   b6132:	b513      	push	{r0, r1, r4, lr}
	status = (VL53L1_RdWord(Device,
   b6134:	2296      	movs	r2, #150	; 0x96
{
   b6136:	460c      	mov	r4, r1
	status = (VL53L1_RdWord(Device,
   b6138:	f10d 0306 	add.w	r3, sp, #6
   b613c:	6981      	ldr	r1, [r0, #24]
   b613e:	f7ff ff09 	bl	b5f54 <_ZN7VL53L1X13VL53L1_RdWordEP12VL53L1_Dev_ttPt>
	*distance = tmp;
   b6142:	f8bd 3006 	ldrh.w	r3, [sp, #6]
   b6146:	8023      	strh	r3, [r4, #0]
}
   b6148:	b002      	add	sp, #8
   b614a:	bd10      	pop	{r4, pc}

000b614c <os_mutex_recursive_create>:
DYNALIB_FN(13, hal_concurrent, os_mutex_destroy, int(os_mutex_t))
DYNALIB_FN(14, hal_concurrent, os_mutex_lock, int(os_mutex_t))
DYNALIB_FN(15, hal_concurrent, os_mutex_trylock, int(os_mutex_t))
DYNALIB_FN(16, hal_concurrent, os_mutex_unlock, int(os_mutex_t))

DYNALIB_FN(17, hal_concurrent, os_mutex_recursive_create, int(os_mutex_recursive_t*))
   b614c:	b508      	push	{r3, lr}
   b614e:	4b02      	ldr	r3, [pc, #8]	; (b6158 <os_mutex_recursive_create+0xc>)
   b6150:	681b      	ldr	r3, [r3, #0]
   b6152:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   b6154:	9301      	str	r3, [sp, #4]
   b6156:	bd08      	pop	{r3, pc}
   b6158:	00030248 	.word	0x00030248

000b615c <HAL_RNG_GetRandomNumber>:

DYNALIB_BEGIN(hal)

#if PLATFORM_ID > PLATFORM_GCC
DYNALIB_FN(0, hal, HAL_RNG_Configuration, void(void))
DYNALIB_FN(1, hal, HAL_RNG_GetRandomNumber, uint32_t(void))
   b615c:	b508      	push	{r3, lr}
   b615e:	4b02      	ldr	r3, [pc, #8]	; (b6168 <HAL_RNG_GetRandomNumber+0xc>)
   b6160:	681b      	ldr	r3, [r3, #0]
   b6162:	685b      	ldr	r3, [r3, #4]
   b6164:	9301      	str	r3, [sp, #4]
   b6166:	bd08      	pop	{r3, pc}
   b6168:	00030218 	.word	0x00030218

000b616c <HAL_Delay_Microseconds>:
#else
#define BASE_IDX 0
#endif // PLATFORM_ID > PLATFORM_GCC

DYNALIB_FN(BASE_IDX + 0, hal, HAL_Delay_Milliseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 1, hal, HAL_Delay_Microseconds, void(uint32_t))
   b616c:	b508      	push	{r3, lr}
   b616e:	4b02      	ldr	r3, [pc, #8]	; (b6178 <HAL_Delay_Microseconds+0xc>)
   b6170:	681b      	ldr	r3, [r3, #0]
   b6172:	68db      	ldr	r3, [r3, #12]
   b6174:	9301      	str	r3, [sp, #4]
   b6176:	bd08      	pop	{r3, pc}
   b6178:	00030218 	.word	0x00030218

000b617c <HAL_Timer_Get_Milli_Seconds>:
DYNALIB_FN(BASE_IDX + 2, hal, HAL_Timer_Get_Micro_Seconds, system_tick_t(void))
DYNALIB_FN(BASE_IDX + 3, hal, HAL_Timer_Get_Milli_Seconds, system_tick_t(void))
   b617c:	b508      	push	{r3, lr}
   b617e:	4b02      	ldr	r3, [pc, #8]	; (b6188 <HAL_Timer_Get_Milli_Seconds+0xc>)
   b6180:	681b      	ldr	r3, [r3, #0]
   b6182:	695b      	ldr	r3, [r3, #20]
   b6184:	9301      	str	r3, [sp, #4]
   b6186:	bd08      	pop	{r3, pc}
   b6188:	00030218 	.word	0x00030218

000b618c <HAL_Pin_Mode>:

DYNALIB_BEGIN(hal_gpio)

DYNALIB_FN(0, hal_gpio, HAL_Pin_Map, Hal_Pin_Info*(void))
DYNALIB_FN(1, hal_gpio, HAL_Validate_Pin_Function, PinFunction(pin_t, PinFunction))
DYNALIB_FN(2, hal_gpio, HAL_Pin_Mode, void(pin_t, PinMode))
   b618c:	b508      	push	{r3, lr}
   b618e:	4b02      	ldr	r3, [pc, #8]	; (b6198 <HAL_Pin_Mode+0xc>)
   b6190:	681b      	ldr	r3, [r3, #0]
   b6192:	689b      	ldr	r3, [r3, #8]
   b6194:	9301      	str	r3, [sp, #4]
   b6196:	bd08      	pop	{r3, pc}
   b6198:	0003022c 	.word	0x0003022c

000b619c <HAL_Get_Pin_Mode>:
DYNALIB_FN(3, hal_gpio, HAL_Get_Pin_Mode, PinMode(pin_t))
   b619c:	b508      	push	{r3, lr}
   b619e:	4b02      	ldr	r3, [pc, #8]	; (b61a8 <HAL_Get_Pin_Mode+0xc>)
   b61a0:	681b      	ldr	r3, [r3, #0]
   b61a2:	68db      	ldr	r3, [r3, #12]
   b61a4:	9301      	str	r3, [sp, #4]
   b61a6:	bd08      	pop	{r3, pc}
   b61a8:	0003022c 	.word	0x0003022c

000b61ac <HAL_GPIO_Write>:
DYNALIB_FN(4, hal_gpio, HAL_GPIO_Write, void(pin_t, uint8_t))
   b61ac:	b508      	push	{r3, lr}
   b61ae:	4b02      	ldr	r3, [pc, #8]	; (b61b8 <HAL_GPIO_Write+0xc>)
   b61b0:	681b      	ldr	r3, [r3, #0]
   b61b2:	691b      	ldr	r3, [r3, #16]
   b61b4:	9301      	str	r3, [sp, #4]
   b61b6:	bd08      	pop	{r3, pc}
   b61b8:	0003022c 	.word	0x0003022c

000b61bc <hal_i2c_begin>:
DYNALIB_BEGIN(hal_i2c)

DYNALIB_FN(0, hal_i2c, hal_i2c_set_speed, void(hal_i2c_interface_t, uint32_t, void*))
DYNALIB_FN(1, hal_i2c, hal_i2c_enable_dma_mode, void(hal_i2c_interface_t, bool, void*))
DYNALIB_FN(2, hal_i2c, hal_i2c_stretch_clock, void(hal_i2c_interface_t, bool, void*))
DYNALIB_FN(3, hal_i2c, hal_i2c_begin, void(hal_i2c_interface_t, hal_i2c_mode_t, uint8_t, void*))
   b61bc:	b508      	push	{r3, lr}
   b61be:	4b02      	ldr	r3, [pc, #8]	; (b61c8 <hal_i2c_begin+0xc>)
   b61c0:	681b      	ldr	r3, [r3, #0]
   b61c2:	68db      	ldr	r3, [r3, #12]
   b61c4:	9301      	str	r3, [sp, #4]
   b61c6:	bd08      	pop	{r3, pc}
   b61c8:	00030228 	.word	0x00030228

000b61cc <hal_i2c_begin_transmission>:
DYNALIB_FN(4, hal_i2c, hal_i2c_end, void(hal_i2c_interface_t, void*))
DYNALIB_FN(5, hal_i2c, hal_i2c_request, uint32_t(hal_i2c_interface_t, uint8_t, uint8_t, uint8_t, void*))
DYNALIB_FN(6, hal_i2c, hal_i2c_begin_transmission, void(hal_i2c_interface_t, uint8_t, const hal_i2c_transmission_config_t*))
   b61cc:	b508      	push	{r3, lr}
   b61ce:	4b02      	ldr	r3, [pc, #8]	; (b61d8 <hal_i2c_begin_transmission+0xc>)
   b61d0:	681b      	ldr	r3, [r3, #0]
   b61d2:	699b      	ldr	r3, [r3, #24]
   b61d4:	9301      	str	r3, [sp, #4]
   b61d6:	bd08      	pop	{r3, pc}
   b61d8:	00030228 	.word	0x00030228

000b61dc <hal_i2c_end_transmission>:
DYNALIB_FN(7, hal_i2c, hal_i2c_end_transmission, uint8_t(hal_i2c_interface_t, uint8_t, void*))
   b61dc:	b508      	push	{r3, lr}
   b61de:	4b02      	ldr	r3, [pc, #8]	; (b61e8 <hal_i2c_end_transmission+0xc>)
   b61e0:	681b      	ldr	r3, [r3, #0]
   b61e2:	69db      	ldr	r3, [r3, #28]
   b61e4:	9301      	str	r3, [sp, #4]
   b61e6:	bd08      	pop	{r3, pc}
   b61e8:	00030228 	.word	0x00030228

000b61ec <hal_i2c_write>:
DYNALIB_FN(8, hal_i2c, hal_i2c_write, uint32_t(hal_i2c_interface_t, uint8_t, void*))
   b61ec:	b508      	push	{r3, lr}
   b61ee:	4b02      	ldr	r3, [pc, #8]	; (b61f8 <hal_i2c_write+0xc>)
   b61f0:	681b      	ldr	r3, [r3, #0]
   b61f2:	6a1b      	ldr	r3, [r3, #32]
   b61f4:	9301      	str	r3, [sp, #4]
   b61f6:	bd08      	pop	{r3, pc}
   b61f8:	00030228 	.word	0x00030228

000b61fc <hal_i2c_available>:
DYNALIB_FN(9, hal_i2c, hal_i2c_available, int32_t(hal_i2c_interface_t, void*))
   b61fc:	b508      	push	{r3, lr}
   b61fe:	4b02      	ldr	r3, [pc, #8]	; (b6208 <hal_i2c_available+0xc>)
   b6200:	681b      	ldr	r3, [r3, #0]
   b6202:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   b6204:	9301      	str	r3, [sp, #4]
   b6206:	bd08      	pop	{r3, pc}
   b6208:	00030228 	.word	0x00030228

000b620c <hal_i2c_read>:
DYNALIB_FN(10, hal_i2c, hal_i2c_read, int32_t(hal_i2c_interface_t, void*))
   b620c:	b508      	push	{r3, lr}
   b620e:	4b02      	ldr	r3, [pc, #8]	; (b6218 <hal_i2c_read+0xc>)
   b6210:	681b      	ldr	r3, [r3, #0]
   b6212:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   b6214:	9301      	str	r3, [sp, #4]
   b6216:	bd08      	pop	{r3, pc}
   b6218:	00030228 	.word	0x00030228

000b621c <hal_i2c_peek>:
DYNALIB_FN(11, hal_i2c, hal_i2c_peek, int32_t(hal_i2c_interface_t, void*))
   b621c:	b508      	push	{r3, lr}
   b621e:	4b02      	ldr	r3, [pc, #8]	; (b6228 <hal_i2c_peek+0xc>)
   b6220:	681b      	ldr	r3, [r3, #0]
   b6222:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b6224:	9301      	str	r3, [sp, #4]
   b6226:	bd08      	pop	{r3, pc}
   b6228:	00030228 	.word	0x00030228

000b622c <hal_i2c_flush>:
DYNALIB_FN(12, hal_i2c, hal_i2c_flush, void(hal_i2c_interface_t, void*))
   b622c:	b508      	push	{r3, lr}
   b622e:	4b02      	ldr	r3, [pc, #8]	; (b6238 <hal_i2c_flush+0xc>)
   b6230:	681b      	ldr	r3, [r3, #0]
   b6232:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   b6234:	9301      	str	r3, [sp, #4]
   b6236:	bd08      	pop	{r3, pc}
   b6238:	00030228 	.word	0x00030228

000b623c <hal_i2c_is_enabled>:
DYNALIB_FN(13, hal_i2c, hal_i2c_is_enabled, bool(hal_i2c_interface_t, void*))
   b623c:	b508      	push	{r3, lr}
   b623e:	4b02      	ldr	r3, [pc, #8]	; (b6248 <hal_i2c_is_enabled+0xc>)
   b6240:	681b      	ldr	r3, [r3, #0]
   b6242:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   b6244:	9301      	str	r3, [sp, #4]
   b6246:	bd08      	pop	{r3, pc}
   b6248:	00030228 	.word	0x00030228

000b624c <hal_i2c_init>:
DYNALIB_FN(14, hal_i2c, hal_i2c_set_callback_on_received, void(hal_i2c_interface_t, void(*)(int), void*))
DYNALIB_FN(15, hal_i2c, hal_i2c_set_callback_on_requested, void(hal_i2c_interface_t, void(*)(void), void*))
DYNALIB_FN(16, hal_i2c, hal_i2c_init, int(hal_i2c_interface_t, const hal_i2c_config_t*))
   b624c:	b508      	push	{r3, lr}
   b624e:	4b02      	ldr	r3, [pc, #8]	; (b6258 <hal_i2c_init+0xc>)
   b6250:	681b      	ldr	r3, [r3, #0]
   b6252:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b6254:	9301      	str	r3, [sp, #4]
   b6256:	bd08      	pop	{r3, pc}
   b6258:	00030228 	.word	0x00030228

000b625c <hal_i2c_request_ex>:
DYNALIB_FN(17, hal_i2c, hal_i2c_reset, uint8_t(hal_i2c_interface_t, uint32_t, void*))
DYNALIB_FN(18, hal_i2c, hal_i2c_lock, int32_t(hal_i2c_interface_t, void*))
DYNALIB_FN(19, hal_i2c, hal_i2c_unlock, int32_t(hal_i2c_interface_t, void*))
DYNALIB_FN(20, hal_i2c, hal_i2c_request_ex, int32_t(hal_i2c_interface_t, const hal_i2c_transmission_config_t*, void*))
   b625c:	b508      	push	{r3, lr}
   b625e:	4b02      	ldr	r3, [pc, #8]	; (b6268 <hal_i2c_request_ex+0xc>)
   b6260:	681b      	ldr	r3, [r3, #0]
   b6262:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   b6264:	9301      	str	r3, [sp, #4]
   b6266:	bd08      	pop	{r3, pc}
   b6268:	00030228 	.word	0x00030228

000b626c <inet_inet_ntop>:
DYNALIB_FN(0, hal_inet, inet_inet_addr, in_addr_t(const char*))
DYNALIB_FN(1, hal_inet, inet_inet_aton, int(const char*, struct in_addr*))
DYNALIB_FN(2, hal_inet, inet_inet_network, in_addr_t(const char*))
DYNALIB_FN(3, hal_inet, inet_inet_ntoa, char*(struct in_addr))
DYNALIB_FN(4, hal_inet, inet_inet_ntoa_r, char*(struct in_addr, char*, socklen_t))
DYNALIB_FN(5, hal_inet, inet_inet_ntop, const char*(int, const void*, char*, socklen_t))
   b626c:	b508      	push	{r3, lr}
   b626e:	4b02      	ldr	r3, [pc, #8]	; (b6278 <inet_inet_ntop+0xc>)
   b6270:	681b      	ldr	r3, [r3, #0]
   b6272:	695b      	ldr	r3, [r3, #20]
   b6274:	9301      	str	r3, [sp, #4]
   b6276:	bd08      	pop	{r3, pc}
   b6278:	00030264 	.word	0x00030264

000b627c <netdb_freeaddrinfo>:

DYNALIB_BEGIN(hal_netdb)

DYNALIB_FN(0, hal_netdb, netdb_gethostbyname, struct hostent*(const char*))
DYNALIB_FN(1, hal_netdb, netdb_gethostbyname_r, int(const char*, struct hostent*, char*, size_t, struct hostent**, int*))
DYNALIB_FN(2, hal_netdb, netdb_freeaddrinfo, void(struct addrinfo*))
   b627c:	b508      	push	{r3, lr}
   b627e:	4b02      	ldr	r3, [pc, #8]	; (b6288 <netdb_freeaddrinfo+0xc>)
   b6280:	681b      	ldr	r3, [r3, #0]
   b6282:	689b      	ldr	r3, [r3, #8]
   b6284:	9301      	str	r3, [sp, #4]
   b6286:	bd08      	pop	{r3, pc}
   b6288:	00030268 	.word	0x00030268

000b628c <netdb_getaddrinfo>:
DYNALIB_FN(3, hal_netdb, netdb_getaddrinfo, int(const char*, const char*, const struct addrinfo*, struct addrinfo**))
   b628c:	b508      	push	{r3, lr}
   b628e:	4b02      	ldr	r3, [pc, #8]	; (b6298 <netdb_getaddrinfo+0xc>)
   b6290:	681b      	ldr	r3, [r3, #0]
   b6292:	68db      	ldr	r3, [r3, #12]
   b6294:	9301      	str	r3, [sp, #4]
   b6296:	bd08      	pop	{r3, pc}
   b6298:	00030268 	.word	0x00030268

000b629c <hal_spi_begin>:
// New HAL functions must be added to the end of this list.
// GNINRAW

DYNALIB_BEGIN(hal_spi)

DYNALIB_FN(0, hal_spi, hal_spi_begin, void(hal_spi_interface_t, uint16_t))
   b629c:	b508      	push	{r3, lr}
   b629e:	4b02      	ldr	r3, [pc, #8]	; (b62a8 <hal_spi_begin+0xc>)
   b62a0:	681b      	ldr	r3, [r3, #0]
   b62a2:	681b      	ldr	r3, [r3, #0]
   b62a4:	9301      	str	r3, [sp, #4]
   b62a6:	bd08      	pop	{r3, pc}
   b62a8:	00030230 	.word	0x00030230

000b62ac <hal_spi_transfer>:
DYNALIB_FN(1, hal_spi, hal_spi_end, void(hal_spi_interface_t))
DYNALIB_FN(2, hal_spi, hal_spi_set_bit_order, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(3, hal_spi, hal_spi_set_data_mode, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(4, hal_spi, hal_spi_set_clock_divider, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(5, hal_spi, hal_spi_transfer, uint16_t(hal_spi_interface_t, uint16_t))
   b62ac:	b508      	push	{r3, lr}
   b62ae:	4b02      	ldr	r3, [pc, #8]	; (b62b8 <hal_spi_transfer+0xc>)
   b62b0:	681b      	ldr	r3, [r3, #0]
   b62b2:	695b      	ldr	r3, [r3, #20]
   b62b4:	9301      	str	r3, [sp, #4]
   b62b6:	bd08      	pop	{r3, pc}
   b62b8:	00030230 	.word	0x00030230

000b62bc <hal_spi_init>:
DYNALIB_FN(6, hal_spi, hal_spi_is_enabled_deprecated, bool(void))
DYNALIB_FN(7, hal_spi, hal_spi_init, void(hal_spi_interface_t))
   b62bc:	b508      	push	{r3, lr}
   b62be:	4b02      	ldr	r3, [pc, #8]	; (b62c8 <hal_spi_init+0xc>)
   b62c0:	681b      	ldr	r3, [r3, #0]
   b62c2:	69db      	ldr	r3, [r3, #28]
   b62c4:	9301      	str	r3, [sp, #4]
   b62c6:	bd08      	pop	{r3, pc}
   b62c8:	00030230 	.word	0x00030230

000b62cc <hal_spi_is_enabled>:
DYNALIB_FN(8, hal_spi, hal_spi_is_enabled, bool(hal_spi_interface_t))
   b62cc:	b508      	push	{r3, lr}
   b62ce:	4b02      	ldr	r3, [pc, #8]	; (b62d8 <hal_spi_is_enabled+0xc>)
   b62d0:	681b      	ldr	r3, [r3, #0]
   b62d2:	6a1b      	ldr	r3, [r3, #32]
   b62d4:	9301      	str	r3, [sp, #4]
   b62d6:	bd08      	pop	{r3, pc}
   b62d8:	00030230 	.word	0x00030230

000b62dc <hal_spi_info>:
DYNALIB_FN(9, hal_spi, hal_spi_info, void(hal_spi_interface_t, hal_spi_info_t*, void*))
   b62dc:	b508      	push	{r3, lr}
   b62de:	4b02      	ldr	r3, [pc, #8]	; (b62e8 <hal_spi_info+0xc>)
   b62e0:	681b      	ldr	r3, [r3, #0]
   b62e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   b62e4:	9301      	str	r3, [sp, #4]
   b62e6:	bd08      	pop	{r3, pc}
   b62e8:	00030230 	.word	0x00030230

000b62ec <hal_spi_set_settings>:
DYNALIB_FN(10, hal_spi, hal_spi_transfer_dma, void(hal_spi_interface_t, const void*, void*, uint32_t, hal_spi_dma_user_callback))
DYNALIB_FN(11, hal_spi, hal_spi_begin_ext, void(hal_spi_interface_t, hal_spi_mode_t, uint16_t, void*))
DYNALIB_FN(12, hal_spi, hal_spi_set_callback_on_selected, void(hal_spi_interface_t, hal_spi_select_user_callback, void*))
DYNALIB_FN(13, hal_spi, hal_spi_transfer_dma_cancel, void(hal_spi_interface_t))
DYNALIB_FN(14, hal_spi, hal_spi_transfer_dma_status, int32_t(hal_spi_interface_t, hal_spi_transfer_status_t*))
DYNALIB_FN(15, hal_spi, hal_spi_set_settings, int32_t(hal_spi_interface_t, uint8_t, uint8_t, uint8_t, uint8_t, void*))
   b62ec:	b508      	push	{r3, lr}
   b62ee:	4b02      	ldr	r3, [pc, #8]	; (b62f8 <hal_spi_set_settings+0xc>)
   b62f0:	681b      	ldr	r3, [r3, #0]
   b62f2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   b62f4:	9301      	str	r3, [sp, #4]
   b62f6:	bd08      	pop	{r3, pc}
   b62f8:	00030230 	.word	0x00030230

000b62fc <hal_spi_acquire>:
#if HAL_PLATFORM_SPI_HAL_THREAD_SAFETY
DYNALIB_FN(16, hal_spi, hal_spi_acquire, int32_t(hal_spi_interface_t, const hal_spi_acquire_config_t*))
   b62fc:	b508      	push	{r3, lr}
   b62fe:	4b02      	ldr	r3, [pc, #8]	; (b6308 <hal_spi_acquire+0xc>)
   b6300:	681b      	ldr	r3, [r3, #0]
   b6302:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b6304:	9301      	str	r3, [sp, #4]
   b6306:	bd08      	pop	{r3, pc}
   b6308:	00030230 	.word	0x00030230

000b630c <hal_spi_release>:
DYNALIB_FN(17, hal_spi, hal_spi_release, int32_t(hal_spi_interface_t, void*))
   b630c:	b508      	push	{r3, lr}
   b630e:	4b02      	ldr	r3, [pc, #8]	; (b6318 <hal_spi_release+0xc>)
   b6310:	681b      	ldr	r3, [r3, #0]
   b6312:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   b6314:	9301      	str	r3, [sp, #4]
   b6316:	bd08      	pop	{r3, pc}
   b6318:	00030230 	.word	0x00030230

000b631c <hal_usart_write>:
#endif

DYNALIB_FN(BASE_IDX + 0, hal_usart, hal_usart_init, void(hal_usart_interface_t, hal_usart_ring_buffer_t*, hal_usart_ring_buffer_t*))
DYNALIB_FN(BASE_IDX + 1, hal_usart, hal_usart_begin, void(hal_usart_interface_t, uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal_usart, hal_usart_end, void(hal_usart_interface_t))
DYNALIB_FN(BASE_IDX + 3, hal_usart, hal_usart_write, uint32_t(hal_usart_interface_t, uint8_t))
   b631c:	b508      	push	{r3, lr}
   b631e:	4b02      	ldr	r3, [pc, #8]	; (b6328 <hal_usart_write+0xc>)
   b6320:	681b      	ldr	r3, [r3, #0]
   b6322:	68db      	ldr	r3, [r3, #12]
   b6324:	9301      	str	r3, [sp, #4]
   b6326:	bd08      	pop	{r3, pc}
   b6328:	0003023c 	.word	0x0003023c

000b632c <hal_usart_available>:
DYNALIB_FN(BASE_IDX + 4, hal_usart, hal_usart_available, int32_t(hal_usart_interface_t))
   b632c:	b508      	push	{r3, lr}
   b632e:	4b02      	ldr	r3, [pc, #8]	; (b6338 <hal_usart_available+0xc>)
   b6330:	681b      	ldr	r3, [r3, #0]
   b6332:	691b      	ldr	r3, [r3, #16]
   b6334:	9301      	str	r3, [sp, #4]
   b6336:	bd08      	pop	{r3, pc}
   b6338:	0003023c 	.word	0x0003023c

000b633c <hal_usart_read>:
DYNALIB_FN(BASE_IDX + 5, hal_usart, hal_usart_read, int32_t(hal_usart_interface_t))
   b633c:	b508      	push	{r3, lr}
   b633e:	4b02      	ldr	r3, [pc, #8]	; (b6348 <hal_usart_read+0xc>)
   b6340:	681b      	ldr	r3, [r3, #0]
   b6342:	695b      	ldr	r3, [r3, #20]
   b6344:	9301      	str	r3, [sp, #4]
   b6346:	bd08      	pop	{r3, pc}
   b6348:	0003023c 	.word	0x0003023c

000b634c <hal_usart_peek>:
DYNALIB_FN(BASE_IDX + 6, hal_usart, hal_usart_peek, int32_t(hal_usart_interface_t))
   b634c:	b508      	push	{r3, lr}
   b634e:	4b02      	ldr	r3, [pc, #8]	; (b6358 <hal_usart_peek+0xc>)
   b6350:	681b      	ldr	r3, [r3, #0]
   b6352:	699b      	ldr	r3, [r3, #24]
   b6354:	9301      	str	r3, [sp, #4]
   b6356:	bd08      	pop	{r3, pc}
   b6358:	0003023c 	.word	0x0003023c

000b635c <hal_usart_flush>:
DYNALIB_FN(BASE_IDX + 7, hal_usart, hal_usart_flush, void(hal_usart_interface_t))
   b635c:	b508      	push	{r3, lr}
   b635e:	4b02      	ldr	r3, [pc, #8]	; (b6368 <hal_usart_flush+0xc>)
   b6360:	681b      	ldr	r3, [r3, #0]
   b6362:	69db      	ldr	r3, [r3, #28]
   b6364:	9301      	str	r3, [sp, #4]
   b6366:	bd08      	pop	{r3, pc}
   b6368:	0003023c 	.word	0x0003023c

000b636c <hal_usart_is_enabled>:
DYNALIB_FN(BASE_IDX + 8, hal_usart, hal_usart_is_enabled, bool(hal_usart_interface_t))
   b636c:	b508      	push	{r3, lr}
   b636e:	4b02      	ldr	r3, [pc, #8]	; (b6378 <hal_usart_is_enabled+0xc>)
   b6370:	681b      	ldr	r3, [r3, #0]
   b6372:	6a1b      	ldr	r3, [r3, #32]
   b6374:	9301      	str	r3, [sp, #4]
   b6376:	bd08      	pop	{r3, pc}
   b6378:	0003023c 	.word	0x0003023c

000b637c <hal_usart_available_data_for_write>:
DYNALIB_FN(BASE_IDX + 9, hal_usart, hal_usart_half_duplex, void(hal_usart_interface_t, bool))
DYNALIB_FN(BASE_IDX + 10, hal_usart, hal_usart_available_data_for_write, int32_t(hal_usart_interface_t))
   b637c:	b508      	push	{r3, lr}
   b637e:	4b02      	ldr	r3, [pc, #8]	; (b6388 <hal_usart_available_data_for_write+0xc>)
   b6380:	681b      	ldr	r3, [r3, #0]
   b6382:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   b6384:	9301      	str	r3, [sp, #4]
   b6386:	bd08      	pop	{r3, pc}
   b6388:	0003023c 	.word	0x0003023c

000b638c <hal_usart_init_ex>:
DYNALIB_FN(BASE_IDX2 + 0, hal_usart, hal_usart_begin_config, void(hal_usart_interface_t serial, uint32_t baud, uint32_t config, void *ptr))
DYNALIB_FN(BASE_IDX2 + 1, hal_usart, hal_usart_write_nine_bits, uint32_t(hal_usart_interface_t serial, uint16_t data))
DYNALIB_FN(BASE_IDX2 + 2, hal_usart, hal_usart_send_break, void(hal_usart_interface_t, void*))
DYNALIB_FN(BASE_IDX2 + 3, hal_usart, hal_usart_break_detected, uint8_t(hal_usart_interface_t))
DYNALIB_FN(BASE_IDX2 + 4, hal_usart, hal_usart_sleep, int(hal_usart_interface_t serial, bool, void*))
DYNALIB_FN(BASE_IDX2 + 5, hal_usart, hal_usart_init_ex, int(hal_usart_interface_t, const hal_usart_buffer_config_t*, void*))
   b638c:	b508      	push	{r3, lr}
   b638e:	4b02      	ldr	r3, [pc, #8]	; (b6398 <hal_usart_init_ex+0xc>)
   b6390:	681b      	ldr	r3, [r3, #0]
   b6392:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b6394:	9301      	str	r3, [sp, #4]
   b6396:	bd08      	pop	{r3, pc}
   b6398:	0003023c 	.word	0x0003023c

000b639c <HAL_USB_USART_Init>:
// GNINRAW

DYNALIB_BEGIN(hal_usb)

#ifdef USB_CDC_ENABLE
DYNALIB_FN(0, hal_usb, HAL_USB_USART_Init, void(HAL_USB_USART_Serial, const HAL_USB_USART_Config*))
   b639c:	b508      	push	{r3, lr}
   b639e:	4b02      	ldr	r3, [pc, #8]	; (b63a8 <HAL_USB_USART_Init+0xc>)
   b63a0:	681b      	ldr	r3, [r3, #0]
   b63a2:	681b      	ldr	r3, [r3, #0]
   b63a4:	9301      	str	r3, [sp, #4]
   b63a6:	bd08      	pop	{r3, pc}
   b63a8:	0003024c 	.word	0x0003024c

000b63ac <HAL_USB_USART_Begin>:
DYNALIB_FN(1, hal_usb, HAL_USB_USART_Begin, void(HAL_USB_USART_Serial, uint32_t, void *))
   b63ac:	b508      	push	{r3, lr}
   b63ae:	4b02      	ldr	r3, [pc, #8]	; (b63b8 <HAL_USB_USART_Begin+0xc>)
   b63b0:	681b      	ldr	r3, [r3, #0]
   b63b2:	685b      	ldr	r3, [r3, #4]
   b63b4:	9301      	str	r3, [sp, #4]
   b63b6:	bd08      	pop	{r3, pc}
   b63b8:	0003024c 	.word	0x0003024c

000b63bc <HAL_USB_USART_Available_Data>:
DYNALIB_FN(2, hal_usb, HAL_USB_USART_End, void(HAL_USB_USART_Serial))
DYNALIB_FN(3, hal_usb, HAL_USB_USART_Baud_Rate, unsigned int(HAL_USB_USART_Serial))
DYNALIB_FN(4, hal_usb, HAL_USB_USART_Available_Data, int32_t(HAL_USB_USART_Serial))
   b63bc:	b508      	push	{r3, lr}
   b63be:	4b02      	ldr	r3, [pc, #8]	; (b63c8 <HAL_USB_USART_Available_Data+0xc>)
   b63c0:	681b      	ldr	r3, [r3, #0]
   b63c2:	691b      	ldr	r3, [r3, #16]
   b63c4:	9301      	str	r3, [sp, #4]
   b63c6:	bd08      	pop	{r3, pc}
   b63c8:	0003024c 	.word	0x0003024c

000b63cc <HAL_USB_USART_Available_Data_For_Write>:
DYNALIB_FN(5, hal_usb, HAL_USB_USART_Available_Data_For_Write, int32_t(HAL_USB_USART_Serial))
   b63cc:	b508      	push	{r3, lr}
   b63ce:	4b02      	ldr	r3, [pc, #8]	; (b63d8 <HAL_USB_USART_Available_Data_For_Write+0xc>)
   b63d0:	681b      	ldr	r3, [r3, #0]
   b63d2:	695b      	ldr	r3, [r3, #20]
   b63d4:	9301      	str	r3, [sp, #4]
   b63d6:	bd08      	pop	{r3, pc}
   b63d8:	0003024c 	.word	0x0003024c

000b63dc <HAL_USB_USART_Receive_Data>:
DYNALIB_FN(6, hal_usb, HAL_USB_USART_Receive_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   b63dc:	b508      	push	{r3, lr}
   b63de:	4b02      	ldr	r3, [pc, #8]	; (b63e8 <HAL_USB_USART_Receive_Data+0xc>)
   b63e0:	681b      	ldr	r3, [r3, #0]
   b63e2:	699b      	ldr	r3, [r3, #24]
   b63e4:	9301      	str	r3, [sp, #4]
   b63e6:	bd08      	pop	{r3, pc}
   b63e8:	0003024c 	.word	0x0003024c

000b63ec <HAL_USB_USART_Send_Data>:
DYNALIB_FN(7, hal_usb, HAL_USB_USART_Send_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   b63ec:	b508      	push	{r3, lr}
   b63ee:	4b02      	ldr	r3, [pc, #8]	; (b63f8 <HAL_USB_USART_Send_Data+0xc>)
   b63f0:	681b      	ldr	r3, [r3, #0]
   b63f2:	69db      	ldr	r3, [r3, #28]
   b63f4:	9301      	str	r3, [sp, #4]
   b63f6:	bd08      	pop	{r3, pc}
   b63f8:	0003024c 	.word	0x0003024c

000b63fc <HAL_USB_USART_Flush_Data>:
DYNALIB_FN(8, hal_usb, HAL_USB_USART_Flush_Data, void(HAL_USB_USART_Serial))
   b63fc:	b508      	push	{r3, lr}
   b63fe:	4b02      	ldr	r3, [pc, #8]	; (b6408 <HAL_USB_USART_Flush_Data+0xc>)
   b6400:	681b      	ldr	r3, [r3, #0]
   b6402:	6a1b      	ldr	r3, [r3, #32]
   b6404:	9301      	str	r3, [sp, #4]
   b6406:	bd08      	pop	{r3, pc}
   b6408:	0003024c 	.word	0x0003024c

000b640c <panic_>:
DYNALIB_FN(9, services, LED_Toggle, void(Led_TypeDef))
DYNALIB_FN(10, services, LED_Fade, void(Led_TypeDef))
DYNALIB_FN(11, services, Get_LED_Brightness, uint8_t(void))

DYNALIB_FN(12, services, set_logger_output, void(debug_output_fn, LoggerOutputLevel)) // Deprecated
DYNALIB_FN(13, services, panic_, void(ePanicCode, void*, void(*)(uint32_t)))
   b640c:	b508      	push	{r3, lr}
   b640e:	4b02      	ldr	r3, [pc, #8]	; (b6418 <panic_+0xc>)
   b6410:	681b      	ldr	r3, [r3, #0]
   b6412:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   b6414:	9301      	str	r3, [sp, #4]
   b6416:	bd08      	pop	{r3, pc}
   b6418:	00030260 	.word	0x00030260

000b641c <set_system_mode>:
#endif

DYNALIB_BEGIN(system)

DYNALIB_FN(0, system, system_mode, System_Mode_TypeDef(void))
DYNALIB_FN(1, system, set_system_mode, void(System_Mode_TypeDef))
   b641c:	b508      	push	{r3, lr}
   b641e:	4b02      	ldr	r3, [pc, #8]	; (b6428 <set_system_mode+0xc>)
   b6420:	681b      	ldr	r3, [r3, #0]
   b6422:	685b      	ldr	r3, [r3, #4]
   b6424:	9301      	str	r3, [sp, #4]
   b6426:	bd08      	pop	{r3, pc}
   b6428:	00030220 	.word	0x00030220

000b642c <system_delay_ms>:

DYNALIB_FN(2, system, set_ymodem_serial_flash_update_handler, void(ymodem_serial_flash_update_handler))
DYNALIB_FN(3, system, system_firmwareUpdate, bool(Stream*, void*))
DYNALIB_FN(4, system, system_fileTransfer, bool(system_file_transfer_t*, void*))

DYNALIB_FN(5, system, system_delay_ms, void(unsigned long, bool))
   b642c:	b508      	push	{r3, lr}
   b642e:	4b02      	ldr	r3, [pc, #8]	; (b6438 <system_delay_ms+0xc>)
   b6430:	681b      	ldr	r3, [r3, #0]
   b6432:	695b      	ldr	r3, [r3, #20]
   b6434:	9301      	str	r3, [sp, #4]
   b6436:	bd08      	pop	{r3, pc}
   b6438:	00030220 	.word	0x00030220

000b643c <application_thread_current>:
DYNALIB_FN(15, system, system_get_flag, int(system_flag_t, uint8_t*, void*))
DYNALIB_FN(16, system, Spark_Prepare_For_Firmware_Update, int(FileTransfer::Descriptor&, uint32_t, void*))
DYNALIB_FN(17, system, Spark_Save_Firmware_Chunk, int(FileTransfer::Descriptor&, const uint8_t*, void*))
DYNALIB_FN(18, system, Spark_Finish_Firmware_Update, int(FileTransfer::Descriptor&, uint32_t, void*))

DYNALIB_FN(19, system, application_thread_current, uint8_t(void*))
   b643c:	b508      	push	{r3, lr}
   b643e:	4b02      	ldr	r3, [pc, #8]	; (b6448 <application_thread_current+0xc>)
   b6440:	681b      	ldr	r3, [r3, #0]
   b6442:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   b6444:	9301      	str	r3, [sp, #4]
   b6446:	bd08      	pop	{r3, pc}
   b6448:	00030220 	.word	0x00030220

000b644c <application_thread_invoke>:
DYNALIB_FN(20, system, system_thread_current, uint8_t(void*))
DYNALIB_FN(21, system, application_thread_invoke, uint8_t(void(*)(void*), void*, void*))
   b644c:	b508      	push	{r3, lr}
   b644e:	4b02      	ldr	r3, [pc, #8]	; (b6458 <application_thread_invoke+0xc>)
   b6450:	681b      	ldr	r3, [r3, #0]
   b6452:	6d5b      	ldr	r3, [r3, #84]	; 0x54
   b6454:	9301      	str	r3, [sp, #4]
   b6456:	bd08      	pop	{r3, pc}
   b6458:	00030220 	.word	0x00030220

000b645c <system_ctrl_set_app_request_handler>:
DYNALIB_FN(BASE_IDX + 6, system, led_pattern_period, uint16_t(int, int, void*))
DYNALIB_FN(BASE_IDX + 7, system, system_set_tester_handlers, int(system_tester_handlers_t*, void*))
DYNALIB_FN(BASE_IDX + 8, system, system_format_diag_data, int(const uint16_t*, size_t, unsigned, appender_fn, void*, void*))

// Control requests
DYNALIB_FN(BASE_IDX + 9, system, system_ctrl_set_app_request_handler, int(ctrl_request_handler_fn, void*))
   b645c:	b508      	push	{r3, lr}
   b645e:	4b03      	ldr	r3, [pc, #12]	; (b646c <system_ctrl_set_app_request_handler+0x10>)
   b6460:	681b      	ldr	r3, [r3, #0]
   b6462:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
   b6466:	9301      	str	r3, [sp, #4]
   b6468:	bd08      	pop	{r3, pc}
   b646a:	0000      	.short	0x0000
   b646c:	00030220 	.word	0x00030220

000b6470 <system_ctrl_set_result>:
DYNALIB_FN(BASE_IDX + 10, system, system_ctrl_alloc_reply_data, int(ctrl_request*, size_t, void*))
DYNALIB_FN(BASE_IDX + 11, system, system_ctrl_free_request_data, void(ctrl_request*, void*))
DYNALIB_FN(BASE_IDX + 12, system, system_ctrl_set_result, void(ctrl_request*, int, ctrl_completion_handler_fn, void*, void*))
   b6470:	b508      	push	{r3, lr}
   b6472:	4b03      	ldr	r3, [pc, #12]	; (b6480 <system_ctrl_set_result+0x10>)
   b6474:	681b      	ldr	r3, [r3, #0]
   b6476:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
   b647a:	9301      	str	r3, [sp, #4]
   b647c:	bd08      	pop	{r3, pc}
   b647e:	0000      	.short	0x0000
   b6480:	00030220 	.word	0x00030220

000b6484 <spark_cloud_flag_connected>:
DYNALIB_FN(0, system_cloud, spark_variable, bool(const char*, const void*, Spark_Data_TypeDef, spark_variable_t*))
DYNALIB_FN(1, system_cloud, spark_function, bool(const char*, p_user_function_int_str_t, void*))
DYNALIB_FN(2, system_cloud, spark_process, void(void))
DYNALIB_FN(3, system_cloud, spark_cloud_flag_connect, void(void))
DYNALIB_FN(4, system_cloud, spark_cloud_flag_disconnect, void(void))
DYNALIB_FN(5, system_cloud, spark_cloud_flag_connected, bool(void))
   b6484:	b508      	push	{r3, lr}
   b6486:	4b02      	ldr	r3, [pc, #8]	; (b6490 <spark_cloud_flag_connected+0xc>)
   b6488:	681b      	ldr	r3, [r3, #0]
   b648a:	695b      	ldr	r3, [r3, #20]
   b648c:	9301      	str	r3, [sp, #4]
   b648e:	bd08      	pop	{r3, pc}
   b6490:	00030244 	.word	0x00030244

000b6494 <spark_send_event>:
DYNALIB_FN(6, system_cloud, system_cloud_protocol_instance, ProtocolFacade*(void))
DYNALIB_FN(7, system_cloud, spark_deviceID, String(void))
DYNALIB_FN(8, system_cloud, spark_send_event, bool(const char*, const char*, int, uint32_t, void*))
   b6494:	b508      	push	{r3, lr}
   b6496:	4b02      	ldr	r3, [pc, #8]	; (b64a0 <spark_send_event+0xc>)
   b6498:	681b      	ldr	r3, [r3, #0]
   b649a:	6a1b      	ldr	r3, [r3, #32]
   b649c:	9301      	str	r3, [sp, #4]
   b649e:	bd08      	pop	{r3, pc}
   b64a0:	00030244 	.word	0x00030244

000b64a4 <spark_set_random_seed_from_cloud_handler>:
DYNALIB_FN(10, system_cloud, spark_unsubscribe, void(void*))
DYNALIB_FN(11, system_cloud, spark_sync_time, bool(void*))
DYNALIB_FN(12, system_cloud, spark_sync_time_pending, bool(void*))
DYNALIB_FN(13, system_cloud, spark_sync_time_last, system_tick_t(time32_t*, time_t*))
DYNALIB_FN(14, system_cloud, spark_set_connection_property, int(unsigned, unsigned, const void*, void*))
DYNALIB_FN(15, system_cloud, spark_set_random_seed_from_cloud_handler, int(void (*handler)(unsigned int), void*))
   b64a4:	b508      	push	{r3, lr}
   b64a6:	4b02      	ldr	r3, [pc, #8]	; (b64b0 <spark_set_random_seed_from_cloud_handler+0xc>)
   b64a8:	681b      	ldr	r3, [r3, #0]
   b64aa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   b64ac:	9301      	str	r3, [sp, #4]
   b64ae:	bd08      	pop	{r3, pc}
   b64b0:	00030244 	.word	0x00030244

000b64b4 <network_connect>:
#endif

DYNALIB_BEGIN(system_net)

DYNALIB_FN(0, system_net, network_config, const void*(network_handle_t, uint32_t, void*))
DYNALIB_FN(1, system_net, network_connect, void(network_handle_t, uint32_t, uint32_t, void*))
   b64b4:	b508      	push	{r3, lr}
   b64b6:	4b02      	ldr	r3, [pc, #8]	; (b64c0 <network_connect+0xc>)
   b64b8:	681b      	ldr	r3, [r3, #0]
   b64ba:	685b      	ldr	r3, [r3, #4]
   b64bc:	9301      	str	r3, [sp, #4]
   b64be:	bd08      	pop	{r3, pc}
   b64c0:	00030240 	.word	0x00030240

000b64c4 <network_connecting>:
DYNALIB_FN(2, system_net, network_connecting, bool(network_handle_t, uint32_t, void*))
   b64c4:	b508      	push	{r3, lr}
   b64c6:	4b02      	ldr	r3, [pc, #8]	; (b64d0 <network_connecting+0xc>)
   b64c8:	681b      	ldr	r3, [r3, #0]
   b64ca:	689b      	ldr	r3, [r3, #8]
   b64cc:	9301      	str	r3, [sp, #4]
   b64ce:	bd08      	pop	{r3, pc}
   b64d0:	00030240 	.word	0x00030240

000b64d4 <network_disconnect>:
DYNALIB_FN(3, system_net, network_disconnect, void(network_handle_t, uint32_t, void*))
   b64d4:	b508      	push	{r3, lr}
   b64d6:	4b02      	ldr	r3, [pc, #8]	; (b64e0 <network_disconnect+0xc>)
   b64d8:	681b      	ldr	r3, [r3, #0]
   b64da:	68db      	ldr	r3, [r3, #12]
   b64dc:	9301      	str	r3, [sp, #4]
   b64de:	bd08      	pop	{r3, pc}
   b64e0:	00030240 	.word	0x00030240

000b64e4 <network_ready>:
DYNALIB_FN(4, system_net, network_ready, bool(network_handle_t, uint32_t, void*))
   b64e4:	b508      	push	{r3, lr}
   b64e6:	4b02      	ldr	r3, [pc, #8]	; (b64f0 <network_ready+0xc>)
   b64e8:	681b      	ldr	r3, [r3, #0]
   b64ea:	691b      	ldr	r3, [r3, #16]
   b64ec:	9301      	str	r3, [sp, #4]
   b64ee:	bd08      	pop	{r3, pc}
   b64f0:	00030240 	.word	0x00030240

000b64f4 <network_on>:
DYNALIB_FN(5, system_net, network_on, void(network_handle_t, uint32_t, uint32_t, void*))
   b64f4:	b508      	push	{r3, lr}
   b64f6:	4b02      	ldr	r3, [pc, #8]	; (b6500 <network_on+0xc>)
   b64f8:	681b      	ldr	r3, [r3, #0]
   b64fa:	695b      	ldr	r3, [r3, #20]
   b64fc:	9301      	str	r3, [sp, #4]
   b64fe:	bd08      	pop	{r3, pc}
   b6500:	00030240 	.word	0x00030240

000b6504 <network_off>:
DYNALIB_FN(6, system_net, network_off, void(network_handle_t, uint32_t, uint32_t, void*))
   b6504:	b508      	push	{r3, lr}
   b6506:	4b02      	ldr	r3, [pc, #8]	; (b6510 <network_off+0xc>)
   b6508:	681b      	ldr	r3, [r3, #0]
   b650a:	699b      	ldr	r3, [r3, #24]
   b650c:	9301      	str	r3, [sp, #4]
   b650e:	bd08      	pop	{r3, pc}
   b6510:	00030240 	.word	0x00030240

000b6514 <network_listen>:
DYNALIB_FN(7, system_net, network_listen, void(network_handle_t, uint32_t, void*))
   b6514:	b508      	push	{r3, lr}
   b6516:	4b02      	ldr	r3, [pc, #8]	; (b6520 <network_listen+0xc>)
   b6518:	681b      	ldr	r3, [r3, #0]
   b651a:	69db      	ldr	r3, [r3, #28]
   b651c:	9301      	str	r3, [sp, #4]
   b651e:	bd08      	pop	{r3, pc}
   b6520:	00030240 	.word	0x00030240

000b6524 <network_listening>:
DYNALIB_FN(8, system_net, network_listening, bool(network_handle_t, uint32_t, void*))
   b6524:	b508      	push	{r3, lr}
   b6526:	4b02      	ldr	r3, [pc, #8]	; (b6530 <network_listening+0xc>)
   b6528:	681b      	ldr	r3, [r3, #0]
   b652a:	6a1b      	ldr	r3, [r3, #32]
   b652c:	9301      	str	r3, [sp, #4]
   b652e:	bd08      	pop	{r3, pc}
   b6530:	00030240 	.word	0x00030240

000b6534 <network_set_listen_timeout>:
DYNALIB_FN(9, system_net, network_has_credentials, bool(network_handle_t, uint32_t, void*))
DYNALIB_FN(10, system_net, network_set_credentials, int(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(11, system_net, network_clear_credentials, bool(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(12, system_net, network_set_listen_timeout, void(network_handle_t, uint16_t, void*))
   b6534:	b508      	push	{r3, lr}
   b6536:	4b02      	ldr	r3, [pc, #8]	; (b6540 <network_set_listen_timeout+0xc>)
   b6538:	681b      	ldr	r3, [r3, #0]
   b653a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   b653c:	9301      	str	r3, [sp, #4]
   b653e:	bd08      	pop	{r3, pc}
   b6540:	00030240 	.word	0x00030240

000b6544 <network_get_listen_timeout>:
DYNALIB_FN(13, system_net, network_get_listen_timeout, uint16_t(network_handle_t, uint32_t, void*))
   b6544:	b508      	push	{r3, lr}
   b6546:	4b02      	ldr	r3, [pc, #8]	; (b6550 <network_get_listen_timeout+0xc>)
   b6548:	681b      	ldr	r3, [r3, #0]
   b654a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   b654c:	9301      	str	r3, [sp, #4]
   b654e:	bd08      	pop	{r3, pc}
   b6550:	00030240 	.word	0x00030240

000b6554 <network_is_on>:
DYNALIB_FN(14, system_net, network_set_hostname, int(network_handle_t, uint32_t, const char*, void*))
DYNALIB_FN(15, system_net, network_get_hostname, int(network_handle_t, uint32_t, char*, size_t, void*))
DYNALIB_FN(16, system_net, network_is_on, bool(network_handle_t, void*))
   b6554:	b508      	push	{r3, lr}
   b6556:	4b02      	ldr	r3, [pc, #8]	; (b6560 <network_is_on+0xc>)
   b6558:	681b      	ldr	r3, [r3, #0]
   b655a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b655c:	9301      	str	r3, [sp, #4]
   b655e:	bd08      	pop	{r3, pc}
   b6560:	00030240 	.word	0x00030240

000b6564 <network_is_off>:
DYNALIB_FN(17, system_net, network_is_off, bool(network_handle_t, void*))
   b6564:	b508      	push	{r3, lr}
   b6566:	4b02      	ldr	r3, [pc, #8]	; (b6570 <network_is_off+0xc>)
   b6568:	681b      	ldr	r3, [r3, #0]
   b656a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   b656c:	9301      	str	r3, [sp, #4]
   b656e:	bd08      	pop	{r3, pc}
   b6570:	00030240 	.word	0x00030240

000b6574 <malloc>:
#include "hal_platform.h"
#endif // defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))

DYNALIB_BEGIN(rt)

DYNALIB_FN(0, rt, malloc, void*(size_t))
   b6574:	b508      	push	{r3, lr}
   b6576:	4b02      	ldr	r3, [pc, #8]	; (b6580 <malloc+0xc>)
   b6578:	681b      	ldr	r3, [r3, #0]
   b657a:	681b      	ldr	r3, [r3, #0]
   b657c:	9301      	str	r3, [sp, #4]
   b657e:	bd08      	pop	{r3, pc}
   b6580:	0003021c 	.word	0x0003021c

000b6584 <free>:
DYNALIB_FN(1, rt, free, void(void*))
   b6584:	b508      	push	{r3, lr}
   b6586:	4b02      	ldr	r3, [pc, #8]	; (b6590 <free+0xc>)
   b6588:	681b      	ldr	r3, [r3, #0]
   b658a:	685b      	ldr	r3, [r3, #4]
   b658c:	9301      	str	r3, [sp, #4]
   b658e:	bd08      	pop	{r3, pc}
   b6590:	0003021c 	.word	0x0003021c

000b6594 <realloc>:
DYNALIB_FN(2, rt, realloc, void*(void*, size_t))
   b6594:	b508      	push	{r3, lr}
   b6596:	4b02      	ldr	r3, [pc, #8]	; (b65a0 <realloc+0xc>)
   b6598:	681b      	ldr	r3, [r3, #0]
   b659a:	689b      	ldr	r3, [r3, #8]
   b659c:	9301      	str	r3, [sp, #4]
   b659e:	bd08      	pop	{r3, pc}
   b65a0:	0003021c 	.word	0x0003021c

000b65a4 <abort>:
DYNALIB_FN(6, rt, siscanf, int(const char*, const char*, ...))
DYNALIB_FN(7, rt, snprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(8, rt, sniprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(9, rt, vsnprintf, int(char*, size_t, const char*, va_list))
DYNALIB_FN(10, rt, vsniprintf, int(char*, size_t, const char*, va_list))
DYNALIB_FN(11, rt, abort, void(void))
   b65a4:	b508      	push	{r3, lr}
   b65a6:	4b02      	ldr	r3, [pc, #8]	; (b65b0 <abort+0xc>)
   b65a8:	681b      	ldr	r3, [r3, #0]
   b65aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b65ac:	9301      	str	r3, [sp, #4]
   b65ae:	bd08      	pop	{r3, pc}
   b65b0:	0003021c 	.word	0x0003021c

000b65b4 <_malloc_r>:
DYNALIB_FN(12, rt, _malloc_r, void*(struct _reent*, size_t))
   b65b4:	b508      	push	{r3, lr}
   b65b6:	4b02      	ldr	r3, [pc, #8]	; (b65c0 <_malloc_r+0xc>)
   b65b8:	681b      	ldr	r3, [r3, #0]
   b65ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   b65bc:	9301      	str	r3, [sp, #4]
   b65be:	bd08      	pop	{r3, pc}
   b65c0:	0003021c 	.word	0x0003021c

000b65c4 <__assert_func>:
DYNALIB_FN(13, rt, _free_r, void(struct _reent*, void*))
DYNALIB_FN(14, rt, _realloc_r, void*(struct _reent*, void*, size_t))
DYNALIB_FN(15, rt, __errno, int*())

#if defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))
DYNALIB_FN(16, rt, __assert_func, void(const char*, int, const char*, const char*))
   b65c4:	b508      	push	{r3, lr}
   b65c6:	4b02      	ldr	r3, [pc, #8]	; (b65d0 <__assert_func+0xc>)
   b65c8:	681b      	ldr	r3, [r3, #0]
   b65ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b65cc:	9301      	str	r3, [sp, #4]
   b65ce:	bd08      	pop	{r3, pc}
   b65d0:	0003021c 	.word	0x0003021c

000b65d4 <newlib_impure_ptr_callback>:
DYNALIB_FN(17, rt, newlib_impure_ptr_callback, void(void (*)(struct _reent*, size_t, uint32_t, void*), void*))
   b65d4:	b508      	push	{r3, lr}
   b65d6:	4b02      	ldr	r3, [pc, #8]	; (b65e0 <newlib_impure_ptr_callback+0xc>)
   b65d8:	681b      	ldr	r3, [r3, #0]
   b65da:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   b65dc:	9301      	str	r3, [sp, #4]
   b65de:	bd08      	pop	{r3, pc}
   b65e0:	0003021c 	.word	0x0003021c

000b65e4 <delay>:
    return (value - fromStart) * (toEnd - toStart) / (fromEnd - fromStart) + toStart;
}

void delay(unsigned long ms)
{
    system_delay_ms(ms, false);
   b65e4:	2100      	movs	r1, #0
   b65e6:	f7ff bf21 	b.w	b642c <system_delay_ms>

000b65ea <_ZN8particle6detail21futureCallbackWrapperEPv>:
 * License along with this library; if not, see <http://www.gnu.org/licenses/>.
 */

#include "spark_wiring_async.h"

void particle::detail::futureCallbackWrapper(void* data) {
   b65ea:	b510      	push	{r4, lr}
  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
   b65ec:	6883      	ldr	r3, [r0, #8]
   b65ee:	4604      	mov	r4, r0
   b65f0:	b90b      	cbnz	r3, b65f6 <_ZN8particle6detail21futureCallbackWrapperEPv+0xc>
	__throw_bad_function_call();
   b65f2:	f001 fa11 	bl	b7a18 <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   b65f6:	68c3      	ldr	r3, [r0, #12]
   b65f8:	4798      	blx	r3
      if (_M_manager)
   b65fa:	68a3      	ldr	r3, [r4, #8]
   b65fc:	b11b      	cbz	r3, b6606 <_ZN8particle6detail21futureCallbackWrapperEPv+0x1c>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   b65fe:	2203      	movs	r2, #3
   b6600:	4621      	mov	r1, r4
   b6602:	4620      	mov	r0, r4
   b6604:	4798      	blx	r3
    auto callbackPtr = static_cast<const std::function<void()>*>(data);
    (*callbackPtr)();
    delete callbackPtr;
   b6606:	4620      	mov	r0, r4
   b6608:	2110      	movs	r1, #16
}
   b660a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    delete callbackPtr;
   b660e:	f7fd bd46 	b.w	b409e <_ZdlPvj>

000b6612 <_ZNSt14_Function_baseD1Ev>:
    ~_Function_base()
   b6612:	b510      	push	{r4, lr}
      if (_M_manager)
   b6614:	6883      	ldr	r3, [r0, #8]
    ~_Function_base()
   b6616:	4604      	mov	r4, r0
      if (_M_manager)
   b6618:	b113      	cbz	r3, b6620 <_ZNSt14_Function_baseD1Ev+0xe>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   b661a:	2203      	movs	r2, #3
   b661c:	4601      	mov	r1, r0
   b661e:	4798      	blx	r3
    }
   b6620:	4620      	mov	r0, r4
   b6622:	bd10      	pop	{r4, pc}

000b6624 <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>:
			      is_move_constructible<_Tp>,
			      is_move_assignable<_Tp>>::value>::type
#else
    void
#endif
    swap(_Tp& __a, _Tp& __b)
   b6624:	b513      	push	{r0, r1, r4, lr}
   b6626:	460b      	mov	r3, r1
   b6628:	4602      	mov	r2, r0
    {
#if __cplusplus < 201103L
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)
#endif
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b662a:	e9d0 0100 	ldrd	r0, r1, [r0]
   b662e:	466c      	mov	r4, sp
   b6630:	e884 0003 	stmia.w	r4, {r0, r1}
      __a = _GLIBCXX_MOVE(__b);
   b6634:	e893 0003 	ldmia.w	r3, {r0, r1}
   b6638:	e882 0003 	stmia.w	r2, {r0, r1}
      __b = _GLIBCXX_MOVE(__tmp);
   b663c:	e894 0003 	ldmia.w	r4, {r0, r1}
   b6640:	e883 0003 	stmia.w	r3, {r0, r1}
    }
   b6644:	b002      	add	sp, #8
   b6646:	bd10      	pop	{r4, pc}

000b6648 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E>:
    /**
     * Creates a shared mutex.
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
   b6648:	4802      	ldr	r0, [pc, #8]	; (b6654 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0xc>)
   b664a:	2300      	movs	r3, #0
   b664c:	6003      	str	r3, [r0, #0]
    {
        os_mutex_recursive_create(&handle_);
   b664e:	f7ff bd7d 	b.w	b614c <os_mutex_recursive_create>
   b6652:	bf00      	nop
   b6654:	2003e6c4 	.word	0x2003e6c4

000b6658 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED1Ev>:
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
   b6658:	4770      	bx	lr

000b665a <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info>:
      { return nullptr; }
   b665a:	2000      	movs	r0, #0
   b665c:	4770      	bx	lr

000b665e <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED0Ev>:
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
   b665e:	b510      	push	{r4, lr}
   b6660:	2110      	movs	r1, #16
   b6662:	4604      	mov	r4, r0
   b6664:	f7fd fd1b 	bl	b409e <_ZdlPvj>
   b6668:	4620      	mov	r0, r4
   b666a:	bd10      	pop	{r4, pc}

000b666c <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv>:
      _M_destroy() noexcept
   b666c:	b508      	push	{r3, lr}
      { delete this; }
   b666e:	f7ff fff6 	bl	b665e <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED0Ev>
   b6672:	bd08      	pop	{r3, pc}

000b6674 <_ZN8particle5ErrorC1EOS0_>:

inline particle::Error::Error(const Error& error) :
        Error(error.type_, error.msg_) {
}

inline particle::Error::Error(Error&& error) :
   b6674:	b530      	push	{r4, r5, lr}
        type_(type) {
   b6676:	2200      	movs	r2, #0
   b6678:	f64f 749c 	movw	r4, #65436	; 0xff9c
   b667c:	6002      	str	r2, [r0, #0]
   b667e:	8084      	strh	r4, [r0, #4]
      __a = _GLIBCXX_MOVE(__b);
   b6680:	888d      	ldrh	r5, [r1, #4]
      __b = _GLIBCXX_MOVE(__tmp);
   b6682:	808c      	strh	r4, [r1, #4]
      __a = _GLIBCXX_MOVE(__b);
   b6684:	680c      	ldr	r4, [r1, #0]
   b6686:	8085      	strh	r5, [r0, #4]
   b6688:	6004      	str	r4, [r0, #0]
      __b = _GLIBCXX_MOVE(__tmp);
   b668a:	600a      	str	r2, [r1, #0]
        Error() {
    swap(*this, error);
}
   b668c:	bd30      	pop	{r4, r5, pc}

000b668e <_ZN8particle5ErrorD1Ev>:

inline particle::Error::~Error() {
   b668e:	b510      	push	{r4, lr}
   b6690:	4604      	mov	r4, r0
    free((void*)msg_);
   b6692:	6800      	ldr	r0, [r0, #0]
   b6694:	f7ff ff76 	bl	b6584 <free>
}
   b6698:	4620      	mov	r0, r4
   b669a:	bd10      	pop	{r4, pc}

000b669c <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv>:
      _M_dispose() noexcept
   b669c:	b538      	push	{r3, r4, r5, lr}
      { delete _M_ptr; }
   b669e:	68c4      	ldr	r4, [r0, #12]
   b66a0:	b1f4      	cbz	r4, b66e0 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x44>
      _Tp
      load(memory_order __m = memory_order_seq_cst) const noexcept
      {
	alignas(_Tp) unsigned char __buf[sizeof(_Tp)];
	_Tp* __ptr = reinterpret_cast<_Tp*>(__buf);
	__atomic_load(std::__addressof(_M_i), __ptr, int(__m));
   b66a2:	7823      	ldrb	r3, [r4, #0]
    ~FutureImpl() {
        // Call destructor of the appropriate unnamed enum's field
        const State s = this->state();
        if (s == State::SUCCEEDED) {
            result_.~ResultT();
        } else if (s == State::FAILED) {
   b66a4:	2b02      	cmp	r3, #2
   b66a6:	d103      	bne.n	b66b0 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x14>
            error_.~Error();
   b66a8:	f104 000c 	add.w	r0, r4, #12
   b66ac:	f7ff ffef 	bl	b668e <_ZN8particle5ErrorD1Ev>
      {
	memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_release);
	__glibcxx_assert(__b != memory_order_acq_rel);

	return __atomic_load_n(&_M_p, int(__m));
   b66b0:	6865      	ldr	r5, [r4, #4]
        delete onSuccess_.load(std::memory_order_relaxed);
   b66b2:	b135      	cbz	r5, b66c2 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x26>
    class function<_Res(_ArgTypes...)>
   b66b4:	4628      	mov	r0, r5
   b66b6:	f7ff ffac 	bl	b6612 <_ZNSt14_Function_baseD1Ev>
   b66ba:	2110      	movs	r1, #16
   b66bc:	4628      	mov	r0, r5
   b66be:	f7fd fcee 	bl	b409e <_ZdlPvj>
   b66c2:	68a5      	ldr	r5, [r4, #8]
        delete onError_.load(std::memory_order_relaxed);
   b66c4:	b135      	cbz	r5, b66d4 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x38>
   b66c6:	4628      	mov	r0, r5
   b66c8:	f7ff ffa3 	bl	b6612 <_ZNSt14_Function_baseD1Ev>
   b66cc:	2110      	movs	r1, #16
   b66ce:	4628      	mov	r0, r5
   b66d0:	f7fd fce5 	bl	b409e <_ZdlPvj>
   b66d4:	4620      	mov	r0, r4
   b66d6:	2114      	movs	r1, #20
   b66d8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   b66dc:	f7fd bcdf 	b.w	b409e <_ZdlPvj>
   b66e0:	bd38      	pop	{r3, r4, r5, pc}

000b66e2 <_ZNSt12__shared_ptrIN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EEC1ERKS7_>:
      __shared_ptr(const __shared_ptr&) noexcept = default;
   b66e2:	680b      	ldr	r3, [r1, #0]
   b66e4:	6003      	str	r3, [r0, #0]
      : _M_pi(__r._M_pi)
   b66e6:	684b      	ldr	r3, [r1, #4]
   b66e8:	6043      	str	r3, [r0, #4]
	if (_M_pi != 0)
   b66ea:	b113      	cbz	r3, b66f2 <_ZNSt12__shared_ptrIN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EEC1ERKS7_+0x10>
    { ++_M_use_count; }
   b66ec:	685a      	ldr	r2, [r3, #4]
   b66ee:	3201      	adds	r2, #1
   b66f0:	605a      	str	r2, [r3, #4]
      __shared_ptr(const __shared_ptr&) noexcept = default;
   b66f2:	4770      	bx	lr

000b66f4 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>:
        // TODO: Use custom reference counting object to avoid unnecessary memory allocation
        return new detail::FutureImplPtr<ResultT, ContextT>(p_);
    }

    // Unwraps promise from an object pointer created via dataPtr() method
    static Promise<ResultT, ContextT> fromDataPtr(void* data) {
   b66f4:	b537      	push	{r0, r1, r2, r4, r5, lr}
   b66f6:	4604      	mov	r4, r0
       *  @brief  Construct an empty %shared_ptr.
       *  @post   use_count()==0 && get()==0
       */
      constexpr shared_ptr() noexcept : __shared_ptr<_Tp>() { }

      shared_ptr(const shared_ptr&) noexcept = default; ///< Copy constructor
   b66f8:	4668      	mov	r0, sp
   b66fa:	460d      	mov	r5, r1
   b66fc:	f7ff fff1 	bl	b66e2 <_ZNSt12__shared_ptrIN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EEC1ERKS7_>
	__shared_ptr(const __shared_ptr<_Yp, _Lp>& __r) noexcept
	: _M_ptr(__r._M_ptr), _M_refcount(__r._M_refcount)
	{ }

      __shared_ptr(__shared_ptr&& __r) noexcept
      : _M_ptr(__r._M_ptr), _M_refcount()
   b6700:	9b00      	ldr	r3, [sp, #0]
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
   b6702:	9a01      	ldr	r2, [sp, #4]
      : _M_ptr(__r._M_ptr), _M_refcount()
   b6704:	6023      	str	r3, [r4, #0]
	_M_pi = __tmp;
   b6706:	6062      	str	r2, [r4, #4]
	__r._M_pi = _M_pi;
   b6708:	2300      	movs	r3, #0
      ~__shared_ptr() = default;
   b670a:	a801      	add	r0, sp, #4
	__r._M_pi = _M_pi;
   b670c:	9301      	str	r3, [sp, #4]
      {
	_M_refcount._M_swap(__r._M_refcount);
	__r._M_ptr = 0;
   b670e:	9300      	str	r3, [sp, #0]
      ~__shared_ptr() = default;
   b6710:	f7fd fd06 	bl	b4120 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
        auto d = static_cast<detail::FutureImplPtr<ResultT, ContextT>*>(data);
        const Promise<ResultT, ContextT> p(*d);
        delete d;
   b6714:	b135      	cbz	r5, b6724 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv+0x30>
   b6716:	1d28      	adds	r0, r5, #4
   b6718:	f7fd fd02 	bl	b4120 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   b671c:	2108      	movs	r1, #8
   b671e:	4628      	mov	r0, r5
   b6720:	f7fd fcbd 	bl	b409e <_ZdlPvj>
        return p;
    }
   b6724:	4620      	mov	r0, r4
   b6726:	b003      	add	sp, #12
   b6728:	bd30      	pop	{r4, r5, pc}

000b672a <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>:
      if (_M_empty())
   b672a:	6882      	ldr	r2, [r0, #8]
    function<_Res(_ArgTypes...)>::
   b672c:	b510      	push	{r4, lr}
      if (_M_empty())
   b672e:	b90a      	cbnz	r2, b6734 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_+0xa>
	__throw_bad_function_call();
   b6730:	f001 f972 	bl	b7a18 <_ZSt25__throw_bad_function_callv>
    }
   b6734:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   b6738:	68c3      	ldr	r3, [r0, #12]
   b673a:	4718      	bx	r3

000b673c <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE9_M_invokeERKSt9_Any_data>:
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
   b673c:	b508      	push	{r3, lr}
	    return __source._M_access<_Functor*>();
   b673e:	6800      	ldr	r0, [r0, #0]
    { return static_cast<_Up&&>(__t); }

  template<typename _Res, typename _Fn, typename... _Args>
    constexpr _Res
    __invoke_impl(__invoke_other, _Fn&& __f, _Args&&... __args)
    { return std::forward<_Fn>(__f)(std::forward<_Args>(__args)...); }
   b6740:	f100 0110 	add.w	r1, r0, #16
   b6744:	f7ff fff1 	bl	b672a <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>
      }
   b6748:	bd08      	pop	{r3, pc}

000b674a <_ZNKSt8functionIFvRKbEEclES1_>:
      if (_M_empty())
   b674a:	6882      	ldr	r2, [r0, #8]
    function<_Res(_ArgTypes...)>::
   b674c:	b510      	push	{r4, lr}
      if (_M_empty())
   b674e:	b90a      	cbnz	r2, b6754 <_ZNKSt8functionIFvRKbEEclES1_+0xa>
	__throw_bad_function_call();
   b6750:	f001 f962 	bl	b7a18 <_ZSt25__throw_bad_function_callv>
    }
   b6754:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   b6758:	68c3      	ldr	r3, [r0, #12]
   b675a:	4718      	bx	r3

000b675c <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE9_M_invokeERKSt9_Any_data>:
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
   b675c:	b508      	push	{r3, lr}
	    return __source._M_access<_Functor*>();
   b675e:	6800      	ldr	r0, [r0, #0]
   b6760:	f100 0110 	add.w	r1, r0, #16
   b6764:	f7ff fff1 	bl	b674a <_ZNKSt8functionIFvRKbEEclES1_>
      }
   b6768:	bd08      	pop	{r3, pc}
	...

000b676c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>:
	__shared_count(_Ptr __p) : _M_pi(0)
   b676c:	b538      	push	{r3, r4, r5, lr}
   b676e:	2300      	movs	r3, #0
   b6770:	4604      	mov	r4, r0
   b6772:	6003      	str	r3, [r0, #0]
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
   b6774:	2010      	movs	r0, #16
	__shared_count(_Ptr __p) : _M_pi(0)
   b6776:	460d      	mov	r5, r1
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
   b6778:	f7fd fc8d 	bl	b4096 <_Znwj>
   b677c:	b128      	cbz	r0, b678a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_+0x1e>
      : _M_use_count(1), _M_weak_count(1) { }
   b677e:	2301      	movs	r3, #1
   b6780:	e9c0 3301 	strd	r3, r3, [r0, #4]
      : _M_ptr(__p) { }
   b6784:	4b02      	ldr	r3, [pc, #8]	; (b6790 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_+0x24>)
   b6786:	6003      	str	r3, [r0, #0]
   b6788:	60c5      	str	r5, [r0, #12]
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
   b678a:	6020      	str	r0, [r4, #0]
	}
   b678c:	4620      	mov	r0, r4
   b678e:	bd38      	pop	{r3, r4, r5, pc}
   b6790:	000b8f98 	.word	0x000b8f98

000b6794 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>:
    function<_Res(_ArgTypes...)>::
   b6794:	b538      	push	{r3, r4, r5, lr}
    _Function_base() : _M_manager(nullptr) { }
   b6796:	2300      	movs	r3, #0
   b6798:	6083      	str	r3, [r0, #8]
    bool _M_empty() const { return !_M_manager; }
   b679a:	688b      	ldr	r3, [r1, #8]
    function<_Res(_ArgTypes...)>::
   b679c:	4604      	mov	r4, r0
   b679e:	460d      	mov	r5, r1
      if (static_cast<bool>(__x))
   b67a0:	b12b      	cbz	r3, b67ae <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_+0x1a>
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
   b67a2:	2202      	movs	r2, #2
   b67a4:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
   b67a6:	68eb      	ldr	r3, [r5, #12]
   b67a8:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
   b67aa:	68ab      	ldr	r3, [r5, #8]
   b67ac:	60a3      	str	r3, [r4, #8]
    }
   b67ae:	4620      	mov	r0, r4
   b67b0:	bd38      	pop	{r3, r4, r5, pc}
	...

000b67b4 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>:
    void setError(Error error) {
   b67b4:	b5f0      	push	{r4, r5, r6, r7, lr}
   b67b6:	b089      	sub	sp, #36	; 0x24
        { __shared_ptr(__p, std::move(__d), std::move(__a)).swap(*this); }

      /// Return the stored pointer.
      element_type*
      get() const noexcept
      { return _M_ptr; }
   b67b8:	6804      	ldr	r4, [r0, #0]
        p_->setError(std::move(error));
   b67ba:	4668      	mov	r0, sp
   b67bc:	f7ff ff5a 	bl	b6674 <_ZN8particle5ErrorC1EOS0_>

      bool
      compare_exchange_strong(_Tp& __e, _Tp __i, memory_order __s,
			      memory_order __f) noexcept
      {
	return __atomic_compare_exchange(std::__addressof(_M_i),
   b67c0:	f04f 0302 	mov.w	r3, #2
   b67c4:	e8d4 2f4f 	ldrexb	r2, [r4]
   b67c8:	2a00      	cmp	r2, #0
   b67ca:	d103      	bne.n	b67d4 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x20>
   b67cc:	e8c4 3f41 	strexb	r1, r3, [r4]
   b67d0:	2900      	cmp	r1, #0
   b67d2:	d1f7      	bne.n	b67c4 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x10>
        if (this->changeState(State::FAILED)) {
   b67d4:	d125      	bne.n	b6822 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x6e>
            new(&error_) Error(std::move(error));
   b67d6:	f104 050c 	add.w	r5, r4, #12
   b67da:	4669      	mov	r1, sp
   b67dc:	4628      	mov	r0, r5
   b67de:	f7ff ff49 	bl	b6674 <_ZN8particle5ErrorC1EOS0_>
	__atomic_store_n(&_M_i, __i, int(__m));
   b67e2:	f3bf 8f5b 	dmb	ish
   b67e6:	2301      	movs	r3, #1
   b67e8:	7063      	strb	r3, [r4, #1]

      _GLIBCXX_ALWAYS_INLINE __pointer_type
      exchange(__pointer_type __p,
	       memory_order __m = memory_order_seq_cst) noexcept
      {
	return __atomic_exchange_n(&_M_p, __p, int(__m));
   b67ea:	2000      	movs	r0, #0
   b67ec:	f104 0308 	add.w	r3, r4, #8
   b67f0:	f3bf 8f5b 	dmb	ish
   b67f4:	e853 6f00 	ldrex	r6, [r3]
   b67f8:	e843 0200 	strex	r2, r0, [r3]
   b67fc:	2a00      	cmp	r2, #0
   b67fe:	d1f9      	bne.n	b67f4 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x40>
   b6800:	f3bf 8f5b 	dmb	ish
        if (callbackPtr) {
   b6804:	b16e      	cbz	r6, b6822 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x6e>
        return (application_thread_current(nullptr) != 0);
   b6806:	f7ff fe19 	bl	b643c <application_thread_current>
        if (ContextT::isApplicationThreadCurrent()) {
   b680a:	b178      	cbz	r0, b682c <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x78>
            callback(std::forward<ArgsT>(args)...); // Synchronous call
   b680c:	4629      	mov	r1, r5
   b680e:	4630      	mov	r0, r6
   b6810:	f7ff ff8b 	bl	b672a <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>
    class function<_Res(_ArgTypes...)>
   b6814:	4630      	mov	r0, r6
   b6816:	f7ff fefc 	bl	b6612 <_ZNSt14_Function_baseD1Ev>
            delete callbackPtr;
   b681a:	2110      	movs	r1, #16
   b681c:	4630      	mov	r0, r6
   b681e:	f7fd fc3e 	bl	b409e <_ZdlPvj>
        p_->setError(std::move(error));
   b6822:	4668      	mov	r0, sp
   b6824:	f7ff ff33 	bl	b668e <_ZN8particle5ErrorD1Ev>
    }
   b6828:	b009      	add	sp, #36	; 0x24
   b682a:	bdf0      	pop	{r4, r5, r6, r7, pc}

     public:
      template<typename... _Args>
	explicit _GLIBCXX20_CONSTEXPR
	_Bind(const _Functor& __f, _Args&&... __args)
	: _M_f(__f), _M_bound_args(std::forward<_Args>(__args)...)
   b682c:	4631      	mov	r1, r6
   b682e:	a802      	add	r0, sp, #8
   b6830:	f7ff ffb0 	bl	b6794 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>
        Error(error.type_, error.msg_) {
   b6834:	68e0      	ldr	r0, [r4, #12]
   b6836:	f9b4 5010 	ldrsh.w	r5, [r4, #16]
        msg_(msg ? (const char*)strdup(msg) : nullptr),
   b683a:	b108      	cbz	r0, b6840 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x8c>
   b683c:	f001 ff58 	bl	b86f0 <strdup>
        type_(type) {
   b6840:	9006      	str	r0, [sp, #24]
            auto callbackPtr = new std::function<void()>(std::bind(callback, std::forward<ArgsT>(args)...));
   b6842:	2010      	movs	r0, #16
   b6844:	f8ad 501c 	strh.w	r5, [sp, #28]
   b6848:	f7fd fc25 	bl	b4096 <_Znwj>
   b684c:	4605      	mov	r5, r0
   b684e:	b1e8      	cbz	r0, b688c <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xd8>
    _Function_base() : _M_manager(nullptr) { }
   b6850:	2700      	movs	r7, #0
   b6852:	6087      	str	r7, [r0, #8]
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   b6854:	2018      	movs	r0, #24
   b6856:	f7fd fc1e 	bl	b4096 <_Znwj>
   b685a:	4604      	mov	r4, r0
   b685c:	b188      	cbz	r0, b6882 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xce>
	std::swap(_M_functor, __x._M_functor);
   b685e:	4601      	mov	r1, r0
    _Function_base() : _M_manager(nullptr) { }
   b6860:	6087      	str	r7, [r0, #8]
	std::swap(_M_functor, __x._M_functor);
   b6862:	a802      	add	r0, sp, #8
   b6864:	f7ff fede 	bl	b6624 <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b6868:	9b04      	ldr	r3, [sp, #16]
      __a = _GLIBCXX_MOVE(__b);
   b686a:	68a2      	ldr	r2, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   b686c:	60a3      	str	r3, [r4, #8]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b686e:	9b05      	ldr	r3, [sp, #20]
      __a = _GLIBCXX_MOVE(__b);
   b6870:	9204      	str	r2, [sp, #16]
      constexpr _Head_base(const _Head_base&) = default;
      constexpr _Head_base(_Head_base&&) = default;

      template<typename _UHead>
        constexpr _Head_base(_UHead&& __h)
	: _M_head_impl(std::forward<_UHead>(__h)) { }
   b6872:	a906      	add	r1, sp, #24
   b6874:	68e2      	ldr	r2, [r4, #12]
      __b = _GLIBCXX_MOVE(__tmp);
   b6876:	60e3      	str	r3, [r4, #12]
   b6878:	f104 0010 	add.w	r0, r4, #16
      __a = _GLIBCXX_MOVE(__b);
   b687c:	9205      	str	r2, [sp, #20]
   b687e:	f7ff fef9 	bl	b6674 <_ZN8particle5ErrorC1EOS0_>
	    _M_invoker = &_My_handler::_M_invoke;
   b6882:	4b08      	ldr	r3, [pc, #32]	; (b68a4 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xf0>)
   b6884:	60eb      	str	r3, [r5, #12]
	    _M_manager = &_My_handler::_M_manager;
   b6886:	4b08      	ldr	r3, [pc, #32]	; (b68a8 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xf4>)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   b6888:	602c      	str	r4, [r5, #0]
	    _M_manager = &_My_handler::_M_manager;
   b688a:	60ab      	str	r3, [r5, #8]
    struct _Head_base<_Idx, _Head, false>
   b688c:	a806      	add	r0, sp, #24
   b688e:	f7ff fefe 	bl	b668e <_ZN8particle5ErrorD1Ev>
    class function<_Res(_ArgTypes...)>
   b6892:	a802      	add	r0, sp, #8
   b6894:	f7ff febd 	bl	b6612 <_ZNSt14_Function_baseD1Ev>
        return (application_thread_invoke(callback, data, nullptr) == 0);
   b6898:	2200      	movs	r2, #0
   b689a:	4629      	mov	r1, r5
   b689c:	4803      	ldr	r0, [pc, #12]	; (b68ac <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xf8>)
   b689e:	f7ff fdd5 	bl	b644c <application_thread_invoke>
   b68a2:	e7b7      	b.n	b6814 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x60>
   b68a4:	000b673d 	.word	0x000b673d
   b68a8:	000b69c1 	.word	0x000b69c1
   b68ac:	000b65eb 	.word	0x000b65eb

000b68b0 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>:
    desc.data = (void*)data;
    desc.funcKey = funcKey;
    return spark_function(NULL, (user_function_int_str_t*)&desc, NULL);
}

Future<bool> CloudClass::publish_event(const char *eventName, const char *eventData, int ttl, PublishFlags flags) {
   b68b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b68b4:	b08b      	sub	sp, #44	; 0x2c
   b68b6:	4605      	mov	r5, r0
   b68b8:	f89d a050 	ldrb.w	sl, [sp, #80]	; 0x50
   b68bc:	460f      	mov	r7, r1
   b68be:	4690      	mov	r8, r2
   b68c0:	4699      	mov	r9, r3
    static void sleep(Spark_Sleep_TypeDef sleepMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(sleepMode, seconds); }
    static void sleep(uint16_t wakeUpPin, InterruptMode edgeTriggerMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
   b68c2:	f7ff fddf 	bl	b6484 <spark_cloud_flag_connected>
   b68c6:	ae07      	add	r6, sp, #28
    if (!connected()) {
   b68c8:	4683      	mov	fp, r0
   b68ca:	bb38      	cbnz	r0, b691c <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x6c>
        type_(type) {
   b68cc:	f64f 732e 	movw	r3, #65326	; 0xff2e
   b68d0:	9005      	str	r0, [sp, #20]
    typedef typename detail::FutureImpl<ResultT, ContextT>::OnSuccessCallback OnSuccessCallback;
    typedef typename detail::FutureImpl<ResultT, ContextT>::OnErrorCallback OnErrorCallback;

    // Construct failed future
    explicit FutureBase(Error error) :
            p_(new detail::FutureImpl<ResultT, ContextT>(std::move(error))) {
   b68d2:	a905      	add	r1, sp, #20
   b68d4:	4630      	mov	r0, r6
   b68d6:	f8ad 3018 	strh.w	r3, [sp, #24]
   b68da:	f7ff fecb 	bl	b6674 <_ZN8particle5ErrorC1EOS0_>
   b68de:	2014      	movs	r0, #20
   b68e0:	f7fd fbd9 	bl	b4096 <_Znwj>
   b68e4:	4604      	mov	r4, r0
   b68e6:	b148      	cbz	r0, b68fc <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x4c>
      constexpr atomic(_Tp __i) noexcept : _M_i(__i) { }
   b68e8:	2302      	movs	r3, #2
   b68ea:	7003      	strb	r3, [r0, #0]
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
   b68ec:	2301      	movs	r3, #1
      constexpr __atomic_base(__pointer_type __p) noexcept : _M_p (__p) { }
   b68ee:	e9c0 bb01 	strd	fp, fp, [r0, #4]
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
   b68f2:	7043      	strb	r3, [r0, #1]
            error_(std::move(error)) {
   b68f4:	4631      	mov	r1, r6
   b68f6:	300c      	adds	r0, #12
   b68f8:	f7ff febc 	bl	b6674 <_ZN8particle5ErrorC1EOS0_>
	: _M_ptr(__p), _M_refcount(__p, typename is_array<_Tp>::type())
   b68fc:	4628      	mov	r0, r5
	: __shared_count(__p)
   b68fe:	4621      	mov	r1, r4
	: _M_ptr(__p), _M_refcount(__p, typename is_array<_Tp>::type())
   b6900:	f840 4b04 	str.w	r4, [r0], #4
	: __shared_count(__p)
   b6904:	f7ff ff32 	bl	b676c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>
            p_(new detail::FutureImpl<ResultT, ContextT>(std::move(error))) {
   b6908:	4630      	mov	r0, r6
   b690a:	f7ff fec0 	bl	b668e <_ZN8particle5ErrorD1Ev>
    }

    explicit FutureBase(Error::Type error) :
            FutureBase(Error(error)) {
   b690e:	a805      	add	r0, sp, #20
   b6910:	f7ff febd 	bl	b668e <_ZN8particle5ErrorD1Ev>
        p.setError(Error::UNKNOWN);
        p.fromDataPtr(d.handler_data); // Free wrapper object
    }

    return p.future();
}
   b6914:	4628      	mov	r0, r5
   b6916:	b00b      	add	sp, #44	; 0x2c
   b6918:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    d.size = sizeof(spark_send_event_data);
   b691c:	230c      	movs	r3, #12
    spark_send_event_data d = {};
   b691e:	2400      	movs	r4, #0
            p_(new detail::FutureImpl<ResultT, ContextT>(State::RUNNING)) {
   b6920:	2014      	movs	r0, #20
   b6922:	e9cd 4408 	strd	r4, r4, [sp, #32]
    d.size = sizeof(spark_send_event_data);
   b6926:	9307      	str	r3, [sp, #28]
   b6928:	f7fd fbb5 	bl	b4096 <_Znwj>
   b692c:	4601      	mov	r1, r0
   b692e:	b118      	cbz	r0, b6938 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x88>
      constexpr __atomic_base(__pointer_type __p) noexcept : _M_p (__p) { }
   b6930:	e9c0 4401 	strd	r4, r4, [r0, #4]
   b6934:	7004      	strb	r4, [r0, #0]
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
   b6936:	7044      	strb	r4, [r0, #1]
   b6938:	a804      	add	r0, sp, #16
	: _M_ptr(__p), _M_refcount(__p, typename is_array<_Tp>::type())
   b693a:	9103      	str	r1, [sp, #12]
	: __shared_count(__p)
   b693c:	f7ff ff16 	bl	b676c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>
    d.handler_callback = publishCompletionCallback;
   b6940:	4b1e      	ldr	r3, [pc, #120]	; (b69bc <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x10c>)
   b6942:	9308      	str	r3, [sp, #32]
        return new detail::FutureImplPtr<ResultT, ContextT>(p_);
   b6944:	2008      	movs	r0, #8
   b6946:	f7fd fba6 	bl	b4096 <_Znwj>
   b694a:	4604      	mov	r4, r0
   b694c:	b110      	cbz	r0, b6954 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xa4>
   b694e:	a903      	add	r1, sp, #12
   b6950:	f7ff fec7 	bl	b66e2 <_ZNSt12__shared_ptrIN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EEC1ERKS7_>
    if (!spark_send_event(eventName, eventData, ttl, flags.value(), &d) && !p.isDone()) {
   b6954:	9600      	str	r6, [sp, #0]
   b6956:	fa5f f38a 	uxtb.w	r3, sl
   b695a:	464a      	mov	r2, r9
   b695c:	4641      	mov	r1, r8
   b695e:	4638      	mov	r0, r7
    d.handler_data = p.dataPtr();
   b6960:	9409      	str	r4, [sp, #36]	; 0x24
    if (!spark_send_event(eventName, eventData, ttl, flags.value(), &d) && !p.isDone()) {
   b6962:	f7ff fd97 	bl	b6494 <spark_send_event>
   b6966:	b9b8      	cbnz	r0, b6998 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xe8>
	return __atomic_load_n(&_M_i, int(__m));
   b6968:	9b03      	ldr	r3, [sp, #12]
   b696a:	785b      	ldrb	r3, [r3, #1]
   b696c:	f003 02ff 	and.w	r2, r3, #255	; 0xff
   b6970:	b993      	cbnz	r3, b6998 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xe8>
   b6972:	f64f 739c 	movw	r3, #65436	; 0xff9c
        p.setError(Error::UNKNOWN);
   b6976:	a905      	add	r1, sp, #20
   b6978:	a803      	add	r0, sp, #12
   b697a:	9205      	str	r2, [sp, #20]
   b697c:	f8ad 3018 	strh.w	r3, [sp, #24]
   b6980:	f7ff ff18 	bl	b67b4 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>
   b6984:	a805      	add	r0, sp, #20
   b6986:	f7ff fe82 	bl	b668e <_ZN8particle5ErrorD1Ev>
        p.fromDataPtr(d.handler_data); // Free wrapper object
   b698a:	a805      	add	r0, sp, #20
   b698c:	9909      	ldr	r1, [sp, #36]	; 0x24
   b698e:	f7ff feb1 	bl	b66f4 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>
      ~__shared_ptr() = default;
   b6992:	a806      	add	r0, sp, #24
   b6994:	f7fd fbc4 	bl	b4120 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   b6998:	a903      	add	r1, sp, #12
   b699a:	a805      	add	r0, sp, #20
   b699c:	f7ff fea1 	bl	b66e2 <_ZNSt12__shared_ptrIN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EEC1ERKS7_>
      : _M_ptr(__r._M_ptr), _M_refcount()
   b69a0:	9b05      	ldr	r3, [sp, #20]
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
   b69a2:	9a06      	ldr	r2, [sp, #24]
      : _M_ptr(__r._M_ptr), _M_refcount()
   b69a4:	602b      	str	r3, [r5, #0]
	_M_pi = __tmp;
   b69a6:	606a      	str	r2, [r5, #4]
	__r._M_pi = _M_pi;
   b69a8:	2300      	movs	r3, #0
      ~__shared_ptr() = default;
   b69aa:	a806      	add	r0, sp, #24
	__r._M_pi = _M_pi;
   b69ac:	9306      	str	r3, [sp, #24]
	__r._M_ptr = 0;
   b69ae:	9305      	str	r3, [sp, #20]
      ~__shared_ptr() = default;
   b69b0:	f7fd fbb6 	bl	b4120 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   b69b4:	a804      	add	r0, sp, #16
   b69b6:	f7fd fbb3 	bl	b4120 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
class Promise: public PromiseBase<ResultT, ContextT> {
   b69ba:	e7ab      	b.n	b6914 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x64>
   b69bc:	000b6a3d 	.word	0x000b6a3d

000b69c0 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation>:
	switch (__op)
   b69c0:	2a01      	cmp	r2, #1
      _M_manager(_Any_data& __dest, const _Any_data& __source,
   b69c2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b69c4:	4605      	mov	r5, r0
	switch (__op)
   b69c6:	d103      	bne.n	b69d0 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x10>
	    return __source._M_access<_Functor*>();
   b69c8:	680b      	ldr	r3, [r1, #0]
	    __dest._M_access<_Functor*>() = _Base::_M_get_pointer(__source);
   b69ca:	6003      	str	r3, [r0, #0]
      }
   b69cc:	2000      	movs	r0, #0
   b69ce:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	  switch (__op)
   b69d0:	2a02      	cmp	r2, #2
   b69d2:	d010      	beq.n	b69f6 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x36>
   b69d4:	2a03      	cmp	r2, #3
   b69d6:	d1f9      	bne.n	b69cc <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0xc>
	  delete __victim._M_access<_Functor*>();
   b69d8:	6804      	ldr	r4, [r0, #0]
   b69da:	2c00      	cmp	r4, #0
   b69dc:	d0f6      	beq.n	b69cc <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0xc>
   b69de:	f104 0010 	add.w	r0, r4, #16
   b69e2:	f7ff fe54 	bl	b668e <_ZN8particle5ErrorD1Ev>
    class function<_Res(_ArgTypes...)>
   b69e6:	4620      	mov	r0, r4
   b69e8:	f7ff fe13 	bl	b6612 <_ZNSt14_Function_baseD1Ev>
	  delete __victim._M_access<_Functor*>();
   b69ec:	2118      	movs	r1, #24
   b69ee:	4620      	mov	r0, r4
   b69f0:	f7fd fb55 	bl	b409e <_ZdlPvj>
   b69f4:	e7ea      	b.n	b69cc <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0xc>
	    new _Functor(*__source._M_access<const _Functor*>());
   b69f6:	2018      	movs	r0, #24
	  __dest._M_access<_Functor*>() =
   b69f8:	680e      	ldr	r6, [r1, #0]
	    new _Functor(*__source._M_access<const _Functor*>());
   b69fa:	f7fd fb4c 	bl	b4096 <_Znwj>
   b69fe:	4604      	mov	r4, r0
   b6a00:	b150      	cbz	r0, b6a18 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x58>
	explicit _GLIBCXX20_CONSTEXPR
	_Bind(_Functor&& __f, _Args&&... __args)
	: _M_f(std::move(__f)), _M_bound_args(std::forward<_Args>(__args)...)
	{ }

      _Bind(const _Bind&) = default;
   b6a02:	4631      	mov	r1, r6
   b6a04:	f7ff fec6 	bl	b6794 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>
        Error(error.type_, error.msg_) {
   b6a08:	6930      	ldr	r0, [r6, #16]
   b6a0a:	f9b6 7014 	ldrsh.w	r7, [r6, #20]
        msg_(msg ? (const char*)strdup(msg) : nullptr),
   b6a0e:	b108      	cbz	r0, b6a14 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x54>
   b6a10:	f001 fe6e 	bl	b86f0 <strdup>
        type_(type) {
   b6a14:	6120      	str	r0, [r4, #16]
   b6a16:	82a7      	strh	r7, [r4, #20]
	  __dest._M_access<_Functor*>() =
   b6a18:	602c      	str	r4, [r5, #0]
	}
   b6a1a:	e7d7      	b.n	b69cc <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0xc>

000b6a1c <_ZNSt8functionIFvRKbEEC1ERKS3_>:
    function<_Res(_ArgTypes...)>::
   b6a1c:	b538      	push	{r3, r4, r5, lr}
    _Function_base() : _M_manager(nullptr) { }
   b6a1e:	2300      	movs	r3, #0
   b6a20:	6083      	str	r3, [r0, #8]
    bool _M_empty() const { return !_M_manager; }
   b6a22:	688b      	ldr	r3, [r1, #8]
    function<_Res(_ArgTypes...)>::
   b6a24:	4604      	mov	r4, r0
   b6a26:	460d      	mov	r5, r1
      if (static_cast<bool>(__x))
   b6a28:	b12b      	cbz	r3, b6a36 <_ZNSt8functionIFvRKbEEC1ERKS3_+0x1a>
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
   b6a2a:	2202      	movs	r2, #2
   b6a2c:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
   b6a2e:	68eb      	ldr	r3, [r5, #12]
   b6a30:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
   b6a32:	68ab      	ldr	r3, [r5, #8]
   b6a34:	60a3      	str	r3, [r4, #8]
    }
   b6a36:	4620      	mov	r0, r4
   b6a38:	bd38      	pop	{r3, r4, r5, pc}
	...

000b6a3c <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_>:
void publishCompletionCallback(int error, const void* data, void* callbackData, void* reserved) {
   b6a3c:	b5f0      	push	{r4, r5, r6, r7, lr}
   b6a3e:	b089      	sub	sp, #36	; 0x24
   b6a40:	4604      	mov	r4, r0
   b6a42:	460d      	mov	r5, r1
    auto p = Promise<bool>::fromDataPtr(callbackData);
   b6a44:	a801      	add	r0, sp, #4
   b6a46:	4611      	mov	r1, r2
   b6a48:	f7ff fe54 	bl	b66f4 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>
    if (error != Error::NONE) {
   b6a4c:	b1a4      	cbz	r4, b6a78 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x3c>
        p.setError(Error((Error::Type)error, (const char*)data));
   b6a4e:	b224      	sxth	r4, r4
        msg_(msg ? (const char*)strdup(msg) : nullptr),
   b6a50:	b11d      	cbz	r5, b6a5a <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x1e>
   b6a52:	4628      	mov	r0, r5
   b6a54:	f001 fe4c 	bl	b86f0 <strdup>
   b6a58:	4605      	mov	r5, r0
   b6a5a:	a801      	add	r0, sp, #4
   b6a5c:	a903      	add	r1, sp, #12
        type_(type) {
   b6a5e:	9503      	str	r5, [sp, #12]
   b6a60:	f8ad 4010 	strh.w	r4, [sp, #16]
   b6a64:	f7ff fea6 	bl	b67b4 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>
   b6a68:	a803      	add	r0, sp, #12
   b6a6a:	f7ff fe10 	bl	b668e <_ZN8particle5ErrorD1Ev>
   b6a6e:	a802      	add	r0, sp, #8
   b6a70:	f7fd fb56 	bl	b4120 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   b6a74:	b009      	add	sp, #36	; 0x24
   b6a76:	bdf0      	pop	{r4, r5, r6, r7, pc}
      { return _M_ptr; }
   b6a78:	9d01      	ldr	r5, [sp, #4]
	return __atomic_compare_exchange(std::__addressof(_M_i),
   b6a7a:	2301      	movs	r3, #1
   b6a7c:	e8d5 2f4f 	ldrexb	r2, [r5]
   b6a80:	2a00      	cmp	r2, #0
   b6a82:	d103      	bne.n	b6a8c <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x50>
   b6a84:	e8c5 3f41 	strexb	r1, r3, [r5]
   b6a88:	2900      	cmp	r1, #0
   b6a8a:	d1f7      	bne.n	b6a7c <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x40>
        if (this->changeState(State::SUCCEEDED)) {
   b6a8c:	d1ef      	bne.n	b6a6e <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x32>
            new(&result_) ResultT(std::move(result));
   b6a8e:	732b      	strb	r3, [r5, #12]
	__atomic_store_n(&_M_i, __i, int(__m));
   b6a90:	f3bf 8f5b 	dmb	ish
   b6a94:	706b      	strb	r3, [r5, #1]
	return __atomic_exchange_n(&_M_p, __p, int(__m));
   b6a96:	1d2b      	adds	r3, r5, #4
   b6a98:	f3bf 8f5b 	dmb	ish
   b6a9c:	e853 6f00 	ldrex	r6, [r3]
   b6aa0:	e843 4200 	strex	r2, r4, [r3]
   b6aa4:	2a00      	cmp	r2, #0
   b6aa6:	d1f9      	bne.n	b6a9c <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x60>
   b6aa8:	f3bf 8f5b 	dmb	ish
        if (callbackPtr) {
   b6aac:	2e00      	cmp	r6, #0
   b6aae:	d0de      	beq.n	b6a6e <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x32>
        return (application_thread_current(nullptr) != 0);
   b6ab0:	4620      	mov	r0, r4
   b6ab2:	f7ff fcc3 	bl	b643c <application_thread_current>
        if (ContextT::isApplicationThreadCurrent()) {
   b6ab6:	4607      	mov	r7, r0
   b6ab8:	b160      	cbz	r0, b6ad4 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x98>
            callback(std::forward<ArgsT>(args)...); // Synchronous call
   b6aba:	f105 010c 	add.w	r1, r5, #12
   b6abe:	4630      	mov	r0, r6
   b6ac0:	f7ff fe43 	bl	b674a <_ZNKSt8functionIFvRKbEEclES1_>
    class function<_Res(_ArgTypes...)>
   b6ac4:	4630      	mov	r0, r6
   b6ac6:	f7ff fda4 	bl	b6612 <_ZNSt14_Function_baseD1Ev>
            delete callbackPtr;
   b6aca:	2110      	movs	r1, #16
   b6acc:	4630      	mov	r0, r6
   b6ace:	f7fd fae6 	bl	b409e <_ZdlPvj>
   b6ad2:	e7cc      	b.n	b6a6e <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x32>
	: _M_f(__f), _M_bound_args(std::forward<_Args>(__args)...)
   b6ad4:	4631      	mov	r1, r6
   b6ad6:	a803      	add	r0, sp, #12
   b6ad8:	f7ff ffa0 	bl	b6a1c <_ZNSt8functionIFvRKbEEC1ERKS3_>
	: _M_head_impl(std::forward<_UHead>(__h)) { }
   b6adc:	7b2b      	ldrb	r3, [r5, #12]
   b6ade:	f88d 301c 	strb.w	r3, [sp, #28]
            auto callbackPtr = new std::function<void()>(std::bind(callback, std::forward<ArgsT>(args)...));
   b6ae2:	2010      	movs	r0, #16
   b6ae4:	f7fd fad7 	bl	b4096 <_Znwj>
   b6ae8:	4605      	mov	r5, r0
   b6aea:	b1d0      	cbz	r0, b6b22 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0xe6>
    _Function_base() : _M_manager(nullptr) { }
   b6aec:	6087      	str	r7, [r0, #8]
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   b6aee:	2014      	movs	r0, #20
   b6af0:	f7fd fad1 	bl	b4096 <_Znwj>
   b6af4:	4604      	mov	r4, r0
   b6af6:	b178      	cbz	r0, b6b18 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0xdc>
    _Function_base() : _M_manager(nullptr) { }
   b6af8:	6087      	str	r7, [r0, #8]
	std::swap(_M_functor, __x._M_functor);
   b6afa:	4601      	mov	r1, r0
   b6afc:	a803      	add	r0, sp, #12
   b6afe:	f7ff fd91 	bl	b6624 <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b6b02:	9b05      	ldr	r3, [sp, #20]
      __a = _GLIBCXX_MOVE(__b);
   b6b04:	68a2      	ldr	r2, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   b6b06:	60a3      	str	r3, [r4, #8]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b6b08:	9b06      	ldr	r3, [sp, #24]
      __a = _GLIBCXX_MOVE(__b);
   b6b0a:	9205      	str	r2, [sp, #20]
   b6b0c:	68e2      	ldr	r2, [r4, #12]
      __b = _GLIBCXX_MOVE(__tmp);
   b6b0e:	60e3      	str	r3, [r4, #12]
   b6b10:	f89d 301c 	ldrb.w	r3, [sp, #28]
      __a = _GLIBCXX_MOVE(__b);
   b6b14:	9206      	str	r2, [sp, #24]
   b6b16:	7423      	strb	r3, [r4, #16]
	    _M_invoker = &_My_handler::_M_invoke;
   b6b18:	4b06      	ldr	r3, [pc, #24]	; (b6b34 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0xf8>)
   b6b1a:	60eb      	str	r3, [r5, #12]
	    _M_manager = &_My_handler::_M_manager;
   b6b1c:	4b06      	ldr	r3, [pc, #24]	; (b6b38 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0xfc>)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   b6b1e:	602c      	str	r4, [r5, #0]
	    _M_manager = &_My_handler::_M_manager;
   b6b20:	60ab      	str	r3, [r5, #8]
    class function<_Res(_ArgTypes...)>
   b6b22:	a803      	add	r0, sp, #12
   b6b24:	f7ff fd75 	bl	b6612 <_ZNSt14_Function_baseD1Ev>
        return (application_thread_invoke(callback, data, nullptr) == 0);
   b6b28:	2200      	movs	r2, #0
   b6b2a:	4629      	mov	r1, r5
   b6b2c:	4803      	ldr	r0, [pc, #12]	; (b6b3c <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x100>)
   b6b2e:	f7ff fc8d 	bl	b644c <application_thread_invoke>
   b6b32:	e7c7      	b.n	b6ac4 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x88>
   b6b34:	000b675d 	.word	0x000b675d
   b6b38:	000b6b41 	.word	0x000b6b41
   b6b3c:	000b65eb 	.word	0x000b65eb

000b6b40 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation>:
	switch (__op)
   b6b40:	2a01      	cmp	r2, #1
      _M_manager(_Any_data& __dest, const _Any_data& __source,
   b6b42:	b570      	push	{r4, r5, r6, lr}
   b6b44:	4604      	mov	r4, r0
	switch (__op)
   b6b46:	d103      	bne.n	b6b50 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x10>
	    return __source._M_access<_Functor*>();
   b6b48:	680b      	ldr	r3, [r1, #0]
	    __dest._M_access<_Functor*>() = _Base::_M_get_pointer(__source);
   b6b4a:	6003      	str	r3, [r0, #0]
      }
   b6b4c:	2000      	movs	r0, #0
   b6b4e:	bd70      	pop	{r4, r5, r6, pc}
	  switch (__op)
   b6b50:	2a02      	cmp	r2, #2
   b6b52:	d00c      	beq.n	b6b6e <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x2e>
   b6b54:	2a03      	cmp	r2, #3
   b6b56:	d1f9      	bne.n	b6b4c <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0xc>
	  delete __victim._M_access<_Functor*>();
   b6b58:	6804      	ldr	r4, [r0, #0]
   b6b5a:	2c00      	cmp	r4, #0
   b6b5c:	d0f6      	beq.n	b6b4c <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0xc>
    class function<_Res(_ArgTypes...)>
   b6b5e:	4620      	mov	r0, r4
   b6b60:	f7ff fd57 	bl	b6612 <_ZNSt14_Function_baseD1Ev>
	  delete __victim._M_access<_Functor*>();
   b6b64:	2114      	movs	r1, #20
   b6b66:	4620      	mov	r0, r4
   b6b68:	f7fd fa99 	bl	b409e <_ZdlPvj>
   b6b6c:	e7ee      	b.n	b6b4c <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0xc>
	    new _Functor(*__source._M_access<const _Functor*>());
   b6b6e:	2014      	movs	r0, #20
	  __dest._M_access<_Functor*>() =
   b6b70:	680e      	ldr	r6, [r1, #0]
	    new _Functor(*__source._M_access<const _Functor*>());
   b6b72:	f7fd fa90 	bl	b4096 <_Znwj>
   b6b76:	4605      	mov	r5, r0
   b6b78:	b120      	cbz	r0, b6b84 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x44>
      _Bind(const _Bind&) = default;
   b6b7a:	4631      	mov	r1, r6
   b6b7c:	f7ff ff4e 	bl	b6a1c <_ZNSt8functionIFvRKbEEC1ERKS3_>
   b6b80:	7c33      	ldrb	r3, [r6, #16]
   b6b82:	742b      	strb	r3, [r5, #16]
	  __dest._M_access<_Functor*>() =
   b6b84:	6025      	str	r5, [r4, #0]
	}
   b6b86:	e7e1      	b.n	b6b4c <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0xc>

000b6b88 <_ZN5spark13EthernetClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   b6b88:	2200      	movs	r2, #0
   b6b8a:	6840      	ldr	r0, [r0, #4]
   b6b8c:	4611      	mov	r1, r2
   b6b8e:	f7ff bcc9 	b.w	b6524 <network_listening>

000b6b92 <_ZN5spark13EthernetClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
   b6b92:	2200      	movs	r2, #0
   b6b94:	6840      	ldr	r0, [r0, #4]
   b6b96:	4611      	mov	r1, r2
   b6b98:	f7ff bcd4 	b.w	b6544 <network_get_listen_timeout>

000b6b9c <_ZN5spark13EthernetClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
   b6b9c:	6840      	ldr	r0, [r0, #4]
   b6b9e:	2200      	movs	r2, #0
   b6ba0:	f7ff bcc8 	b.w	b6534 <network_set_listen_timeout>

000b6ba4 <_ZN5spark13EthernetClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
   b6ba4:	6840      	ldr	r0, [r0, #4]
   b6ba6:	2200      	movs	r2, #0
   b6ba8:	f081 0101 	eor.w	r1, r1, #1
   b6bac:	f7ff bcb2 	b.w	b6514 <network_listen>

000b6bb0 <_ZN5spark13EthernetClass3offEv>:
        network_off(*this, 0, 0, NULL);
   b6bb0:	2300      	movs	r3, #0
   b6bb2:	6840      	ldr	r0, [r0, #4]
   b6bb4:	461a      	mov	r2, r3
   b6bb6:	4619      	mov	r1, r3
   b6bb8:	f7ff bca4 	b.w	b6504 <network_off>

000b6bbc <_ZN5spark13EthernetClass2onEv>:
        network_on(*this, 0, 0, NULL);
   b6bbc:	2300      	movs	r3, #0
   b6bbe:	6840      	ldr	r0, [r0, #4]
   b6bc0:	461a      	mov	r2, r3
   b6bc2:	4619      	mov	r1, r3
   b6bc4:	f7ff bc96 	b.w	b64f4 <network_on>

000b6bc8 <_ZN5spark13EthernetClass5readyEv>:
    }

    bool ready() {
        return network_ready(*this, 0,  NULL);
   b6bc8:	2200      	movs	r2, #0
   b6bca:	6840      	ldr	r0, [r0, #4]
   b6bcc:	4611      	mov	r1, r2
   b6bce:	f7ff bc89 	b.w	b64e4 <network_ready>

000b6bd2 <_ZN5spark13EthernetClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
   b6bd2:	2200      	movs	r2, #0
   b6bd4:	6840      	ldr	r0, [r0, #4]
   b6bd6:	4611      	mov	r1, r2
   b6bd8:	f7ff bc74 	b.w	b64c4 <network_connecting>

000b6bdc <_ZN5spark13EthernetClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   b6bdc:	6840      	ldr	r0, [r0, #4]
   b6bde:	2200      	movs	r2, #0
   b6be0:	2102      	movs	r1, #2
   b6be2:	f7ff bc77 	b.w	b64d4 <network_disconnect>

000b6be6 <_ZN5spark13EthernetClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
   b6be6:	2300      	movs	r3, #0
   b6be8:	6840      	ldr	r0, [r0, #4]
   b6bea:	461a      	mov	r2, r3
   b6bec:	f7ff bc62 	b.w	b64b4 <network_connect>

000b6bf0 <_GLOBAL__sub_I__ZN5spark8EthernetE>:
    static NetworkClass& from(network_interface_t nif);

    virtual IPAddress resolve(const char* name);

    explicit NetworkClass(network_interface_t iface)
            : iface_(iface) {
   b6bf0:	4b02      	ldr	r3, [pc, #8]	; (b6bfc <_GLOBAL__sub_I__ZN5spark8EthernetE+0xc>)
   b6bf2:	2203      	movs	r2, #3
   b6bf4:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_ETHERNET) {
   b6bf6:	4a02      	ldr	r2, [pc, #8]	; (b6c00 <_GLOBAL__sub_I__ZN5spark8EthernetE+0x10>)
   b6bf8:	601a      	str	r2, [r3, #0]

namespace spark {

EthernetClass Ethernet;

} // spark
   b6bfa:	4770      	bx	lr
   b6bfc:	2003e6c8 	.word	0x2003e6c8
   b6c00:	000b8fb4 	.word	0x000b8fb4

000b6c04 <_ZN7TwoWireD1Ev>:
private:
  hal_i2c_interface_t _i2c;

public:
  TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& config);
  virtual ~TwoWire() {};
   b6c04:	4770      	bx	lr

000b6c06 <_ZN7TwoWire5writeEPKhj>:

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
   b6c06:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b6c08:	4606      	mov	r6, r0
   b6c0a:	4615      	mov	r5, r2
   b6c0c:	460c      	mov	r4, r1
   b6c0e:	188f      	adds	r7, r1, r2
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
   b6c10:	42bc      	cmp	r4, r7
   b6c12:	d006      	beq.n	b6c22 <_ZN7TwoWire5writeEPKhj+0x1c>
  {
    write(data[i]);
   b6c14:	6833      	ldr	r3, [r6, #0]
   b6c16:	f814 1b01 	ldrb.w	r1, [r4], #1
   b6c1a:	689b      	ldr	r3, [r3, #8]
   b6c1c:	4630      	mov	r0, r6
   b6c1e:	4798      	blx	r3
  for(size_t i = 0; i < quantity; ++i)
   b6c20:	e7f6      	b.n	b6c10 <_ZN7TwoWire5writeEPKhj+0xa>
  }

  return quantity;
}
   b6c22:	4628      	mov	r0, r5
   b6c24:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000b6c26 <_ZN7TwoWire5writeEh>:
  return hal_i2c_write(_i2c, data, NULL);
   b6c26:	7c00      	ldrb	r0, [r0, #16]
   b6c28:	2200      	movs	r2, #0
   b6c2a:	f7ff badf 	b.w	b61ec <hal_i2c_write>

000b6c2e <_ZN7TwoWire9availableEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::available(void)
{
  return hal_i2c_available(_i2c, NULL);
   b6c2e:	7c00      	ldrb	r0, [r0, #16]
   b6c30:	2100      	movs	r1, #0
   b6c32:	f7ff bae3 	b.w	b61fc <hal_i2c_available>

000b6c36 <_ZN7TwoWire4readEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::read(void)
{
  return hal_i2c_read(_i2c, NULL);
   b6c36:	7c00      	ldrb	r0, [r0, #16]
   b6c38:	2100      	movs	r1, #0
   b6c3a:	f7ff bae7 	b.w	b620c <hal_i2c_read>

000b6c3e <_ZN7TwoWire4peekEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::peek(void)
{
  return hal_i2c_peek(_i2c, NULL);
   b6c3e:	7c00      	ldrb	r0, [r0, #16]
   b6c40:	2100      	movs	r1, #0
   b6c42:	f7ff baeb 	b.w	b621c <hal_i2c_peek>

000b6c46 <_ZN7TwoWire5flushEv>:
}

void TwoWire::flush(void)
{
  hal_i2c_flush(_i2c, NULL);
   b6c46:	7c00      	ldrb	r0, [r0, #16]
   b6c48:	2100      	movs	r1, #0
   b6c4a:	f7ff baef 	b.w	b622c <hal_i2c_flush>

000b6c4e <_ZN7TwoWireD0Ev>:
   b6c4e:	b510      	push	{r4, lr}
   b6c50:	2114      	movs	r1, #20
   b6c52:	4604      	mov	r4, r0
   b6c54:	f7fd fa23 	bl	b409e <_ZdlPvj>
   b6c58:	4620      	mov	r0, r4
   b6c5a:	bd10      	pop	{r4, pc}

000b6c5c <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>:
TwoWire::TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& conf)
   b6c5c:	b538      	push	{r3, r4, r5, lr}
   b6c5e:	4604      	mov	r4, r0
   b6c60:	4615      	mov	r5, r2
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
   b6c62:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   b6c66:	2200      	movs	r2, #0
   b6c68:	e9c4 2301 	strd	r2, r3, [r4, #4]
   b6c6c:	4b09      	ldr	r3, [pc, #36]	; (b6c94 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t+0x38>)
  _i2c = i2c;
   b6c6e:	7421      	strb	r1, [r4, #16]
TwoWire::TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& conf)
   b6c70:	4608      	mov	r0, r1
   b6c72:	6023      	str	r3, [r4, #0]
  int result = hal_i2c_init(_i2c, &conf);
   b6c74:	4629      	mov	r1, r5
   b6c76:	f7ff fae9 	bl	b624c <hal_i2c_init>
  if (result == SYSTEM_ERROR_NOT_ENOUGH_DATA && 
   b6c7a:	30bf      	adds	r0, #191	; 0xbf
   b6c7c:	d108      	bne.n	b6c90 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t+0x34>
      (conf.flags & HAL_I2C_CONFIG_FLAG_FREEABLE)) {
   b6c7e:	696b      	ldr	r3, [r5, #20]
  if (result == SYSTEM_ERROR_NOT_ENOUGH_DATA && 
   b6c80:	07db      	lsls	r3, r3, #31
   b6c82:	d505      	bpl.n	b6c90 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t+0x34>
    free(conf.rx_buffer);
   b6c84:	6868      	ldr	r0, [r5, #4]
   b6c86:	f7ff fc7d 	bl	b6584 <free>
    free(conf.tx_buffer);
   b6c8a:	68e8      	ldr	r0, [r5, #12]
   b6c8c:	f7ff fc7a 	bl	b6584 <free>
}
   b6c90:	4620      	mov	r0, r4
   b6c92:	bd38      	pop	{r3, r4, r5, pc}
   b6c94:	000b8ff0 	.word	0x000b8ff0

000b6c98 <_ZN7TwoWire5beginEv>:
	hal_i2c_begin(_i2c, I2C_MODE_MASTER, 0x00, NULL);
   b6c98:	2300      	movs	r3, #0
   b6c9a:	7c00      	ldrb	r0, [r0, #16]
   b6c9c:	461a      	mov	r2, r3
   b6c9e:	4619      	mov	r1, r3
   b6ca0:	f7ff ba8c 	b.w	b61bc <hal_i2c_begin>

000b6ca4 <_ZN7TwoWire11requestFromERK16WireTransmission>:
size_t TwoWire::requestFrom(const WireTransmission& transfer) {
   b6ca4:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    hal_i2c_transmission_config_t conf = {
   b6ca6:	2200      	movs	r2, #0
   b6ca8:	2314      	movs	r3, #20
   b6caa:	e9cd 2201 	strd	r2, r2, [sp, #4]
   b6cae:	f8ad 3004 	strh.w	r3, [sp, #4]
    };
   b6cb2:	780b      	ldrb	r3, [r1, #0]
   b6cb4:	f88d 3008 	strb.w	r3, [sp, #8]
   b6cb8:	684b      	ldr	r3, [r1, #4]
   b6cba:	9303      	str	r3, [sp, #12]
   b6cbc:	68cb      	ldr	r3, [r1, #12]
   b6cbe:	9304      	str	r3, [sp, #16]
  return hal_i2c_request_ex(_i2c, &conf, nullptr);
   b6cc0:	7c00      	ldrb	r0, [r0, #16]
      .flags = (uint32_t)(stop_ ? HAL_I2C_TRANSMISSION_FLAG_STOP : 0)
   b6cc2:	7a0b      	ldrb	r3, [r1, #8]
   b6cc4:	9305      	str	r3, [sp, #20]
   b6cc6:	a901      	add	r1, sp, #4
   b6cc8:	f7ff fac8 	bl	b625c <hal_i2c_request_ex>
}
   b6ccc:	b007      	add	sp, #28
   b6cce:	f85d fb04 	ldr.w	pc, [sp], #4

000b6cd2 <_ZN7TwoWire11requestFromEhjh>:
{
   b6cd2:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  return requestFrom(WireTransmission(address).quantity(quantity).stop(sendStop));
   b6cd4:	3b00      	subs	r3, #0
        timeout_{HAL_I2C_DEFAULT_TIMEOUT_MS} {
   b6cd6:	f88d 1000 	strb.w	r1, [sp]
   b6cda:	f04f 0164 	mov.w	r1, #100	; 0x64
   b6cde:	9103      	str	r1, [sp, #12]
   b6ce0:	bf18      	it	ne
   b6ce2:	2301      	movne	r3, #1
   b6ce4:	4669      	mov	r1, sp
    size_ = size;
   b6ce6:	9201      	str	r2, [sp, #4]
   b6ce8:	f88d 3008 	strb.w	r3, [sp, #8]
   b6cec:	f7ff ffda 	bl	b6ca4 <_ZN7TwoWire11requestFromERK16WireTransmission>
}
   b6cf0:	b005      	add	sp, #20
   b6cf2:	f85d fb04 	ldr.w	pc, [sp], #4

000b6cf6 <_ZN7TwoWire11requestFromEhj>:
  return requestFrom(address, quantity, (uint8_t)true);
   b6cf6:	2301      	movs	r3, #1
   b6cf8:	f7ff bfeb 	b.w	b6cd2 <_ZN7TwoWire11requestFromEhjh>

000b6cfc <_ZN7TwoWire17beginTransmissionEh>:
	hal_i2c_begin_transmission(_i2c, address, NULL);
   b6cfc:	7c00      	ldrb	r0, [r0, #16]
   b6cfe:	2200      	movs	r2, #0
   b6d00:	f7ff ba64 	b.w	b61cc <hal_i2c_begin_transmission>

000b6d04 <_ZN7TwoWire15endTransmissionEh>:
	return hal_i2c_end_transmission(_i2c, sendStop, NULL);
   b6d04:	7c00      	ldrb	r0, [r0, #16]
   b6d06:	2200      	movs	r2, #0
   b6d08:	f7ff ba68 	b.w	b61dc <hal_i2c_end_transmission>

000b6d0c <_ZN9IPAddressD1Ev>:
    IPAddress(uint32_t address);
    // 4 bytes defining the IP address in network order
    IPAddress(const uint8_t* address);
    IPAddress(const HAL_IPAddress& address);

    virtual ~IPAddress() {}
   b6d0c:	4770      	bx	lr

000b6d0e <_ZN9IPAddressD0Ev>:
   b6d0e:	b510      	push	{r4, lr}
   b6d10:	2118      	movs	r1, #24
   b6d12:	4604      	mov	r4, r0
   b6d14:	f7fd f9c3 	bl	b409e <_ZdlPvj>
   b6d18:	4620      	mov	r0, r4
   b6d1a:	bd10      	pop	{r4, pc}

000b6d1c <_ZNK9IPAddress7printToER5Print>:
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
   b6d1c:	b5f0      	push	{r4, r5, r6, r7, lr}
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
   b6d1e:	7d03      	ldrb	r3, [r0, #20]
   b6d20:	2b06      	cmp	r3, #6
{
   b6d22:	b08d      	sub	sp, #52	; 0x34
   b6d24:	460e      	mov	r6, r1
		char buf[INET6_ADDRSTRLEN+1];
		buf[0] = 0;
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   b6d26:	f100 0704 	add.w	r7, r0, #4
   b6d2a:	f04f 0400 	mov.w	r4, #0
	if (address.v==6) {
   b6d2e:	d012      	beq.n	b6d56 <_ZNK9IPAddress7printToER5Print+0x3a>
   b6d30:	f100 0508 	add.w	r5, r0, #8
            val = n;
        }
#if __GNUC__ >= 9
#pragma GCC diagnostic pop
#endif // __GNUC__ >= 9
        return printNumber(val, base) + t;
   b6d34:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
   b6d38:	220a      	movs	r2, #10
   b6d3a:	4630      	mov	r0, r6
   b6d3c:	f000 f943 	bl	b6fc6 <_ZN5Print11printNumberEmh>
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
   b6d40:	42af      	cmp	r7, r5
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
   b6d42:	4404      	add	r4, r0
    for (int i = 0; i < 4; i++)
   b6d44:	d019      	beq.n	b6d7a <_ZNK9IPAddress7printToER5Print+0x5e>
        if (n)
   b6d46:	2c00      	cmp	r4, #0
   b6d48:	d0f4      	beq.n	b6d34 <_ZNK9IPAddress7printToER5Print+0x18>
            n += p.print('.');
   b6d4a:	212e      	movs	r1, #46	; 0x2e
   b6d4c:	4630      	mov	r0, r6
   b6d4e:	f000 f937 	bl	b6fc0 <_ZN5Print5printEc>
   b6d52:	4404      	add	r4, r0
   b6d54:	e7ee      	b.n	b6d34 <_ZNK9IPAddress7printToER5Print+0x18>
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   b6d56:	232f      	movs	r3, #47	; 0x2f
   b6d58:	466a      	mov	r2, sp
   b6d5a:	4639      	mov	r1, r7
   b6d5c:	200a      	movs	r0, #10
		buf[0] = 0;
   b6d5e:	f88d 4000 	strb.w	r4, [sp]
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   b6d62:	f7ff fa83 	bl	b626c <inet_inet_ntop>
      return write((const uint8_t *)str, strlen(str));
   b6d66:	4668      	mov	r0, sp
   b6d68:	f001 fcdf 	bl	b872a <strlen>
   b6d6c:	6833      	ldr	r3, [r6, #0]
   b6d6e:	4602      	mov	r2, r0
   b6d70:	68db      	ldr	r3, [r3, #12]
   b6d72:	4669      	mov	r1, sp
   b6d74:	4630      	mov	r0, r6
   b6d76:	4798      	blx	r3
   b6d78:	4604      	mov	r4, r0
    }
    return n;
}
   b6d7a:	4620      	mov	r0, r4
   b6d7c:	b00d      	add	sp, #52	; 0x34
   b6d7e:	bdf0      	pop	{r4, r5, r6, r7, pc}

000b6d80 <_ZN9IPAddressC1Ev>:
IPAddress::IPAddress()
   b6d80:	b510      	push	{r4, lr}
   b6d82:	4b05      	ldr	r3, [pc, #20]	; (b6d98 <_ZN9IPAddressC1Ev+0x18>)
   b6d84:	4604      	mov	r4, r0
        return address;
    }

    virtual size_t printTo(Print& p) const;

    void clear() { memset(&address, 0, sizeof (address)); }
   b6d86:	2211      	movs	r2, #17
   b6d88:	f840 3b04 	str.w	r3, [r0], #4
   b6d8c:	2100      	movs	r1, #0
   b6d8e:	f001 fc71 	bl	b8674 <memset>
}
   b6d92:	4620      	mov	r0, r4
   b6d94:	bd10      	pop	{r4, pc}
   b6d96:	bf00      	nop
   b6d98:	000b9018 	.word	0x000b9018

000b6d9c <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>:
IPAddress::IPAddress(const HAL_IPAddress& address)
   b6d9c:	4603      	mov	r3, r0
   b6d9e:	4a07      	ldr	r2, [pc, #28]	; (b6dbc <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0x20>)
   b6da0:	b510      	push	{r4, lr}
   b6da2:	f843 2b04 	str.w	r2, [r3], #4
    memcpy(&this->address, &address, sizeof(address));
   b6da6:	f101 0210 	add.w	r2, r1, #16
   b6daa:	f851 4b04 	ldr.w	r4, [r1], #4
   b6dae:	f843 4b04 	str.w	r4, [r3], #4
   b6db2:	4291      	cmp	r1, r2
   b6db4:	d1f9      	bne.n	b6daa <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0xe>
   b6db6:	780a      	ldrb	r2, [r1, #0]
   b6db8:	701a      	strb	r2, [r3, #0]
}
   b6dba:	bd10      	pop	{r4, pc}
   b6dbc:	000b9018 	.word	0x000b9018

000b6dc0 <_ZN9IPAddress8set_ipv4Ehhhh>:
{
   b6dc0:	b510      	push	{r4, lr}
    address.ipv4 = b0<<24 | b1 << 16 | b2 << 8 | b3;
   b6dc2:	f89d 4008 	ldrb.w	r4, [sp, #8]
   b6dc6:	ea44 2303 	orr.w	r3, r4, r3, lsl #8
   b6dca:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
   b6dce:	ea42 6101 	orr.w	r1, r2, r1, lsl #24
        address.v = version;
   b6dd2:	2304      	movs	r3, #4
   b6dd4:	6041      	str	r1, [r0, #4]
   b6dd6:	7503      	strb	r3, [r0, #20]
}
   b6dd8:	bd10      	pop	{r4, pc}
	...

000b6ddc <_ZN9IPAddressC1EPKh>:
IPAddress::IPAddress(const uint8_t* addr)
   b6ddc:	b507      	push	{r0, r1, r2, lr}
   b6dde:	4b06      	ldr	r3, [pc, #24]	; (b6df8 <_ZN9IPAddressC1EPKh+0x1c>)
   b6de0:	6003      	str	r3, [r0, #0]
    set_ipv4(addr[0], addr[1], addr[2], addr[3]);
   b6de2:	78cb      	ldrb	r3, [r1, #3]
   b6de4:	9300      	str	r3, [sp, #0]
   b6de6:	788b      	ldrb	r3, [r1, #2]
   b6de8:	784a      	ldrb	r2, [r1, #1]
   b6dea:	7809      	ldrb	r1, [r1, #0]
   b6dec:	f7ff ffe8 	bl	b6dc0 <_ZN9IPAddress8set_ipv4Ehhhh>
}
   b6df0:	b003      	add	sp, #12
   b6df2:	f85d fb04 	ldr.w	pc, [sp], #4
   b6df6:	bf00      	nop
   b6df8:	000b9018 	.word	0x000b9018

000b6dfc <_GLOBAL__sub_I__ZN5spark3LogE>:
    // This handler doesn't support direct logging
}

// spark::Logger
inline spark::Logger::Logger(const char *name) :
        name_(name) {
   b6dfc:	4b01      	ldr	r3, [pc, #4]	; (b6e04 <_GLOBAL__sub_I__ZN5spark3LogE+0x8>)
   b6dfe:	4a02      	ldr	r2, [pc, #8]	; (b6e08 <_GLOBAL__sub_I__ZN5spark3LogE+0xc>)
   b6e00:	601a      	str	r2, [r3, #0]
#if Wiring_LogConfig

// spark::
void spark::logProcessControlRequest(ctrl_request* req) {
    JSONRequestHandler::process(req);
}
   b6e02:	4770      	bx	lr
   b6e04:	2003e6d0 	.word	0x2003e6d0
   b6e08:	000b9024 	.word	0x000b9024

000b6e0c <_ZN5spark12NetworkClass7connectEj>:
        return Network;
    }
}

void NetworkClass::connect(unsigned flags) {
    network_connect(*this, flags, 0, nullptr);
   b6e0c:	2300      	movs	r3, #0
   b6e0e:	6840      	ldr	r0, [r0, #4]
   b6e10:	461a      	mov	r2, r3
   b6e12:	f7ff bb4f 	b.w	b64b4 <network_connect>

000b6e16 <_ZN5spark12NetworkClass10disconnectEv>:
}

void NetworkClass::disconnect() {
    network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, nullptr);
   b6e16:	6840      	ldr	r0, [r0, #4]
   b6e18:	2200      	movs	r2, #0
   b6e1a:	2102      	movs	r1, #2
   b6e1c:	f7ff bb5a 	b.w	b64d4 <network_disconnect>

000b6e20 <_ZN5spark12NetworkClass10connectingEv>:
}

bool NetworkClass::connecting() {
    return network_connecting(*this, 0, nullptr);
   b6e20:	2200      	movs	r2, #0
   b6e22:	6840      	ldr	r0, [r0, #4]
   b6e24:	4611      	mov	r1, r2
   b6e26:	f7ff bb4d 	b.w	b64c4 <network_connecting>

000b6e2a <_ZN5spark12NetworkClass5readyEv>:
}

bool NetworkClass::ready() {
    return network_ready(*this, 0, nullptr);
   b6e2a:	2200      	movs	r2, #0
   b6e2c:	6840      	ldr	r0, [r0, #4]
   b6e2e:	4611      	mov	r1, r2
   b6e30:	f7ff bb58 	b.w	b64e4 <network_ready>

000b6e34 <_ZN5spark12NetworkClass2onEv>:
}

void NetworkClass::on() {
    network_on(*this, 0, 0, nullptr);
   b6e34:	2300      	movs	r3, #0
   b6e36:	6840      	ldr	r0, [r0, #4]
   b6e38:	461a      	mov	r2, r3
   b6e3a:	4619      	mov	r1, r3
   b6e3c:	f7ff bb5a 	b.w	b64f4 <network_on>

000b6e40 <_ZN5spark12NetworkClass3offEv>:
}

void NetworkClass::off() {
    network_off(*this, 0, 0, nullptr);
   b6e40:	2300      	movs	r3, #0
   b6e42:	6840      	ldr	r0, [r0, #4]
   b6e44:	461a      	mov	r2, r3
   b6e46:	4619      	mov	r1, r3
   b6e48:	f7ff bb5c 	b.w	b6504 <network_off>

000b6e4c <_ZN5spark12NetworkClass4isOnEv>:
}

bool NetworkClass::isOn() {
    return network_is_on(*this, nullptr);
   b6e4c:	6840      	ldr	r0, [r0, #4]
   b6e4e:	2100      	movs	r1, #0
   b6e50:	f7ff bb80 	b.w	b6554 <network_is_on>

000b6e54 <_ZN5spark12NetworkClass5isOffEv>:
}

bool NetworkClass::isOff() {
    return network_is_off(*this, nullptr);
   b6e54:	6840      	ldr	r0, [r0, #4]
   b6e56:	2100      	movs	r1, #0
   b6e58:	f7ff bb84 	b.w	b6564 <network_is_off>

000b6e5c <_ZN5spark12NetworkClass6listenEb>:
}

void NetworkClass::listen(bool begin) {
    network_listen(*this, begin ? 0 : 1, nullptr);
   b6e5c:	6840      	ldr	r0, [r0, #4]
   b6e5e:	2200      	movs	r2, #0
   b6e60:	f081 0101 	eor.w	r1, r1, #1
   b6e64:	f7ff bb56 	b.w	b6514 <network_listen>

000b6e68 <_ZN5spark12NetworkClass16setListenTimeoutEt>:
}

void NetworkClass::setListenTimeout(uint16_t timeout) {
    network_set_listen_timeout(*this, timeout, nullptr);
   b6e68:	6840      	ldr	r0, [r0, #4]
   b6e6a:	2200      	movs	r2, #0
   b6e6c:	f7ff bb62 	b.w	b6534 <network_set_listen_timeout>

000b6e70 <_ZN5spark12NetworkClass16getListenTimeoutEv>:
}

uint16_t NetworkClass::getListenTimeout() {
    return network_get_listen_timeout(*this, 0, nullptr);
   b6e70:	2200      	movs	r2, #0
   b6e72:	6840      	ldr	r0, [r0, #4]
   b6e74:	4611      	mov	r1, r2
   b6e76:	f7ff bb65 	b.w	b6544 <network_get_listen_timeout>

000b6e7a <_ZN5spark12NetworkClass9listeningEv>:
}

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
   b6e7a:	2200      	movs	r2, #0
   b6e7c:	6840      	ldr	r0, [r0, #4]
   b6e7e:	4611      	mov	r1, r2
   b6e80:	f7ff bb50 	b.w	b6524 <network_listening>

000b6e84 <_ZN5spark12NetworkClass7resolveEPKc>:
}

IPAddress NetworkClass::resolve(const char* name) {
   b6e84:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   b6e88:	b095      	sub	sp, #84	; 0x54
   b6e8a:	4614      	mov	r4, r2
   b6e8c:	460d      	mov	r5, r1
   b6e8e:	4607      	mov	r7, r0
    IPAddress addr;
   b6e90:	f7ff ff76 	bl	b6d80 <_ZN9IPAddressC1Ev>
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
   b6e94:	2100      	movs	r1, #0
    struct addrinfo hints = {};
   b6e96:	221c      	movs	r2, #28
   b6e98:	a80d      	add	r0, sp, #52	; 0x34
    struct addrinfo *ai = nullptr;
   b6e9a:	9100      	str	r1, [sp, #0]
    struct addrinfo hints = {};
   b6e9c:	f001 fbea 	bl	b8674 <memset>
    hints.ai_flags = AI_ADDRCONFIG;
   b6ea0:	2340      	movs	r3, #64	; 0x40
   b6ea2:	930c      	str	r3, [sp, #48]	; 0x30
    hints.ai_family = AF_UNSPEC;
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
   b6ea4:	4620      	mov	r0, r4
   b6ea6:	466b      	mov	r3, sp
   b6ea8:	aa0c      	add	r2, sp, #48	; 0x30
   b6eaa:	2100      	movs	r1, #0
   b6eac:	f7ff f9ee 	bl	b628c <netdb_getaddrinfo>
    if (!r) {
   b6eb0:	4604      	mov	r4, r0
   b6eb2:	2800      	cmp	r0, #0
   b6eb4:	d14b      	bne.n	b6f4e <_ZN5spark12NetworkClass7resolveEPKc+0xca>
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   b6eb6:	4602      	mov	r2, r0
   b6eb8:	2101      	movs	r1, #1
   b6eba:	6868      	ldr	r0, [r5, #4]
   b6ebc:	f7ff fb12 	bl	b64e4 <network_ready>
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   b6ec0:	2102      	movs	r1, #2
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   b6ec2:	4680      	mov	r8, r0
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   b6ec4:	4622      	mov	r2, r4
   b6ec6:	6868      	ldr	r0, [r5, #4]
   b6ec8:	f7ff fb0c 	bl	b64e4 <network_ready>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   b6ecc:	9e00      	ldr	r6, [sp, #0]
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   b6ece:	4681      	mov	r9, r0
        bool ok = false;
   b6ed0:	4621      	mov	r1, r4
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   b6ed2:	2e00      	cmp	r6, #0
   b6ed4:	d03b      	beq.n	b6f4e <_ZN5spark12NetworkClass7resolveEPKc+0xca>
   b6ed6:	2900      	cmp	r1, #0
   b6ed8:	d139      	bne.n	b6f4e <_ZN5spark12NetworkClass7resolveEPKc+0xca>
            // NOTE: using only the first entry that matches the current state of IPv4/IPv6 connectivity
            switch (cur->ai_family) {
   b6eda:	6873      	ldr	r3, [r6, #4]
   b6edc:	2b02      	cmp	r3, #2
   b6ede:	d003      	beq.n	b6ee8 <_ZN5spark12NetworkClass7resolveEPKc+0x64>
   b6ee0:	2b0a      	cmp	r3, #10
   b6ee2:	d011      	beq.n	b6f08 <_ZN5spark12NetworkClass7resolveEPKc+0x84>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   b6ee4:	69f6      	ldr	r6, [r6, #28]
   b6ee6:	e7f4      	b.n	b6ed2 <_ZN5spark12NetworkClass7resolveEPKc+0x4e>
                case AF_INET: {
                    if (!ipv4) {
   b6ee8:	f1b8 0f00 	cmp.w	r8, #0
   b6eec:	d0fa      	beq.n	b6ee4 <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                        continue;
                    }
                    // NOTE: HAL_IPAddress is little-endian
                    auto in = (struct sockaddr_in*)cur->ai_addr;
                    addr = (const uint8_t*)(&in->sin_addr.s_addr);
   b6eee:	6971      	ldr	r1, [r6, #20]
        return *this = IPAddress(address);
   b6ef0:	a806      	add	r0, sp, #24
   b6ef2:	3104      	adds	r1, #4
class IPAddress : public Printable {
   b6ef4:	ad07      	add	r5, sp, #28
        return *this = IPAddress(address);
   b6ef6:	f7ff ff71 	bl	b6ddc <_ZN9IPAddressC1EPKh>
class IPAddress : public Printable {
   b6efa:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b6efc:	1d3c      	adds	r4, r7, #4
   b6efe:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b6f00:	682b      	ldr	r3, [r5, #0]
   b6f02:	7023      	strb	r3, [r4, #0]
                    ok = true;
   b6f04:	4641      	mov	r1, r8
        return *this = IPAddress(address);
   b6f06:	e7ed      	b.n	b6ee4 <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                    break;
                }
                case AF_INET6: {
                    if (!ipv6) {
   b6f08:	f1b9 0f00 	cmp.w	r9, #0
   b6f0c:	d0ea      	beq.n	b6ee4 <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                        continue;
                    }
                    auto in6 = (struct sockaddr_in6*)cur->ai_addr;
   b6f0e:	6974      	ldr	r4, [r6, #20]
                    HAL_IPAddress a = {};
   b6f10:	2210      	movs	r2, #16
   b6f12:	a801      	add	r0, sp, #4
   b6f14:	f001 fbae 	bl	b8674 <memset>
                    a.v = 6;
   b6f18:	2306      	movs	r3, #6
   b6f1a:	f88d 3014 	strb.w	r3, [sp, #20]
                    memcpy(a.ipv6, in6->sin6_addr.s6_addr, sizeof(a.ipv6));
   b6f1e:	ad01      	add	r5, sp, #4
   b6f20:	f104 0308 	add.w	r3, r4, #8
   b6f24:	3418      	adds	r4, #24
   b6f26:	6818      	ldr	r0, [r3, #0]
   b6f28:	6859      	ldr	r1, [r3, #4]
   b6f2a:	462a      	mov	r2, r5
   b6f2c:	c203      	stmia	r2!, {r0, r1}
   b6f2e:	3308      	adds	r3, #8
   b6f30:	42a3      	cmp	r3, r4
   b6f32:	4615      	mov	r5, r2
   b6f34:	d1f7      	bne.n	b6f26 <_ZN5spark12NetworkClass7resolveEPKc+0xa2>
                    addr = IPAddress(a);
   b6f36:	a901      	add	r1, sp, #4
   b6f38:	a806      	add	r0, sp, #24
class IPAddress : public Printable {
   b6f3a:	ad07      	add	r5, sp, #28
   b6f3c:	f7ff ff2e 	bl	b6d9c <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
   b6f40:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b6f42:	1d3c      	adds	r4, r7, #4
   b6f44:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b6f46:	682b      	ldr	r3, [r5, #0]
   b6f48:	7023      	strb	r3, [r4, #0]
                    ok = true;
   b6f4a:	4649      	mov	r1, r9
   b6f4c:	e7ca      	b.n	b6ee4 <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                    break;
                }
            }
        }
    }
    freeaddrinfo(ai);
   b6f4e:	9800      	ldr	r0, [sp, #0]
   b6f50:	f7ff f994 	bl	b627c <netdb_freeaddrinfo>
    return Cellular.resolve(name);
#endif // Wiring_Cellular

#endif // HAL_USE_INET_HAL_POSIX
    return addr;
}
   b6f54:	4638      	mov	r0, r7
   b6f56:	b015      	add	sp, #84	; 0x54
   b6f58:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

000b6f5c <_GLOBAL__sub_I__ZN5spark7NetworkE>:
   b6f5c:	4b02      	ldr	r3, [pc, #8]	; (b6f68 <_GLOBAL__sub_I__ZN5spark7NetworkE+0xc>)
   b6f5e:	4a03      	ldr	r2, [pc, #12]	; (b6f6c <_GLOBAL__sub_I__ZN5spark7NetworkE+0x10>)
   b6f60:	601a      	str	r2, [r3, #0]
   b6f62:	2200      	movs	r2, #0
   b6f64:	605a      	str	r2, [r3, #4]

} // spark
   b6f66:	4770      	bx	lr
   b6f68:	2003e6d4 	.word	0x2003e6d4
   b6f6c:	000b9030 	.word	0x000b9030

000b6f70 <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
   b6f70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b6f72:	4606      	mov	r6, r0
   b6f74:	460d      	mov	r5, r1
  size_t n = 0;
   b6f76:	188f      	adds	r7, r1, r2
   b6f78:	2400      	movs	r4, #0
  while (size--) {
   b6f7a:	42bd      	cmp	r5, r7
   b6f7c:	d00c      	beq.n	b6f98 <_ZN5Print5writeEPKhj+0x28>
     int chunk = write(*buffer++);
   b6f7e:	6833      	ldr	r3, [r6, #0]
   b6f80:	f815 1b01 	ldrb.w	r1, [r5], #1
   b6f84:	689b      	ldr	r3, [r3, #8]
   b6f86:	4630      	mov	r0, r6
   b6f88:	4798      	blx	r3
     if (chunk>=0)
   b6f8a:	1e03      	subs	r3, r0, #0
   b6f8c:	db01      	blt.n	b6f92 <_ZN5Print5writeEPKhj+0x22>
         n += chunk;
   b6f8e:	441c      	add	r4, r3
  while (size--) {
   b6f90:	e7f3      	b.n	b6f7a <_ZN5Print5writeEPKhj+0xa>
     int chunk = write(*buffer++);
   b6f92:	2c00      	cmp	r4, #0
   b6f94:	bf08      	it	eq
   b6f96:	461c      	moveq	r4, r3
             n = chunk;
         break;
     }
  }
  return n;
}
   b6f98:	4620      	mov	r0, r4
   b6f9a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000b6f9c <_ZN5Print5writeEPKc>:
    size_t write(const char *str) {
   b6f9c:	b513      	push	{r0, r1, r4, lr}
   b6f9e:	4604      	mov	r4, r0
    }
   b6fa0:	4608      	mov	r0, r1
      if (str == NULL) return 0;
   b6fa2:	b159      	cbz	r1, b6fbc <_ZN5Print5writeEPKc+0x20>
      return write((const uint8_t *)str, strlen(str));
   b6fa4:	9101      	str	r1, [sp, #4]
   b6fa6:	f001 fbc0 	bl	b872a <strlen>
   b6faa:	6823      	ldr	r3, [r4, #0]
   b6fac:	9901      	ldr	r1, [sp, #4]
   b6fae:	68db      	ldr	r3, [r3, #12]
   b6fb0:	4602      	mov	r2, r0
   b6fb2:	4620      	mov	r0, r4
    }
   b6fb4:	b002      	add	sp, #8
   b6fb6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return write((const uint8_t *)str, strlen(str));
   b6fba:	4718      	bx	r3
    }
   b6fbc:	b002      	add	sp, #8
   b6fbe:	bd10      	pop	{r4, pc}

000b6fc0 <_ZN5Print5printEc>:
  return write(str);
}

size_t Print::print(char c)
{
  return write(c);
   b6fc0:	6803      	ldr	r3, [r0, #0]
   b6fc2:	689b      	ldr	r3, [r3, #8]
   b6fc4:	4718      	bx	r3

000b6fc6 <_ZN5Print11printNumberEmh>:
  return println(reinterpret_cast<const char*>(str));
}

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base) {
   b6fc6:	b530      	push	{r4, r5, lr}
   b6fc8:	b08b      	sub	sp, #44	; 0x2c
  char buf[8 * sizeof(n) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
   b6fca:	2300      	movs	r3, #0

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
   b6fcc:	2a01      	cmp	r2, #1
  *str = '\0';
   b6fce:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
  if (base < 2) base = 10;
   b6fd2:	bf98      	it	ls
   b6fd4:	220a      	movls	r2, #10
   b6fd6:	ac09      	add	r4, sp, #36	; 0x24

  do {
   decltype(n) m = n;
   n /= base;
   b6fd8:	460d      	mov	r5, r1
   b6fda:	fbb1 f1f2 	udiv	r1, r1, r2
   char c = m - base * n;
   b6fde:	fb01 5312 	mls	r3, r1, r2, r5
   b6fe2:	f003 03ff 	and.w	r3, r3, #255	; 0xff
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
   b6fe6:	2b09      	cmp	r3, #9
   b6fe8:	bf94      	ite	ls
   b6fea:	3330      	addls	r3, #48	; 0x30
   b6fec:	3337      	addhi	r3, #55	; 0x37
   b6fee:	b2db      	uxtb	r3, r3
  } while(n);
   b6ff0:	42aa      	cmp	r2, r5
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
   b6ff2:	f804 3d01 	strb.w	r3, [r4, #-1]!
  } while(n);
   b6ff6:	d9ef      	bls.n	b6fd8 <_ZN5Print11printNumberEmh+0x12>

  return write(str);
   b6ff8:	4621      	mov	r1, r4
   b6ffa:	f7ff ffcf 	bl	b6f9c <_ZN5Print5writeEPKc>
}
   b6ffe:	b00b      	add	sp, #44	; 0x2c
   b7000:	bd30      	pop	{r4, r5, pc}
	...

000b7004 <_GLOBAL__sub_I_RGB>:
    _Function_base() : _M_manager(nullptr) { }
   b7004:	4b01      	ldr	r3, [pc, #4]	; (b700c <_GLOBAL__sub_I_RGB+0x8>)
   b7006:	2200      	movs	r2, #0
   b7008:	609a      	str	r2, [r3, #8]
{
    RGBClass* const d = static_cast<RGBClass*>(data);
    if (d->changeHandler_) {
        d->changeHandler_(r, g, b);
    }
}
   b700a:	4770      	bx	lr
   b700c:	2003e6dc 	.word	0x2003e6dc

000b7010 <_ZN8SPIClass6unlockEv.isra.0>:
  }

  void unlock()
  {
#if HAL_PLATFORM_SPI_HAL_THREAD_SAFETY
    hal_spi_release(_spi, nullptr);
   b7010:	2100      	movs	r1, #0
   b7012:	f7ff b97b 	b.w	b630c <hal_spi_release>

000b7016 <_ZN8SPIClass4lockEv.isra.0>:
    return hal_spi_acquire(_spi, nullptr);
   b7016:	2100      	movs	r1, #0
   b7018:	f7ff b970 	b.w	b62fc <hal_spi_acquire>

000b701c <_ZN8SPIClassC1E19hal_spi_interface_t>:
    }
    return particle::SPISettings(info->clock, info->bit_order, info->data_mode);
}
} // namespace

SPIClass::SPIClass(hal_spi_interface_t spi)
   b701c:	b510      	push	{r4, lr}
   b701e:	4604      	mov	r4, r0
   b7020:	4608      	mov	r0, r1
{
    _spi = spi;
   b7022:	7021      	strb	r1, [r4, #0]
    hal_spi_init(_spi);
   b7024:	f7ff f94a 	bl	b62bc <hal_spi_init>
    _dividerReference = SPI_CLK_SYSTEM; // 0 indicates the system clock
   b7028:	2300      	movs	r3, #0
   b702a:	6063      	str	r3, [r4, #4]
}
   b702c:	4620      	mov	r0, r4
   b702e:	bd10      	pop	{r4, pc}

000b7030 <_ZN8SPIClass5beginEv>:

void SPIClass::begin()
{
   b7030:	b513      	push	{r0, r1, r4, lr}
   b7032:	4604      	mov	r4, r0
    // TODO: Fetch default pin from HAL
    if (!lock())
   b7034:	7800      	ldrb	r0, [r0, #0]
   b7036:	f7ff ffee 	bl	b7016 <_ZN8SPIClass4lockEv.isra.0>
   b703a:	b958      	cbnz	r0, b7054 <_ZN8SPIClass5beginEv+0x24>
   b703c:	7820      	ldrb	r0, [r4, #0]
    {
        hal_spi_begin(_spi, SPI_DEFAULT_SS);
   b703e:	9001      	str	r0, [sp, #4]
   b7040:	f64f 71ff 	movw	r1, #65535	; 0xffff
   b7044:	f7ff f92a 	bl	b629c <hal_spi_begin>
        unlock();
   b7048:	9801      	ldr	r0, [sp, #4]
    }
}
   b704a:	b002      	add	sp, #8
   b704c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   b7050:	f7ff bfde 	b.w	b7010 <_ZN8SPIClass6unlockEv.isra.0>
   b7054:	b002      	add	sp, #8
   b7056:	bd10      	pop	{r4, pc}

000b7058 <_ZN8SPIClass14endTransactionEv>:
}

void SPIClass::endTransaction()
{
    // Release peripheral
    unlock();
   b7058:	7800      	ldrb	r0, [r0, #0]
   b705a:	f7ff bfd9 	b.w	b7010 <_ZN8SPIClass6unlockEv.isra.0>
	...

000b7060 <_ZN8SPIClass19computeClockDividerEjjRhRj>:
void SPIClass::computeClockDivider(unsigned reference, unsigned targetSpeed, uint8_t& divider,
                                   unsigned& clock)
{
    clock = reference;
    uint8_t scale = 0;
    clock >>= 1; // div2 is the first
   b7060:	0840      	lsrs	r0, r0, #1
{
   b7062:	b530      	push	{r4, r5, lr}
    clock >>= 1; // div2 is the first
   b7064:	6018      	str	r0, [r3, #0]
   b7066:	2400      	movs	r4, #0
    while (clock > targetSpeed && scale < 7)
   b7068:	6818      	ldr	r0, [r3, #0]
   b706a:	4288      	cmp	r0, r1
   b706c:	b2e5      	uxtb	r5, r4
   b706e:	d906      	bls.n	b707e <_ZN8SPIClass19computeClockDividerEjjRhRj+0x1e>
   b7070:	3401      	adds	r4, #1
   b7072:	2c08      	cmp	r4, #8
   b7074:	d002      	beq.n	b707c <_ZN8SPIClass19computeClockDividerEjjRhRj+0x1c>
    {
        clock >>= 1;
   b7076:	0840      	lsrs	r0, r0, #1
   b7078:	6018      	str	r0, [r3, #0]
    while (clock > targetSpeed && scale < 7)
   b707a:	e7f5      	b.n	b7068 <_ZN8SPIClass19computeClockDividerEjjRhRj+0x8>
   b707c:	2507      	movs	r5, #7
        scale++;
    }
    divider = clock_divisors[scale];
   b707e:	4b02      	ldr	r3, [pc, #8]	; (b7088 <_ZN8SPIClass19computeClockDividerEjjRhRj+0x28>)
   b7080:	5d5b      	ldrb	r3, [r3, r5]
   b7082:	7013      	strb	r3, [r2, #0]
}
   b7084:	bd30      	pop	{r4, r5, pc}
   b7086:	bf00      	nop
   b7088:	000b9064 	.word	0x000b9064

000b708c <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE>:
{
   b708c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   b7090:	4606      	mov	r6, r0
   b7092:	b08f      	sub	sp, #60	; 0x3c
    CHECK(lock());
   b7094:	7800      	ldrb	r0, [r0, #0]
{
   b7096:	460c      	mov	r4, r1
    CHECK(lock());
   b7098:	f7ff ffbd 	bl	b7016 <_ZN8SPIClass4lockEv.isra.0>
   b709c:	2800      	cmp	r0, #0
   b709e:	db1b      	blt.n	b70d8 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x4c>
    querySpiInfo(_spi, &spi_info);
   b70a0:	7835      	ldrb	r5, [r6, #0]
    memset(info, 0, sizeof(hal_spi_info_t));
   b70a2:	2214      	movs	r2, #20
   b70a4:	2100      	movs	r1, #0
   b70a6:	a809      	add	r0, sp, #36	; 0x24
   b70a8:	f001 fae4 	bl	b8674 <memset>
    info->version = HAL_SPI_INFO_VERSION_1;
   b70ac:	230b      	movs	r3, #11
    hal_spi_info(spi, info, nullptr);
   b70ae:	2200      	movs	r2, #0
   b70b0:	a909      	add	r1, sp, #36	; 0x24
   b70b2:	4628      	mov	r0, r5
    info->version = HAL_SPI_INFO_VERSION_1;
   b70b4:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
    hal_spi_info(spi, info, nullptr);
   b70b8:	f7ff f910 	bl	b62dc <hal_spi_info>
    if (!info || !info->enabled || info->default_settings)
   b70bc:	f89d 302d 	ldrb.w	r3, [sp, #45]	; 0x2d
   b70c0:	b113      	cbz	r3, b70c8 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x3c>
   b70c2:	f89d 502c 	ldrb.w	r5, [sp, #44]	; 0x2c
   b70c6:	b155      	cbz	r5, b70de <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x52>
  {
   b70c8:	2700      	movs	r7, #0
   b70ca:	46b9      	mov	r9, r7
   b70cc:	46b8      	mov	r8, r7
   b70ce:	2501      	movs	r5, #1
    if (default_ && other.default_)
   b70d0:	7923      	ldrb	r3, [r4, #4]
   b70d2:	b15d      	cbz	r5, b70ec <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x60>
   b70d4:	b1c3      	cbz	r3, b7108 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x7c>
    return 0;
   b70d6:	2000      	movs	r0, #0
}
   b70d8:	b00f      	add	sp, #60	; 0x3c
   b70da:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    return particle::SPISettings(info->clock, info->bit_order, info->data_mode);
   b70de:	f8dd 8030 	ldr.w	r8, [sp, #48]	; 0x30
   b70e2:	f89d 9034 	ldrb.w	r9, [sp, #52]	; 0x34
   b70e6:	f89d 7035 	ldrb.w	r7, [sp, #53]	; 0x35
  }
   b70ea:	e7f1      	b.n	b70d0 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x44>
    if (default_ == other.default_ &&
   b70ec:	2b00      	cmp	r3, #0
   b70ee:	d135      	bne.n	b715c <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xd0>
   b70f0:	68a3      	ldr	r3, [r4, #8]
   b70f2:	4543      	cmp	r3, r8
   b70f4:	d108      	bne.n	b7108 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x7c>
        bitOrder_ == other.bitOrder_ &&
   b70f6:	f88d 9020 	strb.w	r9, [sp, #32]
   b70fa:	f88d 7021 	strb.w	r7, [sp, #33]	; 0x21
   b70fe:	f8bd 2020 	ldrh.w	r2, [sp, #32]
   b7102:	89a3      	ldrh	r3, [r4, #12]
   b7104:	429a      	cmp	r2, r3
   b7106:	d0e6      	beq.n	b70d6 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x4a>
            uint8_t divisor = 0;
   b7108:	2300      	movs	r3, #0
            computeClockDivider((unsigned int)spi_info.system_clock, settings.clock_, divisor,
   b710a:	68a1      	ldr	r1, [r4, #8]
            uint8_t divisor = 0;
   b710c:	f88d 300f 	strb.w	r3, [sp, #15]
            computeClockDivider((unsigned int)spi_info.system_clock, settings.clock_, divisor,
   b7110:	980a      	ldr	r0, [sp, #40]	; 0x28
   b7112:	ab04      	add	r3, sp, #16
   b7114:	f10d 020f 	add.w	r2, sp, #15
   b7118:	f7ff ffa2 	bl	b7060 <_ZN8SPIClass19computeClockDividerEjjRhRj>
    if (default_ && other.default_)
   b711c:	7921      	ldrb	r1, [r4, #4]
   b711e:	b985      	cbnz	r5, b7142 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xb6>
    if (default_ == other.default_ &&
   b7120:	b989      	cbnz	r1, b7146 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xba>
   b7122:	68a3      	ldr	r3, [r4, #8]
   b7124:	4543      	cmp	r3, r8
   b7126:	d30e      	bcc.n	b7146 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xba>
        bitOrder_ == other.bitOrder_ &&
   b7128:	f88d 9020 	strb.w	r9, [sp, #32]
   b712c:	f88d 7021 	strb.w	r7, [sp, #33]	; 0x21
   b7130:	f8bd 2020 	ldrh.w	r2, [sp, #32]
   b7134:	89a3      	ldrh	r3, [r4, #12]
   b7136:	429a      	cmp	r2, r3
   b7138:	d105      	bne.n	b7146 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xba>
            if (!(spi_settings <= settings && clock == spi_settings.clock_))
   b713a:	9b04      	ldr	r3, [sp, #16]
   b713c:	4543      	cmp	r3, r8
   b713e:	d102      	bne.n	b7146 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xba>
   b7140:	e7c9      	b.n	b70d6 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x4a>
    if (default_ && other.default_)
   b7142:	2900      	cmp	r1, #0
   b7144:	d1f9      	bne.n	b713a <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xae>
                hal_spi_set_settings(_spi, settings.default_, divisor, settings.bitOrder_,
   b7146:	2300      	movs	r3, #0
   b7148:	9301      	str	r3, [sp, #4]
   b714a:	7b63      	ldrb	r3, [r4, #13]
   b714c:	9300      	str	r3, [sp, #0]
   b714e:	f89d 200f 	ldrb.w	r2, [sp, #15]
   b7152:	7b23      	ldrb	r3, [r4, #12]
            hal_spi_set_settings(_spi, settings.default_, 0, 0, 0, nullptr);
   b7154:	7830      	ldrb	r0, [r6, #0]
   b7156:	f7ff f8c9 	bl	b62ec <hal_spi_set_settings>
   b715a:	e7bc      	b.n	b70d6 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x4a>
   b715c:	e9cd 5500 	strd	r5, r5, [sp]
   b7160:	462b      	mov	r3, r5
   b7162:	462a      	mov	r2, r5
   b7164:	2101      	movs	r1, #1
   b7166:	e7f5      	b.n	b7154 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xc8>

000b7168 <_ZN8SPIClass8transferEh>:

    return clock;
}

byte SPIClass::transfer(byte _data)
{
   b7168:	b508      	push	{r3, lr}
    return static_cast<byte>(hal_spi_transfer(_spi, _data));
   b716a:	7800      	ldrb	r0, [r0, #0]
   b716c:	f7ff f89e 	bl	b62ac <hal_spi_transfer>
}
   b7170:	b2c0      	uxtb	r0, r0
   b7172:	bd08      	pop	{r3, pc}

000b7174 <_Z4dtoadhPc>:
#include "string_convert.h"

//These are very crude implementations - will refine later
//------------------------------------------------------------------------------------------

void dtoa (double val, unsigned char prec, char *sout) {
   b7174:	e92d 4ff1 	stmdb	sp!, {r0, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b7178:	ec57 6b10 	vmov	r6, r7, d0
   b717c:	4680      	mov	r8, r0
   b717e:	460c      	mov	r4, r1
    bool negative = val<0;
    if (negative) {
   b7180:	ee10 0a10 	vmov	r0, s0
   b7184:	2200      	movs	r2, #0
   b7186:	2300      	movs	r3, #0
   b7188:	4639      	mov	r1, r7
   b718a:	f001 f877 	bl	b827c <__aeabi_dcmplt>
   b718e:	b128      	cbz	r0, b719c <_Z4dtoadhPc+0x28>
        val = -val;
   b7190:	f107 4300 	add.w	r3, r7, #2147483648	; 0x80000000
   b7194:	461f      	mov	r7, r3
        *sout++ = '-';
   b7196:	232d      	movs	r3, #45	; 0x2d
   b7198:	f804 3b01 	strb.w	r3, [r4], #1
   b719c:	2300      	movs	r3, #0
    }
    long scale = 1;
   b719e:	f04f 0901 	mov.w	r9, #1
    for (uint8_t i=0; i<prec; i++)
        scale *= 10;
   b71a2:	220a      	movs	r2, #10
    for (uint8_t i=0; i<prec; i++)
   b71a4:	b2d9      	uxtb	r1, r3
   b71a6:	4588      	cmp	r8, r1
   b71a8:	d903      	bls.n	b71b2 <_Z4dtoadhPc+0x3e>
        scale *= 10;
   b71aa:	fb02 f909 	mul.w	r9, r2, r9
    for (uint8_t i=0; i<prec; i++)
   b71ae:	3301      	adds	r3, #1
   b71b0:	e7f8      	b.n	b71a4 <_Z4dtoadhPc+0x30>
    val *= scale;   // capture all the significant digits
   b71b2:	4648      	mov	r0, r9
   b71b4:	f000 fd86 	bl	b7cc4 <__aeabi_i2d>
   b71b8:	4632      	mov	r2, r6
   b71ba:	463b      	mov	r3, r7
   b71bc:	f000 fdec 	bl	b7d98 <__aeabi_dmul>
   b71c0:	4606      	mov	r6, r0
   b71c2:	460f      	mov	r7, r1
    uint64_t fixed = uint64_t(val);
   b71c4:	f001 f8ba 	bl	b833c <__aeabi_d2ulz>
   b71c8:	468a      	mov	sl, r1
   b71ca:	4605      	mov	r5, r0
   b71cc:	468b      	mov	fp, r1
    if ((val-fixed)>=0.5)    // round last digit
   b71ce:	f000 fdad 	bl	b7d2c <__aeabi_ul2d>
   b71d2:	4602      	mov	r2, r0
   b71d4:	460b      	mov	r3, r1
   b71d6:	4630      	mov	r0, r6
   b71d8:	4639      	mov	r1, r7
   b71da:	f000 fc25 	bl	b7a28 <__aeabi_dsub>
   b71de:	4b14      	ldr	r3, [pc, #80]	; (b7230 <_Z4dtoadhPc+0xbc>)
   b71e0:	2200      	movs	r2, #0
   b71e2:	f001 f85f 	bl	b82a4 <__aeabi_dcmpge>
   b71e6:	b110      	cbz	r0, b71ee <_Z4dtoadhPc+0x7a>
        fixed++;
   b71e8:	3501      	adds	r5, #1
   b71ea:	f14a 0b00 	adc.w	fp, sl, #0

    unsigned long first = (unsigned long)(fixed / scale);
   b71ee:	464a      	mov	r2, r9
   b71f0:	4628      	mov	r0, r5
   b71f2:	17d3      	asrs	r3, r2, #31
   b71f4:	4659      	mov	r1, fp
   b71f6:	f001 f889 	bl	b830c <__aeabi_uldivmod>
    unsigned long second = (unsigned long)(fixed % scale);

    ultoa(first, sout, 10, 1);
   b71fa:	2301      	movs	r3, #1
   b71fc:	4615      	mov	r5, r2
   b71fe:	4621      	mov	r1, r4
   b7200:	220a      	movs	r2, #10
   b7202:	f000 fa48 	bl	b7696 <ultoa>
    if (prec) {
   b7206:	f1b8 0f00 	cmp.w	r8, #0
   b720a:	d00e      	beq.n	b722a <_Z4dtoadhPc+0xb6>
        sout += strlen(sout);
   b720c:	4620      	mov	r0, r4
   b720e:	f001 fa8c 	bl	b872a <strlen>
        *sout++ = '.';
   b7212:	232e      	movs	r3, #46	; 0x2e
        sout += strlen(sout);
   b7214:	1821      	adds	r1, r4, r0
        *sout++ = '.';
   b7216:	5423      	strb	r3, [r4, r0]
        ultoa(second, sout, 10, prec);
   b7218:	220a      	movs	r2, #10
   b721a:	4643      	mov	r3, r8
   b721c:	3101      	adds	r1, #1
   b721e:	4628      	mov	r0, r5
    }
}
   b7220:	b001      	add	sp, #4
   b7222:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
        ultoa(second, sout, 10, prec);
   b7226:	f000 ba36 	b.w	b7696 <ultoa>
}
   b722a:	b001      	add	sp, #4
   b722c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   b7230:	3fe00000 	.word	0x3fe00000

000b7234 <_ZN6StringD1Ev>:
	init();
	char buf[33];
	dtoa(value, decimalPlaces, buf);
        *this = buf;
}
String::~String()
   b7234:	b510      	push	{r4, lr}
   b7236:	4604      	mov	r4, r0
{
	free(buffer);
   b7238:	6800      	ldr	r0, [r0, #0]
   b723a:	f7ff f9a3 	bl	b6584 <free>
}
   b723e:	4620      	mov	r0, r4
   b7240:	bd10      	pop	{r4, pc}

000b7242 <_ZN6String10invalidateEv>:
	len = 0;
	flags = 0;
}

void String::invalidate(void)
{
   b7242:	b510      	push	{r4, lr}
   b7244:	4604      	mov	r4, r0
	if (buffer) free(buffer);
   b7246:	6800      	ldr	r0, [r0, #0]
   b7248:	b108      	cbz	r0, b724e <_ZN6String10invalidateEv+0xc>
   b724a:	f7ff f99b 	bl	b6584 <free>
	buffer = NULL;
   b724e:	2300      	movs	r3, #0
	capacity = len = 0;
   b7250:	e9c4 3301 	strd	r3, r3, [r4, #4]
	buffer = NULL;
   b7254:	6023      	str	r3, [r4, #0]
}
   b7256:	bd10      	pop	{r4, pc}

000b7258 <_ZN6String12changeBufferEj>:
	}
	return 0;
}

unsigned char String::changeBuffer(unsigned int maxStrLen)
{
   b7258:	b538      	push	{r3, r4, r5, lr}
   b725a:	4604      	mov	r4, r0
   b725c:	460d      	mov	r5, r1
	char *newbuffer = (char *)realloc(buffer, maxStrLen + 1);
   b725e:	6800      	ldr	r0, [r0, #0]
   b7260:	3101      	adds	r1, #1
   b7262:	f7ff f997 	bl	b6594 <realloc>
	if (newbuffer) {
   b7266:	b110      	cbz	r0, b726e <_ZN6String12changeBufferEj+0x16>
		buffer = newbuffer;
		capacity = maxStrLen;
   b7268:	e9c4 0500 	strd	r0, r5, [r4]
		return 1;
   b726c:	2001      	movs	r0, #1
	}
	return 0;
}
   b726e:	bd38      	pop	{r3, r4, r5, pc}

000b7270 <_ZN6String7reserveEj>:
{
   b7270:	b510      	push	{r4, lr}
	if (buffer && capacity >= size) return 1;
   b7272:	6803      	ldr	r3, [r0, #0]
{
   b7274:	4604      	mov	r4, r0
	if (buffer && capacity >= size) return 1;
   b7276:	b123      	cbz	r3, b7282 <_ZN6String7reserveEj+0x12>
   b7278:	6843      	ldr	r3, [r0, #4]
   b727a:	428b      	cmp	r3, r1
   b727c:	d301      	bcc.n	b7282 <_ZN6String7reserveEj+0x12>
   b727e:	2001      	movs	r0, #1
}
   b7280:	bd10      	pop	{r4, pc}
	if (changeBuffer(size)) {
   b7282:	4620      	mov	r0, r4
   b7284:	f7ff ffe8 	bl	b7258 <_ZN6String12changeBufferEj>
   b7288:	2800      	cmp	r0, #0
   b728a:	d0f9      	beq.n	b7280 <_ZN6String7reserveEj+0x10>
		if (len == 0) buffer[0] = 0;
   b728c:	68a3      	ldr	r3, [r4, #8]
   b728e:	2b00      	cmp	r3, #0
   b7290:	d1f5      	bne.n	b727e <_ZN6String7reserveEj+0xe>
   b7292:	6822      	ldr	r2, [r4, #0]
   b7294:	7013      	strb	r3, [r2, #0]
   b7296:	e7f2      	b.n	b727e <_ZN6String7reserveEj+0xe>

000b7298 <_ZN6String4copyEPKcj>:
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
   b7298:	b537      	push	{r0, r1, r2, r4, r5, lr}
   b729a:	460d      	mov	r5, r1
	if (!reserve(length)) {
   b729c:	4611      	mov	r1, r2
   b729e:	9201      	str	r2, [sp, #4]
{
   b72a0:	4604      	mov	r4, r0
	if (!reserve(length)) {
   b72a2:	f7ff ffe5 	bl	b7270 <_ZN6String7reserveEj>
   b72a6:	9a01      	ldr	r2, [sp, #4]
   b72a8:	b928      	cbnz	r0, b72b6 <_ZN6String4copyEPKcj+0x1e>
		invalidate();
   b72aa:	4620      	mov	r0, r4
   b72ac:	f7ff ffc9 	bl	b7242 <_ZN6String10invalidateEv>
	}
	len = length;
	memcpy(buffer, cstr, length);
	buffer[len] = 0;
	return *this;
}
   b72b0:	4620      	mov	r0, r4
   b72b2:	b003      	add	sp, #12
   b72b4:	bd30      	pop	{r4, r5, pc}
	len = length;
   b72b6:	60a2      	str	r2, [r4, #8]
	memcpy(buffer, cstr, length);
   b72b8:	4629      	mov	r1, r5
   b72ba:	6820      	ldr	r0, [r4, #0]
   b72bc:	f001 f9cc 	bl	b8658 <memcpy>
	buffer[len] = 0;
   b72c0:	6822      	ldr	r2, [r4, #0]
   b72c2:	68a3      	ldr	r3, [r4, #8]
   b72c4:	2100      	movs	r1, #0
   b72c6:	54d1      	strb	r1, [r2, r3]
	return *this;
   b72c8:	e7f2      	b.n	b72b0 <_ZN6String4copyEPKcj+0x18>

000b72ca <_ZN6StringC1EPK19__FlashStringHelper>:
	buffer = NULL;
   b72ca:	2300      	movs	r3, #0
String::String(const __FlashStringHelper *pstr)
   b72cc:	b513      	push	{r0, r1, r4, lr}
	capacity = 0;
   b72ce:	e9c0 3300 	strd	r3, r3, [r0]
String::String(const __FlashStringHelper *pstr)
   b72d2:	4604      	mov	r4, r0
	len = 0;
   b72d4:	6083      	str	r3, [r0, #8]
	flags = 0;
   b72d6:	7303      	strb	r3, [r0, #12]
	if (cstr) copy(cstr, strlen(cstr));
   b72d8:	b141      	cbz	r1, b72ec <_ZN6StringC1EPK19__FlashStringHelper+0x22>
	if (cstr) copy(cstr, strlen(cstr));
   b72da:	4608      	mov	r0, r1
   b72dc:	9101      	str	r1, [sp, #4]
   b72de:	f001 fa24 	bl	b872a <strlen>
   b72e2:	9901      	ldr	r1, [sp, #4]
   b72e4:	4602      	mov	r2, r0
   b72e6:	4620      	mov	r0, r4
   b72e8:	f7ff ffd6 	bl	b7298 <_ZN6String4copyEPKcj>
}
   b72ec:	4620      	mov	r0, r4
   b72ee:	b002      	add	sp, #8
   b72f0:	bd10      	pop	{r4, pc}

000b72f2 <_ZN6StringaSERKS_>:
}
#endif

String & String::operator = (const String &rhs)
{
	if (this == &rhs) return *this;
   b72f2:	4288      	cmp	r0, r1
{
   b72f4:	b510      	push	{r4, lr}
   b72f6:	4604      	mov	r4, r0
	if (this == &rhs) return *this;
   b72f8:	d005      	beq.n	b7306 <_ZN6StringaSERKS_+0x14>

	if (rhs.buffer) copy(rhs.buffer, rhs.len);
   b72fa:	680b      	ldr	r3, [r1, #0]
   b72fc:	b12b      	cbz	r3, b730a <_ZN6StringaSERKS_+0x18>
   b72fe:	688a      	ldr	r2, [r1, #8]
   b7300:	4619      	mov	r1, r3
   b7302:	f7ff ffc9 	bl	b7298 <_ZN6String4copyEPKcj>
	else invalidate();

	return *this;
}
   b7306:	4620      	mov	r0, r4
   b7308:	bd10      	pop	{r4, pc}
	else invalidate();
   b730a:	f7ff ff9a 	bl	b7242 <_ZN6String10invalidateEv>
   b730e:	e7fa      	b.n	b7306 <_ZN6StringaSERKS_+0x14>

000b7310 <_ZN6StringC1ERKS_>:
String::String(const String &value)
   b7310:	b510      	push	{r4, lr}
	buffer = NULL;
   b7312:	2300      	movs	r3, #0
String::String(const String &value)
   b7314:	4604      	mov	r4, r0
	capacity = 0;
   b7316:	e9c0 3300 	strd	r3, r3, [r0]
	len = 0;
   b731a:	6083      	str	r3, [r0, #8]
	flags = 0;
   b731c:	7303      	strb	r3, [r0, #12]
	*this = value;
   b731e:	f7ff ffe8 	bl	b72f2 <_ZN6StringaSERKS_>
}
   b7322:	4620      	mov	r0, r4
   b7324:	bd10      	pop	{r4, pc}

000b7326 <_ZN6StringaSEPKc>:
	return *this;
}
#endif

String & String::operator = (const char *cstr)
{
   b7326:	b513      	push	{r0, r1, r4, lr}
   b7328:	4604      	mov	r4, r0
	if (cstr) copy(cstr, strlen(cstr));
   b732a:	b159      	cbz	r1, b7344 <_ZN6StringaSEPKc+0x1e>
   b732c:	4608      	mov	r0, r1
   b732e:	9101      	str	r1, [sp, #4]
   b7330:	f001 f9fb 	bl	b872a <strlen>
   b7334:	9901      	ldr	r1, [sp, #4]
   b7336:	4602      	mov	r2, r0
   b7338:	4620      	mov	r0, r4
   b733a:	f7ff ffad 	bl	b7298 <_ZN6String4copyEPKcj>
	else invalidate();

	return *this;
}
   b733e:	4620      	mov	r0, r4
   b7340:	b002      	add	sp, #8
   b7342:	bd10      	pop	{r4, pc}
	else invalidate();
   b7344:	f7ff ff7d 	bl	b7242 <_ZN6String10invalidateEv>
   b7348:	e7f9      	b.n	b733e <_ZN6StringaSEPKc+0x18>

000b734a <_ZN6StringC1Eih>:
String::String(int value, unsigned char base)
   b734a:	b510      	push	{r4, lr}
   b734c:	4604      	mov	r4, r0
   b734e:	b08a      	sub	sp, #40	; 0x28
	buffer = NULL;
   b7350:	2300      	movs	r3, #0
	capacity = 0;
   b7352:	e9c4 3300 	strd	r3, r3, [r4]
	len = 0;
   b7356:	60a3      	str	r3, [r4, #8]
	flags = 0;
   b7358:	7323      	strb	r3, [r4, #12]
String::String(int value, unsigned char base)
   b735a:	4608      	mov	r0, r1
	itoa(value, buf, base);
   b735c:	a901      	add	r1, sp, #4
   b735e:	f000 f9bf 	bl	b76e0 <itoa>
	*this = buf;
   b7362:	a901      	add	r1, sp, #4
   b7364:	4620      	mov	r0, r4
   b7366:	f7ff ffde 	bl	b7326 <_ZN6StringaSEPKc>
}
   b736a:	4620      	mov	r0, r4
   b736c:	b00a      	add	sp, #40	; 0x28
   b736e:	bd10      	pop	{r4, pc}

000b7370 <_ZN6StringC1Efi>:
String::String(float value, int decimalPlaces)
   b7370:	b530      	push	{r4, r5, lr}
   b7372:	4604      	mov	r4, r0
	buffer = NULL;
   b7374:	2300      	movs	r3, #0
String::String(float value, int decimalPlaces)
   b7376:	b08b      	sub	sp, #44	; 0x2c
	capacity = 0;
   b7378:	e9c4 3300 	strd	r3, r3, [r4]
	len = 0;
   b737c:	60a3      	str	r3, [r4, #8]
	flags = 0;
   b737e:	7323      	strb	r3, [r4, #12]
String::String(float value, int decimalPlaces)
   b7380:	ee10 0a10 	vmov	r0, s0
	dtoa(value, decimalPlaces, buf);
   b7384:	b2cd      	uxtb	r5, r1
   b7386:	f000 fcaf 	bl	b7ce8 <__aeabi_f2d>
   b738a:	ec41 0b10 	vmov	d0, r0, r1
   b738e:	a901      	add	r1, sp, #4
   b7390:	4628      	mov	r0, r5
   b7392:	f7ff feef 	bl	b7174 <_Z4dtoadhPc>
        *this = buf;
   b7396:	a901      	add	r1, sp, #4
   b7398:	4620      	mov	r0, r4
   b739a:	f7ff ffc4 	bl	b7326 <_ZN6StringaSEPKc>
}
   b739e:	4620      	mov	r0, r4
   b73a0:	b00b      	add	sp, #44	; 0x2c
   b73a2:	bd30      	pop	{r4, r5, pc}

000b73a4 <_ZN6String6concatEPKcj>:
{
	return concat(s.buffer, s.len);
}

unsigned char String::concat(const char *cstr, unsigned int length)
{
   b73a4:	b570      	push	{r4, r5, r6, lr}
   b73a6:	4605      	mov	r5, r0
	unsigned int newlen = len + length;
	if (!cstr) return 0;
   b73a8:	460e      	mov	r6, r1
   b73aa:	b909      	cbnz	r1, b73b0 <_ZN6String6concatEPKcj+0xc>
   b73ac:	2000      	movs	r0, #0
	if (length == 0) return 1;
	if (!reserve(newlen)) return 0;
	strcpy(buffer + len, cstr);
	len = newlen;
	return 1;
}
   b73ae:	bd70      	pop	{r4, r5, r6, pc}
	if (length == 0) return 1;
   b73b0:	b16a      	cbz	r2, b73ce <_ZN6String6concatEPKcj+0x2a>
	unsigned int newlen = len + length;
   b73b2:	6884      	ldr	r4, [r0, #8]
   b73b4:	4414      	add	r4, r2
	if (!reserve(newlen)) return 0;
   b73b6:	4621      	mov	r1, r4
   b73b8:	f7ff ff5a 	bl	b7270 <_ZN6String7reserveEj>
   b73bc:	2800      	cmp	r0, #0
   b73be:	d0f5      	beq.n	b73ac <_ZN6String6concatEPKcj+0x8>
	strcpy(buffer + len, cstr);
   b73c0:	6828      	ldr	r0, [r5, #0]
   b73c2:	68ab      	ldr	r3, [r5, #8]
   b73c4:	4631      	mov	r1, r6
   b73c6:	4418      	add	r0, r3
   b73c8:	f001 f98a 	bl	b86e0 <strcpy>
	len = newlen;
   b73cc:	60ac      	str	r4, [r5, #8]
	if (length == 0) return 1;
   b73ce:	2001      	movs	r0, #1
   b73d0:	e7ed      	b.n	b73ae <_ZN6String6concatEPKcj+0xa>

000b73d2 <_ZplRK15StringSumHelperRK6String>:
/*********************************************/
/*  Concatenate                              */
/*********************************************/

StringSumHelper & operator + (const StringSumHelper &lhs, const String &rhs)
{
   b73d2:	b510      	push	{r4, lr}
	StringSumHelper &a = const_cast<StringSumHelper&>(lhs);
	if (!a.concat(rhs.buffer, rhs.len)) a.invalidate();
   b73d4:	688a      	ldr	r2, [r1, #8]
   b73d6:	6809      	ldr	r1, [r1, #0]
{
   b73d8:	4604      	mov	r4, r0
	if (!a.concat(rhs.buffer, rhs.len)) a.invalidate();
   b73da:	f7ff ffe3 	bl	b73a4 <_ZN6String6concatEPKcj>
   b73de:	b910      	cbnz	r0, b73e6 <_ZplRK15StringSumHelperRK6String+0x14>
   b73e0:	4620      	mov	r0, r4
   b73e2:	f7ff ff2e 	bl	b7242 <_ZN6String10invalidateEv>
	return a;
}
   b73e6:	4620      	mov	r0, r4
   b73e8:	bd10      	pop	{r4, pc}

000b73ea <_ZplRK15StringSumHelperPKc>:

StringSumHelper & operator + (const StringSumHelper &lhs, const char *cstr)
{
   b73ea:	b513      	push	{r0, r1, r4, lr}
   b73ec:	4604      	mov	r4, r0
	StringSumHelper &a = const_cast<StringSumHelper&>(lhs);
	if (!cstr || !a.concat(cstr, strlen(cstr))) a.invalidate();
   b73ee:	b929      	cbnz	r1, b73fc <_ZplRK15StringSumHelperPKc+0x12>
   b73f0:	4620      	mov	r0, r4
   b73f2:	f7ff ff26 	bl	b7242 <_ZN6String10invalidateEv>
	return a;
}
   b73f6:	4620      	mov	r0, r4
   b73f8:	b002      	add	sp, #8
   b73fa:	bd10      	pop	{r4, pc}
	if (!cstr || !a.concat(cstr, strlen(cstr))) a.invalidate();
   b73fc:	4608      	mov	r0, r1
   b73fe:	9101      	str	r1, [sp, #4]
   b7400:	f001 f993 	bl	b872a <strlen>
   b7404:	9901      	ldr	r1, [sp, #4]
   b7406:	4602      	mov	r2, r0
   b7408:	4620      	mov	r0, r4
   b740a:	f7ff ffcb 	bl	b73a4 <_ZN6String6concatEPKcj>
   b740e:	2800      	cmp	r0, #0
   b7410:	d0ee      	beq.n	b73f0 <_ZplRK15StringSumHelperPKc+0x6>
   b7412:	e7f0      	b.n	b73f6 <_ZplRK15StringSumHelperPKc+0xc>

000b7414 <_GLOBAL__sub_I_System>:
} // namespace particle

// particle::Flag<TagT, ValueT>
template<typename TagT, typename ValueT>
inline particle::Flag<TagT, ValueT>::Flag(ValueT val) :
        val_(val) {
   b7414:	4b05      	ldr	r3, [pc, #20]	; (b742c <_GLOBAL__sub_I_System+0x18>)
   b7416:	2202      	movs	r2, #2
   b7418:	601a      	str	r2, [r3, #0]

class SystemSleepResult {
public:
    SystemSleepResult()
            : wakeupSource_(nullptr),
              error_(SYSTEM_ERROR_NONE) {
   b741a:	4b05      	ldr	r3, [pc, #20]	; (b7430 <_GLOBAL__sub_I_System+0x1c>)
    SleepResult() {}
   b741c:	4a05      	ldr	r2, [pc, #20]	; (b7434 <_GLOBAL__sub_I_System+0x20>)
   b741e:	609a      	str	r2, [r3, #8]
              error_(SYSTEM_ERROR_NONE) {
   b7420:	2000      	movs	r0, #0
   b7422:	e9c3 0000 	strd	r0, r0, [r3]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
   b7426:	f7fe bff9 	b.w	b641c <set_system_mode>
   b742a:	bf00      	nop
   b742c:	2003e6f8 	.word	0x2003e6f8
   b7430:	2003e6ec 	.word	0x2003e6ec
   b7434:	ffff0000 	.word	0xffff0000

000b7438 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT>:
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
            unix_time_cache = unix_time;
    }
}

const char* TimeClass::format_spec = TIME_FORMAT_DEFAULT;
   b7438:	4b02      	ldr	r3, [pc, #8]	; (b7444 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0xc>)
   b743a:	681a      	ldr	r2, [r3, #0]
   b743c:	4b02      	ldr	r3, [pc, #8]	; (b7448 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0x10>)
   b743e:	601a      	str	r2, [r3, #0]
{
  return isValid();
}


TimeClass Time;
   b7440:	4770      	bx	lr
   b7442:	bf00      	nop
   b7444:	2003e584 	.word	0x2003e584
   b7448:	2003e6fc 	.word	0x2003e6fc

000b744c <_ZN11USARTSerialD1Ev>:
private:
  hal_usart_interface_t _serial;
  bool _blocking;
public:
  USARTSerial(hal_usart_interface_t serial, const hal_usart_buffer_config_t& config);
  virtual ~USARTSerial() {};
   b744c:	4770      	bx	lr

000b744e <_ZN11USARTSerial14blockOnOverrunEb>:
    hal_usart_half_duplex(_serial, Enable);
}

void USARTSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   b744e:	7441      	strb	r1, [r0, #17]
}
   b7450:	4770      	bx	lr

000b7452 <_ZN11USARTSerial17availableForWriteEv>:


int USARTSerial::availableForWrite(void)
{
   b7452:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available_data_for_write(_serial));
   b7454:	7c00      	ldrb	r0, [r0, #16]
   b7456:	f7fe ff91 	bl	b637c <hal_usart_available_data_for_write>
}
   b745a:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   b745e:	bd08      	pop	{r3, pc}

000b7460 <_ZN11USARTSerial9availableEv>:

int USARTSerial::available(void)
{
   b7460:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available(_serial));
   b7462:	7c00      	ldrb	r0, [r0, #16]
   b7464:	f7fe ff62 	bl	b632c <hal_usart_available>
}
   b7468:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   b746c:	bd08      	pop	{r3, pc}

000b746e <_ZN11USARTSerial4peekEv>:

int USARTSerial::peek(void)
{
   b746e:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_peek(_serial));
   b7470:	7c00      	ldrb	r0, [r0, #16]
   b7472:	f7fe ff6b 	bl	b634c <hal_usart_peek>
}
   b7476:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   b747a:	bd08      	pop	{r3, pc}

000b747c <_ZN11USARTSerial4readEv>:

int USARTSerial::read(void)
{
   b747c:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_read(_serial));
   b747e:	7c00      	ldrb	r0, [r0, #16]
   b7480:	f7fe ff5c 	bl	b633c <hal_usart_read>
}
   b7484:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   b7488:	bd08      	pop	{r3, pc}

000b748a <_ZN11USARTSerial5flushEv>:

void USARTSerial::flush()
{
  hal_usart_flush(_serial);
   b748a:	7c00      	ldrb	r0, [r0, #16]
   b748c:	f7fe bf66 	b.w	b635c <hal_usart_flush>

000b7490 <_ZN11USARTSerial5writeEh>:
}

size_t USARTSerial::write(uint8_t c)
{
   b7490:	b537      	push	{r0, r1, r2, r4, r5, lr}
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   b7492:	7c45      	ldrb	r5, [r0, #17]
{
   b7494:	4604      	mov	r4, r0
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   b7496:	b12d      	cbz	r5, b74a4 <_ZN11USARTSerial5writeEh+0x14>
    // the HAL always blocks.
	  return hal_usart_write(_serial, c);
   b7498:	7c20      	ldrb	r0, [r4, #16]
  }
  return 0;
}
   b749a:	b003      	add	sp, #12
   b749c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
	  return hal_usart_write(_serial, c);
   b74a0:	f7fe bf3c 	b.w	b631c <hal_usart_write>
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   b74a4:	7c00      	ldrb	r0, [r0, #16]
   b74a6:	9101      	str	r1, [sp, #4]
   b74a8:	f7fe ff68 	bl	b637c <hal_usart_available_data_for_write>
   b74ac:	2800      	cmp	r0, #0
   b74ae:	9901      	ldr	r1, [sp, #4]
   b74b0:	dcf2      	bgt.n	b7498 <_ZN11USARTSerial5writeEh+0x8>
}
   b74b2:	4628      	mov	r0, r5
   b74b4:	b003      	add	sp, #12
   b74b6:	bd30      	pop	{r4, r5, pc}

000b74b8 <_ZN11USARTSerialD0Ev>:
   b74b8:	b510      	push	{r4, lr}
   b74ba:	2114      	movs	r1, #20
   b74bc:	4604      	mov	r4, r0
   b74be:	f7fc fdee 	bl	b409e <_ZdlPvj>
   b74c2:	4620      	mov	r0, r4
   b74c4:	bd10      	pop	{r4, pc}
	...

000b74c8 <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t>:
USARTSerial::USARTSerial(hal_usart_interface_t serial, const hal_usart_buffer_config_t& config)
   b74c8:	b510      	push	{r4, lr}
   b74ca:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   b74ce:	4604      	mov	r4, r0
   b74d0:	4608      	mov	r0, r1
   b74d2:	4611      	mov	r1, r2
   b74d4:	2200      	movs	r2, #0
   b74d6:	e9c4 2301 	strd	r2, r3, [r4, #4]
   b74da:	4b04      	ldr	r3, [pc, #16]	; (b74ec <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t+0x24>)
   b74dc:	6023      	str	r3, [r4, #0]
  _blocking = true;
   b74de:	2301      	movs	r3, #1
  _serial = serial;
   b74e0:	7420      	strb	r0, [r4, #16]
  _blocking = true;
   b74e2:	7463      	strb	r3, [r4, #17]
  hal_usart_init_ex(serial, &config, nullptr);
   b74e4:	f7fe ff52 	bl	b638c <hal_usart_init_ex>
}
   b74e8:	4620      	mov	r0, r4
   b74ea:	bd10      	pop	{r4, pc}
   b74ec:	000b9090 	.word	0x000b9090

000b74f0 <_ZN9USBSerial14blockOnOverrunEb>:
  HAL_USB_USART_Flush_Data(_serial);
}

void USBSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   b74f0:	7441      	strb	r1, [r0, #17]
}
   b74f2:	4770      	bx	lr

000b74f4 <__tcf_0>:
}

USBSerial& _fetch_usbserial()
{
  HAL_USB_USART_Config conf = acquireSerialBuffer();
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   b74f4:	4770      	bx	lr

000b74f6 <_ZN9USBSerialD1Ev>:
#include "usb_hal.h"
#include "system_task.h"
#include "spark_wiring_startup.h"
#include "concurrent_hal.h"

class USBSerial : public Stream
   b74f6:	4770      	bx	lr

000b74f8 <_ZN9USBSerial4readEv>:
{
   b74f8:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
   b74fa:	2100      	movs	r1, #0
   b74fc:	7c00      	ldrb	r0, [r0, #16]
   b74fe:	f7fe ff6d 	bl	b63dc <HAL_USB_USART_Receive_Data>
}
   b7502:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   b7506:	bd08      	pop	{r3, pc}

000b7508 <_ZN9USBSerial4peekEv>:
{
   b7508:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, true));
   b750a:	2101      	movs	r1, #1
   b750c:	7c00      	ldrb	r0, [r0, #16]
   b750e:	f7fe ff65 	bl	b63dc <HAL_USB_USART_Receive_Data>
}
   b7512:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   b7516:	bd08      	pop	{r3, pc}

000b7518 <_ZN9USBSerial17availableForWriteEv>:
{
   b7518:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USB_USART_Available_Data_For_Write(_serial));
   b751a:	7c00      	ldrb	r0, [r0, #16]
   b751c:	f7fe ff56 	bl	b63cc <HAL_USB_USART_Available_Data_For_Write>
}
   b7520:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   b7524:	bd08      	pop	{r3, pc}

000b7526 <_ZN9USBSerial9availableEv>:
{
   b7526:	b508      	push	{r3, lr}
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
   b7528:	7c00      	ldrb	r0, [r0, #16]
   b752a:	f7fe ff47 	bl	b63bc <HAL_USB_USART_Available_Data>
}
   b752e:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   b7532:	bd08      	pop	{r3, pc}

000b7534 <_ZN9USBSerial5writeEh>:
{
   b7534:	b513      	push	{r0, r1, r4, lr}
   b7536:	4604      	mov	r4, r0
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   b7538:	7c00      	ldrb	r0, [r0, #16]
{
   b753a:	9101      	str	r1, [sp, #4]
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   b753c:	f7fe ff46 	bl	b63cc <HAL_USB_USART_Available_Data_For_Write>
   b7540:	2800      	cmp	r0, #0
   b7542:	9901      	ldr	r1, [sp, #4]
   b7544:	dc01      	bgt.n	b754a <_ZN9USBSerial5writeEh+0x16>
   b7546:	7c60      	ldrb	r0, [r4, #17]
   b7548:	b120      	cbz	r0, b7554 <_ZN9USBSerial5writeEh+0x20>
    return std::max(0, (int)HAL_USB_USART_Send_Data(_serial, byte));
   b754a:	7c20      	ldrb	r0, [r4, #16]
   b754c:	f7fe ff4e 	bl	b63ec <HAL_USB_USART_Send_Data>
   b7550:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
}
   b7554:	b002      	add	sp, #8
   b7556:	bd10      	pop	{r4, pc}

000b7558 <_ZN9USBSerial5flushEv>:
  HAL_USB_USART_Flush_Data(_serial);
   b7558:	7c00      	ldrb	r0, [r0, #16]
   b755a:	f7fe bf4f 	b.w	b63fc <HAL_USB_USART_Flush_Data>

000b755e <_ZN9USBSerialD0Ev>:
   b755e:	b510      	push	{r4, lr}
   b7560:	2114      	movs	r1, #20
   b7562:	4604      	mov	r4, r0
   b7564:	f7fc fd9b 	bl	b409e <_ZdlPvj>
   b7568:	4620      	mov	r0, r4
   b756a:	bd10      	pop	{r4, pc}

000b756c <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>:
USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
   b756c:	b510      	push	{r4, lr}
   b756e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   b7572:	4604      	mov	r4, r0
   b7574:	4608      	mov	r0, r1
   b7576:	2100      	movs	r1, #0
   b7578:	e9c4 1301 	strd	r1, r3, [r4, #4]
   b757c:	4b04      	ldr	r3, [pc, #16]	; (b7590 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config+0x24>)
   b757e:	6023      	str	r3, [r4, #0]
  _blocking = true;
   b7580:	2301      	movs	r3, #1
  _serial = serial;
   b7582:	7420      	strb	r0, [r4, #16]
  _blocking = true;
   b7584:	7463      	strb	r3, [r4, #17]
  HAL_USB_USART_Init(_serial, &conf);
   b7586:	4611      	mov	r1, r2
   b7588:	f7fe ff08 	bl	b639c <HAL_USB_USART_Init>
}
   b758c:	4620      	mov	r0, r4
   b758e:	bd10      	pop	{r4, pc}
   b7590:	000b90c0 	.word	0x000b90c0

000b7594 <_ZN9USBSerial5beginEl>:
    HAL_USB_USART_Begin(_serial, speed, NULL);
   b7594:	7c00      	ldrb	r0, [r0, #16]
   b7596:	2200      	movs	r2, #0
   b7598:	f7fe bf08 	b.w	b63ac <HAL_USB_USART_Begin>

000b759c <_Z19acquireSerialBufferv>:
{
   b759c:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = {};
   b759e:	2214      	movs	r2, #20
{
   b75a0:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {};
   b75a2:	2100      	movs	r1, #0
   b75a4:	f001 f866 	bl	b8674 <memset>
}
   b75a8:	4620      	mov	r0, r4
   b75aa:	bd10      	pop	{r4, pc}

000b75ac <_Z16_fetch_usbserialv>:
{
   b75ac:	b510      	push	{r4, lr}
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   b75ae:	4c0f      	ldr	r4, [pc, #60]	; (b75ec <_Z16_fetch_usbserialv+0x40>)
{
   b75b0:	b088      	sub	sp, #32
  HAL_USB_USART_Config conf = acquireSerialBuffer();
   b75b2:	a803      	add	r0, sp, #12
   b75b4:	f7ff fff2 	bl	b759c <_Z19acquireSerialBufferv>
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   b75b8:	7821      	ldrb	r1, [r4, #0]
   b75ba:	f3bf 8f5b 	dmb	ish
   b75be:	f011 0101 	ands.w	r1, r1, #1
   b75c2:	d10f      	bne.n	b75e4 <_Z16_fetch_usbserialv+0x38>
   b75c4:	4620      	mov	r0, r4
   b75c6:	9101      	str	r1, [sp, #4]
   b75c8:	f7fc fd78 	bl	b40bc <__cxa_guard_acquire>
   b75cc:	9901      	ldr	r1, [sp, #4]
   b75ce:	b148      	cbz	r0, b75e4 <_Z16_fetch_usbserialv+0x38>
   b75d0:	aa03      	add	r2, sp, #12
   b75d2:	4807      	ldr	r0, [pc, #28]	; (b75f0 <_Z16_fetch_usbserialv+0x44>)
   b75d4:	f7ff ffca 	bl	b756c <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
   b75d8:	4620      	mov	r0, r4
   b75da:	f7fc fd74 	bl	b40c6 <__cxa_guard_release>
   b75de:	4805      	ldr	r0, [pc, #20]	; (b75f4 <_Z16_fetch_usbserialv+0x48>)
   b75e0:	f001 f834 	bl	b864c <atexit>
	return _usbserial;
}
   b75e4:	4802      	ldr	r0, [pc, #8]	; (b75f0 <_Z16_fetch_usbserialv+0x44>)
   b75e6:	b008      	add	sp, #32
   b75e8:	bd10      	pop	{r4, pc}
   b75ea:	bf00      	nop
   b75ec:	2003e700 	.word	0x2003e700
   b75f0:	2003e704 	.word	0x2003e704
   b75f4:	000b74f5 	.word	0x000b74f5

000b75f8 <_ZN5spark9WiFiClass5readyEv>:
    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
    }

    bool ready(void) {
        return network_ready(*this, 0, NULL);
   b75f8:	2200      	movs	r2, #0
   b75fa:	6840      	ldr	r0, [r0, #4]
   b75fc:	4611      	mov	r1, r2
   b75fe:	f7fe bf71 	b.w	b64e4 <network_ready>

000b7602 <_ZN5spark9WiFiClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   b7602:	2200      	movs	r2, #0
   b7604:	6840      	ldr	r0, [r0, #4]
   b7606:	4611      	mov	r1, r2
   b7608:	f7fe bf8c 	b.w	b6524 <network_listening>

000b760c <_ZN5spark9WiFiClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
   b760c:	2200      	movs	r2, #0
   b760e:	6840      	ldr	r0, [r0, #4]
   b7610:	4611      	mov	r1, r2
   b7612:	f7fe bf97 	b.w	b6544 <network_get_listen_timeout>

000b7616 <_ZN5spark9WiFiClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
   b7616:	6840      	ldr	r0, [r0, #4]
   b7618:	2200      	movs	r2, #0
   b761a:	f7fe bf8b 	b.w	b6534 <network_set_listen_timeout>

000b761e <_ZN5spark9WiFiClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
   b761e:	6840      	ldr	r0, [r0, #4]
   b7620:	2200      	movs	r2, #0
   b7622:	f081 0101 	eor.w	r1, r1, #1
   b7626:	f7fe bf75 	b.w	b6514 <network_listen>

000b762a <_ZN5spark9WiFiClass3offEv>:
        network_off(*this, 0, 0, NULL);
   b762a:	2300      	movs	r3, #0
   b762c:	6840      	ldr	r0, [r0, #4]
   b762e:	461a      	mov	r2, r3
   b7630:	4619      	mov	r1, r3
   b7632:	f7fe bf67 	b.w	b6504 <network_off>

000b7636 <_ZN5spark9WiFiClass2onEv>:
        network_on(*this, 0, 0, NULL);
   b7636:	2300      	movs	r3, #0
   b7638:	6840      	ldr	r0, [r0, #4]
   b763a:	461a      	mov	r2, r3
   b763c:	4619      	mov	r1, r3
   b763e:	f7fe bf59 	b.w	b64f4 <network_on>

000b7642 <_ZN5spark9WiFiClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
   b7642:	2200      	movs	r2, #0
   b7644:	6840      	ldr	r0, [r0, #4]
   b7646:	4611      	mov	r1, r2
   b7648:	f7fe bf3c 	b.w	b64c4 <network_connecting>

000b764c <_ZN5spark9WiFiClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   b764c:	6840      	ldr	r0, [r0, #4]
   b764e:	2200      	movs	r2, #0
   b7650:	2102      	movs	r1, #2
   b7652:	f7fe bf3f 	b.w	b64d4 <network_disconnect>

000b7656 <_ZN5spark9WiFiClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
   b7656:	2300      	movs	r3, #0
   b7658:	6840      	ldr	r0, [r0, #4]
   b765a:	461a      	mov	r2, r3
   b765c:	f7fe bf2a 	b.w	b64b4 <network_connect>

000b7660 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t>:
   b7660:	4b02      	ldr	r3, [pc, #8]	; (b766c <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0xc>)
   b7662:	2204      	movs	r2, #4
   b7664:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_WIFI_STA) {
   b7666:	4a02      	ldr	r2, [pc, #8]	; (b7670 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0x10>)
   b7668:	601a      	str	r2, [r3, #0]
the same way.
*****************************************************************************/

    WiFiClass WiFi;
    // NetworkClass& Network = WiFi;
}
   b766a:	4770      	bx	lr
   b766c:	2003e718 	.word	0x2003e718
   b7670:	000b90f0 	.word	0x000b90f0

000b7674 <_Z11str_reversePc>:

//------------------------------------------------------------------------------------------
#define BUFSIZE (sizeof(long) * 8 + 1)

//utility function used by ultoa()
__attribute__((weak)) void str_reverse(char* buffer){
   b7674:	b510      	push	{r4, lr}
   b7676:	4604      	mov	r4, r0
	char *i, *j;
	char c;
	i=buffer;
	j=buffer + strlen(buffer)-1;
   b7678:	f001 f857 	bl	b872a <strlen>
   b767c:	3801      	subs	r0, #1
   b767e:	1823      	adds	r3, r4, r0
   b7680:	4620      	mov	r0, r4
	while(i<j){
   b7682:	4283      	cmp	r3, r0
   b7684:	d906      	bls.n	b7694 <_Z11str_reversePc+0x20>
		c = *i;
   b7686:	7802      	ldrb	r2, [r0, #0]
		*i = *j;
   b7688:	7819      	ldrb	r1, [r3, #0]
   b768a:	f800 1b01 	strb.w	r1, [r0], #1
		*j = c;
   b768e:	f803 2901 	strb.w	r2, [r3], #-1
	while(i<j){
   b7692:	e7f6      	b.n	b7682 <_Z11str_reversePc+0xe>
		++i;
		--j;
	}
}
   b7694:	bd10      	pop	{r4, pc}

000b7696 <ultoa>:
      memcpy(head, ++tail, i);
      return str;
}

//convert unsigned long to string
__attribute__((weak)) char* ultoa(unsigned long a, char* buffer, int radix, char pad){
   b7696:	b570      	push	{r4, r5, r6, lr}
   b7698:	460c      	mov	r4, r1
	if(radix<2 || radix>36){
   b769a:	1e91      	subs	r1, r2, #2
   b769c:	2922      	cmp	r1, #34	; 0x22
   b769e:	d81d      	bhi.n	b76dc <ultoa+0x46>
		return NULL;
	}
	char* ptr=buffer;
   b76a0:	4625      	mov	r5, r4

	div_t result;
	while(a){
   b76a2:	b930      	cbnz	r0, b76b2 <ultoa+0x1c>
                *ptr += 'a'-10;
            }
            ++ptr;
            a = result.quot;
	}
        while (ptr < buffer+pad)
   b76a4:	4423      	add	r3, r4
            *ptr++ = '0';
   b76a6:	2230      	movs	r2, #48	; 0x30
        while (ptr < buffer+pad)
   b76a8:	429d      	cmp	r5, r3
   b76aa:	d210      	bcs.n	b76ce <ultoa+0x38>
            *ptr++ = '0';
   b76ac:	f805 2b01 	strb.w	r2, [r5], #1
        while (ptr < buffer+pad)
   b76b0:	e7fa      	b.n	b76a8 <ultoa+0x12>
            result.quot = a/radix;
   b76b2:	fbb0 f6f2 	udiv	r6, r0, r2
            result.rem = a%radix;
   b76b6:	fb02 0016 	mls	r0, r2, r6, r0
            *ptr = result.rem;
   b76ba:	b2c1      	uxtb	r1, r0
            if(result.rem<10){
   b76bc:	2809      	cmp	r0, #9
                *ptr += '0';
   b76be:	bf94      	ite	ls
   b76c0:	3130      	addls	r1, #48	; 0x30
                *ptr += 'a'-10;
   b76c2:	3157      	addhi	r1, #87	; 0x57
   b76c4:	b2c9      	uxtb	r1, r1
   b76c6:	f805 1b01 	strb.w	r1, [r5], #1
            a = result.quot;
   b76ca:	4630      	mov	r0, r6
	while(a){
   b76cc:	e7e9      	b.n	b76a2 <ultoa+0xc>

	*ptr = '\0';
   b76ce:	2300      	movs	r3, #0
	str_reverse(buffer);
   b76d0:	4620      	mov	r0, r4
	*ptr = '\0';
   b76d2:	702b      	strb	r3, [r5, #0]
	str_reverse(buffer);
   b76d4:	f7ff ffce 	bl	b7674 <_Z11str_reversePc>
	return buffer;
   b76d8:	4620      	mov	r0, r4
}
   b76da:	bd70      	pop	{r4, r5, r6, pc}
		return NULL;
   b76dc:	2000      	movs	r0, #0
   b76de:	e7fc      	b.n	b76da <ultoa+0x44>

000b76e0 <itoa>:

__attribute__((weak)) char* itoa(int a, char* buffer, int radix){
   b76e0:	b538      	push	{r3, r4, r5, lr}
	if(a<0){
   b76e2:	1e03      	subs	r3, r0, #0
__attribute__((weak)) char* itoa(int a, char* buffer, int radix){
   b76e4:	460c      	mov	r4, r1
   b76e6:	4615      	mov	r5, r2
	if(a<0){
   b76e8:	da0e      	bge.n	b7708 <itoa+0x28>
		*buffer = '-';
		unsigned v = a==INT_MIN ? ((unsigned)INT_MAX+1) : -a;
   b76ea:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
		*buffer = '-';
   b76ee:	f04f 022d 	mov.w	r2, #45	; 0x2d
		unsigned v = a==INT_MIN ? ((unsigned)INT_MAX+1) : -a;
   b76f2:	bf14      	ite	ne
   b76f4:	4258      	negne	r0, r3
   b76f6:	4618      	moveq	r0, r3
		ultoa((unsigned)v, buffer + 1, radix);
   b76f8:	2301      	movs	r3, #1
		*buffer = '-';
   b76fa:	700a      	strb	r2, [r1, #0]
		ultoa((unsigned)v, buffer + 1, radix);
   b76fc:	462a      	mov	r2, r5
   b76fe:	4419      	add	r1, r3
	}else{
		ultoa(a, buffer, radix);
   b7700:	f7ff ffc9 	bl	b7696 <ultoa>
	}
	return buffer;
}
   b7704:	4620      	mov	r0, r4
   b7706:	bd38      	pop	{r3, r4, r5, pc}
		ultoa(a, buffer, radix);
   b7708:	2301      	movs	r3, #1
   b770a:	e7f9      	b.n	b7700 <itoa+0x20>

000b770c <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_>:

void module_user_init_hook()
{
#if HAL_PLATFORM_NEWLIB
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
        _impure_ptr = r;
   b770c:	4b01      	ldr	r3, [pc, #4]	; (b7714 <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_+0x8>)
   b770e:	6018      	str	r0, [r3, #0]
    }, nullptr);
   b7710:	4770      	bx	lr
   b7712:	bf00      	nop
   b7714:	2003e588 	.word	0x2003e588

000b7718 <serialEventRun>:
{
   b7718:	b508      	push	{r3, lr}
    if (serialEvent && Serial.available()>0)
   b771a:	4b0b      	ldr	r3, [pc, #44]	; (b7748 <serialEventRun+0x30>)
   b771c:	b143      	cbz	r3, b7730 <serialEventRun+0x18>
   b771e:	f7ff ff45 	bl	b75ac <_Z16_fetch_usbserialv>
   b7722:	6803      	ldr	r3, [r0, #0]
   b7724:	691b      	ldr	r3, [r3, #16]
   b7726:	4798      	blx	r3
   b7728:	2800      	cmp	r0, #0
   b772a:	dd01      	ble.n	b7730 <serialEventRun+0x18>
        serialEvent();
   b772c:	f3af 8000 	nop.w
    if (serialEvent1 && Serial1.available()>0)
   b7730:	4b06      	ldr	r3, [pc, #24]	; (b774c <serialEventRun+0x34>)
   b7732:	b143      	cbz	r3, b7746 <serialEventRun+0x2e>
   b7734:	f000 f94a 	bl	b79cc <_Z22__fetch_global_Serial1v>
   b7738:	6803      	ldr	r3, [r0, #0]
   b773a:	691b      	ldr	r3, [r3, #16]
   b773c:	4798      	blx	r3
   b773e:	2800      	cmp	r0, #0
   b7740:	dd01      	ble.n	b7746 <serialEventRun+0x2e>
        serialEvent1();
   b7742:	f3af 8000 	nop.w
}
   b7746:	bd08      	pop	{r3, pc}
	...

000b7750 <_post_loop>:
{
   b7750:	b508      	push	{r3, lr}
	serialEventRun();
   b7752:	f7ff ffe1 	bl	b7718 <serialEventRun>
		return !thread || !thread->isRunning();
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
   b7756:	f7fe fd11 	bl	b617c <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
   b775a:	4b01      	ldr	r3, [pc, #4]	; (b7760 <_post_loop+0x10>)
   b775c:	6018      	str	r0, [r3, #0]
}
   b775e:	bd08      	pop	{r3, pc}
   b7760:	2003e728 	.word	0x2003e728

000b7764 <_Z33system_initialize_user_backup_ramv>:
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
   b7764:	4805      	ldr	r0, [pc, #20]	; (b777c <_Z33system_initialize_user_backup_ramv+0x18>)
   b7766:	4a06      	ldr	r2, [pc, #24]	; (b7780 <_Z33system_initialize_user_backup_ramv+0x1c>)
   b7768:	4906      	ldr	r1, [pc, #24]	; (b7784 <_Z33system_initialize_user_backup_ramv+0x20>)
{
   b776a:	b508      	push	{r3, lr}
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
   b776c:	1a12      	subs	r2, r2, r0
   b776e:	f000 ff73 	bl	b8658 <memcpy>
    __backup_sram_signature = signature;
   b7772:	4b05      	ldr	r3, [pc, #20]	; (b7788 <_Z33system_initialize_user_backup_ramv+0x24>)
   b7774:	4a05      	ldr	r2, [pc, #20]	; (b778c <_Z33system_initialize_user_backup_ramv+0x28>)
   b7776:	601a      	str	r2, [r3, #0]
}
   b7778:	bd08      	pop	{r3, pc}
   b777a:	bf00      	nop
   b777c:	2003f400 	.word	0x2003f400
   b7780:	2003f404 	.word	0x2003f404
   b7784:	000b91ec 	.word	0x000b91ec
   b7788:	2003f400 	.word	0x2003f400
   b778c:	9a271c1e 	.word	0x9a271c1e

000b7790 <_Z27ctrl_request_custom_handlerP12ctrl_request>:
void __attribute((weak)) ctrl_request_custom_handler(ctrl_request* req) {
   b7790:	b507      	push	{r0, r1, r2, lr}
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   b7792:	2300      	movs	r3, #0
   b7794:	9300      	str	r3, [sp, #0]
   b7796:	461a      	mov	r2, r3
   b7798:	f06f 0177 	mvn.w	r1, #119	; 0x77
   b779c:	f7fe fe68 	bl	b6470 <system_ctrl_set_result>
}
   b77a0:	b003      	add	sp, #12
   b77a2:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000b77a8 <_ZL20ctrl_request_handlerP12ctrl_request>:
static void ctrl_request_handler(ctrl_request* req) {
   b77a8:	b507      	push	{r0, r1, r2, lr}
    switch (req->type) {
   b77aa:	8843      	ldrh	r3, [r0, #2]
   b77ac:	2b0a      	cmp	r3, #10
   b77ae:	d008      	beq.n	b77c2 <_ZL20ctrl_request_handlerP12ctrl_request+0x1a>
   b77b0:	2b50      	cmp	r3, #80	; 0x50
   b77b2:	d10b      	bne.n	b77cc <_ZL20ctrl_request_handlerP12ctrl_request+0x24>
        if (log_process_ctrl_request_callback) {
   b77b4:	4b09      	ldr	r3, [pc, #36]	; (b77dc <_ZL20ctrl_request_handlerP12ctrl_request+0x34>)
   b77b6:	681b      	ldr	r3, [r3, #0]
   b77b8:	b14b      	cbz	r3, b77ce <_ZL20ctrl_request_handlerP12ctrl_request+0x26>
}
   b77ba:	b003      	add	sp, #12
   b77bc:	f85d eb04 	ldr.w	lr, [sp], #4
            log_process_ctrl_request_callback(req);
   b77c0:	4718      	bx	r3
        ctrl_request_custom_handler(req);
   b77c2:	f7ff ffe5 	bl	b7790 <_Z27ctrl_request_custom_handlerP12ctrl_request>
}
   b77c6:	b003      	add	sp, #12
   b77c8:	f85d fb04 	ldr.w	pc, [sp], #4
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   b77cc:	2300      	movs	r3, #0
   b77ce:	9300      	str	r3, [sp, #0]
   b77d0:	461a      	mov	r2, r3
   b77d2:	f06f 0177 	mvn.w	r1, #119	; 0x77
   b77d6:	f7fe fe4b 	bl	b6470 <system_ctrl_set_result>
}
   b77da:	e7f4      	b.n	b77c6 <_ZL20ctrl_request_handlerP12ctrl_request+0x1e>
   b77dc:	2003e724 	.word	0x2003e724

000b77e0 <module_user_init_hook>:
{
   b77e0:	b510      	push	{r4, lr}
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
   b77e2:	4812      	ldr	r0, [pc, #72]	; (b782c <module_user_init_hook+0x4c>)
   b77e4:	2100      	movs	r1, #0
   b77e6:	f7fe fef5 	bl	b65d4 <newlib_impure_ptr_callback>
#endif // HAL_PLATFORM_NEWLIB

#if HAL_PLATFORM_BACKUP_RAM
    backup_ram_was_valid_ = __backup_sram_signature == signature;
   b77ea:	4b11      	ldr	r3, [pc, #68]	; (b7830 <module_user_init_hook+0x50>)
   b77ec:	681a      	ldr	r2, [r3, #0]
   b77ee:	4b11      	ldr	r3, [pc, #68]	; (b7834 <module_user_init_hook+0x54>)
   b77f0:	429a      	cmp	r2, r3
   b77f2:	4b11      	ldr	r3, [pc, #68]	; (b7838 <module_user_init_hook+0x58>)
   b77f4:	bf0c      	ite	eq
   b77f6:	2201      	moveq	r2, #1
   b77f8:	2200      	movne	r2, #0
   b77fa:	701a      	strb	r2, [r3, #0]
    if (!backup_ram_was_valid_) {
   b77fc:	d001      	beq.n	b7802 <module_user_init_hook+0x22>
        system_initialize_user_backup_ram();
   b77fe:	f7ff ffb1 	bl	b7764 <_Z33system_initialize_user_backup_ramv>
    }
#endif

#if HAL_PLATFORM_RNG
    // Initialize the default stdlib PRNG using hardware RNG as a seed
    const uint32_t seed = HAL_RNG_GetRandomNumber();
   b7802:	f7fe fcab 	bl	b615c <HAL_RNG_GetRandomNumber>
   b7806:	4604      	mov	r4, r0
    srand(seed);
   b7808:	f000 ff3c 	bl	b8684 <srand>

    // If the user defines random_seed_from_cloud, call it with a seed value
    // generated by a hardware RNG as well.
    if (random_seed_from_cloud) {
   b780c:	4b0b      	ldr	r3, [pc, #44]	; (b783c <module_user_init_hook+0x5c>)
   b780e:	b113      	cbz	r3, b7816 <module_user_init_hook+0x36>
        random_seed_from_cloud(seed);
   b7810:	4620      	mov	r0, r4
   b7812:	f3af 8000 	nop.w
    }
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);
   b7816:	2100      	movs	r1, #0
   b7818:	4808      	ldr	r0, [pc, #32]	; (b783c <module_user_init_hook+0x5c>)
   b781a:	f7fe fe43 	bl	b64a4 <spark_set_random_seed_from_cloud_handler>

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
}
   b781e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
   b7822:	4807      	ldr	r0, [pc, #28]	; (b7840 <module_user_init_hook+0x60>)
   b7824:	2100      	movs	r1, #0
   b7826:	f7fe be19 	b.w	b645c <system_ctrl_set_app_request_handler>
   b782a:	bf00      	nop
   b782c:	000b770d 	.word	0x000b770d
   b7830:	2003f400 	.word	0x2003f400
   b7834:	9a271c1e 	.word	0x9a271c1e
   b7838:	2003e720 	.word	0x2003e720
   b783c:	00000000 	.word	0x00000000
   b7840:	000b77a9 	.word	0x000b77a9

000b7844 <pinAvailable>:
/*
 * @brief Perform safety check on desired pin to see if it's already
 * being used.  Return 0 if used, otherwise return 1 if available.
 */
bool pinAvailable(uint16_t pin) {
  if (pin >= TOTAL_PINS) {
   b7844:	2823      	cmp	r0, #35	; 0x23
bool pinAvailable(uint16_t pin) {
   b7846:	b513      	push	{r0, r1, r4, lr}
  if (pin >= TOTAL_PINS) {
   b7848:	d902      	bls.n	b7850 <pinAvailable+0xc>
    return false;
   b784a:	2000      	movs	r0, #0
    return false; // 'pin' is used
  }
#endif

  return true; // 'pin' is available
}
   b784c:	b002      	add	sp, #8
   b784e:	bd10      	pop	{r4, pc}
  if((pin == SCK || pin == MOSI || pin == MISO) && hal_spi_is_enabled(SPI.interface()) == true)
   b7850:	f1a0 030b 	sub.w	r3, r0, #11
   b7854:	2b02      	cmp	r3, #2
   b7856:	d81a      	bhi.n	b788e <pinAvailable+0x4a>

template <hal_spi_interface_t Interface>
class SpiProxy {
public:
    static SPIClass& instance() {
        static SPIClass instance(Interface);
   b7858:	4c17      	ldr	r4, [pc, #92]	; (b78b8 <pinAvailable+0x74>)
   b785a:	7821      	ldrb	r1, [r4, #0]
   b785c:	f3bf 8f5b 	dmb	ish
   b7860:	f011 0101 	ands.w	r1, r1, #1
   b7864:	d10b      	bne.n	b787e <pinAvailable+0x3a>
   b7866:	4620      	mov	r0, r4
   b7868:	9101      	str	r1, [sp, #4]
   b786a:	f7fc fc27 	bl	b40bc <__cxa_guard_acquire>
   b786e:	9901      	ldr	r1, [sp, #4]
   b7870:	b128      	cbz	r0, b787e <pinAvailable+0x3a>
   b7872:	4812      	ldr	r0, [pc, #72]	; (b78bc <pinAvailable+0x78>)
   b7874:	f7ff fbd2 	bl	b701c <_ZN8SPIClassC1E19hal_spi_interface_t>
   b7878:	4620      	mov	r0, r4
   b787a:	f7fc fc24 	bl	b40c6 <__cxa_guard_release>
   b787e:	4b0f      	ldr	r3, [pc, #60]	; (b78bc <pinAvailable+0x78>)
   b7880:	7818      	ldrb	r0, [r3, #0]
   b7882:	f7fe fd23 	bl	b62cc <hal_spi_is_enabled>
   b7886:	2800      	cmp	r0, #0
   b7888:	d1df      	bne.n	b784a <pinAvailable+0x6>
  return true; // 'pin' is available
   b788a:	2001      	movs	r0, #1
   b788c:	e7de      	b.n	b784c <pinAvailable+0x8>
  if((pin == SCL || pin == SDA) && hal_i2c_is_enabled(Wire.interface(), nullptr) == true)
   b788e:	2801      	cmp	r0, #1
   b7890:	d809      	bhi.n	b78a6 <pinAvailable+0x62>
   b7892:	f000 f85b 	bl	b794c <_Z19__fetch_global_Wirev>
   b7896:	2100      	movs	r1, #0
   b7898:	7c00      	ldrb	r0, [r0, #16]
   b789a:	f7fe fccf 	bl	b623c <hal_i2c_is_enabled>
  if((pin == RX || pin == TX) && hal_usart_is_enabled(Serial1.interface()) == true)
   b789e:	f080 0001 	eor.w	r0, r0, #1
   b78a2:	b2c0      	uxtb	r0, r0
   b78a4:	e7d2      	b.n	b784c <pinAvailable+0x8>
   b78a6:	3809      	subs	r0, #9
   b78a8:	2801      	cmp	r0, #1
   b78aa:	d8ee      	bhi.n	b788a <pinAvailable+0x46>
   b78ac:	f000 f88e 	bl	b79cc <_Z22__fetch_global_Serial1v>
   b78b0:	7c00      	ldrb	r0, [r0, #16]
   b78b2:	f7fe fd5b 	bl	b636c <hal_usart_is_enabled>
   b78b6:	e7f2      	b.n	b789e <pinAvailable+0x5a>
   b78b8:	2003e6b8 	.word	0x2003e6b8
   b78bc:	2003e6bc 	.word	0x2003e6bc

000b78c0 <pinMode>:
  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   b78c0:	2823      	cmp	r0, #35	; 0x23
{
   b78c2:	b538      	push	{r3, r4, r5, lr}
   b78c4:	4604      	mov	r4, r0
   b78c6:	460d      	mov	r5, r1
  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   b78c8:	d80a      	bhi.n	b78e0 <pinMode+0x20>
   b78ca:	29ff      	cmp	r1, #255	; 0xff
   b78cc:	d008      	beq.n	b78e0 <pinMode+0x20>
  if( !pinAvailable(pin) ) {
   b78ce:	f7ff ffb9 	bl	b7844 <pinAvailable>
   b78d2:	b128      	cbz	r0, b78e0 <pinMode+0x20>
  HAL_Pin_Mode(pin, setMode);
   b78d4:	4629      	mov	r1, r5
   b78d6:	4620      	mov	r0, r4
}
   b78d8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  HAL_Pin_Mode(pin, setMode);
   b78dc:	f7fe bc56 	b.w	b618c <HAL_Pin_Mode>
}
   b78e0:	bd38      	pop	{r3, r4, r5, pc}

000b78e2 <digitalWrite>:

/*
 * @brief Sets a GPIO pin to HIGH or LOW.
 */
void digitalWrite(pin_t pin, uint8_t value)
{
   b78e2:	b538      	push	{r3, r4, r5, lr}
   b78e4:	4604      	mov	r4, r0
   b78e6:	460d      	mov	r5, r1
    PinMode mode = HAL_Get_Pin_Mode(pin);
   b78e8:	f7fe fc58 	bl	b619c <HAL_Get_Pin_Mode>
    if (mode==PIN_MODE_NONE || is_input_mode(mode))
   b78ec:	28ff      	cmp	r0, #255	; 0xff
   b78ee:	d010      	beq.n	b7912 <digitalWrite+0x30>
            mode == INPUT_PULLDOWN ||
   b78f0:	2806      	cmp	r0, #6
   b78f2:	d804      	bhi.n	b78fe <digitalWrite+0x1c>
   b78f4:	234d      	movs	r3, #77	; 0x4d
   b78f6:	fa23 f000 	lsr.w	r0, r3, r0
   b78fa:	07c3      	lsls	r3, r0, #31
   b78fc:	d409      	bmi.n	b7912 <digitalWrite+0x30>
        return;
  // Safety check
  if( !pinAvailable(pin) ) {
   b78fe:	4620      	mov	r0, r4
   b7900:	f7ff ffa0 	bl	b7844 <pinAvailable>
   b7904:	b128      	cbz	r0, b7912 <digitalWrite+0x30>
    return;
  }

  HAL_GPIO_Write(pin, value);
   b7906:	4629      	mov	r1, r5
   b7908:	4620      	mov	r0, r4
}
   b790a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  HAL_GPIO_Write(pin, value);
   b790e:	f7fe bc4d 	b.w	b61ac <HAL_GPIO_Write>
}
   b7912:	bd38      	pop	{r3, r4, r5, pc}

000b7914 <__tcf_0>:
}
#endif

TwoWire& __fetch_global_Wire()
{
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   b7914:	4770      	bx	lr
	...

000b7918 <_Z17acquireWireBufferv>:
{
   b7918:	b538      	push	{r3, r4, r5, lr}
	hal_i2c_config_t config = {
   b791a:	4b0a      	ldr	r3, [pc, #40]	; (b7944 <_Z17acquireWireBufferv+0x2c>)
   b791c:	6003      	str	r3, [r0, #0]
   b791e:	2301      	movs	r3, #1
{
   b7920:	4604      	mov	r4, r0
	hal_i2c_config_t config = {
   b7922:	6143      	str	r3, [r0, #20]
		.rx_buffer = new (std::nothrow) uint8_t[i2c_buffer_size],
   b7924:	4908      	ldr	r1, [pc, #32]	; (b7948 <_Z17acquireWireBufferv+0x30>)
   b7926:	2020      	movs	r0, #32
   b7928:	f000 f874 	bl	b7a14 <_ZnajRKSt9nothrow_t>
	};
   b792c:	2520      	movs	r5, #32
   b792e:	6060      	str	r0, [r4, #4]
		.tx_buffer = new (std::nothrow) uint8_t[i2c_buffer_size],
   b7930:	4905      	ldr	r1, [pc, #20]	; (b7948 <_Z17acquireWireBufferv+0x30>)
	};
   b7932:	60a5      	str	r5, [r4, #8]
		.tx_buffer = new (std::nothrow) uint8_t[i2c_buffer_size],
   b7934:	4628      	mov	r0, r5
   b7936:	f000 f86d 	bl	b7a14 <_ZnajRKSt9nothrow_t>
	};
   b793a:	e9c4 0503 	strd	r0, r5, [r4, #12]
}
   b793e:	4620      	mov	r0, r4
   b7940:	bd38      	pop	{r3, r4, r5, pc}
   b7942:	bf00      	nop
   b7944:	00010018 	.word	0x00010018
   b7948:	000b9124 	.word	0x000b9124

000b794c <_Z19__fetch_global_Wirev>:
{
   b794c:	b530      	push	{r4, r5, lr}
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   b794e:	4d0e      	ldr	r5, [pc, #56]	; (b7988 <_Z19__fetch_global_Wirev+0x3c>)
   b7950:	7829      	ldrb	r1, [r5, #0]
   b7952:	f3bf 8f5b 	dmb	ish
   b7956:	f011 0401 	ands.w	r4, r1, #1
{
   b795a:	b087      	sub	sp, #28
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   b795c:	d111      	bne.n	b7982 <_Z19__fetch_global_Wirev+0x36>
   b795e:	4628      	mov	r0, r5
   b7960:	f7fc fbac 	bl	b40bc <__cxa_guard_acquire>
   b7964:	b168      	cbz	r0, b7982 <_Z19__fetch_global_Wirev+0x36>
   b7966:	4668      	mov	r0, sp
   b7968:	f7ff ffd6 	bl	b7918 <_Z17acquireWireBufferv>
   b796c:	466a      	mov	r2, sp
   b796e:	4621      	mov	r1, r4
   b7970:	4806      	ldr	r0, [pc, #24]	; (b798c <_Z19__fetch_global_Wirev+0x40>)
   b7972:	f7ff f973 	bl	b6c5c <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>
   b7976:	4628      	mov	r0, r5
   b7978:	f7fc fba5 	bl	b40c6 <__cxa_guard_release>
   b797c:	4804      	ldr	r0, [pc, #16]	; (b7990 <_Z19__fetch_global_Wirev+0x44>)
   b797e:	f000 fe65 	bl	b864c <atexit>
	return wire;
}
   b7982:	4802      	ldr	r0, [pc, #8]	; (b798c <_Z19__fetch_global_Wirev+0x40>)
   b7984:	b007      	add	sp, #28
   b7986:	bd30      	pop	{r4, r5, pc}
   b7988:	2003e72c 	.word	0x2003e72c
   b798c:	2003e730 	.word	0x2003e730
   b7990:	000b7915 	.word	0x000b7915

000b7994 <__tcf_0>:
}
#endif

USARTSerial& __fetch_global_Serial1()
{
    static USARTSerial serial1(HAL_USART_SERIAL1, acquireSerial1Buffer());
   b7994:	4770      	bx	lr
	...

000b7998 <_Z20acquireSerial1Bufferv>:
{
   b7998:	b538      	push	{r3, r4, r5, lr}
   b799a:	4604      	mov	r4, r0
    hal_usart_buffer_config_t config = {
   b799c:	2514      	movs	r5, #20
   b799e:	462a      	mov	r2, r5
   b79a0:	2100      	movs	r1, #0
   b79a2:	f000 fe67 	bl	b8674 <memset>
   b79a6:	8025      	strh	r5, [r4, #0]
   b79a8:	2540      	movs	r5, #64	; 0x40
        .rx_buffer = new (std::nothrow) uint8_t[bufferSize],
   b79aa:	4907      	ldr	r1, [pc, #28]	; (b79c8 <_Z20acquireSerial1Bufferv+0x30>)
    hal_usart_buffer_config_t config = {
   b79ac:	8125      	strh	r5, [r4, #8]
        .rx_buffer = new (std::nothrow) uint8_t[bufferSize],
   b79ae:	4628      	mov	r0, r5
    hal_usart_buffer_config_t config = {
   b79b0:	8225      	strh	r5, [r4, #16]
        .rx_buffer = new (std::nothrow) uint8_t[bufferSize],
   b79b2:	f000 f82f 	bl	b7a14 <_ZnajRKSt9nothrow_t>
        .tx_buffer = new (std::nothrow) uint8_t[bufferSize],
   b79b6:	4904      	ldr	r1, [pc, #16]	; (b79c8 <_Z20acquireSerial1Bufferv+0x30>)
    };
   b79b8:	6060      	str	r0, [r4, #4]
        .tx_buffer = new (std::nothrow) uint8_t[bufferSize],
   b79ba:	4628      	mov	r0, r5
   b79bc:	f000 f82a 	bl	b7a14 <_ZnajRKSt9nothrow_t>
    };
   b79c0:	60e0      	str	r0, [r4, #12]
}
   b79c2:	4620      	mov	r0, r4
   b79c4:	bd38      	pop	{r3, r4, r5, pc}
   b79c6:	bf00      	nop
   b79c8:	000b9124 	.word	0x000b9124

000b79cc <_Z22__fetch_global_Serial1v>:
{
   b79cc:	b530      	push	{r4, r5, lr}
    static USARTSerial serial1(HAL_USART_SERIAL1, acquireSerial1Buffer());
   b79ce:	4d0e      	ldr	r5, [pc, #56]	; (b7a08 <_Z22__fetch_global_Serial1v+0x3c>)
   b79d0:	7829      	ldrb	r1, [r5, #0]
   b79d2:	f3bf 8f5b 	dmb	ish
   b79d6:	f011 0401 	ands.w	r4, r1, #1
{
   b79da:	b087      	sub	sp, #28
    static USARTSerial serial1(HAL_USART_SERIAL1, acquireSerial1Buffer());
   b79dc:	d111      	bne.n	b7a02 <_Z22__fetch_global_Serial1v+0x36>
   b79de:	4628      	mov	r0, r5
   b79e0:	f7fc fb6c 	bl	b40bc <__cxa_guard_acquire>
   b79e4:	b168      	cbz	r0, b7a02 <_Z22__fetch_global_Serial1v+0x36>
   b79e6:	a801      	add	r0, sp, #4
   b79e8:	f7ff ffd6 	bl	b7998 <_Z20acquireSerial1Bufferv>
   b79ec:	aa01      	add	r2, sp, #4
   b79ee:	4621      	mov	r1, r4
   b79f0:	4806      	ldr	r0, [pc, #24]	; (b7a0c <_Z22__fetch_global_Serial1v+0x40>)
   b79f2:	f7ff fd69 	bl	b74c8 <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t>
   b79f6:	4628      	mov	r0, r5
   b79f8:	f7fc fb65 	bl	b40c6 <__cxa_guard_release>
   b79fc:	4804      	ldr	r0, [pc, #16]	; (b7a10 <_Z22__fetch_global_Serial1v+0x44>)
   b79fe:	f000 fe25 	bl	b864c <atexit>
    return serial1;
}
   b7a02:	4802      	ldr	r0, [pc, #8]	; (b7a0c <_Z22__fetch_global_Serial1v+0x40>)
   b7a04:	b007      	add	sp, #28
   b7a06:	bd30      	pop	{r4, r5, pc}
   b7a08:	2003e744 	.word	0x2003e744
   b7a0c:	2003e748 	.word	0x2003e748
   b7a10:	000b7995 	.word	0x000b7995

000b7a14 <_ZnajRKSt9nothrow_t>:
   b7a14:	f7fc bb41 	b.w	b409a <_Znaj>

000b7a18 <_ZSt25__throw_bad_function_callv>:
   b7a18:	b508      	push	{r3, lr}
   b7a1a:	f7fe fdc3 	bl	b65a4 <abort>
	...

000b7a20 <__aeabi_drsub>:
   b7a20:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
   b7a24:	e002      	b.n	b7a2c <__adddf3>
   b7a26:	bf00      	nop

000b7a28 <__aeabi_dsub>:
   b7a28:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

000b7a2c <__adddf3>:
   b7a2c:	b530      	push	{r4, r5, lr}
   b7a2e:	ea4f 0441 	mov.w	r4, r1, lsl #1
   b7a32:	ea4f 0543 	mov.w	r5, r3, lsl #1
   b7a36:	ea94 0f05 	teq	r4, r5
   b7a3a:	bf08      	it	eq
   b7a3c:	ea90 0f02 	teqeq	r0, r2
   b7a40:	bf1f      	itttt	ne
   b7a42:	ea54 0c00 	orrsne.w	ip, r4, r0
   b7a46:	ea55 0c02 	orrsne.w	ip, r5, r2
   b7a4a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
   b7a4e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   b7a52:	f000 80e2 	beq.w	b7c1a <__adddf3+0x1ee>
   b7a56:	ea4f 5454 	mov.w	r4, r4, lsr #21
   b7a5a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
   b7a5e:	bfb8      	it	lt
   b7a60:	426d      	neglt	r5, r5
   b7a62:	dd0c      	ble.n	b7a7e <__adddf3+0x52>
   b7a64:	442c      	add	r4, r5
   b7a66:	ea80 0202 	eor.w	r2, r0, r2
   b7a6a:	ea81 0303 	eor.w	r3, r1, r3
   b7a6e:	ea82 0000 	eor.w	r0, r2, r0
   b7a72:	ea83 0101 	eor.w	r1, r3, r1
   b7a76:	ea80 0202 	eor.w	r2, r0, r2
   b7a7a:	ea81 0303 	eor.w	r3, r1, r3
   b7a7e:	2d36      	cmp	r5, #54	; 0x36
   b7a80:	bf88      	it	hi
   b7a82:	bd30      	pophi	{r4, r5, pc}
   b7a84:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   b7a88:	ea4f 3101 	mov.w	r1, r1, lsl #12
   b7a8c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
   b7a90:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
   b7a94:	d002      	beq.n	b7a9c <__adddf3+0x70>
   b7a96:	4240      	negs	r0, r0
   b7a98:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   b7a9c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
   b7aa0:	ea4f 3303 	mov.w	r3, r3, lsl #12
   b7aa4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
   b7aa8:	d002      	beq.n	b7ab0 <__adddf3+0x84>
   b7aaa:	4252      	negs	r2, r2
   b7aac:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   b7ab0:	ea94 0f05 	teq	r4, r5
   b7ab4:	f000 80a7 	beq.w	b7c06 <__adddf3+0x1da>
   b7ab8:	f1a4 0401 	sub.w	r4, r4, #1
   b7abc:	f1d5 0e20 	rsbs	lr, r5, #32
   b7ac0:	db0d      	blt.n	b7ade <__adddf3+0xb2>
   b7ac2:	fa02 fc0e 	lsl.w	ip, r2, lr
   b7ac6:	fa22 f205 	lsr.w	r2, r2, r5
   b7aca:	1880      	adds	r0, r0, r2
   b7acc:	f141 0100 	adc.w	r1, r1, #0
   b7ad0:	fa03 f20e 	lsl.w	r2, r3, lr
   b7ad4:	1880      	adds	r0, r0, r2
   b7ad6:	fa43 f305 	asr.w	r3, r3, r5
   b7ada:	4159      	adcs	r1, r3
   b7adc:	e00e      	b.n	b7afc <__adddf3+0xd0>
   b7ade:	f1a5 0520 	sub.w	r5, r5, #32
   b7ae2:	f10e 0e20 	add.w	lr, lr, #32
   b7ae6:	2a01      	cmp	r2, #1
   b7ae8:	fa03 fc0e 	lsl.w	ip, r3, lr
   b7aec:	bf28      	it	cs
   b7aee:	f04c 0c02 	orrcs.w	ip, ip, #2
   b7af2:	fa43 f305 	asr.w	r3, r3, r5
   b7af6:	18c0      	adds	r0, r0, r3
   b7af8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
   b7afc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   b7b00:	d507      	bpl.n	b7b12 <__adddf3+0xe6>
   b7b02:	f04f 0e00 	mov.w	lr, #0
   b7b06:	f1dc 0c00 	rsbs	ip, ip, #0
   b7b0a:	eb7e 0000 	sbcs.w	r0, lr, r0
   b7b0e:	eb6e 0101 	sbc.w	r1, lr, r1
   b7b12:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
   b7b16:	d31b      	bcc.n	b7b50 <__adddf3+0x124>
   b7b18:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
   b7b1c:	d30c      	bcc.n	b7b38 <__adddf3+0x10c>
   b7b1e:	0849      	lsrs	r1, r1, #1
   b7b20:	ea5f 0030 	movs.w	r0, r0, rrx
   b7b24:	ea4f 0c3c 	mov.w	ip, ip, rrx
   b7b28:	f104 0401 	add.w	r4, r4, #1
   b7b2c:	ea4f 5244 	mov.w	r2, r4, lsl #21
   b7b30:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
   b7b34:	f080 809a 	bcs.w	b7c6c <__adddf3+0x240>
   b7b38:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
   b7b3c:	bf08      	it	eq
   b7b3e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   b7b42:	f150 0000 	adcs.w	r0, r0, #0
   b7b46:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   b7b4a:	ea41 0105 	orr.w	r1, r1, r5
   b7b4e:	bd30      	pop	{r4, r5, pc}
   b7b50:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
   b7b54:	4140      	adcs	r0, r0
   b7b56:	eb41 0101 	adc.w	r1, r1, r1
   b7b5a:	3c01      	subs	r4, #1
   b7b5c:	bf28      	it	cs
   b7b5e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
   b7b62:	d2e9      	bcs.n	b7b38 <__adddf3+0x10c>
   b7b64:	f091 0f00 	teq	r1, #0
   b7b68:	bf04      	itt	eq
   b7b6a:	4601      	moveq	r1, r0
   b7b6c:	2000      	moveq	r0, #0
   b7b6e:	fab1 f381 	clz	r3, r1
   b7b72:	bf08      	it	eq
   b7b74:	3320      	addeq	r3, #32
   b7b76:	f1a3 030b 	sub.w	r3, r3, #11
   b7b7a:	f1b3 0220 	subs.w	r2, r3, #32
   b7b7e:	da0c      	bge.n	b7b9a <__adddf3+0x16e>
   b7b80:	320c      	adds	r2, #12
   b7b82:	dd08      	ble.n	b7b96 <__adddf3+0x16a>
   b7b84:	f102 0c14 	add.w	ip, r2, #20
   b7b88:	f1c2 020c 	rsb	r2, r2, #12
   b7b8c:	fa01 f00c 	lsl.w	r0, r1, ip
   b7b90:	fa21 f102 	lsr.w	r1, r1, r2
   b7b94:	e00c      	b.n	b7bb0 <__adddf3+0x184>
   b7b96:	f102 0214 	add.w	r2, r2, #20
   b7b9a:	bfd8      	it	le
   b7b9c:	f1c2 0c20 	rsble	ip, r2, #32
   b7ba0:	fa01 f102 	lsl.w	r1, r1, r2
   b7ba4:	fa20 fc0c 	lsr.w	ip, r0, ip
   b7ba8:	bfdc      	itt	le
   b7baa:	ea41 010c 	orrle.w	r1, r1, ip
   b7bae:	4090      	lslle	r0, r2
   b7bb0:	1ae4      	subs	r4, r4, r3
   b7bb2:	bfa2      	ittt	ge
   b7bb4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
   b7bb8:	4329      	orrge	r1, r5
   b7bba:	bd30      	popge	{r4, r5, pc}
   b7bbc:	ea6f 0404 	mvn.w	r4, r4
   b7bc0:	3c1f      	subs	r4, #31
   b7bc2:	da1c      	bge.n	b7bfe <__adddf3+0x1d2>
   b7bc4:	340c      	adds	r4, #12
   b7bc6:	dc0e      	bgt.n	b7be6 <__adddf3+0x1ba>
   b7bc8:	f104 0414 	add.w	r4, r4, #20
   b7bcc:	f1c4 0220 	rsb	r2, r4, #32
   b7bd0:	fa20 f004 	lsr.w	r0, r0, r4
   b7bd4:	fa01 f302 	lsl.w	r3, r1, r2
   b7bd8:	ea40 0003 	orr.w	r0, r0, r3
   b7bdc:	fa21 f304 	lsr.w	r3, r1, r4
   b7be0:	ea45 0103 	orr.w	r1, r5, r3
   b7be4:	bd30      	pop	{r4, r5, pc}
   b7be6:	f1c4 040c 	rsb	r4, r4, #12
   b7bea:	f1c4 0220 	rsb	r2, r4, #32
   b7bee:	fa20 f002 	lsr.w	r0, r0, r2
   b7bf2:	fa01 f304 	lsl.w	r3, r1, r4
   b7bf6:	ea40 0003 	orr.w	r0, r0, r3
   b7bfa:	4629      	mov	r1, r5
   b7bfc:	bd30      	pop	{r4, r5, pc}
   b7bfe:	fa21 f004 	lsr.w	r0, r1, r4
   b7c02:	4629      	mov	r1, r5
   b7c04:	bd30      	pop	{r4, r5, pc}
   b7c06:	f094 0f00 	teq	r4, #0
   b7c0a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
   b7c0e:	bf06      	itte	eq
   b7c10:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
   b7c14:	3401      	addeq	r4, #1
   b7c16:	3d01      	subne	r5, #1
   b7c18:	e74e      	b.n	b7ab8 <__adddf3+0x8c>
   b7c1a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   b7c1e:	bf18      	it	ne
   b7c20:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   b7c24:	d029      	beq.n	b7c7a <__adddf3+0x24e>
   b7c26:	ea94 0f05 	teq	r4, r5
   b7c2a:	bf08      	it	eq
   b7c2c:	ea90 0f02 	teqeq	r0, r2
   b7c30:	d005      	beq.n	b7c3e <__adddf3+0x212>
   b7c32:	ea54 0c00 	orrs.w	ip, r4, r0
   b7c36:	bf04      	itt	eq
   b7c38:	4619      	moveq	r1, r3
   b7c3a:	4610      	moveq	r0, r2
   b7c3c:	bd30      	pop	{r4, r5, pc}
   b7c3e:	ea91 0f03 	teq	r1, r3
   b7c42:	bf1e      	ittt	ne
   b7c44:	2100      	movne	r1, #0
   b7c46:	2000      	movne	r0, #0
   b7c48:	bd30      	popne	{r4, r5, pc}
   b7c4a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
   b7c4e:	d105      	bne.n	b7c5c <__adddf3+0x230>
   b7c50:	0040      	lsls	r0, r0, #1
   b7c52:	4149      	adcs	r1, r1
   b7c54:	bf28      	it	cs
   b7c56:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
   b7c5a:	bd30      	pop	{r4, r5, pc}
   b7c5c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
   b7c60:	bf3c      	itt	cc
   b7c62:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
   b7c66:	bd30      	popcc	{r4, r5, pc}
   b7c68:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   b7c6c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
   b7c70:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   b7c74:	f04f 0000 	mov.w	r0, #0
   b7c78:	bd30      	pop	{r4, r5, pc}
   b7c7a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   b7c7e:	bf1a      	itte	ne
   b7c80:	4619      	movne	r1, r3
   b7c82:	4610      	movne	r0, r2
   b7c84:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
   b7c88:	bf1c      	itt	ne
   b7c8a:	460b      	movne	r3, r1
   b7c8c:	4602      	movne	r2, r0
   b7c8e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   b7c92:	bf06      	itte	eq
   b7c94:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
   b7c98:	ea91 0f03 	teqeq	r1, r3
   b7c9c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
   b7ca0:	bd30      	pop	{r4, r5, pc}
   b7ca2:	bf00      	nop

000b7ca4 <__aeabi_ui2d>:
   b7ca4:	f090 0f00 	teq	r0, #0
   b7ca8:	bf04      	itt	eq
   b7caa:	2100      	moveq	r1, #0
   b7cac:	4770      	bxeq	lr
   b7cae:	b530      	push	{r4, r5, lr}
   b7cb0:	f44f 6480 	mov.w	r4, #1024	; 0x400
   b7cb4:	f104 0432 	add.w	r4, r4, #50	; 0x32
   b7cb8:	f04f 0500 	mov.w	r5, #0
   b7cbc:	f04f 0100 	mov.w	r1, #0
   b7cc0:	e750      	b.n	b7b64 <__adddf3+0x138>
   b7cc2:	bf00      	nop

000b7cc4 <__aeabi_i2d>:
   b7cc4:	f090 0f00 	teq	r0, #0
   b7cc8:	bf04      	itt	eq
   b7cca:	2100      	moveq	r1, #0
   b7ccc:	4770      	bxeq	lr
   b7cce:	b530      	push	{r4, r5, lr}
   b7cd0:	f44f 6480 	mov.w	r4, #1024	; 0x400
   b7cd4:	f104 0432 	add.w	r4, r4, #50	; 0x32
   b7cd8:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
   b7cdc:	bf48      	it	mi
   b7cde:	4240      	negmi	r0, r0
   b7ce0:	f04f 0100 	mov.w	r1, #0
   b7ce4:	e73e      	b.n	b7b64 <__adddf3+0x138>
   b7ce6:	bf00      	nop

000b7ce8 <__aeabi_f2d>:
   b7ce8:	0042      	lsls	r2, r0, #1
   b7cea:	ea4f 01e2 	mov.w	r1, r2, asr #3
   b7cee:	ea4f 0131 	mov.w	r1, r1, rrx
   b7cf2:	ea4f 7002 	mov.w	r0, r2, lsl #28
   b7cf6:	bf1f      	itttt	ne
   b7cf8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
   b7cfc:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
   b7d00:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
   b7d04:	4770      	bxne	lr
   b7d06:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
   b7d0a:	bf08      	it	eq
   b7d0c:	4770      	bxeq	lr
   b7d0e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
   b7d12:	bf04      	itt	eq
   b7d14:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
   b7d18:	4770      	bxeq	lr
   b7d1a:	b530      	push	{r4, r5, lr}
   b7d1c:	f44f 7460 	mov.w	r4, #896	; 0x380
   b7d20:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   b7d24:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   b7d28:	e71c      	b.n	b7b64 <__adddf3+0x138>
   b7d2a:	bf00      	nop

000b7d2c <__aeabi_ul2d>:
   b7d2c:	ea50 0201 	orrs.w	r2, r0, r1
   b7d30:	bf08      	it	eq
   b7d32:	4770      	bxeq	lr
   b7d34:	b530      	push	{r4, r5, lr}
   b7d36:	f04f 0500 	mov.w	r5, #0
   b7d3a:	e00a      	b.n	b7d52 <__aeabi_l2d+0x16>

000b7d3c <__aeabi_l2d>:
   b7d3c:	ea50 0201 	orrs.w	r2, r0, r1
   b7d40:	bf08      	it	eq
   b7d42:	4770      	bxeq	lr
   b7d44:	b530      	push	{r4, r5, lr}
   b7d46:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
   b7d4a:	d502      	bpl.n	b7d52 <__aeabi_l2d+0x16>
   b7d4c:	4240      	negs	r0, r0
   b7d4e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   b7d52:	f44f 6480 	mov.w	r4, #1024	; 0x400
   b7d56:	f104 0432 	add.w	r4, r4, #50	; 0x32
   b7d5a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
   b7d5e:	f43f aed8 	beq.w	b7b12 <__adddf3+0xe6>
   b7d62:	f04f 0203 	mov.w	r2, #3
   b7d66:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   b7d6a:	bf18      	it	ne
   b7d6c:	3203      	addne	r2, #3
   b7d6e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   b7d72:	bf18      	it	ne
   b7d74:	3203      	addne	r2, #3
   b7d76:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
   b7d7a:	f1c2 0320 	rsb	r3, r2, #32
   b7d7e:	fa00 fc03 	lsl.w	ip, r0, r3
   b7d82:	fa20 f002 	lsr.w	r0, r0, r2
   b7d86:	fa01 fe03 	lsl.w	lr, r1, r3
   b7d8a:	ea40 000e 	orr.w	r0, r0, lr
   b7d8e:	fa21 f102 	lsr.w	r1, r1, r2
   b7d92:	4414      	add	r4, r2
   b7d94:	e6bd      	b.n	b7b12 <__adddf3+0xe6>
   b7d96:	bf00      	nop

000b7d98 <__aeabi_dmul>:
   b7d98:	b570      	push	{r4, r5, r6, lr}
   b7d9a:	f04f 0cff 	mov.w	ip, #255	; 0xff
   b7d9e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   b7da2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   b7da6:	bf1d      	ittte	ne
   b7da8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   b7dac:	ea94 0f0c 	teqne	r4, ip
   b7db0:	ea95 0f0c 	teqne	r5, ip
   b7db4:	f000 f8de 	bleq	b7f74 <__aeabi_dmul+0x1dc>
   b7db8:	442c      	add	r4, r5
   b7dba:	ea81 0603 	eor.w	r6, r1, r3
   b7dbe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
   b7dc2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
   b7dc6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
   b7dca:	bf18      	it	ne
   b7dcc:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
   b7dd0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   b7dd4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   b7dd8:	d038      	beq.n	b7e4c <__aeabi_dmul+0xb4>
   b7dda:	fba0 ce02 	umull	ip, lr, r0, r2
   b7dde:	f04f 0500 	mov.w	r5, #0
   b7de2:	fbe1 e502 	umlal	lr, r5, r1, r2
   b7de6:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
   b7dea:	fbe0 e503 	umlal	lr, r5, r0, r3
   b7dee:	f04f 0600 	mov.w	r6, #0
   b7df2:	fbe1 5603 	umlal	r5, r6, r1, r3
   b7df6:	f09c 0f00 	teq	ip, #0
   b7dfa:	bf18      	it	ne
   b7dfc:	f04e 0e01 	orrne.w	lr, lr, #1
   b7e00:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
   b7e04:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
   b7e08:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
   b7e0c:	d204      	bcs.n	b7e18 <__aeabi_dmul+0x80>
   b7e0e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
   b7e12:	416d      	adcs	r5, r5
   b7e14:	eb46 0606 	adc.w	r6, r6, r6
   b7e18:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
   b7e1c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
   b7e20:	ea4f 20c5 	mov.w	r0, r5, lsl #11
   b7e24:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
   b7e28:	ea4f 2ece 	mov.w	lr, lr, lsl #11
   b7e2c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   b7e30:	bf88      	it	hi
   b7e32:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   b7e36:	d81e      	bhi.n	b7e76 <__aeabi_dmul+0xde>
   b7e38:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
   b7e3c:	bf08      	it	eq
   b7e3e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
   b7e42:	f150 0000 	adcs.w	r0, r0, #0
   b7e46:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   b7e4a:	bd70      	pop	{r4, r5, r6, pc}
   b7e4c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
   b7e50:	ea46 0101 	orr.w	r1, r6, r1
   b7e54:	ea40 0002 	orr.w	r0, r0, r2
   b7e58:	ea81 0103 	eor.w	r1, r1, r3
   b7e5c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
   b7e60:	bfc2      	ittt	gt
   b7e62:	ebd4 050c 	rsbsgt	r5, r4, ip
   b7e66:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   b7e6a:	bd70      	popgt	{r4, r5, r6, pc}
   b7e6c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   b7e70:	f04f 0e00 	mov.w	lr, #0
   b7e74:	3c01      	subs	r4, #1
   b7e76:	f300 80ab 	bgt.w	b7fd0 <__aeabi_dmul+0x238>
   b7e7a:	f114 0f36 	cmn.w	r4, #54	; 0x36
   b7e7e:	bfde      	ittt	le
   b7e80:	2000      	movle	r0, #0
   b7e82:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
   b7e86:	bd70      	pople	{r4, r5, r6, pc}
   b7e88:	f1c4 0400 	rsb	r4, r4, #0
   b7e8c:	3c20      	subs	r4, #32
   b7e8e:	da35      	bge.n	b7efc <__aeabi_dmul+0x164>
   b7e90:	340c      	adds	r4, #12
   b7e92:	dc1b      	bgt.n	b7ecc <__aeabi_dmul+0x134>
   b7e94:	f104 0414 	add.w	r4, r4, #20
   b7e98:	f1c4 0520 	rsb	r5, r4, #32
   b7e9c:	fa00 f305 	lsl.w	r3, r0, r5
   b7ea0:	fa20 f004 	lsr.w	r0, r0, r4
   b7ea4:	fa01 f205 	lsl.w	r2, r1, r5
   b7ea8:	ea40 0002 	orr.w	r0, r0, r2
   b7eac:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
   b7eb0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   b7eb4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   b7eb8:	fa21 f604 	lsr.w	r6, r1, r4
   b7ebc:	eb42 0106 	adc.w	r1, r2, r6
   b7ec0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   b7ec4:	bf08      	it	eq
   b7ec6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   b7eca:	bd70      	pop	{r4, r5, r6, pc}
   b7ecc:	f1c4 040c 	rsb	r4, r4, #12
   b7ed0:	f1c4 0520 	rsb	r5, r4, #32
   b7ed4:	fa00 f304 	lsl.w	r3, r0, r4
   b7ed8:	fa20 f005 	lsr.w	r0, r0, r5
   b7edc:	fa01 f204 	lsl.w	r2, r1, r4
   b7ee0:	ea40 0002 	orr.w	r0, r0, r2
   b7ee4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   b7ee8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   b7eec:	f141 0100 	adc.w	r1, r1, #0
   b7ef0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   b7ef4:	bf08      	it	eq
   b7ef6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   b7efa:	bd70      	pop	{r4, r5, r6, pc}
   b7efc:	f1c4 0520 	rsb	r5, r4, #32
   b7f00:	fa00 f205 	lsl.w	r2, r0, r5
   b7f04:	ea4e 0e02 	orr.w	lr, lr, r2
   b7f08:	fa20 f304 	lsr.w	r3, r0, r4
   b7f0c:	fa01 f205 	lsl.w	r2, r1, r5
   b7f10:	ea43 0302 	orr.w	r3, r3, r2
   b7f14:	fa21 f004 	lsr.w	r0, r1, r4
   b7f18:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   b7f1c:	fa21 f204 	lsr.w	r2, r1, r4
   b7f20:	ea20 0002 	bic.w	r0, r0, r2
   b7f24:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
   b7f28:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   b7f2c:	bf08      	it	eq
   b7f2e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   b7f32:	bd70      	pop	{r4, r5, r6, pc}
   b7f34:	f094 0f00 	teq	r4, #0
   b7f38:	d10f      	bne.n	b7f5a <__aeabi_dmul+0x1c2>
   b7f3a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
   b7f3e:	0040      	lsls	r0, r0, #1
   b7f40:	eb41 0101 	adc.w	r1, r1, r1
   b7f44:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   b7f48:	bf08      	it	eq
   b7f4a:	3c01      	subeq	r4, #1
   b7f4c:	d0f7      	beq.n	b7f3e <__aeabi_dmul+0x1a6>
   b7f4e:	ea41 0106 	orr.w	r1, r1, r6
   b7f52:	f095 0f00 	teq	r5, #0
   b7f56:	bf18      	it	ne
   b7f58:	4770      	bxne	lr
   b7f5a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
   b7f5e:	0052      	lsls	r2, r2, #1
   b7f60:	eb43 0303 	adc.w	r3, r3, r3
   b7f64:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
   b7f68:	bf08      	it	eq
   b7f6a:	3d01      	subeq	r5, #1
   b7f6c:	d0f7      	beq.n	b7f5e <__aeabi_dmul+0x1c6>
   b7f6e:	ea43 0306 	orr.w	r3, r3, r6
   b7f72:	4770      	bx	lr
   b7f74:	ea94 0f0c 	teq	r4, ip
   b7f78:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   b7f7c:	bf18      	it	ne
   b7f7e:	ea95 0f0c 	teqne	r5, ip
   b7f82:	d00c      	beq.n	b7f9e <__aeabi_dmul+0x206>
   b7f84:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   b7f88:	bf18      	it	ne
   b7f8a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   b7f8e:	d1d1      	bne.n	b7f34 <__aeabi_dmul+0x19c>
   b7f90:	ea81 0103 	eor.w	r1, r1, r3
   b7f94:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   b7f98:	f04f 0000 	mov.w	r0, #0
   b7f9c:	bd70      	pop	{r4, r5, r6, pc}
   b7f9e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   b7fa2:	bf06      	itte	eq
   b7fa4:	4610      	moveq	r0, r2
   b7fa6:	4619      	moveq	r1, r3
   b7fa8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   b7fac:	d019      	beq.n	b7fe2 <__aeabi_dmul+0x24a>
   b7fae:	ea94 0f0c 	teq	r4, ip
   b7fb2:	d102      	bne.n	b7fba <__aeabi_dmul+0x222>
   b7fb4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
   b7fb8:	d113      	bne.n	b7fe2 <__aeabi_dmul+0x24a>
   b7fba:	ea95 0f0c 	teq	r5, ip
   b7fbe:	d105      	bne.n	b7fcc <__aeabi_dmul+0x234>
   b7fc0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
   b7fc4:	bf1c      	itt	ne
   b7fc6:	4610      	movne	r0, r2
   b7fc8:	4619      	movne	r1, r3
   b7fca:	d10a      	bne.n	b7fe2 <__aeabi_dmul+0x24a>
   b7fcc:	ea81 0103 	eor.w	r1, r1, r3
   b7fd0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   b7fd4:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   b7fd8:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   b7fdc:	f04f 0000 	mov.w	r0, #0
   b7fe0:	bd70      	pop	{r4, r5, r6, pc}
   b7fe2:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   b7fe6:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
   b7fea:	bd70      	pop	{r4, r5, r6, pc}

000b7fec <__aeabi_ddiv>:
   b7fec:	b570      	push	{r4, r5, r6, lr}
   b7fee:	f04f 0cff 	mov.w	ip, #255	; 0xff
   b7ff2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   b7ff6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   b7ffa:	bf1d      	ittte	ne
   b7ffc:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   b8000:	ea94 0f0c 	teqne	r4, ip
   b8004:	ea95 0f0c 	teqne	r5, ip
   b8008:	f000 f8a7 	bleq	b815a <__aeabi_ddiv+0x16e>
   b800c:	eba4 0405 	sub.w	r4, r4, r5
   b8010:	ea81 0e03 	eor.w	lr, r1, r3
   b8014:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   b8018:	ea4f 3101 	mov.w	r1, r1, lsl #12
   b801c:	f000 8088 	beq.w	b8130 <__aeabi_ddiv+0x144>
   b8020:	ea4f 3303 	mov.w	r3, r3, lsl #12
   b8024:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
   b8028:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
   b802c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
   b8030:	ea4f 2202 	mov.w	r2, r2, lsl #8
   b8034:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
   b8038:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
   b803c:	ea4f 2600 	mov.w	r6, r0, lsl #8
   b8040:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
   b8044:	429d      	cmp	r5, r3
   b8046:	bf08      	it	eq
   b8048:	4296      	cmpeq	r6, r2
   b804a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
   b804e:	f504 7440 	add.w	r4, r4, #768	; 0x300
   b8052:	d202      	bcs.n	b805a <__aeabi_ddiv+0x6e>
   b8054:	085b      	lsrs	r3, r3, #1
   b8056:	ea4f 0232 	mov.w	r2, r2, rrx
   b805a:	1ab6      	subs	r6, r6, r2
   b805c:	eb65 0503 	sbc.w	r5, r5, r3
   b8060:	085b      	lsrs	r3, r3, #1
   b8062:	ea4f 0232 	mov.w	r2, r2, rrx
   b8066:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
   b806a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
   b806e:	ebb6 0e02 	subs.w	lr, r6, r2
   b8072:	eb75 0e03 	sbcs.w	lr, r5, r3
   b8076:	bf22      	ittt	cs
   b8078:	1ab6      	subcs	r6, r6, r2
   b807a:	4675      	movcs	r5, lr
   b807c:	ea40 000c 	orrcs.w	r0, r0, ip
   b8080:	085b      	lsrs	r3, r3, #1
   b8082:	ea4f 0232 	mov.w	r2, r2, rrx
   b8086:	ebb6 0e02 	subs.w	lr, r6, r2
   b808a:	eb75 0e03 	sbcs.w	lr, r5, r3
   b808e:	bf22      	ittt	cs
   b8090:	1ab6      	subcs	r6, r6, r2
   b8092:	4675      	movcs	r5, lr
   b8094:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
   b8098:	085b      	lsrs	r3, r3, #1
   b809a:	ea4f 0232 	mov.w	r2, r2, rrx
   b809e:	ebb6 0e02 	subs.w	lr, r6, r2
   b80a2:	eb75 0e03 	sbcs.w	lr, r5, r3
   b80a6:	bf22      	ittt	cs
   b80a8:	1ab6      	subcs	r6, r6, r2
   b80aa:	4675      	movcs	r5, lr
   b80ac:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
   b80b0:	085b      	lsrs	r3, r3, #1
   b80b2:	ea4f 0232 	mov.w	r2, r2, rrx
   b80b6:	ebb6 0e02 	subs.w	lr, r6, r2
   b80ba:	eb75 0e03 	sbcs.w	lr, r5, r3
   b80be:	bf22      	ittt	cs
   b80c0:	1ab6      	subcs	r6, r6, r2
   b80c2:	4675      	movcs	r5, lr
   b80c4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
   b80c8:	ea55 0e06 	orrs.w	lr, r5, r6
   b80cc:	d018      	beq.n	b8100 <__aeabi_ddiv+0x114>
   b80ce:	ea4f 1505 	mov.w	r5, r5, lsl #4
   b80d2:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
   b80d6:	ea4f 1606 	mov.w	r6, r6, lsl #4
   b80da:	ea4f 03c3 	mov.w	r3, r3, lsl #3
   b80de:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
   b80e2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
   b80e6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
   b80ea:	d1c0      	bne.n	b806e <__aeabi_ddiv+0x82>
   b80ec:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   b80f0:	d10b      	bne.n	b810a <__aeabi_ddiv+0x11e>
   b80f2:	ea41 0100 	orr.w	r1, r1, r0
   b80f6:	f04f 0000 	mov.w	r0, #0
   b80fa:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
   b80fe:	e7b6      	b.n	b806e <__aeabi_ddiv+0x82>
   b8100:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   b8104:	bf04      	itt	eq
   b8106:	4301      	orreq	r1, r0
   b8108:	2000      	moveq	r0, #0
   b810a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   b810e:	bf88      	it	hi
   b8110:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   b8114:	f63f aeaf 	bhi.w	b7e76 <__aeabi_dmul+0xde>
   b8118:	ebb5 0c03 	subs.w	ip, r5, r3
   b811c:	bf04      	itt	eq
   b811e:	ebb6 0c02 	subseq.w	ip, r6, r2
   b8122:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   b8126:	f150 0000 	adcs.w	r0, r0, #0
   b812a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   b812e:	bd70      	pop	{r4, r5, r6, pc}
   b8130:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
   b8134:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
   b8138:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
   b813c:	bfc2      	ittt	gt
   b813e:	ebd4 050c 	rsbsgt	r5, r4, ip
   b8142:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   b8146:	bd70      	popgt	{r4, r5, r6, pc}
   b8148:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   b814c:	f04f 0e00 	mov.w	lr, #0
   b8150:	3c01      	subs	r4, #1
   b8152:	e690      	b.n	b7e76 <__aeabi_dmul+0xde>
   b8154:	ea45 0e06 	orr.w	lr, r5, r6
   b8158:	e68d      	b.n	b7e76 <__aeabi_dmul+0xde>
   b815a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   b815e:	ea94 0f0c 	teq	r4, ip
   b8162:	bf08      	it	eq
   b8164:	ea95 0f0c 	teqeq	r5, ip
   b8168:	f43f af3b 	beq.w	b7fe2 <__aeabi_dmul+0x24a>
   b816c:	ea94 0f0c 	teq	r4, ip
   b8170:	d10a      	bne.n	b8188 <__aeabi_ddiv+0x19c>
   b8172:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   b8176:	f47f af34 	bne.w	b7fe2 <__aeabi_dmul+0x24a>
   b817a:	ea95 0f0c 	teq	r5, ip
   b817e:	f47f af25 	bne.w	b7fcc <__aeabi_dmul+0x234>
   b8182:	4610      	mov	r0, r2
   b8184:	4619      	mov	r1, r3
   b8186:	e72c      	b.n	b7fe2 <__aeabi_dmul+0x24a>
   b8188:	ea95 0f0c 	teq	r5, ip
   b818c:	d106      	bne.n	b819c <__aeabi_ddiv+0x1b0>
   b818e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   b8192:	f43f aefd 	beq.w	b7f90 <__aeabi_dmul+0x1f8>
   b8196:	4610      	mov	r0, r2
   b8198:	4619      	mov	r1, r3
   b819a:	e722      	b.n	b7fe2 <__aeabi_dmul+0x24a>
   b819c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   b81a0:	bf18      	it	ne
   b81a2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   b81a6:	f47f aec5 	bne.w	b7f34 <__aeabi_dmul+0x19c>
   b81aa:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
   b81ae:	f47f af0d 	bne.w	b7fcc <__aeabi_dmul+0x234>
   b81b2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
   b81b6:	f47f aeeb 	bne.w	b7f90 <__aeabi_dmul+0x1f8>
   b81ba:	e712      	b.n	b7fe2 <__aeabi_dmul+0x24a>

000b81bc <__gedf2>:
   b81bc:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
   b81c0:	e006      	b.n	b81d0 <__cmpdf2+0x4>
   b81c2:	bf00      	nop

000b81c4 <__ledf2>:
   b81c4:	f04f 0c01 	mov.w	ip, #1
   b81c8:	e002      	b.n	b81d0 <__cmpdf2+0x4>
   b81ca:	bf00      	nop

000b81cc <__cmpdf2>:
   b81cc:	f04f 0c01 	mov.w	ip, #1
   b81d0:	f84d cd04 	str.w	ip, [sp, #-4]!
   b81d4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   b81d8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   b81dc:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   b81e0:	bf18      	it	ne
   b81e2:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
   b81e6:	d01b      	beq.n	b8220 <__cmpdf2+0x54>
   b81e8:	b001      	add	sp, #4
   b81ea:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
   b81ee:	bf0c      	ite	eq
   b81f0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
   b81f4:	ea91 0f03 	teqne	r1, r3
   b81f8:	bf02      	ittt	eq
   b81fa:	ea90 0f02 	teqeq	r0, r2
   b81fe:	2000      	moveq	r0, #0
   b8200:	4770      	bxeq	lr
   b8202:	f110 0f00 	cmn.w	r0, #0
   b8206:	ea91 0f03 	teq	r1, r3
   b820a:	bf58      	it	pl
   b820c:	4299      	cmppl	r1, r3
   b820e:	bf08      	it	eq
   b8210:	4290      	cmpeq	r0, r2
   b8212:	bf2c      	ite	cs
   b8214:	17d8      	asrcs	r0, r3, #31
   b8216:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
   b821a:	f040 0001 	orr.w	r0, r0, #1
   b821e:	4770      	bx	lr
   b8220:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   b8224:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   b8228:	d102      	bne.n	b8230 <__cmpdf2+0x64>
   b822a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
   b822e:	d107      	bne.n	b8240 <__cmpdf2+0x74>
   b8230:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   b8234:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   b8238:	d1d6      	bne.n	b81e8 <__cmpdf2+0x1c>
   b823a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
   b823e:	d0d3      	beq.n	b81e8 <__cmpdf2+0x1c>
   b8240:	f85d 0b04 	ldr.w	r0, [sp], #4
   b8244:	4770      	bx	lr
   b8246:	bf00      	nop

000b8248 <__aeabi_cdrcmple>:
   b8248:	4684      	mov	ip, r0
   b824a:	4610      	mov	r0, r2
   b824c:	4662      	mov	r2, ip
   b824e:	468c      	mov	ip, r1
   b8250:	4619      	mov	r1, r3
   b8252:	4663      	mov	r3, ip
   b8254:	e000      	b.n	b8258 <__aeabi_cdcmpeq>
   b8256:	bf00      	nop

000b8258 <__aeabi_cdcmpeq>:
   b8258:	b501      	push	{r0, lr}
   b825a:	f7ff ffb7 	bl	b81cc <__cmpdf2>
   b825e:	2800      	cmp	r0, #0
   b8260:	bf48      	it	mi
   b8262:	f110 0f00 	cmnmi.w	r0, #0
   b8266:	bd01      	pop	{r0, pc}

000b8268 <__aeabi_dcmpeq>:
   b8268:	f84d ed08 	str.w	lr, [sp, #-8]!
   b826c:	f7ff fff4 	bl	b8258 <__aeabi_cdcmpeq>
   b8270:	bf0c      	ite	eq
   b8272:	2001      	moveq	r0, #1
   b8274:	2000      	movne	r0, #0
   b8276:	f85d fb08 	ldr.w	pc, [sp], #8
   b827a:	bf00      	nop

000b827c <__aeabi_dcmplt>:
   b827c:	f84d ed08 	str.w	lr, [sp, #-8]!
   b8280:	f7ff ffea 	bl	b8258 <__aeabi_cdcmpeq>
   b8284:	bf34      	ite	cc
   b8286:	2001      	movcc	r0, #1
   b8288:	2000      	movcs	r0, #0
   b828a:	f85d fb08 	ldr.w	pc, [sp], #8
   b828e:	bf00      	nop

000b8290 <__aeabi_dcmple>:
   b8290:	f84d ed08 	str.w	lr, [sp, #-8]!
   b8294:	f7ff ffe0 	bl	b8258 <__aeabi_cdcmpeq>
   b8298:	bf94      	ite	ls
   b829a:	2001      	movls	r0, #1
   b829c:	2000      	movhi	r0, #0
   b829e:	f85d fb08 	ldr.w	pc, [sp], #8
   b82a2:	bf00      	nop

000b82a4 <__aeabi_dcmpge>:
   b82a4:	f84d ed08 	str.w	lr, [sp, #-8]!
   b82a8:	f7ff ffce 	bl	b8248 <__aeabi_cdrcmple>
   b82ac:	bf94      	ite	ls
   b82ae:	2001      	movls	r0, #1
   b82b0:	2000      	movhi	r0, #0
   b82b2:	f85d fb08 	ldr.w	pc, [sp], #8
   b82b6:	bf00      	nop

000b82b8 <__aeabi_dcmpgt>:
   b82b8:	f84d ed08 	str.w	lr, [sp, #-8]!
   b82bc:	f7ff ffc4 	bl	b8248 <__aeabi_cdrcmple>
   b82c0:	bf34      	ite	cc
   b82c2:	2001      	movcc	r0, #1
   b82c4:	2000      	movcs	r0, #0
   b82c6:	f85d fb08 	ldr.w	pc, [sp], #8
   b82ca:	bf00      	nop

000b82cc <__aeabi_d2uiz>:
   b82cc:	004a      	lsls	r2, r1, #1
   b82ce:	d211      	bcs.n	b82f4 <__aeabi_d2uiz+0x28>
   b82d0:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
   b82d4:	d211      	bcs.n	b82fa <__aeabi_d2uiz+0x2e>
   b82d6:	d50d      	bpl.n	b82f4 <__aeabi_d2uiz+0x28>
   b82d8:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
   b82dc:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
   b82e0:	d40e      	bmi.n	b8300 <__aeabi_d2uiz+0x34>
   b82e2:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   b82e6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   b82ea:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
   b82ee:	fa23 f002 	lsr.w	r0, r3, r2
   b82f2:	4770      	bx	lr
   b82f4:	f04f 0000 	mov.w	r0, #0
   b82f8:	4770      	bx	lr
   b82fa:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
   b82fe:	d102      	bne.n	b8306 <__aeabi_d2uiz+0x3a>
   b8300:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   b8304:	4770      	bx	lr
   b8306:	f04f 0000 	mov.w	r0, #0
   b830a:	4770      	bx	lr

000b830c <__aeabi_uldivmod>:
   b830c:	b953      	cbnz	r3, b8324 <__aeabi_uldivmod+0x18>
   b830e:	b94a      	cbnz	r2, b8324 <__aeabi_uldivmod+0x18>
   b8310:	2900      	cmp	r1, #0
   b8312:	bf08      	it	eq
   b8314:	2800      	cmpeq	r0, #0
   b8316:	bf1c      	itt	ne
   b8318:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
   b831c:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
   b8320:	f000 b992 	b.w	b8648 <__aeabi_idiv0>
   b8324:	f1ad 0c08 	sub.w	ip, sp, #8
   b8328:	e96d ce04 	strd	ip, lr, [sp, #-16]!
   b832c:	f000 f824 	bl	b8378 <__udivmoddi4>
   b8330:	f8dd e004 	ldr.w	lr, [sp, #4]
   b8334:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   b8338:	b004      	add	sp, #16
   b833a:	4770      	bx	lr

000b833c <__aeabi_d2ulz>:
   b833c:	b5d0      	push	{r4, r6, r7, lr}
   b833e:	4b0c      	ldr	r3, [pc, #48]	; (b8370 <__aeabi_d2ulz+0x34>)
   b8340:	2200      	movs	r2, #0
   b8342:	4606      	mov	r6, r0
   b8344:	460f      	mov	r7, r1
   b8346:	f7ff fd27 	bl	b7d98 <__aeabi_dmul>
   b834a:	f7ff ffbf 	bl	b82cc <__aeabi_d2uiz>
   b834e:	4604      	mov	r4, r0
   b8350:	f7ff fca8 	bl	b7ca4 <__aeabi_ui2d>
   b8354:	4b07      	ldr	r3, [pc, #28]	; (b8374 <__aeabi_d2ulz+0x38>)
   b8356:	2200      	movs	r2, #0
   b8358:	f7ff fd1e 	bl	b7d98 <__aeabi_dmul>
   b835c:	4602      	mov	r2, r0
   b835e:	460b      	mov	r3, r1
   b8360:	4630      	mov	r0, r6
   b8362:	4639      	mov	r1, r7
   b8364:	f7ff fb60 	bl	b7a28 <__aeabi_dsub>
   b8368:	f7ff ffb0 	bl	b82cc <__aeabi_d2uiz>
   b836c:	4621      	mov	r1, r4
   b836e:	bdd0      	pop	{r4, r6, r7, pc}
   b8370:	3df00000 	.word	0x3df00000
   b8374:	41f00000 	.word	0x41f00000

000b8378 <__udivmoddi4>:
   b8378:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   b837c:	9d08      	ldr	r5, [sp, #32]
   b837e:	4604      	mov	r4, r0
   b8380:	468e      	mov	lr, r1
   b8382:	2b00      	cmp	r3, #0
   b8384:	d14d      	bne.n	b8422 <__udivmoddi4+0xaa>
   b8386:	428a      	cmp	r2, r1
   b8388:	4694      	mov	ip, r2
   b838a:	d969      	bls.n	b8460 <__udivmoddi4+0xe8>
   b838c:	fab2 f282 	clz	r2, r2
   b8390:	b152      	cbz	r2, b83a8 <__udivmoddi4+0x30>
   b8392:	fa01 f302 	lsl.w	r3, r1, r2
   b8396:	f1c2 0120 	rsb	r1, r2, #32
   b839a:	fa20 f101 	lsr.w	r1, r0, r1
   b839e:	fa0c fc02 	lsl.w	ip, ip, r2
   b83a2:	ea41 0e03 	orr.w	lr, r1, r3
   b83a6:	4094      	lsls	r4, r2
   b83a8:	ea4f 481c 	mov.w	r8, ip, lsr #16
   b83ac:	0c21      	lsrs	r1, r4, #16
   b83ae:	fbbe f6f8 	udiv	r6, lr, r8
   b83b2:	fa1f f78c 	uxth.w	r7, ip
   b83b6:	fb08 e316 	mls	r3, r8, r6, lr
   b83ba:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
   b83be:	fb06 f107 	mul.w	r1, r6, r7
   b83c2:	4299      	cmp	r1, r3
   b83c4:	d90a      	bls.n	b83dc <__udivmoddi4+0x64>
   b83c6:	eb1c 0303 	adds.w	r3, ip, r3
   b83ca:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
   b83ce:	f080 811f 	bcs.w	b8610 <__udivmoddi4+0x298>
   b83d2:	4299      	cmp	r1, r3
   b83d4:	f240 811c 	bls.w	b8610 <__udivmoddi4+0x298>
   b83d8:	3e02      	subs	r6, #2
   b83da:	4463      	add	r3, ip
   b83dc:	1a5b      	subs	r3, r3, r1
   b83de:	b2a4      	uxth	r4, r4
   b83e0:	fbb3 f0f8 	udiv	r0, r3, r8
   b83e4:	fb08 3310 	mls	r3, r8, r0, r3
   b83e8:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
   b83ec:	fb00 f707 	mul.w	r7, r0, r7
   b83f0:	42a7      	cmp	r7, r4
   b83f2:	d90a      	bls.n	b840a <__udivmoddi4+0x92>
   b83f4:	eb1c 0404 	adds.w	r4, ip, r4
   b83f8:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
   b83fc:	f080 810a 	bcs.w	b8614 <__udivmoddi4+0x29c>
   b8400:	42a7      	cmp	r7, r4
   b8402:	f240 8107 	bls.w	b8614 <__udivmoddi4+0x29c>
   b8406:	4464      	add	r4, ip
   b8408:	3802      	subs	r0, #2
   b840a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
   b840e:	1be4      	subs	r4, r4, r7
   b8410:	2600      	movs	r6, #0
   b8412:	b11d      	cbz	r5, b841c <__udivmoddi4+0xa4>
   b8414:	40d4      	lsrs	r4, r2
   b8416:	2300      	movs	r3, #0
   b8418:	e9c5 4300 	strd	r4, r3, [r5]
   b841c:	4631      	mov	r1, r6
   b841e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   b8422:	428b      	cmp	r3, r1
   b8424:	d909      	bls.n	b843a <__udivmoddi4+0xc2>
   b8426:	2d00      	cmp	r5, #0
   b8428:	f000 80ef 	beq.w	b860a <__udivmoddi4+0x292>
   b842c:	2600      	movs	r6, #0
   b842e:	e9c5 0100 	strd	r0, r1, [r5]
   b8432:	4630      	mov	r0, r6
   b8434:	4631      	mov	r1, r6
   b8436:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   b843a:	fab3 f683 	clz	r6, r3
   b843e:	2e00      	cmp	r6, #0
   b8440:	d14a      	bne.n	b84d8 <__udivmoddi4+0x160>
   b8442:	428b      	cmp	r3, r1
   b8444:	d302      	bcc.n	b844c <__udivmoddi4+0xd4>
   b8446:	4282      	cmp	r2, r0
   b8448:	f200 80f9 	bhi.w	b863e <__udivmoddi4+0x2c6>
   b844c:	1a84      	subs	r4, r0, r2
   b844e:	eb61 0303 	sbc.w	r3, r1, r3
   b8452:	2001      	movs	r0, #1
   b8454:	469e      	mov	lr, r3
   b8456:	2d00      	cmp	r5, #0
   b8458:	d0e0      	beq.n	b841c <__udivmoddi4+0xa4>
   b845a:	e9c5 4e00 	strd	r4, lr, [r5]
   b845e:	e7dd      	b.n	b841c <__udivmoddi4+0xa4>
   b8460:	b902      	cbnz	r2, b8464 <__udivmoddi4+0xec>
   b8462:	deff      	udf	#255	; 0xff
   b8464:	fab2 f282 	clz	r2, r2
   b8468:	2a00      	cmp	r2, #0
   b846a:	f040 8092 	bne.w	b8592 <__udivmoddi4+0x21a>
   b846e:	eba1 010c 	sub.w	r1, r1, ip
   b8472:	ea4f 471c 	mov.w	r7, ip, lsr #16
   b8476:	fa1f fe8c 	uxth.w	lr, ip
   b847a:	2601      	movs	r6, #1
   b847c:	0c20      	lsrs	r0, r4, #16
   b847e:	fbb1 f3f7 	udiv	r3, r1, r7
   b8482:	fb07 1113 	mls	r1, r7, r3, r1
   b8486:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
   b848a:	fb0e f003 	mul.w	r0, lr, r3
   b848e:	4288      	cmp	r0, r1
   b8490:	d908      	bls.n	b84a4 <__udivmoddi4+0x12c>
   b8492:	eb1c 0101 	adds.w	r1, ip, r1
   b8496:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
   b849a:	d202      	bcs.n	b84a2 <__udivmoddi4+0x12a>
   b849c:	4288      	cmp	r0, r1
   b849e:	f200 80cb 	bhi.w	b8638 <__udivmoddi4+0x2c0>
   b84a2:	4643      	mov	r3, r8
   b84a4:	1a09      	subs	r1, r1, r0
   b84a6:	b2a4      	uxth	r4, r4
   b84a8:	fbb1 f0f7 	udiv	r0, r1, r7
   b84ac:	fb07 1110 	mls	r1, r7, r0, r1
   b84b0:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
   b84b4:	fb0e fe00 	mul.w	lr, lr, r0
   b84b8:	45a6      	cmp	lr, r4
   b84ba:	d908      	bls.n	b84ce <__udivmoddi4+0x156>
   b84bc:	eb1c 0404 	adds.w	r4, ip, r4
   b84c0:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
   b84c4:	d202      	bcs.n	b84cc <__udivmoddi4+0x154>
   b84c6:	45a6      	cmp	lr, r4
   b84c8:	f200 80bb 	bhi.w	b8642 <__udivmoddi4+0x2ca>
   b84cc:	4608      	mov	r0, r1
   b84ce:	eba4 040e 	sub.w	r4, r4, lr
   b84d2:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
   b84d6:	e79c      	b.n	b8412 <__udivmoddi4+0x9a>
   b84d8:	f1c6 0720 	rsb	r7, r6, #32
   b84dc:	40b3      	lsls	r3, r6
   b84de:	fa22 fc07 	lsr.w	ip, r2, r7
   b84e2:	ea4c 0c03 	orr.w	ip, ip, r3
   b84e6:	fa20 f407 	lsr.w	r4, r0, r7
   b84ea:	fa01 f306 	lsl.w	r3, r1, r6
   b84ee:	431c      	orrs	r4, r3
   b84f0:	40f9      	lsrs	r1, r7
   b84f2:	ea4f 491c 	mov.w	r9, ip, lsr #16
   b84f6:	fa00 f306 	lsl.w	r3, r0, r6
   b84fa:	fbb1 f8f9 	udiv	r8, r1, r9
   b84fe:	0c20      	lsrs	r0, r4, #16
   b8500:	fa1f fe8c 	uxth.w	lr, ip
   b8504:	fb09 1118 	mls	r1, r9, r8, r1
   b8508:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
   b850c:	fb08 f00e 	mul.w	r0, r8, lr
   b8510:	4288      	cmp	r0, r1
   b8512:	fa02 f206 	lsl.w	r2, r2, r6
   b8516:	d90b      	bls.n	b8530 <__udivmoddi4+0x1b8>
   b8518:	eb1c 0101 	adds.w	r1, ip, r1
   b851c:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
   b8520:	f080 8088 	bcs.w	b8634 <__udivmoddi4+0x2bc>
   b8524:	4288      	cmp	r0, r1
   b8526:	f240 8085 	bls.w	b8634 <__udivmoddi4+0x2bc>
   b852a:	f1a8 0802 	sub.w	r8, r8, #2
   b852e:	4461      	add	r1, ip
   b8530:	1a09      	subs	r1, r1, r0
   b8532:	b2a4      	uxth	r4, r4
   b8534:	fbb1 f0f9 	udiv	r0, r1, r9
   b8538:	fb09 1110 	mls	r1, r9, r0, r1
   b853c:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
   b8540:	fb00 fe0e 	mul.w	lr, r0, lr
   b8544:	458e      	cmp	lr, r1
   b8546:	d908      	bls.n	b855a <__udivmoddi4+0x1e2>
   b8548:	eb1c 0101 	adds.w	r1, ip, r1
   b854c:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
   b8550:	d26c      	bcs.n	b862c <__udivmoddi4+0x2b4>
   b8552:	458e      	cmp	lr, r1
   b8554:	d96a      	bls.n	b862c <__udivmoddi4+0x2b4>
   b8556:	3802      	subs	r0, #2
   b8558:	4461      	add	r1, ip
   b855a:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
   b855e:	fba0 9402 	umull	r9, r4, r0, r2
   b8562:	eba1 010e 	sub.w	r1, r1, lr
   b8566:	42a1      	cmp	r1, r4
   b8568:	46c8      	mov	r8, r9
   b856a:	46a6      	mov	lr, r4
   b856c:	d356      	bcc.n	b861c <__udivmoddi4+0x2a4>
   b856e:	d053      	beq.n	b8618 <__udivmoddi4+0x2a0>
   b8570:	b15d      	cbz	r5, b858a <__udivmoddi4+0x212>
   b8572:	ebb3 0208 	subs.w	r2, r3, r8
   b8576:	eb61 010e 	sbc.w	r1, r1, lr
   b857a:	fa01 f707 	lsl.w	r7, r1, r7
   b857e:	fa22 f306 	lsr.w	r3, r2, r6
   b8582:	40f1      	lsrs	r1, r6
   b8584:	431f      	orrs	r7, r3
   b8586:	e9c5 7100 	strd	r7, r1, [r5]
   b858a:	2600      	movs	r6, #0
   b858c:	4631      	mov	r1, r6
   b858e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   b8592:	f1c2 0320 	rsb	r3, r2, #32
   b8596:	40d8      	lsrs	r0, r3
   b8598:	fa0c fc02 	lsl.w	ip, ip, r2
   b859c:	fa21 f303 	lsr.w	r3, r1, r3
   b85a0:	4091      	lsls	r1, r2
   b85a2:	4301      	orrs	r1, r0
   b85a4:	ea4f 471c 	mov.w	r7, ip, lsr #16
   b85a8:	fa1f fe8c 	uxth.w	lr, ip
   b85ac:	fbb3 f0f7 	udiv	r0, r3, r7
   b85b0:	fb07 3610 	mls	r6, r7, r0, r3
   b85b4:	0c0b      	lsrs	r3, r1, #16
   b85b6:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
   b85ba:	fb00 f60e 	mul.w	r6, r0, lr
   b85be:	429e      	cmp	r6, r3
   b85c0:	fa04 f402 	lsl.w	r4, r4, r2
   b85c4:	d908      	bls.n	b85d8 <__udivmoddi4+0x260>
   b85c6:	eb1c 0303 	adds.w	r3, ip, r3
   b85ca:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
   b85ce:	d22f      	bcs.n	b8630 <__udivmoddi4+0x2b8>
   b85d0:	429e      	cmp	r6, r3
   b85d2:	d92d      	bls.n	b8630 <__udivmoddi4+0x2b8>
   b85d4:	3802      	subs	r0, #2
   b85d6:	4463      	add	r3, ip
   b85d8:	1b9b      	subs	r3, r3, r6
   b85da:	b289      	uxth	r1, r1
   b85dc:	fbb3 f6f7 	udiv	r6, r3, r7
   b85e0:	fb07 3316 	mls	r3, r7, r6, r3
   b85e4:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
   b85e8:	fb06 f30e 	mul.w	r3, r6, lr
   b85ec:	428b      	cmp	r3, r1
   b85ee:	d908      	bls.n	b8602 <__udivmoddi4+0x28a>
   b85f0:	eb1c 0101 	adds.w	r1, ip, r1
   b85f4:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
   b85f8:	d216      	bcs.n	b8628 <__udivmoddi4+0x2b0>
   b85fa:	428b      	cmp	r3, r1
   b85fc:	d914      	bls.n	b8628 <__udivmoddi4+0x2b0>
   b85fe:	3e02      	subs	r6, #2
   b8600:	4461      	add	r1, ip
   b8602:	1ac9      	subs	r1, r1, r3
   b8604:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
   b8608:	e738      	b.n	b847c <__udivmoddi4+0x104>
   b860a:	462e      	mov	r6, r5
   b860c:	4628      	mov	r0, r5
   b860e:	e705      	b.n	b841c <__udivmoddi4+0xa4>
   b8610:	4606      	mov	r6, r0
   b8612:	e6e3      	b.n	b83dc <__udivmoddi4+0x64>
   b8614:	4618      	mov	r0, r3
   b8616:	e6f8      	b.n	b840a <__udivmoddi4+0x92>
   b8618:	454b      	cmp	r3, r9
   b861a:	d2a9      	bcs.n	b8570 <__udivmoddi4+0x1f8>
   b861c:	ebb9 0802 	subs.w	r8, r9, r2
   b8620:	eb64 0e0c 	sbc.w	lr, r4, ip
   b8624:	3801      	subs	r0, #1
   b8626:	e7a3      	b.n	b8570 <__udivmoddi4+0x1f8>
   b8628:	4646      	mov	r6, r8
   b862a:	e7ea      	b.n	b8602 <__udivmoddi4+0x28a>
   b862c:	4620      	mov	r0, r4
   b862e:	e794      	b.n	b855a <__udivmoddi4+0x1e2>
   b8630:	4640      	mov	r0, r8
   b8632:	e7d1      	b.n	b85d8 <__udivmoddi4+0x260>
   b8634:	46d0      	mov	r8, sl
   b8636:	e77b      	b.n	b8530 <__udivmoddi4+0x1b8>
   b8638:	3b02      	subs	r3, #2
   b863a:	4461      	add	r1, ip
   b863c:	e732      	b.n	b84a4 <__udivmoddi4+0x12c>
   b863e:	4630      	mov	r0, r6
   b8640:	e709      	b.n	b8456 <__udivmoddi4+0xde>
   b8642:	4464      	add	r4, ip
   b8644:	3802      	subs	r0, #2
   b8646:	e742      	b.n	b84ce <__udivmoddi4+0x156>

000b8648 <__aeabi_idiv0>:
   b8648:	4770      	bx	lr
   b864a:	bf00      	nop

000b864c <atexit>:
   b864c:	2300      	movs	r3, #0
   b864e:	4601      	mov	r1, r0
   b8650:	461a      	mov	r2, r3
   b8652:	4618      	mov	r0, r3
   b8654:	f000 b872 	b.w	b873c <__register_exitproc>

000b8658 <memcpy>:
   b8658:	440a      	add	r2, r1
   b865a:	4291      	cmp	r1, r2
   b865c:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
   b8660:	d100      	bne.n	b8664 <memcpy+0xc>
   b8662:	4770      	bx	lr
   b8664:	b510      	push	{r4, lr}
   b8666:	f811 4b01 	ldrb.w	r4, [r1], #1
   b866a:	f803 4f01 	strb.w	r4, [r3, #1]!
   b866e:	4291      	cmp	r1, r2
   b8670:	d1f9      	bne.n	b8666 <memcpy+0xe>
   b8672:	bd10      	pop	{r4, pc}

000b8674 <memset>:
   b8674:	4402      	add	r2, r0
   b8676:	4603      	mov	r3, r0
   b8678:	4293      	cmp	r3, r2
   b867a:	d100      	bne.n	b867e <memset+0xa>
   b867c:	4770      	bx	lr
   b867e:	f803 1b01 	strb.w	r1, [r3], #1
   b8682:	e7f9      	b.n	b8678 <memset+0x4>

000b8684 <srand>:
   b8684:	b538      	push	{r3, r4, r5, lr}
   b8686:	4b10      	ldr	r3, [pc, #64]	; (b86c8 <srand+0x44>)
   b8688:	681d      	ldr	r5, [r3, #0]
   b868a:	6bab      	ldr	r3, [r5, #56]	; 0x38
   b868c:	4604      	mov	r4, r0
   b868e:	b9b3      	cbnz	r3, b86be <srand+0x3a>
   b8690:	2018      	movs	r0, #24
   b8692:	f7fd ff6f 	bl	b6574 <malloc>
   b8696:	4602      	mov	r2, r0
   b8698:	63a8      	str	r0, [r5, #56]	; 0x38
   b869a:	b920      	cbnz	r0, b86a6 <srand+0x22>
   b869c:	4b0b      	ldr	r3, [pc, #44]	; (b86cc <srand+0x48>)
   b869e:	480c      	ldr	r0, [pc, #48]	; (b86d0 <srand+0x4c>)
   b86a0:	2142      	movs	r1, #66	; 0x42
   b86a2:	f7fd ff8f 	bl	b65c4 <__assert_func>
   b86a6:	490b      	ldr	r1, [pc, #44]	; (b86d4 <srand+0x50>)
   b86a8:	4b0b      	ldr	r3, [pc, #44]	; (b86d8 <srand+0x54>)
   b86aa:	e9c0 1300 	strd	r1, r3, [r0]
   b86ae:	4b0b      	ldr	r3, [pc, #44]	; (b86dc <srand+0x58>)
   b86b0:	6083      	str	r3, [r0, #8]
   b86b2:	230b      	movs	r3, #11
   b86b4:	8183      	strh	r3, [r0, #12]
   b86b6:	2100      	movs	r1, #0
   b86b8:	2001      	movs	r0, #1
   b86ba:	e9c2 0104 	strd	r0, r1, [r2, #16]
   b86be:	6bab      	ldr	r3, [r5, #56]	; 0x38
   b86c0:	2200      	movs	r2, #0
   b86c2:	611c      	str	r4, [r3, #16]
   b86c4:	615a      	str	r2, [r3, #20]
   b86c6:	bd38      	pop	{r3, r4, r5, pc}
   b86c8:	2003e588 	.word	0x2003e588
   b86cc:	000b9125 	.word	0x000b9125
   b86d0:	000b913c 	.word	0x000b913c
   b86d4:	abcd330e 	.word	0xabcd330e
   b86d8:	e66d1234 	.word	0xe66d1234
   b86dc:	0005deec 	.word	0x0005deec

000b86e0 <strcpy>:
   b86e0:	4603      	mov	r3, r0
   b86e2:	f811 2b01 	ldrb.w	r2, [r1], #1
   b86e6:	f803 2b01 	strb.w	r2, [r3], #1
   b86ea:	2a00      	cmp	r2, #0
   b86ec:	d1f9      	bne.n	b86e2 <strcpy+0x2>
   b86ee:	4770      	bx	lr

000b86f0 <strdup>:
   b86f0:	4b02      	ldr	r3, [pc, #8]	; (b86fc <strdup+0xc>)
   b86f2:	4601      	mov	r1, r0
   b86f4:	6818      	ldr	r0, [r3, #0]
   b86f6:	f000 b803 	b.w	b8700 <_strdup_r>
   b86fa:	bf00      	nop
   b86fc:	2003e588 	.word	0x2003e588

000b8700 <_strdup_r>:
   b8700:	b537      	push	{r0, r1, r2, r4, r5, lr}
   b8702:	4604      	mov	r4, r0
   b8704:	4608      	mov	r0, r1
   b8706:	460d      	mov	r5, r1
   b8708:	f000 f80f 	bl	b872a <strlen>
   b870c:	1c42      	adds	r2, r0, #1
   b870e:	4611      	mov	r1, r2
   b8710:	4620      	mov	r0, r4
   b8712:	9201      	str	r2, [sp, #4]
   b8714:	f7fd ff4e 	bl	b65b4 <_malloc_r>
   b8718:	4604      	mov	r4, r0
   b871a:	b118      	cbz	r0, b8724 <_strdup_r+0x24>
   b871c:	9a01      	ldr	r2, [sp, #4]
   b871e:	4629      	mov	r1, r5
   b8720:	f7ff ff9a 	bl	b8658 <memcpy>
   b8724:	4620      	mov	r0, r4
   b8726:	b003      	add	sp, #12
   b8728:	bd30      	pop	{r4, r5, pc}

000b872a <strlen>:
   b872a:	4603      	mov	r3, r0
   b872c:	f813 2b01 	ldrb.w	r2, [r3], #1
   b8730:	2a00      	cmp	r2, #0
   b8732:	d1fb      	bne.n	b872c <strlen+0x2>
   b8734:	1a18      	subs	r0, r3, r0
   b8736:	3801      	subs	r0, #1
   b8738:	4770      	bx	lr
	...

000b873c <__register_exitproc>:
   b873c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   b8740:	f8df 80b8 	ldr.w	r8, [pc, #184]	; b87fc <__register_exitproc+0xc0>
   b8744:	4606      	mov	r6, r0
   b8746:	f8d8 0000 	ldr.w	r0, [r8]
   b874a:	461f      	mov	r7, r3
   b874c:	460d      	mov	r5, r1
   b874e:	4691      	mov	r9, r2
   b8750:	f000 f856 	bl	b8800 <__retarget_lock_acquire_recursive>
   b8754:	4b25      	ldr	r3, [pc, #148]	; (b87ec <__register_exitproc+0xb0>)
   b8756:	681c      	ldr	r4, [r3, #0]
   b8758:	b934      	cbnz	r4, b8768 <__register_exitproc+0x2c>
   b875a:	4c25      	ldr	r4, [pc, #148]	; (b87f0 <__register_exitproc+0xb4>)
   b875c:	601c      	str	r4, [r3, #0]
   b875e:	4b25      	ldr	r3, [pc, #148]	; (b87f4 <__register_exitproc+0xb8>)
   b8760:	b113      	cbz	r3, b8768 <__register_exitproc+0x2c>
   b8762:	681b      	ldr	r3, [r3, #0]
   b8764:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
   b8768:	6863      	ldr	r3, [r4, #4]
   b876a:	2b1f      	cmp	r3, #31
   b876c:	dd07      	ble.n	b877e <__register_exitproc+0x42>
   b876e:	f8d8 0000 	ldr.w	r0, [r8]
   b8772:	f000 f847 	bl	b8804 <__retarget_lock_release_recursive>
   b8776:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   b877a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   b877e:	b34e      	cbz	r6, b87d4 <__register_exitproc+0x98>
   b8780:	f8d4 0088 	ldr.w	r0, [r4, #136]	; 0x88
   b8784:	b988      	cbnz	r0, b87aa <__register_exitproc+0x6e>
   b8786:	4b1c      	ldr	r3, [pc, #112]	; (b87f8 <__register_exitproc+0xbc>)
   b8788:	b923      	cbnz	r3, b8794 <__register_exitproc+0x58>
   b878a:	f8d8 0000 	ldr.w	r0, [r8]
   b878e:	f000 f838 	bl	b8802 <__retarget_lock_release>
   b8792:	e7f0      	b.n	b8776 <__register_exitproc+0x3a>
   b8794:	f44f 7084 	mov.w	r0, #264	; 0x108
   b8798:	f7fd feec 	bl	b6574 <malloc>
   b879c:	2800      	cmp	r0, #0
   b879e:	d0f4      	beq.n	b878a <__register_exitproc+0x4e>
   b87a0:	2300      	movs	r3, #0
   b87a2:	e9c0 3340 	strd	r3, r3, [r0, #256]	; 0x100
   b87a6:	f8c4 0088 	str.w	r0, [r4, #136]	; 0x88
   b87aa:	6863      	ldr	r3, [r4, #4]
   b87ac:	f840 9023 	str.w	r9, [r0, r3, lsl #2]
   b87b0:	2201      	movs	r2, #1
   b87b2:	409a      	lsls	r2, r3
   b87b4:	eb00 0183 	add.w	r1, r0, r3, lsl #2
   b87b8:	f8d0 3100 	ldr.w	r3, [r0, #256]	; 0x100
   b87bc:	4313      	orrs	r3, r2
   b87be:	f8c0 3100 	str.w	r3, [r0, #256]	; 0x100
   b87c2:	2e02      	cmp	r6, #2
   b87c4:	f8c1 7080 	str.w	r7, [r1, #128]	; 0x80
   b87c8:	bf02      	ittt	eq
   b87ca:	f8d0 3104 	ldreq.w	r3, [r0, #260]	; 0x104
   b87ce:	4313      	orreq	r3, r2
   b87d0:	f8c0 3104 	streq.w	r3, [r0, #260]	; 0x104
   b87d4:	6863      	ldr	r3, [r4, #4]
   b87d6:	f8d8 0000 	ldr.w	r0, [r8]
   b87da:	1c5a      	adds	r2, r3, #1
   b87dc:	3302      	adds	r3, #2
   b87de:	6062      	str	r2, [r4, #4]
   b87e0:	f844 5023 	str.w	r5, [r4, r3, lsl #2]
   b87e4:	f000 f80e 	bl	b8804 <__retarget_lock_release_recursive>
   b87e8:	2000      	movs	r0, #0
   b87ea:	e7c6      	b.n	b877a <__register_exitproc+0x3e>
   b87ec:	2003e7e8 	.word	0x2003e7e8
   b87f0:	2003e75c 	.word	0x2003e75c
   b87f4:	00000000 	.word	0x00000000
   b87f8:	000b6575 	.word	0x000b6575
   b87fc:	2003e5ec 	.word	0x2003e5ec

000b8800 <__retarget_lock_acquire_recursive>:
   b8800:	4770      	bx	lr

000b8802 <__retarget_lock_release>:
   b8802:	4770      	bx	lr

000b8804 <__retarget_lock_release_recursive>:
   b8804:	4770      	bx	lr

000b8806 <link_code_end>:
	...

000b8808 <dynalib_user>:
   b8808:	4021 000b 405d 000b 4085 000b 4089 000b     !@..]@...@...@..
   b8818:	0000 0000 6143 6c6c 6f20 206e 7570 6572     ....Call on pure
   b8828:	7620 7269 7574 6c61 2000 2026 5a00 6e6f      virtual. & .Zon
   b8838:	7365 435f 203a 4300 756f 746e 7265 6920     es_C: .Counter i
   b8848:	2073 6e6f 696c 656e 4900 6120 206d 6572     s online.I am re
   b8858:	6461 0079 6f43 6e75 6574 3a72 0020 6e45     ady.Counter: .En
   b8868:	7274 2079 4500 6978 2074                     try .Exit .

000b8873 <_ZL4font>:
   b8873:	0000 0000 3e00 4f5b 3e5b 6b3e 6b4f 1c3e     .....>[O[>>kOk>.
   b8883:	7c3e 1c3e 3c18 3c7e 1c18 7d57 1c57 5e1c     >|>..<~<..W}W..^
   b8893:	5e7f 001c 3c18 0018 e7ff e7c3 00ff 2418     .^...<.........$
   b88a3:	0018 e7ff e7db 30ff 3a48 0e06 2926 2979     .......0H:..&)y)
   b88b3:	4026 057f 0705 7f40 2505 5a3f e73c 5a3c     &@....@..%?Z<.<Z
   b88c3:	3e7f 1c1c 0808 1c1c 7f3e 2214 227f 5f14     .>......>.."."._
   b88d3:	005f 5f5f 0906 017f 007f 8966 6a95 6060     _.__......f..j``
   b88e3:	6060 9460 ffa2 94a2 0408 047e 1008 7e20     ```.......~... ~
   b88f3:	1020 0808 1c2a 0808 2a1c 0808 101e 1010      ...*....*......
   b8903:	0c10 0c1e 0c1e 3830 383e 0630 3e0e 060e     ......08>80..>..
   b8913:	0000 0000 0000 5f00 0000 0700 0700 1400     ......._........
   b8923:	147f 147f 2a24 2a7f 2312 0813 6264 4936     ....$*.*.#..db6I
   b8933:	2056 0050 0708 0003 1c00 4122 0000 2241     V P......."A..A"
   b8943:	001c 1c2a 1c7f 082a 3e08 0808 8000 3070     ..*...*..>....p0
   b8953:	0800 0808 0808 0000 6060 2000 0810 0204     ........``. ....
   b8963:	513e 4549 003e 7f42 0040 4972 4949 2146     >QIE>.B.@.rIIIF!
   b8973:	4941 334d 1418 7f12 2710 4545 3945 4a3c     AIM3.....'EEE9<J
   b8983:	4949 4131 1121 0709 4936 4949 4636 4949     II1A!...6III6FII
   b8993:	1e29 0000 0014 0000 3440 0000 0800 2214     ).......@4....."
   b89a3:	1441 1414 1414 4100 1422 0208 5901 0609     A......A"....Y..
   b89b3:	413e 595d 7c4e 1112 7c12 497f 4949 3e36     >A]YN|...|.III6>
   b89c3:	4141 2241 417f 4141 7f3e 4949 4149 097f     AAA".AAA>.IIIA..
   b89d3:	0909 3e01 4141 7351 087f 0808 007f 7f41     ...>AAQs......A.
   b89e3:	0041 4020 3f41 7f01 1408 4122 407f 4040     A. @A?...."A.@@@
   b89f3:	7f40 1c02 7f02 047f 1008 3e7f 4141 3e41     @..........>AAA>
   b8a03:	097f 0909 3e06 5141 5e21 097f 2919 2646     .....>AQ!^...)F&
   b8a13:	4949 3249 0103 017f 3f03 4040 3f40 201f     III2.....?@@@?. 
   b8a23:	2040 3f1f 3840 3f40 1463 1408 0363 7804     @ .?@8@?c...c..x
   b8a33:	0304 5961 4d49 0043 417f 4141 0402 1008     ..aYIMC..AAA....
   b8a43:	0020 4141 7f41 0204 0201 4004 4040 4040      .AAA......@@@@@
   b8a53:	0300 0807 2000 5454 4078 287f 4444 3838     ..... TTx@.(DD88
   b8a63:	4444 2844 4438 2844 387f 5454 1854 0800     DDD(8DD(.8TTT...
   b8a73:	097e 1802 a4a4 789c 087f 0404 0078 7d44     ~......x....x.D}
   b8a83:	0040 4020 3d40 7f00 2810 0044 4100 407f     @. @@=...(D..A.@
   b8a93:	7c00 7804 7804 087c 0404 3878 4444 3844     .|.x.x|...x8DDD8
   b8aa3:	18fc 2424 1818 2424 fc18 087c 0404 4808     ..$$..$$..|....H
   b8ab3:	5454 2454 0404 443f 3c24 4040 7c20 201c     TTT$..?D$<@@ |. 
   b8ac3:	2040 3c1c 3040 3c40 2844 2810 4c44 9090     @ .<@0@<D(.(DL..
   b8ad3:	7c90 6444 4c54 0044 3608 0041 0000 0077     .|DdTLD..6A...w.
   b8ae3:	0000 3641 0008 0102 0402 3c02 2326 3c26     ..A6.......<&#&<
   b8af3:	a11e 61a1 3a12 4040 7a20 5438 5554 2159     ...a.:@@ z8TTUY!
   b8b03:	5555 4179 5422 7854 2142 5455 4078 5420     UUyA"TTxB!UTx@ T
   b8b13:	7955 0c40 521e 1272 5539 5555 3959 5454     Uy@..Rr.9UUUY9TT
   b8b23:	5954 5539 5454 0058 4500 417c 0200 7d45     TY9UTTX..E|A..E}
   b8b33:	0042 4501 407c 127d 1211 f07d 2528 f028     B..E|@}...}.(%(.
   b8b43:	547c 4555 2000 5454 547c 0a7c 7f09 3249     |TUE. TT|T|...I2
   b8b53:	4949 3249 443a 4444 323a 484a 3048 413a     III2:DDD:2JHH0:A
   b8b63:	2141 3a7a 4042 7820 9d00 a0a0 3d7d 4242     A!z:B@ x....}=BB
   b8b73:	3d42 403d 4040 3c3d ff24 2424 7e48 4349     B==@@@=<$.$$H~IC
   b8b83:	2b66 fc2f 2b2f 09ff f629 c020 7e88 0309     f+/./+..). ..~..
   b8b93:	5420 7954 0041 4400 417d 4830 4a48 3832      TTyA..D}A0HHJ28
   b8ba3:	4040 7a22 7a00 0a0a 7d72 190d 7d31 2926     @@"z.z..r}..1}&)
   b8bb3:	2f29 2628 2929 2629 4830 404d 3820 0808     )/(&)))&0HM@ 8..
   b8bc3:	0808 0808 0808 2f38 c810 baac 102f 3428     ......8/..../.(4
   b8bd3:	00fa 7b00 0000 1408 142a 2222 2a14 0814     ...{....*."".*..
   b8be3:	0055 0055 aa55 aa55 aa55 55ff 55ff 00ff     U.U.U.U.U..U.U..
   b8bf3:	0000 00ff 1010 ff10 1400 1414 00ff 1010     ................
   b8c03:	00ff 10ff f010 f010 1414 fc14 1400 f714     ................
   b8c13:	ff00 0000 00ff 14ff f414 fc04 1414 1017     ................
   b8c23:	101f 1f10 1f10 1414 1f14 1000 1010 00f0     ................
   b8c33:	0000 1f00 1010 1010 101f 1010 f010 0010     ................
   b8c43:	0000 10ff 1010 1010 1010 1010 10ff 0000     ................
   b8c53:	ff00 0014 ff00 ff00 0000 101f 0017 fc00     ................
   b8c63:	f404 1414 1017 1417 f414 f404 0000 00ff     ................
   b8c73:	14f7 1414 1414 1414 00f7 14f7 1414 1417     ................
   b8c83:	1010 101f 141f 1414 14f4 1010 10f0 00f0     ................
   b8c93:	1f00 1f10 0000 1f00 0014 0000 14fc 0000     ................
   b8ca3:	10f0 10f0 ff10 ff10 1414 ff14 1014 1010     ................
   b8cb3:	001f 0000 f000 ff10 ffff ffff f0f0 f0f0     ................
   b8cc3:	fff0 ffff 0000 0000 ff00 0fff 0f0f 0f0f     ................
   b8cd3:	4438 3844 fc44 4a4a 344a 027e 0602 0206     8DD8D.JJJ4~.....
   b8ce3:	027e 027e 5563 4149 3863 4444 043c 7e40     ~.~.cUIAc8DD<.@~
   b8cf3:	1e20 0620 7e02 0202 a599 a5e7 1c99 492a      . ..~........*I
   b8d03:	1c2a 724c 7201 304c 4d4a 304d 4830 4878     *.Lr.rL0JMM00HxH
   b8d13:	bc30 5a62 3d46 493e 4949 7e00 0101 7e01     0.bZF=>III.~...~
   b8d23:	2a2a 2a2a 442a 5f44 4444 5140 444a 4040     *****DD_DD@QJD@@
   b8d33:	4a44 4051 0000 01ff e003 ff80 0000 0808     DJQ@............
   b8d43:	6b6b 3608 3612 3624 0f06 0f09 0006 1800     kk.6.6$6........
   b8d53:	0018 0000 1010 3000 ff40 0101 1f00 0101     .......0@.......
   b8d63:	001e 1d19 1217 3c00 3c3c 003c 0000 0000     .......<<<<.....
	...

000b8d74 <_ZTV12Adafruit_GFX>:
	...
   b8d84:	4e91 000b 6f71 000b 40a5 000b 493f 000b     .N..qo...@..?I..
   b8d94:	4941 000b 4973 000b 494f 000b 4961 000b     AI..sI..OI..aI..
   b8da4:	4881 000b 493f 000b 4b6b 000b 4b69 000b     .H..?I..kK..iK..
   b8db4:	498b 000b 49c9 000b 4a03 000b 4a49 000b     .I...I...J..IJ..
   b8dc4:	4a65 000b 4ae9 000b                         eJ...J..

000b8dcc <_ZTV15Adafruit_SPITFT>:
	...
   b8ddc:	4e91 000b 6f71 000b 5723 000b 51b7 000b     .N..qo..#W...Q..
   b8dec:	56e5 000b 52d7 000b 5591 000b 5537 000b     .V...R...U..7U..
   b8dfc:	4881 000b 51e3 000b 4b6b 000b 565f 000b     .H...Q..kK.._V..
   b8e0c:	54bb 000b 543b 000b 5377 000b 4a49 000b     .T..;T..wS..IJ..
   b8e1c:	4a65 000b 4ae9 000b 40a5 000b 40a5 000b     eJ...J...@...@..

000b8e2c <_ZL11cmd_240x240>:
   b8e2c:	0109 9680 8011 3aff 5581 360a 0801 042a     .......:.U.6..*.
   b8e3c:	0000 f000 042b 0000 f000 8021 130a 0a80     ....+.....!.....
   b8e4c:	8029 00ff                                   )...

000b8e50 <_ZTV15Adafruit_ST7789>:
	...
   b8e58:	57e9 000b 5851 000b 4e91 000b 6f71 000b     .W..QX...N..qo..
   b8e68:	5723 000b 51b7 000b 56e5 000b 52d7 000b     #W...Q...V...R..
   b8e78:	5591 000b 5537 000b 4881 000b 51e3 000b     .U..7U...H...Q..
   b8e88:	57eb 000b 565f 000b 54bb 000b 543b 000b     .W.._V...T..;T..
   b8e98:	5377 000b 4a49 000b 4a65 000b 4ae9 000b     wS..IJ..eJ...J..
   b8ea8:	591d 000b 593d 000b                         .Y..=Y..

000b8eb0 <_ZTV15Adafruit_ST77xx>:
	...
   b8eb8:	58a9 000b 598f 000b 4e91 000b 6f71 000b     .X...Y...N..qo..
   b8ec8:	5723 000b 51b7 000b 56e5 000b 52d7 000b     #W...Q...V...R..
   b8ed8:	5591 000b 5537 000b 4881 000b 51e3 000b     .U..7U...H...Q..
   b8ee8:	58ab 000b 565f 000b 54bb 000b 543b 000b     .X.._V...T..;T..
   b8ef8:	5377 000b 4a49 000b 4a65 000b 4ae9 000b     wS..IJ..eJ...J..
   b8f08:	591d 000b 593d 000b                         .Y..=Y..

000b8f10 <_ZTV7VL53L1X>:
	...
   b8f18:	5ae3 000b 5ac3 000b 5aad 000b 5a69 000b     .Z...Z...Z..iZ..
   b8f28:	5a9f 000b 5a85 000b 5a6b 000b               .Z...Z..kZ..

000b8f34 <_ZL29VL51L1X_DEFAULT_CONFIGURATION>:
   b8f34:	0100 0101 0002 0802 0800 0110 0001 0000     ................
   b8f44:	ff00 0f00 0000 0000 2000 000b 0200 210a     ......... .....!
   b8f54:	0000 0005 0000 c800 0000 ff38 0001 0008     ..........8.....
   b8f64:	0100 0fdb f101 010d 0068 0880 00b8 0000     ........h.......
   b8f74:	0f00 0089 0000 0000 0000 0f01 0e0d 000e     ................
   b8f84:	0200 ffc7 009b 0000 0001 0000               ............

000b8f90 <_ZTVSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE>:
	...
   b8f98:	6659 000b 665f 000b 669d 000b 666d 000b     Yf.._f...f..mf..
   b8fa8:	665b 000b                                   [f..

000b8fac <_ZTVN5spark13EthernetClassE>:
	...
   b8fb4:	6be7 000b 6bdd 000b 6bd3 000b 6bc9 000b     .k...k...k...k..
   b8fc4:	6bbd 000b 6bb1 000b 6e4d 000b 6e55 000b     .k...k..Mn..Un..
   b8fd4:	6ba5 000b 6b9d 000b 6b93 000b 6b89 000b     .k...k...k...k..
   b8fe4:	6e85 000b                                   .n..

000b8fe8 <_ZTV7TwoWire>:
	...
   b8ff0:	6c05 000b 6c4f 000b 6c27 000b 6c07 000b     .l..Ol..'l...l..
   b9000:	6c2f 000b 6c37 000b 6c3f 000b 6c47 000b     /l..7l..?l..Gl..

000b9010 <_ZTV9IPAddress>:
	...
   b9018:	6d1d 000b 6d0d 000b 6d0f 000b 7061 0070     .m...m...m..app.

000b9028 <_ZTVN5spark12NetworkClassE>:
	...
   b9030:	6e0d 000b 6e17 000b 6e21 000b 6e2b 000b     .n...n..!n..+n..
   b9040:	6e35 000b 6e41 000b 6e4d 000b 6e55 000b     5n..An..Mn..Un..
   b9050:	6e5d 000b 6e69 000b 6e71 000b 6e7b 000b     ]n..in..qn..{n..
   b9060:	6e85 000b                                   .n..

000b9064 <_ZN12_GLOBAL__N_1L14clock_divisorsE>:
   b9064:	0800 1810 2820 3830 5925 252d 2d6d 6425     .... (08%Y-%m-%d
   b9074:	2554 3a48 4d25 253a 2553 007a 7361 7463     T%H:%M:%S%z.asct
   b9084:	6d69 0065                                   ime.

000b9088 <_ZTV11USARTSerial>:
	...
   b9090:	744d 000b 74b9 000b 7491 000b 6f71 000b     Mt...t...t..qo..
   b90a0:	7461 000b 747d 000b 746f 000b 748b 000b     at..}t..ot...t..
   b90b0:	744f 000b 7453 000b                         Ot..St..

000b90b8 <_ZTV9USBSerial>:
	...
   b90c0:	74f7 000b 755f 000b 7535 000b 6f71 000b     .t.._u..5u..qo..
   b90d0:	7527 000b 74f9 000b 7509 000b 7559 000b     'u...t...u..Yu..
   b90e0:	7519 000b 74f1 000b                         .u...t..

000b90e8 <_ZTVN5spark9WiFiClassE>:
	...
   b90f0:	7657 000b 764d 000b 7643 000b 75f9 000b     Wv..Mv..Cv...u..
   b9100:	7637 000b 762b 000b 6e4d 000b 6e55 000b     7v..+v..Mn..Un..
   b9110:	761f 000b 7617 000b 760d 000b 7603 000b     .v...v...v...v..
   b9120:	6e85 000b                                   .n..

000b9124 <_ZSt7nothrow>:
   b9124:	5200 4545 544e 6d20 6c61 6f6c 2063 7573     .REENT malloc su
   b9134:	6363 6565 6564 0064 742f 706d 6a2f 6e65     cceeded./tmp/jen
   b9144:	696b 736e 472d 4343 312d 2d30 6970 6570     kins-GCC-10-pipe
   b9154:	696c 656e 342d 5f38 3032 3032 3131 3432     line-48_20201124
   b9164:	315f 3036 3136 3038 3336 2f39 7273 2f63     _1606180639/src/
   b9174:	656e 6c77 6269 6e2f 7765 696c 2f62 696c     newlib/newlib/li
   b9184:	6362 732f 6474 696c 2f62 6172 646e 632e     bc/stdlib/rand.c
	...

000b9195 <link_const_variable_data_end>:
   b9195:	00          	.byte	0x00
	...

000b9198 <link_constructors_location>:
   b9198:	000b4841 	.word	0x000b4841
   b919c:	000b6649 	.word	0x000b6649
   b91a0:	000b6bf1 	.word	0x000b6bf1
   b91a4:	000b6dfd 	.word	0x000b6dfd
   b91a8:	000b6f5d 	.word	0x000b6f5d
   b91ac:	000b7005 	.word	0x000b7005
   b91b0:	000b7415 	.word	0x000b7415
   b91b4:	000b7439 	.word	0x000b7439
   b91b8:	000b7661 	.word	0x000b7661

000b91bc <link_constructors_end>:
   b91bc:	00000000 	.word	0x00000000
