
/Users/friedl/Desktop/Projects/ROS/target/4.0.2/argon/ROS.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .module_info  00000018  000b4000  000b4000  00004000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .dynalib      00000004  000b4018  000b4018  00004018  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .text         00005230  000b4020  000b4020  00004020  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .note.gnu.build-id 00000024  000b9250  000b9250  00009250  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .ARM.exidx    00000008  000b9274  000b9274  00009274  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .backup       00000004  2003f400  000b927c  0000f400  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         0000006c  2003e584  000b9280  0001e584  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00000200  2003e5f0  2003e5f0  0002e5f0  2**2
                  ALLOC
  8 .module_info_suffix 00000028  000b92ec  000b92ec  000292ec  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  9 .module_info_crc 00000004  000b9314  000b9314  00029314  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
 10 .debug_info   001531f9  00000000  00000000  00029318  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 0001710e  00000000  00000000  0017c511  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_loc    00048664  00000000  00000000  0019361f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_aranges 00003440  00000000  00000000  001dbc83  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_ranges 0000b260  00000000  00000000  001df0c3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_macro  00041f8c  00000000  00000000  001ea323  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_line   00051741  00000000  00000000  0022c2af  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_str    0013de97  00000000  00000000  0027d9f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_frame  00009adc  00000000  00000000  003bb888  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

000b4020 <module_user_pre_init>:
/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   b4020:	4809      	ldr	r0, [pc, #36]	; (b4048 <module_user_pre_init+0x28>)
   b4022:	490a      	ldr	r1, [pc, #40]	; (b404c <module_user_pre_init+0x2c>)
   b4024:	4288      	cmp	r0, r1
void* module_user_pre_init() {
   b4026:	b508      	push	{r3, lr}
    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   b4028:	d005      	beq.n	b4036 <module_user_pre_init+0x16>
   b402a:	4a09      	ldr	r2, [pc, #36]	; (b4050 <module_user_pre_init+0x30>)
   b402c:	4282      	cmp	r2, r0
   b402e:	d002      	beq.n	b4036 <module_user_pre_init+0x16>
    {
        memcpy(&link_global_data_start, &link_global_data_initial_values, link_global_data_size);
   b4030:	1a12      	subs	r2, r2, r0
   b4032:	f004 fb59 	bl	b86e8 <memcpy>
    }

    memset(&link_bss_location, 0, link_bss_size );
   b4036:	4807      	ldr	r0, [pc, #28]	; (b4054 <module_user_pre_init+0x34>)
   b4038:	4a07      	ldr	r2, [pc, #28]	; (b4058 <module_user_pre_init+0x38>)
   b403a:	2100      	movs	r1, #0
   b403c:	1a12      	subs	r2, r2, r0
   b403e:	f004 fb61 	bl	b8704 <memset>
    return &link_global_data_start;
}
   b4042:	4801      	ldr	r0, [pc, #4]	; (b4048 <module_user_pre_init+0x28>)
   b4044:	bd08      	pop	{r3, pc}
   b4046:	bf00      	nop
   b4048:	2003e584 	.word	0x2003e584
   b404c:	000b9280 	.word	0x000b9280
   b4050:	2003e5f0 	.word	0x2003e5f0
   b4054:	2003e5f0 	.word	0x2003e5f0
   b4058:	2003e7ed 	.word	0x2003e7ed

000b405c <module_user_init>:
extern constructor_ptr_t link_constructors_location[];
extern constructor_ptr_t link_constructors_end;
#define link_constructors_size   ((unsigned long)&link_constructors_end  -  (unsigned long)&link_constructors_location )

void module_user_init()
{
   b405c:	b570      	push	{r4, r5, r6, lr}
    module_user_init_hook();

    // invoke constructors
    for (size_t ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   b405e:	4e07      	ldr	r6, [pc, #28]	; (b407c <module_user_init+0x20>)
   b4060:	4c07      	ldr	r4, [pc, #28]	; (b4080 <module_user_init+0x24>)
    module_user_init_hook();
   b4062:	f003 fc05 	bl	b7870 <module_user_init_hook>
    for (size_t ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   b4066:	1ba4      	subs	r4, r4, r6
   b4068:	08a4      	lsrs	r4, r4, #2
   b406a:	2500      	movs	r5, #0
   b406c:	42ac      	cmp	r4, r5
   b406e:	d100      	bne.n	b4072 <module_user_init+0x16>
    {
        link_constructors_location[ctor_num]();
    }
}
   b4070:	bd70      	pop	{r4, r5, r6, pc}
        link_constructors_location[ctor_num]();
   b4072:	f856 3b04 	ldr.w	r3, [r6], #4
   b4076:	4798      	blx	r3
    for (size_t ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   b4078:	3501      	adds	r5, #1
   b407a:	e7f7      	b.n	b406c <module_user_init+0x10>
   b407c:	000b922c 	.word	0x000b922c
   b4080:	000b9250 	.word	0x000b9250

000b4084 <module_user_setup>:

/**
 * Export these functions with a fuller name so they don't clash with the setup/loop wrappers in the system module.
 */
void module_user_setup() {
    setup();
   b4084:	f000 b948 	b.w	b4318 <setup>

000b4088 <module_user_loop>:
}

void module_user_loop() {
   b4088:	b508      	push	{r3, lr}
    loop();
   b408a:	f000 fc19 	bl	b48c0 <loop>
    _post_loop();
}
   b408e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    _post_loop();
   b4092:	f003 bba5 	b.w	b77e0 <_post_loop>

000b4096 <_Znwj>:
 * Implement C++ new/delete operators using the heap
 */

void *operator new(size_t size)
{
	return malloc(size);
   b4096:	f002 bab1 	b.w	b65fc <malloc>

000b409a <_Znaj>:
   b409a:	f002 baaf 	b.w	b65fc <malloc>

000b409e <_ZdlPvj>:
	free(p);
}

void operator delete(void *p, size_t size)
{
	free(p);
   b409e:	f002 bab5 	b.w	b660c <free>
	...

000b40a4 <__cxa_pure_virtual>:
int __wrap_printf(const char* fmt, ...) {
    return -1;
}

/* Default implementation for call made to pure virtual function. */
void __cxa_pure_virtual() {
   b40a4:	b508      	push	{r3, lr}
  PANIC(PureVirtualCall,"Call on pure virtual");
   b40a6:	4a03      	ldr	r2, [pc, #12]	; (b40b4 <__cxa_pure_virtual+0x10>)
   b40a8:	4903      	ldr	r1, [pc, #12]	; (b40b8 <__cxa_pure_virtual+0x14>)
   b40aa:	200c      	movs	r0, #12
   b40ac:	f002 f9f2 	bl	b6494 <panic_>
  while (1);
   b40b0:	e7fe      	b.n	b40b0 <__cxa_pure_virtual+0xc>
   b40b2:	bf00      	nop
   b40b4:	000b61f5 	.word	0x000b61f5
   b40b8:	000b88ac 	.word	0x000b88ac

000b40bc <__cxa_guard_acquire>:

/* Provide default implemenation for __cxa_guard_acquire() and
 * __cxa_guard_release(). Note: these must be revisited if a multitasking
 * OS is ported to this platform. */
__extension__ typedef int __guard __attribute__((mode (__DI__)));
int __cxa_guard_acquire(__guard *g) {return !*(char *)(g);};
   b40bc:	7800      	ldrb	r0, [r0, #0]
   b40be:	fab0 f080 	clz	r0, r0
   b40c2:	0940      	lsrs	r0, r0, #5
   b40c4:	4770      	bx	lr

000b40c6 <__cxa_guard_release>:
void __cxa_guard_release (__guard *g) {*(char *)g = 1;};
   b40c6:	2301      	movs	r3, #1
   b40c8:	7003      	strb	r3, [r0, #0]
   b40ca:	4770      	bx	lr

000b40cc <_Z3TFTv>:

  measure_zones();

}

  void TFT() {
   b40cc:	b538      	push	{r3, r4, r5, lr}
  @brief  Set whether text that is too long for the screen width should
          automatically wrap around to the next line (else clip right).
  @param  w  true for wrapping, false for clipping
  */
  /**********************************************************************/
  void setTextWrap(boolean w) { wrap = w; }
   b40ce:	4d12      	ldr	r5, [pc, #72]	; (b4118 <_Z3TFTv+0x4c>)
   b40d0:	2100      	movs	r1, #0
  tft.setTextWrap(false);
  tft.fillScreen(ST77XX_BLACK);
   b40d2:	4628      	mov	r0, r5
   b40d4:	76e9      	strb	r1, [r5, #27]
   b40d6:	f000 fcf9 	bl	b4acc <_ZN12Adafruit_GFX10fillScreenEt>
  void setTextColor(uint16_t c) { textcolor = textbgcolor = c; }
   b40da:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   b40de:	f04f 121e 	mov.w	r2, #1966110	; 0x1e001e
  tft.setCursor(30, 30);
  tft.setTextColor(ST77XX_WHITE);
  tft.setTextSize(36);
   b40e2:	2124      	movs	r1, #36	; 0x24
   b40e4:	4628      	mov	r0, r5
   b40e6:	e9c5 2304 	strd	r2, r3, [r5, #16]
   b40ea:	f000 ff94 	bl	b5016 <_ZN12Adafruit_GFX11setTextSizeEh>
  tft.print(counter);
   b40ee:	4b0b      	ldr	r3, [pc, #44]	; (b411c <_Z3TFTv+0x50>)
   b40f0:	681c      	ldr	r4, [r3, #0]
// FIXME: avoids 'comparison of constant '0' with boolean expression is always false'
#if __GNUC__ >= 9
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wbool-compare"
#endif // __GNUC__ >= 9
        if (n < 0 && base == 10) {
   b40f2:	2c00      	cmp	r4, #0
   b40f4:	da0e      	bge.n	b4114 <_Z3TFTv+0x48>
            t = print('-');
   b40f6:	212d      	movs	r1, #45	; 0x2d
   b40f8:	4628      	mov	r0, r5
   b40fa:	f002 ffa9 	bl	b7050 <_ZN5Print5printEc>
            val = -n;
   b40fe:	4261      	negs	r1, r4
            val = n;
        }
#if __GNUC__ >= 9
#pragma GCC diagnostic pop
#endif // __GNUC__ >= 9
        return printNumber(val, base) + t;
   b4100:	4805      	ldr	r0, [pc, #20]	; (b4118 <_Z3TFTv+0x4c>)
   b4102:	220a      	movs	r2, #10
   b4104:	f002 ffa7 	bl	b7056 <_ZN5Print11printNumberEmh>
  delay(1500);
}
   b4108:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  delay(1500);
   b410c:	f240 50dc 	movw	r0, #1500	; 0x5dc
   b4110:	f002 baac 	b.w	b666c <delay>
            val = n;
   b4114:	4621      	mov	r1, r4
   b4116:	e7f3      	b.n	b4100 <_Z3TFTv+0x34>
   b4118:	2003e668 	.word	0x2003e668
   b411c:	2003e640 	.word	0x2003e640

000b4120 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      explicit __shared_count(const __weak_count<_Lp>& __r);

      // Does not throw if __r._M_get_use_count() == 0, caller must check.
      explicit __shared_count(const __weak_count<_Lp>& __r, std::nothrow_t);

      ~__shared_count() noexcept
   b4120:	b538      	push	{r3, r4, r5, lr}
      {
	if (_M_pi != nullptr)
   b4122:	6804      	ldr	r4, [r0, #0]
      ~__shared_count() noexcept
   b4124:	4605      	mov	r5, r0
	if (_M_pi != nullptr)
   b4126:	b17c      	cbz	r4, b4148 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>
      if (--_M_use_count == 0)
   b4128:	6863      	ldr	r3, [r4, #4]
   b412a:	3b01      	subs	r3, #1
   b412c:	6063      	str	r3, [r4, #4]
   b412e:	b95b      	cbnz	r3, b4148 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>
          _M_dispose();
   b4130:	6823      	ldr	r3, [r4, #0]
   b4132:	4620      	mov	r0, r4
   b4134:	689b      	ldr	r3, [r3, #8]
   b4136:	4798      	blx	r3
          if (--_M_weak_count == 0)
   b4138:	68a3      	ldr	r3, [r4, #8]
   b413a:	3b01      	subs	r3, #1
   b413c:	60a3      	str	r3, [r4, #8]
   b413e:	b91b      	cbnz	r3, b4148 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>
            _M_destroy();
   b4140:	6823      	ldr	r3, [r4, #0]
   b4142:	4620      	mov	r0, r4
   b4144:	68db      	ldr	r3, [r3, #12]
   b4146:	4798      	blx	r3
	  _M_pi->_M_release();
      }
   b4148:	4628      	mov	r0, r5
   b414a:	bd38      	pop	{r3, r4, r5, pc}

000b414c <_Z17zones_calibrationv>:
void zones_calibration() {
   b414c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  center[0] = 231; //167
   b4150:	f8df 91b8 	ldr.w	r9, [pc, #440]	; b430c <_Z17zones_calibrationv+0x1c0>
  ROI_width = 8;
   b4154:	f8df b1b8 	ldr.w	fp, [pc, #440]	; b4310 <_Z17zones_calibrationv+0x1c4>
  Zone = 0;
   b4158:	4d61      	ldr	r5, [pc, #388]	; (b42e0 <_Z17zones_calibrationv+0x194>)
  sum_zone_0 = 0;
   b415a:	f8df 81b8 	ldr.w	r8, [pc, #440]	; b4314 <_Z17zones_calibrationv+0x1c8>
  sum_zone_1 = 0;
   b415e:	4f61      	ldr	r7, [pc, #388]	; (b42e4 <_Z17zones_calibrationv+0x198>)
  distance = 0;
   b4160:	4e61      	ldr	r6, [pc, #388]	; (b42e8 <_Z17zones_calibrationv+0x19c>)
      distanceSensor.setIntermeasurementPeriod(55);
   b4162:	4c62      	ldr	r4, [pc, #392]	; (b42ec <_Z17zones_calibrationv+0x1a0>)
  center[1] = 167; //231 
   b4164:	22e7      	movs	r2, #231	; 0xe7
   b4166:	23a7      	movs	r3, #167	; 0xa7
   b4168:	e9c9 2300 	strd	r2, r3, [r9]
  ROI_height = 8;
   b416c:	4a60      	ldr	r2, [pc, #384]	; (b42f0 <_Z17zones_calibrationv+0x1a4>)
   b416e:	2308      	movs	r3, #8
void zones_calibration() {
   b4170:	b091      	sub	sp, #68	; 0x44
  delay(500);
   b4172:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
  ROI_height = 8;
   b4176:	6013      	str	r3, [r2, #0]
  ROI_width = 8;
   b4178:	f8cb 3000 	str.w	r3, [fp]
  delay(500);
   b417c:	f002 fa76 	bl	b666c <delay>
  number_attempts = 20;
   b4180:	495c      	ldr	r1, [pc, #368]	; (b42f4 <_Z17zones_calibrationv+0x1a8>)
  Zone = 0;
   b4182:	2300      	movs	r3, #0
  number_attempts = 20;
   b4184:	2214      	movs	r2, #20
  Zone = 0;
   b4186:	602b      	str	r3, [r5, #0]
  sum_zone_0 = 0;
   b4188:	f8c8 3000 	str.w	r3, [r8]
  sum_zone_1 = 0;
   b418c:	603b      	str	r3, [r7, #0]
  distance = 0;
   b418e:	8033      	strh	r3, [r6, #0]
  number_attempts = 20;
   b4190:	600a      	str	r2, [r1, #0]
  for (int i=0; i<number_attempts; i++){
   b4192:	469a      	mov	sl, r3
   b4194:	4b57      	ldr	r3, [pc, #348]	; (b42f4 <_Z17zones_calibrationv+0x1a8>)
   b4196:	681a      	ldr	r2, [r3, #0]
   b4198:	4552      	cmp	r2, sl
   b419a:	dd5c      	ble.n	b4256 <_Z17zones_calibrationv+0x10a>
      distanceSensor.setIntermeasurementPeriod(55);
   b419c:	2137      	movs	r1, #55	; 0x37
   b419e:	4620      	mov	r0, r4
   b41a0:	f001 fd25 	bl	b5bee <_ZN10SFEVL53L1X25setIntermeasurementPeriodEt>
      distanceSensor.setDistanceModeLong();
   b41a4:	4620      	mov	r0, r4
   b41a6:	f001 fd1e 	bl	b5be6 <_ZN10SFEVL53L1X19setDistanceModeLongEv>
      distanceSensor.setROI(ROI_height, ROI_width, center[0]);  // first value: height of the zone, second value: width of the zone
   b41aa:	4951      	ldr	r1, [pc, #324]	; (b42f0 <_Z17zones_calibrationv+0x1a4>)
   b41ac:	f899 3000 	ldrb.w	r3, [r9]
   b41b0:	f89b 2000 	ldrb.w	r2, [fp]
   b41b4:	7809      	ldrb	r1, [r1, #0]
   b41b6:	4620      	mov	r0, r4
   b41b8:	f001 fd27 	bl	b5c0a <_ZN10SFEVL53L1X6setROIEhhh>
      delay(50);
   b41bc:	2032      	movs	r0, #50	; 0x32
   b41be:	f002 fa55 	bl	b666c <delay>
      distanceSensor.setTimingBudgetInMs(50);
   b41c2:	2132      	movs	r1, #50	; 0x32
   b41c4:	4620      	mov	r0, r4
   b41c6:	f001 fd0b 	bl	b5be0 <_ZN10SFEVL53L1X19setTimingBudgetInMsEt>
      distanceSensor.startRanging();                            //Write configuration bytes to initiate measurement
   b41ca:	4620      	mov	r0, r4
   b41cc:	f001 fd02 	bl	b5bd4 <_ZN10SFEVL53L1X12startRangingEv>
      distance = distanceSensor.getDistance();                  //Get the result of the measurement from the sensor
   b41d0:	4620      	mov	r0, r4
   b41d2:	f001 fd0f 	bl	b5bf4 <_ZN10SFEVL53L1X11getDistanceEv>
   b41d6:	8030      	strh	r0, [r6, #0]
      distanceSensor.stopRanging();      
   b41d8:	4620      	mov	r0, r4
   b41da:	f001 fcfe 	bl	b5bda <_ZN10SFEVL53L1X11stopRangingEv>
      sum_zone_0 = sum_zone_0 + distance;
   b41de:	f8d8 2000 	ldr.w	r2, [r8]
   b41e2:	8833      	ldrh	r3, [r6, #0]
   b41e4:	4413      	add	r3, r2
   b41e6:	f8c8 3000 	str.w	r3, [r8]
      Zone++;
   b41ea:	682b      	ldr	r3, [r5, #0]
      Zone = Zone%2;
   b41ec:	3301      	adds	r3, #1
   b41ee:	f003 0301 	and.w	r3, r3, #1
   b41f2:	bf48      	it	mi
   b41f4:	425b      	negmi	r3, r3
      distanceSensor.setIntermeasurementPeriod(55);
   b41f6:	2137      	movs	r1, #55	; 0x37
   b41f8:	4620      	mov	r0, r4
      Zone = Zone%2;
   b41fa:	602b      	str	r3, [r5, #0]
      distanceSensor.setIntermeasurementPeriod(55);
   b41fc:	f001 fcf7 	bl	b5bee <_ZN10SFEVL53L1X25setIntermeasurementPeriodEt>
      distanceSensor.setDistanceModeLong();
   b4200:	4620      	mov	r0, r4
   b4202:	f001 fcf0 	bl	b5be6 <_ZN10SFEVL53L1X19setDistanceModeLongEv>
      distanceSensor.setROI(ROI_height, ROI_width, center[1]);  // first value: height of the zone, second value: width of the zone
   b4206:	493a      	ldr	r1, [pc, #232]	; (b42f0 <_Z17zones_calibrationv+0x1a4>)
   b4208:	f899 3004 	ldrb.w	r3, [r9, #4]
   b420c:	f89b 2000 	ldrb.w	r2, [fp]
   b4210:	7809      	ldrb	r1, [r1, #0]
   b4212:	4620      	mov	r0, r4
   b4214:	f001 fcf9 	bl	b5c0a <_ZN10SFEVL53L1X6setROIEhhh>
      delay(50);
   b4218:	2032      	movs	r0, #50	; 0x32
   b421a:	f002 fa27 	bl	b666c <delay>
      distanceSensor.setTimingBudgetInMs(50);
   b421e:	2132      	movs	r1, #50	; 0x32
   b4220:	4620      	mov	r0, r4
   b4222:	f001 fcdd 	bl	b5be0 <_ZN10SFEVL53L1X19setTimingBudgetInMsEt>
      distanceSensor.startRanging();                            //Write configuration bytes to initiate measurement
   b4226:	4620      	mov	r0, r4
   b4228:	f001 fcd4 	bl	b5bd4 <_ZN10SFEVL53L1X12startRangingEv>
      distance = distanceSensor.getDistance();                  //Get the result of the measurement from the sensor
   b422c:	4620      	mov	r0, r4
   b422e:	f001 fce1 	bl	b5bf4 <_ZN10SFEVL53L1X11getDistanceEv>
   b4232:	8030      	strh	r0, [r6, #0]
      distanceSensor.stopRanging();      
   b4234:	4620      	mov	r0, r4
   b4236:	f001 fcd0 	bl	b5bda <_ZN10SFEVL53L1X11stopRangingEv>
      sum_zone_1 = sum_zone_1 + distance;
   b423a:	683a      	ldr	r2, [r7, #0]
   b423c:	8833      	ldrh	r3, [r6, #0]
   b423e:	4413      	add	r3, r2
   b4240:	603b      	str	r3, [r7, #0]
      Zone++;
   b4242:	682b      	ldr	r3, [r5, #0]
      Zone = Zone%2;
   b4244:	3301      	adds	r3, #1
   b4246:	f003 0301 	and.w	r3, r3, #1
   b424a:	bf48      	it	mi
   b424c:	425b      	negmi	r3, r3
   b424e:	602b      	str	r3, [r5, #0]
  for (int i=0; i<number_attempts; i++){
   b4250:	f10a 0a01 	add.w	sl, sl, #1
   b4254:	e79e      	b.n	b4194 <_Z17zones_calibrationv+0x48>
  calibrated_zone_0 = sum_zone_0 / number_attempts;
   b4256:	f8d8 3000 	ldr.w	r3, [r8]
   b425a:	fb93 f3f2 	sdiv	r3, r3, r2
   b425e:	ee00 3a10 	vmov	s0, r3
   b4262:	4b25      	ldr	r3, [pc, #148]	; (b42f8 <_Z17zones_calibrationv+0x1ac>)
  calibrated_zone_1 = sum_zone_1 / number_attempts;
   b4264:	4d25      	ldr	r5, [pc, #148]	; (b42fc <_Z17zones_calibrationv+0x1b0>)
  calibrated_zone_0 = sum_zone_0 / number_attempts;
   b4266:	eeb8 0ac0 	vcvt.f32.s32	s0, s0
  Particle.publish("Zones_C: ", String(calibrated_zone_0) + " & " + String(calibrated_zone_1), PRIVATE);
   b426a:	2106      	movs	r1, #6
  calibrated_zone_0 = sum_zone_0 / number_attempts;
   b426c:	ed83 0a00 	vstr	s0, [r3]
  calibrated_zone_1 = sum_zone_1 / number_attempts;
   b4270:	683b      	ldr	r3, [r7, #0]
   b4272:	fb93 f3f2 	sdiv	r3, r3, r2
   b4276:	ee07 3a90 	vmov	s15, r3
   b427a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
  Particle.publish("Zones_C: ", String(calibrated_zone_0) + " & " + String(calibrated_zone_1), PRIVATE);
   b427e:	a804      	add	r0, sp, #16
  calibrated_zone_1 = sum_zone_1 / number_attempts;
   b4280:	edc5 7a00 	vstr	s15, [r5]
  Particle.publish("Zones_C: ", String(calibrated_zone_0) + " & " + String(calibrated_zone_1), PRIVATE);
   b4284:	f003 f8bc 	bl	b7400 <_ZN6StringC1Efi>
};

class StringSumHelper : public String
{
public:
	StringSumHelper(const String &s) : String(s) {}
   b4288:	a904      	add	r1, sp, #16
   b428a:	a808      	add	r0, sp, #32
   b428c:	f003 f888 	bl	b73a0 <_ZN6StringC1ERKS_>
   b4290:	491b      	ldr	r1, [pc, #108]	; (b4300 <_Z17zones_calibrationv+0x1b4>)
   b4292:	a808      	add	r0, sp, #32
   b4294:	f003 f8f1 	bl	b747a <_ZplRK15StringSumHelperPKc>
   b4298:	ed95 0a00 	vldr	s0, [r5]
   b429c:	4604      	mov	r4, r0
   b429e:	2106      	movs	r1, #6
   b42a0:	a80c      	add	r0, sp, #48	; 0x30
   b42a2:	f003 f8ad 	bl	b7400 <_ZN6StringC1Efi>
   b42a6:	a90c      	add	r1, sp, #48	; 0x30
   b42a8:	4620      	mov	r0, r4
   b42aa:	f003 f8da 	bl	b7462 <_ZplRK15StringSumHelperRK6String>
	const char * c_str() const { return buffer; }
   b42ae:	4b15      	ldr	r3, [pc, #84]	; (b4304 <_Z17zones_calibrationv+0x1b8>)
   b42b0:	6802      	ldr	r2, [r0, #0]
inline particle::Flags<TagT, ValueT>::Flags(Flag<TagT, ValueT> flag) :
        val_(flag.value()) {
}

template<typename TagT, typename ValueT>
inline particle::Flags<TagT, ValueT>::Flags(ValueT val) :
   b42b2:	781b      	ldrb	r3, [r3, #0]
        return publish(eventName, eventData, DEFAULT_CLOUD_EVENT_TTL, flags1, flags2);
    }

    inline particle::Future<bool> publish(const char *eventName, const char *eventData, int ttl, PublishFlags flags1, PublishFlags flags2 = PublishFlags())
    {
        return publish_event(eventName, eventData, ttl, flags1 | flags2);
   b42b4:	4914      	ldr	r1, [pc, #80]	; (b4308 <_Z17zones_calibrationv+0x1bc>)
   b42b6:	f88d 3000 	strb.w	r3, [sp]
   b42ba:	a802      	add	r0, sp, #8
   b42bc:	233c      	movs	r3, #60	; 0x3c
   b42be:	f002 fb3b 	bl	b6938 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>
	  __r._M_ptr = 0;
	}

      __shared_ptr(const __shared_ptr&) noexcept = default;
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
   b42c2:	a803      	add	r0, sp, #12
   b42c4:	f7ff ff2c 	bl	b4120 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   b42c8:	a80c      	add	r0, sp, #48	; 0x30
   b42ca:	f002 fffb 	bl	b72c4 <_ZN6StringD1Ev>
class StringSumHelper : public String
   b42ce:	a808      	add	r0, sp, #32
   b42d0:	f002 fff8 	bl	b72c4 <_ZN6StringD1Ev>
   b42d4:	a804      	add	r0, sp, #16
   b42d6:	f002 fff5 	bl	b72c4 <_ZN6StringD1Ev>
}
   b42da:	b011      	add	sp, #68	; 0x44
   b42dc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   b42e0:	2003e624 	.word	0x2003e624
   b42e4:	2003e664 	.word	0x2003e664
   b42e8:	2003e644 	.word	0x2003e644
   b42ec:	2003e648 	.word	0x2003e648
   b42f0:	2003e610 	.word	0x2003e610
   b42f4:	2003e65c 	.word	0x2003e65c
   b42f8:	2003e638 	.word	0x2003e638
   b42fc:	2003e63c 	.word	0x2003e63c
   b4300:	000b88c1 	.word	0x000b88c1
   b4304:	2003e634 	.word	0x2003e634
   b4308:	000b88c5 	.word	0x000b88c5
   b430c:	2003e62c 	.word	0x2003e62c
   b4310:	2003e614 	.word	0x2003e614
   b4314:	2003e660 	.word	0x2003e660

000b4318 <setup>:
void setup(void) {
   b4318:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  Serial.begin(9600);
   b431a:	f003 f98f 	bl	b763c <_Z16_fetch_usbserialv>
   b431e:	f44f 5116 	mov.w	r1, #9600	; 0x2580
   b4322:	f003 f97f 	bl	b7624 <_ZN9USBSerial5beginEl>
  tft.init(240, 320);           // Init ST7789 320x240
   b4326:	f44f 72a0 	mov.w	r2, #320	; 0x140
   b432a:	21f0      	movs	r1, #240	; 0xf0
   b432c:	4826      	ldr	r0, [pc, #152]	; (b43c8 <setup+0xb0>)
   b432e:	f001 fae3 	bl	b58f8 <_ZN15Adafruit_ST77894initEtt>

#ifdef __cplusplus
extern "C" {
#endif

inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
   b4332:	f001 ff67 	bl	b6204 <HAL_Timer_Get_Milli_Seconds>
  tft.fillScreen(ST77XX_BLACK);
   b4336:	2100      	movs	r1, #0
   b4338:	4823      	ldr	r0, [pc, #140]	; (b43c8 <setup+0xb0>)
   b433a:	f000 fbc7 	bl	b4acc <_ZN12Adafruit_GFX10fillScreenEt>
   b433e:	f001 ff61 	bl	b6204 <HAL_Timer_Get_Milli_Seconds>
  Wire.begin();
   b4342:	f003 fb4b 	bl	b79dc <_Z19__fetch_global_Wirev>
   b4346:	f002 fceb 	bl	b6d20 <_ZN7TwoWire5beginEv>
  zones_calibration();
   b434a:	f7ff feff 	bl	b414c <_Z17zones_calibrationv>
  if (distanceSensor.init() == false)
   b434e:	481f      	ldr	r0, [pc, #124]	; (b43cc <setup+0xb4>)
   b4350:	f001 fc38 	bl	b5bc4 <_ZN10SFEVL53L1X4initEv>
   b4354:	4602      	mov	r2, r0
   b4356:	b958      	cbnz	r0, b4370 <setup+0x58>
   b4358:	4b1d      	ldr	r3, [pc, #116]	; (b43d0 <setup+0xb8>)
   b435a:	491e      	ldr	r1, [pc, #120]	; (b43d4 <setup+0xbc>)
   b435c:	781b      	ldrb	r3, [r3, #0]
   b435e:	f88d 3000 	strb.w	r3, [sp]
   b4362:	a802      	add	r0, sp, #8
   b4364:	233c      	movs	r3, #60	; 0x3c
   b4366:	f002 fae7 	bl	b6938 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>
   b436a:	a803      	add	r0, sp, #12
   b436c:	f7ff fed8 	bl	b4120 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
    delay(2000);
   b4370:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
   b4374:	f002 f97a 	bl	b666c <delay>
   b4378:	4b17      	ldr	r3, [pc, #92]	; (b43d8 <setup+0xc0>)
  void setTextWrap(boolean w) { wrap = w; }
   b437a:	4c13      	ldr	r4, [pc, #76]	; (b43c8 <setup+0xb0>)
   b437c:	781b      	ldrb	r3, [r3, #0]
   b437e:	4917      	ldr	r1, [pc, #92]	; (b43dc <setup+0xc4>)
   b4380:	f88d 3000 	strb.w	r3, [sp]
   b4384:	2200      	movs	r2, #0
   b4386:	233c      	movs	r3, #60	; 0x3c
   b4388:	a802      	add	r0, sp, #8
   b438a:	f002 fad5 	bl	b6938 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>
   b438e:	a803      	add	r0, sp, #12
   b4390:	f7ff fec6 	bl	b4120 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   b4394:	2100      	movs	r1, #0
    tft.fillScreen(ST77XX_BLACK);
   b4396:	4620      	mov	r0, r4
   b4398:	76e1      	strb	r1, [r4, #27]
   b439a:	f000 fb97 	bl	b4acc <_ZN12Adafruit_GFX10fillScreenEt>
  void setTextColor(uint16_t c) { textcolor = textbgcolor = c; }
   b439e:	f04f 121e 	mov.w	r2, #1966110	; 0x1e001e
   b43a2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    tft.setTextSize(36);
   b43a6:	4620      	mov	r0, r4
   b43a8:	2124      	movs	r1, #36	; 0x24
   b43aa:	e9c4 2304 	strd	r2, r3, [r4, #16]
   b43ae:	f000 fe32 	bl	b5016 <_ZN12Adafruit_GFX11setTextSizeEh>
    tft.print("0");
   b43b2:	490b      	ldr	r1, [pc, #44]	; (b43e0 <setup+0xc8>)
   b43b4:	4620      	mov	r0, r4
   b43b6:	f002 fe47 	bl	b7048 <_ZN5Print5printEPKc>
    delay(50);
   b43ba:	2032      	movs	r0, #50	; 0x32
}
   b43bc:	b004      	add	sp, #16
   b43be:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    delay(50);
   b43c2:	f002 b953 	b.w	b666c <delay>
   b43c6:	bf00      	nop
   b43c8:	2003e668 	.word	0x2003e668
   b43cc:	2003e648 	.word	0x2003e648
   b43d0:	2003e628 	.word	0x2003e628
   b43d4:	000b88cf 	.word	0x000b88cf
   b43d8:	2003e634 	.word	0x2003e634
   b43dc:	000b88e1 	.word	0x000b88e1
   b43e0:	000b88ec 	.word	0x000b88ec

000b43e4 <_Z5countv>:
void count() {
   b43e4:	b570      	push	{r4, r5, r6, lr}
    if ((Entry_state == 1) && (Exit_state == 0)) { 
   b43e6:	4e32      	ldr	r6, [pc, #200]	; (b44b0 <_Z5countv+0xcc>)
   b43e8:	4c32      	ldr	r4, [pc, #200]	; (b44b4 <_Z5countv+0xd0>)
   b43ea:	6833      	ldr	r3, [r6, #0]
   b43ec:	2b01      	cmp	r3, #1
void count() {
   b43ee:	b08c      	sub	sp, #48	; 0x30
    if ((Entry_state == 1) && (Exit_state == 0)) { 
   b43f0:	d155      	bne.n	b449e <_Z5countv+0xba>
   b43f2:	4b31      	ldr	r3, [pc, #196]	; (b44b8 <_Z5countv+0xd4>)
   b43f4:	681d      	ldr	r5, [r3, #0]
   b43f6:	2d00      	cmp	r5, #0
   b43f8:	d153      	bne.n	b44a2 <_Z5countv+0xbe>
        counter = counter + 1;
   b43fa:	6823      	ldr	r3, [r4, #0]
	StringSumHelper(const char *p) : String(p) {}
   b43fc:	492f      	ldr	r1, [pc, #188]	; (b44bc <_Z5countv+0xd8>)
   b43fe:	3301      	adds	r3, #1
   b4400:	a808      	add	r0, sp, #32
   b4402:	6023      	str	r3, [r4, #0]
   b4404:	f002 ffa9 	bl	b735a <_ZN6StringC1EPK19__FlashStringHelper>
        Particle.publish("Counter: " + String(counter), PRIVATE);
   b4408:	220a      	movs	r2, #10
   b440a:	6821      	ldr	r1, [r4, #0]
   b440c:	a804      	add	r0, sp, #16
   b440e:	f002 ffe4 	bl	b73da <_ZN6StringC1Eih>
   b4412:	a904      	add	r1, sp, #16
   b4414:	a808      	add	r0, sp, #32
   b4416:	f003 f824 	bl	b7462 <_ZplRK15StringSumHelperRK6String>
	const char * c_str() const { return buffer; }
   b441a:	4b29      	ldr	r3, [pc, #164]	; (b44c0 <_Z5countv+0xdc>)
   b441c:	6801      	ldr	r1, [r0, #0]
   b441e:	781b      	ldrb	r3, [r3, #0]
   b4420:	f88d 3000 	strb.w	r3, [sp]
   b4424:	462a      	mov	r2, r5
   b4426:	233c      	movs	r3, #60	; 0x3c
   b4428:	a802      	add	r0, sp, #8
   b442a:	f002 fa85 	bl	b6938 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>
   b442e:	a803      	add	r0, sp, #12
   b4430:	f7ff fe76 	bl	b4120 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   b4434:	a804      	add	r0, sp, #16
   b4436:	f002 ff45 	bl	b72c4 <_ZN6StringD1Ev>
class StringSumHelper : public String
   b443a:	a808      	add	r0, sp, #32
   b443c:	f002 ff42 	bl	b72c4 <_ZN6StringD1Ev>
        TFT();
   b4440:	f7ff fe44 	bl	b40cc <_Z3TFTv>
        Entry_state = 0;
   b4444:	6035      	str	r5, [r6, #0]
    if ((Entry_state == 0) && (Exit_state == 1)) { 
   b4446:	4d1c      	ldr	r5, [pc, #112]	; (b44b8 <_Z5countv+0xd4>)
   b4448:	682b      	ldr	r3, [r5, #0]
   b444a:	2b01      	cmp	r3, #1
   b444c:	d129      	bne.n	b44a2 <_Z5countv+0xbe>
        counter = counter - 1;    
   b444e:	6823      	ldr	r3, [r4, #0]
	StringSumHelper(const char *p) : String(p) {}
   b4450:	491a      	ldr	r1, [pc, #104]	; (b44bc <_Z5countv+0xd8>)
   b4452:	3b01      	subs	r3, #1
   b4454:	a808      	add	r0, sp, #32
   b4456:	6023      	str	r3, [r4, #0]
   b4458:	f002 ff7f 	bl	b735a <_ZN6StringC1EPK19__FlashStringHelper>
        Particle.publish("Counter: " + String(counter), PRIVATE);
   b445c:	220a      	movs	r2, #10
   b445e:	6821      	ldr	r1, [r4, #0]
   b4460:	a804      	add	r0, sp, #16
   b4462:	f002 ffba 	bl	b73da <_ZN6StringC1Eih>
   b4466:	a904      	add	r1, sp, #16
   b4468:	a808      	add	r0, sp, #32
   b446a:	f002 fffa 	bl	b7462 <_ZplRK15StringSumHelperRK6String>
	const char * c_str() const { return buffer; }
   b446e:	4b14      	ldr	r3, [pc, #80]	; (b44c0 <_Z5countv+0xdc>)
   b4470:	6801      	ldr	r1, [r0, #0]
   b4472:	781b      	ldrb	r3, [r3, #0]
   b4474:	f88d 3000 	strb.w	r3, [sp]
   b4478:	2200      	movs	r2, #0
   b447a:	233c      	movs	r3, #60	; 0x3c
   b447c:	a802      	add	r0, sp, #8
   b447e:	f002 fa5b 	bl	b6938 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>
   b4482:	a803      	add	r0, sp, #12
   b4484:	f7ff fe4c 	bl	b4120 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   b4488:	a804      	add	r0, sp, #16
   b448a:	f002 ff1b 	bl	b72c4 <_ZN6StringD1Ev>
class StringSumHelper : public String
   b448e:	a808      	add	r0, sp, #32
   b4490:	f002 ff18 	bl	b72c4 <_ZN6StringD1Ev>
        TFT();
   b4494:	f7ff fe1a 	bl	b40cc <_Z3TFTv>
        Exit_state = 0;
   b4498:	2300      	movs	r3, #0
   b449a:	602b      	str	r3, [r5, #0]
   b449c:	e001      	b.n	b44a2 <_Z5countv+0xbe>
    if ((Entry_state == 0) && (Exit_state == 1)) { 
   b449e:	2b00      	cmp	r3, #0
   b44a0:	d0d1      	beq.n	b4446 <_Z5countv+0x62>
    if (counter <= 0) {
   b44a2:	6823      	ldr	r3, [r4, #0]
   b44a4:	2b00      	cmp	r3, #0
        counter = 0;
   b44a6:	bfdc      	itt	le
   b44a8:	2300      	movle	r3, #0
   b44aa:	6023      	strle	r3, [r4, #0]
}
   b44ac:	b00c      	add	sp, #48	; 0x30
   b44ae:	bd70      	pop	{r4, r5, r6, pc}
   b44b0:	2003e5f0 	.word	0x2003e5f0
   b44b4:	2003e640 	.word	0x2003e640
   b44b8:	2003e5f4 	.word	0x2003e5f4
   b44bc:	000b88ee 	.word	0x000b88ee
   b44c0:	2003e634 	.word	0x2003e634

000b44c4 <_Z20people_counter_arrayv>:
void people_counter_array() {
   b44c4:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    if (PathTrack[0][0] < PathTrack[0][1]) {
   b44c6:	4b29      	ldr	r3, [pc, #164]	; (b456c <_Z20people_counter_arrayv+0xa8>)
   b44c8:	4d29      	ldr	r5, [pc, #164]	; (b4570 <_Z20people_counter_arrayv+0xac>)
    if ((PathTrack[2][0] > PathTrack[1][0]) &&  (PathTrack[2][1] > PathTrack[1][1])) {
   b44ca:	691e      	ldr	r6, [r3, #16]
    if (PathTrack[0][0] < PathTrack[0][1]) {
   b44cc:	e9d3 2100 	ldrd	r2, r1, [r3]
    if (PathTrack[1][0] > PathTrack[1][1]) {
   b44d0:	e9d3 0402 	ldrd	r0, r4, [r3, #8]
        ROUTE[0] = 2;
   b44d4:	428a      	cmp	r2, r1
   b44d6:	bfb4      	ite	lt
   b44d8:	2201      	movlt	r2, #1
   b44da:	2202      	movge	r2, #2
        ROUTE[1] = 1;
   b44dc:	42a0      	cmp	r0, r4
   b44de:	bfd4      	ite	le
   b44e0:	2102      	movle	r1, #2
   b44e2:	2101      	movgt	r1, #1
    if ((PathTrack[2][0] > PathTrack[1][0]) &&  (PathTrack[2][1] > PathTrack[1][1])) {
   b44e4:	42b0      	cmp	r0, r6
   b44e6:	602a      	str	r2, [r5, #0]
    if (PathTrack[1][0] > PathTrack[1][1]) {
   b44e8:	6069      	str	r1, [r5, #4]
    if ((PathTrack[2][0] > PathTrack[1][0]) &&  (PathTrack[2][1] > PathTrack[1][1])) {
   b44ea:	da26      	bge.n	b453a <_Z20people_counter_arrayv+0x76>
   b44ec:	695b      	ldr	r3, [r3, #20]
        ROUTE[2] = 1;
   b44ee:	429c      	cmp	r4, r3
   b44f0:	bfac      	ite	ge
   b44f2:	2402      	movge	r4, #2
   b44f4:	2401      	movlt	r4, #1
    if ((ROUTE[0] == 1) && (ROUTE[1] == 1) && (ROUTE[2] == 1))  {
   b44f6:	2a01      	cmp	r2, #1
   b44f8:	60ac      	str	r4, [r5, #8]
   b44fa:	d120      	bne.n	b453e <_Z20people_counter_arrayv+0x7a>
   b44fc:	2901      	cmp	r1, #1
   b44fe:	d113      	bne.n	b4528 <_Z20people_counter_arrayv+0x64>
   b4500:	2c01      	cmp	r4, #1
   b4502:	d111      	bne.n	b4528 <_Z20people_counter_arrayv+0x64>
   b4504:	4b1b      	ldr	r3, [pc, #108]	; (b4574 <_Z20people_counter_arrayv+0xb0>)
   b4506:	491c      	ldr	r1, [pc, #112]	; (b4578 <_Z20people_counter_arrayv+0xb4>)
   b4508:	781b      	ldrb	r3, [r3, #0]
   b450a:	f88d 3000 	strb.w	r3, [sp]
   b450e:	2200      	movs	r2, #0
   b4510:	233c      	movs	r3, #60	; 0x3c
   b4512:	a802      	add	r0, sp, #8
   b4514:	f002 fa10 	bl	b6938 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>
   b4518:	a803      	add	r0, sp, #12
   b451a:	f7ff fe01 	bl	b4120 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
        Entry_state = 1;
   b451e:	4b17      	ldr	r3, [pc, #92]	; (b457c <_Z20people_counter_arrayv+0xb8>)
   b4520:	601c      	str	r4, [r3, #0]
        Exit_state = 0;
   b4522:	4b17      	ldr	r3, [pc, #92]	; (b4580 <_Z20people_counter_arrayv+0xbc>)
   b4524:	2200      	movs	r2, #0
   b4526:	601a      	str	r2, [r3, #0]
    ROUTE[0] = 0;
   b4528:	2300      	movs	r3, #0
    ROUTE[1] = 0;
   b452a:	e9c5 3300 	strd	r3, r3, [r5]
    ROUTE[2] = 0;
   b452e:	60ab      	str	r3, [r5, #8]
}
   b4530:	b004      	add	sp, #16
   b4532:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    count();
   b4536:	f7ff bf55 	b.w	b43e4 <_Z5countv>
        ROUTE[2] = 2;
   b453a:	2402      	movs	r4, #2
   b453c:	e7db      	b.n	b44f6 <_Z20people_counter_arrayv+0x32>
    } else if ((ROUTE[0] == 2) && (ROUTE[1] == 2) && (ROUTE[2] == 1)) {
   b453e:	2902      	cmp	r1, #2
   b4540:	d1f2      	bne.n	b4528 <_Z20people_counter_arrayv+0x64>
   b4542:	2c01      	cmp	r4, #1
   b4544:	d1f0      	bne.n	b4528 <_Z20people_counter_arrayv+0x64>
   b4546:	4b0b      	ldr	r3, [pc, #44]	; (b4574 <_Z20people_counter_arrayv+0xb0>)
   b4548:	490e      	ldr	r1, [pc, #56]	; (b4584 <_Z20people_counter_arrayv+0xc0>)
   b454a:	781b      	ldrb	r3, [r3, #0]
   b454c:	f88d 3000 	strb.w	r3, [sp]
   b4550:	2200      	movs	r2, #0
   b4552:	233c      	movs	r3, #60	; 0x3c
   b4554:	a802      	add	r0, sp, #8
   b4556:	f002 f9ef 	bl	b6938 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>
   b455a:	a803      	add	r0, sp, #12
   b455c:	f7ff fde0 	bl	b4120 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
        Entry_state = 0;
   b4560:	4b06      	ldr	r3, [pc, #24]	; (b457c <_Z20people_counter_arrayv+0xb8>)
   b4562:	2200      	movs	r2, #0
   b4564:	601a      	str	r2, [r3, #0]
        Exit_state = 1;
   b4566:	4b06      	ldr	r3, [pc, #24]	; (b4580 <_Z20people_counter_arrayv+0xbc>)
   b4568:	601c      	str	r4, [r3, #0]
   b456a:	e7dd      	b.n	b4528 <_Z20people_counter_arrayv+0x64>
   b456c:	2003e5f8 	.word	0x2003e5f8
   b4570:	2003e618 	.word	0x2003e618
   b4574:	2003e634 	.word	0x2003e634
   b4578:	000b88f8 	.word	0x000b88f8
   b457c:	2003e5f0 	.word	0x2003e5f0
   b4580:	2003e5f4 	.word	0x2003e5f4
   b4584:	000b88ff 	.word	0x000b88ff

000b4588 <_Z4Pathv>:
void Path() {
   b4588:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    number_attempts = 2;
   b458c:	f8df 91b0 	ldr.w	r9, [pc, #432]	; b4740 <_Z4Pathv+0x1b8>
    distance = 0;
   b4590:	4e63      	ldr	r6, [pc, #396]	; (b4720 <_Z4Pathv+0x198>)
            sum_zone_0 = 0;
   b4592:	4f64      	ldr	r7, [pc, #400]	; (b4724 <_Z4Pathv+0x19c>)
            sum_zone_1 = 0;
   b4594:	f8df a1ac 	ldr.w	sl, [pc, #428]	; b4744 <_Z4Pathv+0x1bc>
    number_attempts = 2;
   b4598:	2302      	movs	r3, #2
   b459a:	f8c9 3000 	str.w	r3, [r9]
    Zone = 0;
   b459e:	4b62      	ldr	r3, [pc, #392]	; (b4728 <_Z4Pathv+0x1a0>)
    distance = 0;
   b45a0:	2500      	movs	r5, #0
    Zone = 0;
   b45a2:	601d      	str	r5, [r3, #0]
   b45a4:	4b61      	ldr	r3, [pc, #388]	; (b472c <_Z4Pathv+0x1a4>)
    distance = 0;
   b45a6:	8035      	strh	r5, [r6, #0]
    for (int k=0; k<3; k++) {  
   b45a8:	9300      	str	r3, [sp, #0]
            sum_zone_0 = 0;
   b45aa:	2300      	movs	r3, #0
            distanceSensor.setIntermeasurementPeriod(35);
   b45ac:	4c60      	ldr	r4, [pc, #384]	; (b4730 <_Z4Pathv+0x1a8>)
            sum_zone_0 = 0;
   b45ae:	603b      	str	r3, [r7, #0]
            sum_zone_1 = 0;
   b45b0:	f8ca 3000 	str.w	r3, [sl]
        for (int i=0; i<number_attempts; i++) {
   b45b4:	9301      	str	r3, [sp, #4]
   b45b6:	f8d9 3000 	ldr.w	r3, [r9]
   b45ba:	9a01      	ldr	r2, [sp, #4]
   b45bc:	4293      	cmp	r3, r2
   b45be:	f340 80a2 	ble.w	b4706 <_Z4Pathv+0x17e>
            distanceSensor.setIntermeasurementPeriod(35);
   b45c2:	2123      	movs	r1, #35	; 0x23
   b45c4:	4620      	mov	r0, r4
   b45c6:	f001 fb12 	bl	b5bee <_ZN10SFEVL53L1X25setIntermeasurementPeriodEt>
            distanceSensor.setDistanceModeLong();
   b45ca:	4620      	mov	r0, r4
   b45cc:	f001 fb0b 	bl	b5be6 <_ZN10SFEVL53L1X19setDistanceModeLongEv>
            distanceSensor.setROI(ROI_height, ROI_width, center[0]);    // first value: height of the zone, second value: width of the zone
   b45d0:	f8df b174 	ldr.w	fp, [pc, #372]	; b4748 <_Z4Pathv+0x1c0>
   b45d4:	4b57      	ldr	r3, [pc, #348]	; (b4734 <_Z4Pathv+0x1ac>)
   b45d6:	4a58      	ldr	r2, [pc, #352]	; (b4738 <_Z4Pathv+0x1b0>)
   b45d8:	781b      	ldrb	r3, [r3, #0]
   b45da:	7812      	ldrb	r2, [r2, #0]
   b45dc:	f89b 1000 	ldrb.w	r1, [fp]
            Zone = Zone%2;
   b45e0:	f8df 8144 	ldr.w	r8, [pc, #324]	; b4728 <_Z4Pathv+0x1a0>
            distanceSensor.setROI(ROI_height, ROI_width, center[0]);    // first value: height of the zone, second value: width of the zone
   b45e4:	4620      	mov	r0, r4
   b45e6:	f001 fb10 	bl	b5c0a <_ZN10SFEVL53L1X6setROIEhhh>
            delay(30);
   b45ea:	201e      	movs	r0, #30
   b45ec:	f002 f83e 	bl	b666c <delay>
            distanceSensor.setTimingBudgetInMs(33);
   b45f0:	2121      	movs	r1, #33	; 0x21
   b45f2:	4620      	mov	r0, r4
   b45f4:	f001 faf4 	bl	b5be0 <_ZN10SFEVL53L1X19setTimingBudgetInMsEt>
            distanceSensor.startRanging();                              //Write configuration bytes to initiate measurement
   b45f8:	4620      	mov	r0, r4
   b45fa:	f001 faeb 	bl	b5bd4 <_ZN10SFEVL53L1X12startRangingEv>
            distance = distanceSensor.getDistance();                    //Get the result of the measurement from the sensor
   b45fe:	4620      	mov	r0, r4
   b4600:	f001 faf8 	bl	b5bf4 <_ZN10SFEVL53L1X11getDistanceEv>
   b4604:	8030      	strh	r0, [r6, #0]
            distanceSensor.stopRanging();      
   b4606:	4620      	mov	r0, r4
   b4608:	f001 fae7 	bl	b5bda <_ZN10SFEVL53L1X11stopRangingEv>
            sum_zone_0 = sum_zone_0 + distance;
   b460c:	683a      	ldr	r2, [r7, #0]
   b460e:	8833      	ldrh	r3, [r6, #0]
   b4610:	4413      	add	r3, r2
   b4612:	603b      	str	r3, [r7, #0]
            Zone++;
   b4614:	f8d8 3000 	ldr.w	r3, [r8]
            Zone = Zone%2;
   b4618:	3301      	adds	r3, #1
   b461a:	f003 0301 	and.w	r3, r3, #1
   b461e:	bf48      	it	mi
   b4620:	425b      	negmi	r3, r3
            delay(10);
   b4622:	200a      	movs	r0, #10
            Zone = Zone%2;
   b4624:	f8c8 3000 	str.w	r3, [r8]
            delay(10);
   b4628:	f002 f820 	bl	b666c <delay>
            distanceSensor.setIntermeasurementPeriod(35);
   b462c:	2123      	movs	r1, #35	; 0x23
   b462e:	4620      	mov	r0, r4
   b4630:	f001 fadd 	bl	b5bee <_ZN10SFEVL53L1X25setIntermeasurementPeriodEt>
            distanceSensor.setDistanceModeLong();
   b4634:	4620      	mov	r0, r4
   b4636:	f001 fad6 	bl	b5be6 <_ZN10SFEVL53L1X19setDistanceModeLongEv>
            distanceSensor.setROI(ROI_height, ROI_width, center[1]);    // first value: height of the zone, second value: width of the zone
   b463a:	4b3e      	ldr	r3, [pc, #248]	; (b4734 <_Z4Pathv+0x1ac>)
   b463c:	4a3e      	ldr	r2, [pc, #248]	; (b4738 <_Z4Pathv+0x1b0>)
   b463e:	791b      	ldrb	r3, [r3, #4]
   b4640:	7812      	ldrb	r2, [r2, #0]
   b4642:	f89b 1000 	ldrb.w	r1, [fp]
   b4646:	4620      	mov	r0, r4
   b4648:	f001 fadf 	bl	b5c0a <_ZN10SFEVL53L1X6setROIEhhh>
            delay(30);
   b464c:	201e      	movs	r0, #30
   b464e:	f002 f80d 	bl	b666c <delay>
            distanceSensor.setTimingBudgetInMs(33);
   b4652:	2121      	movs	r1, #33	; 0x21
   b4654:	4620      	mov	r0, r4
   b4656:	f001 fac3 	bl	b5be0 <_ZN10SFEVL53L1X19setTimingBudgetInMsEt>
            distanceSensor.startRanging();                              //Write configuration bytes to initiate measurement
   b465a:	4620      	mov	r0, r4
   b465c:	f001 faba 	bl	b5bd4 <_ZN10SFEVL53L1X12startRangingEv>
            distance = distanceSensor.getDistance();                    //Get the result of the measurement from the sensor
   b4660:	4620      	mov	r0, r4
   b4662:	f001 fac7 	bl	b5bf4 <_ZN10SFEVL53L1X11getDistanceEv>
   b4666:	8030      	strh	r0, [r6, #0]
            distanceSensor.stopRanging();      
   b4668:	4620      	mov	r0, r4
   b466a:	f001 fab6 	bl	b5bda <_ZN10SFEVL53L1X11stopRangingEv>
            sum_zone_1 = sum_zone_1 + distance;
   b466e:	f8da 3000 	ldr.w	r3, [sl]
   b4672:	8832      	ldrh	r2, [r6, #0]
            PathTrack[k][0] = sum_zone_0 / number_attempts;
   b4674:	9800      	ldr	r0, [sp, #0]
   b4676:	f8d9 1000 	ldr.w	r1, [r9]
            sum_zone_1 = sum_zone_1 + distance;
   b467a:	441a      	add	r2, r3
            Zone++;
   b467c:	f8d8 3000 	ldr.w	r3, [r8]
            sum_zone_1 = sum_zone_1 + distance;
   b4680:	f8ca 2000 	str.w	r2, [sl]
            Zone = Zone%2;
   b4684:	3301      	adds	r3, #1
   b4686:	f003 0301 	and.w	r3, r3, #1
   b468a:	bf48      	it	mi
   b468c:	425b      	negmi	r3, r3
   b468e:	f8c8 3000 	str.w	r3, [r8]
            PathTrack[k][0] = sum_zone_0 / number_attempts;
   b4692:	683b      	ldr	r3, [r7, #0]
            PathTrack[k][1] = sum_zone_1 / number_attempts;
   b4694:	fb92 f2f1 	sdiv	r2, r2, r1
            if (sum_zone_0 < 20) { 
   b4698:	2b13      	cmp	r3, #19
            PathTrack[k][0] = sum_zone_0 / number_attempts;
   b469a:	fb93 fcf1 	sdiv	ip, r3, r1
            PathTrack[k][1] = sum_zone_1 / number_attempts;
   b469e:	6042      	str	r2, [r0, #4]
            PathTrack[k][0] = sum_zone_0 / number_attempts;
   b46a0:	f8c0 c000 	str.w	ip, [r0]
            if (sum_zone_0 < 20) { 
   b46a4:	dc29      	bgt.n	b46fa <_Z4Pathv+0x172>
  void setTextWrap(boolean w) { wrap = w; }
   b46a6:	f8df b094 	ldr.w	fp, [pc, #148]	; b473c <_Z4Pathv+0x1b4>
            counter = 0;
   b46aa:	f8df 80a0 	ldr.w	r8, [pc, #160]	; b474c <_Z4Pathv+0x1c4>
   b46ae:	2300      	movs	r3, #0
   b46b0:	f88b 301b 	strb.w	r3, [fp, #27]
            tft.fillScreen(ST77XX_BLACK);
   b46b4:	2100      	movs	r1, #0
   b46b6:	4658      	mov	r0, fp
            counter = 0;
   b46b8:	f8c8 3000 	str.w	r3, [r8]
            tft.fillScreen(ST77XX_BLACK);
   b46bc:	f000 fa06 	bl	b4acc <_ZN12Adafruit_GFX10fillScreenEt>
  void setTextColor(uint16_t c) { textcolor = textbgcolor = c; }
   b46c0:	f04f 121e 	mov.w	r2, #1966110	; 0x1e001e
   b46c4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   b46c8:	e9cb 2304 	strd	r2, r3, [fp, #16]
            tft.setTextSize(36);
   b46cc:	2124      	movs	r1, #36	; 0x24
   b46ce:	4658      	mov	r0, fp
   b46d0:	f000 fca1 	bl	b5016 <_ZN12Adafruit_GFX11setTextSizeEh>
            tft.print(counter);
   b46d4:	f8d8 8000 	ldr.w	r8, [r8]
        if (n < 0 && base == 10) {
   b46d8:	f1b8 0f00 	cmp.w	r8, #0
   b46dc:	da11      	bge.n	b4702 <_Z4Pathv+0x17a>
            t = print('-');
   b46de:	212d      	movs	r1, #45	; 0x2d
   b46e0:	4658      	mov	r0, fp
   b46e2:	f002 fcb5 	bl	b7050 <_ZN5Print5printEc>
            val = -n;
   b46e6:	f1c8 0100 	rsb	r1, r8, #0
        return printNumber(val, base) + t;
   b46ea:	4814      	ldr	r0, [pc, #80]	; (b473c <_Z4Pathv+0x1b4>)
   b46ec:	220a      	movs	r2, #10
   b46ee:	f002 fcb2 	bl	b7056 <_ZN5Print11printNumberEmh>
            delay(1500);
   b46f2:	f240 50dc 	movw	r0, #1500	; 0x5dc
   b46f6:	f001 ffb9 	bl	b666c <delay>
        for (int i=0; i<number_attempts; i++) {
   b46fa:	9b01      	ldr	r3, [sp, #4]
   b46fc:	3301      	adds	r3, #1
   b46fe:	9301      	str	r3, [sp, #4]
   b4700:	e759      	b.n	b45b6 <_Z4Pathv+0x2e>
            val = n;
   b4702:	4641      	mov	r1, r8
   b4704:	e7f1      	b.n	b46ea <_Z4Pathv+0x162>
    for (int k=0; k<3; k++) {  
   b4706:	9b00      	ldr	r3, [sp, #0]
   b4708:	3501      	adds	r5, #1
   b470a:	3308      	adds	r3, #8
   b470c:	2d03      	cmp	r5, #3
   b470e:	9300      	str	r3, [sp, #0]
   b4710:	f47f af4b 	bne.w	b45aa <_Z4Pathv+0x22>
}    
   b4714:	b003      	add	sp, #12
   b4716:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
      people_counter_array();   
   b471a:	f7ff bed3 	b.w	b44c4 <_Z20people_counter_arrayv>
   b471e:	bf00      	nop
   b4720:	2003e644 	.word	0x2003e644
   b4724:	2003e660 	.word	0x2003e660
   b4728:	2003e624 	.word	0x2003e624
   b472c:	2003e5f8 	.word	0x2003e5f8
   b4730:	2003e648 	.word	0x2003e648
   b4734:	2003e62c 	.word	0x2003e62c
   b4738:	2003e614 	.word	0x2003e614
   b473c:	2003e668 	.word	0x2003e668
   b4740:	2003e65c 	.word	0x2003e65c
   b4744:	2003e664 	.word	0x2003e664
   b4748:	2003e610 	.word	0x2003e610
   b474c:	2003e640 	.word	0x2003e640

000b4750 <_Z13measure_zonesv>:
void measure_zones() {
   b4750:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    distance = 0;
   b4754:	4f4e      	ldr	r7, [pc, #312]	; (b4890 <_Z13measure_zonesv+0x140>)
    sum_zone_0 = 0;
   b4756:	f8df 8158 	ldr.w	r8, [pc, #344]	; b48b0 <_Z13measure_zonesv+0x160>
    sum_zone_1 = 0;
   b475a:	f8df 9158 	ldr.w	r9, [pc, #344]	; b48b4 <_Z13measure_zonesv+0x164>
    number_attempts = 1;
   b475e:	f8df a158 	ldr.w	sl, [pc, #344]	; b48b8 <_Z13measure_zonesv+0x168>
    Zone = 0;
   b4762:	4e4c      	ldr	r6, [pc, #304]	; (b4894 <_Z13measure_zonesv+0x144>)
      distanceSensor.setIntermeasurementPeriod(35);
   b4764:	4c4c      	ldr	r4, [pc, #304]	; (b4898 <_Z13measure_zonesv+0x148>)
      distanceSensor.setROI(ROI_height, ROI_width, center[0]);  // first value: height of the zone, second value: width of the zone
   b4766:	f8df b154 	ldr.w	fp, [pc, #340]	; b48bc <_Z13measure_zonesv+0x16c>
    distance = 0;
   b476a:	2500      	movs	r5, #0
    number_attempts = 1;
   b476c:	2301      	movs	r3, #1
    distance = 0;
   b476e:	803d      	strh	r5, [r7, #0]
    sum_zone_0 = 0;
   b4770:	f8c8 5000 	str.w	r5, [r8]
    sum_zone_1 = 0;
   b4774:	f8c9 5000 	str.w	r5, [r9]
    number_attempts = 1;
   b4778:	f8ca 3000 	str.w	r3, [sl]
    Zone = 0;
   b477c:	6035      	str	r5, [r6, #0]
      distanceSensor.setIntermeasurementPeriod(35);
   b477e:	2123      	movs	r1, #35	; 0x23
   b4780:	4620      	mov	r0, r4
   b4782:	f001 fa34 	bl	b5bee <_ZN10SFEVL53L1X25setIntermeasurementPeriodEt>
      distanceSensor.setDistanceModeLong();
   b4786:	4620      	mov	r0, r4
   b4788:	f001 fa2d 	bl	b5be6 <_ZN10SFEVL53L1X19setDistanceModeLongEv>
      distanceSensor.setROI(ROI_height, ROI_width, center[0]);  // first value: height of the zone, second value: width of the zone
   b478c:	4a43      	ldr	r2, [pc, #268]	; (b489c <_Z13measure_zonesv+0x14c>)
   b478e:	4944      	ldr	r1, [pc, #272]	; (b48a0 <_Z13measure_zonesv+0x150>)
   b4790:	f89b 3000 	ldrb.w	r3, [fp]
   b4794:	7812      	ldrb	r2, [r2, #0]
   b4796:	7809      	ldrb	r1, [r1, #0]
   b4798:	4620      	mov	r0, r4
   b479a:	f001 fa36 	bl	b5c0a <_ZN10SFEVL53L1X6setROIEhhh>
      delay(25);
   b479e:	2019      	movs	r0, #25
   b47a0:	f001 ff64 	bl	b666c <delay>
      distanceSensor.setTimingBudgetInMs(33);
   b47a4:	2121      	movs	r1, #33	; 0x21
   b47a6:	4620      	mov	r0, r4
   b47a8:	f001 fa1a 	bl	b5be0 <_ZN10SFEVL53L1X19setTimingBudgetInMsEt>
      distanceSensor.startRanging();                            //Write configuration bytes to initiate measurement
   b47ac:	4620      	mov	r0, r4
   b47ae:	f001 fa11 	bl	b5bd4 <_ZN10SFEVL53L1X12startRangingEv>
      distance = distanceSensor.getDistance();                  //Get the result of the measurement from the sensor
   b47b2:	4620      	mov	r0, r4
   b47b4:	f001 fa1e 	bl	b5bf4 <_ZN10SFEVL53L1X11getDistanceEv>
   b47b8:	8038      	strh	r0, [r7, #0]
      distanceSensor.stopRanging();      
   b47ba:	4620      	mov	r0, r4
   b47bc:	f001 fa0d 	bl	b5bda <_ZN10SFEVL53L1X11stopRangingEv>
      sum_zone_0 = sum_zone_0 + distance;
   b47c0:	f8d8 2000 	ldr.w	r2, [r8]
   b47c4:	883b      	ldrh	r3, [r7, #0]
   b47c6:	4413      	add	r3, r2
   b47c8:	f8c8 3000 	str.w	r3, [r8]
      Zone++;
   b47cc:	6833      	ldr	r3, [r6, #0]
      Zone = Zone%2;
   b47ce:	3301      	adds	r3, #1
   b47d0:	f003 0301 	and.w	r3, r3, #1
   b47d4:	bf48      	it	mi
   b47d6:	425b      	negmi	r3, r3
      distanceSensor.setIntermeasurementPeriod(35);
   b47d8:	2123      	movs	r1, #35	; 0x23
   b47da:	4620      	mov	r0, r4
      Zone = Zone%2;
   b47dc:	6033      	str	r3, [r6, #0]
      distanceSensor.setIntermeasurementPeriod(35);
   b47de:	f001 fa06 	bl	b5bee <_ZN10SFEVL53L1X25setIntermeasurementPeriodEt>
      distanceSensor.setDistanceModeLong();
   b47e2:	4620      	mov	r0, r4
   b47e4:	f001 f9ff 	bl	b5be6 <_ZN10SFEVL53L1X19setDistanceModeLongEv>
      distanceSensor.setROI(ROI_height, ROI_width, center[1]);  // first value: height of the zone, second value: width of the zone
   b47e8:	4a2c      	ldr	r2, [pc, #176]	; (b489c <_Z13measure_zonesv+0x14c>)
   b47ea:	492d      	ldr	r1, [pc, #180]	; (b48a0 <_Z13measure_zonesv+0x150>)
   b47ec:	f89b 3004 	ldrb.w	r3, [fp, #4]
   b47f0:	7812      	ldrb	r2, [r2, #0]
   b47f2:	7809      	ldrb	r1, [r1, #0]
   b47f4:	4620      	mov	r0, r4
   b47f6:	f001 fa08 	bl	b5c0a <_ZN10SFEVL53L1X6setROIEhhh>
      delay(25);
   b47fa:	2019      	movs	r0, #25
   b47fc:	f001 ff36 	bl	b666c <delay>
      distanceSensor.setTimingBudgetInMs(33);
   b4800:	2121      	movs	r1, #33	; 0x21
   b4802:	4620      	mov	r0, r4
   b4804:	f001 f9ec 	bl	b5be0 <_ZN10SFEVL53L1X19setTimingBudgetInMsEt>
      distanceSensor.startRanging();                            //Write configuration bytes to initiate measurement
   b4808:	4620      	mov	r0, r4
   b480a:	f001 f9e3 	bl	b5bd4 <_ZN10SFEVL53L1X12startRangingEv>
      distance = distanceSensor.getDistance();                  //Get the result of the measurement from the sensor
   b480e:	4620      	mov	r0, r4
   b4810:	f001 f9f0 	bl	b5bf4 <_ZN10SFEVL53L1X11getDistanceEv>
   b4814:	8038      	strh	r0, [r7, #0]
      distanceSensor.stopRanging();      
   b4816:	4620      	mov	r0, r4
   b4818:	f001 f9df 	bl	b5bda <_ZN10SFEVL53L1X11stopRangingEv>
      sum_zone_1 = sum_zone_1 + distance;
   b481c:	f8d9 3000 	ldr.w	r3, [r9]
   b4820:	883a      	ldrh	r2, [r7, #0]
   b4822:	441a      	add	r2, r3
      Zone++;
   b4824:	6833      	ldr	r3, [r6, #0]
      sum_zone_1 = sum_zone_1 + distance;
   b4826:	f8c9 2000 	str.w	r2, [r9]
      Zone = Zone%2;
   b482a:	3301      	adds	r3, #1
   b482c:	f003 0301 	and.w	r3, r3, #1
   b4830:	bf48      	it	mi
   b4832:	425b      	negmi	r3, r3
   b4834:	6033      	str	r3, [r6, #0]
    for (int i=0; i<number_attempts; i++) {
   b4836:	f8da 3000 	ldr.w	r3, [sl]
   b483a:	3501      	adds	r5, #1
   b483c:	42ab      	cmp	r3, r5
   b483e:	dc9e      	bgt.n	b477e <_Z13measure_zonesv+0x2e>
    if ((sum_zone_0 <= (calibrated_zone_0 * DIST_THRESHOLD_MAX)) || (sum_zone_1 <= (calibrated_zone_1 * DIST_THRESHOLD_MAX))) {
   b4840:	4b18      	ldr	r3, [pc, #96]	; (b48a4 <_Z13measure_zonesv+0x154>)
   b4842:	edd8 6a00 	vldr	s13, [r8]
   b4846:	edd3 7a00 	vldr	s15, [r3]
   b484a:	ed9f 6a17 	vldr	s12, [pc, #92]	; b48a8 <_Z13measure_zonesv+0x158>
   b484e:	eef8 6ae6 	vcvt.f32.s32	s13, s13
   b4852:	ee67 7a86 	vmul.f32	s15, s15, s12
   b4856:	eef4 6ae7 	vcmpe.f32	s13, s15
   b485a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   b485e:	d90d      	bls.n	b487c <_Z13measure_zonesv+0x12c>
   b4860:	4b12      	ldr	r3, [pc, #72]	; (b48ac <_Z13measure_zonesv+0x15c>)
   b4862:	ee07 2a90 	vmov	s15, r2
   b4866:	ed93 7a00 	vldr	s14, [r3]
   b486a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
   b486e:	ee27 7a06 	vmul.f32	s14, s14, s12
   b4872:	eef4 7ac7 	vcmpe.f32	s15, s14
   b4876:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   b487a:	d806      	bhi.n	b488a <_Z13measure_zonesv+0x13a>
        delay(10);
   b487c:	200a      	movs	r0, #10
   b487e:	f001 fef5 	bl	b666c <delay>
}
   b4882:	e8bd 4ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
        Path();
   b4886:	f7ff be7f 	b.w	b4588 <_Z4Pathv>
}
   b488a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   b488e:	bf00      	nop
   b4890:	2003e644 	.word	0x2003e644
   b4894:	2003e624 	.word	0x2003e624
   b4898:	2003e648 	.word	0x2003e648
   b489c:	2003e614 	.word	0x2003e614
   b48a0:	2003e610 	.word	0x2003e610
   b48a4:	2003e638 	.word	0x2003e638
   b48a8:	00000000 	.word	0x00000000
   b48ac:	2003e63c 	.word	0x2003e63c
   b48b0:	2003e660 	.word	0x2003e660
   b48b4:	2003e664 	.word	0x2003e664
   b48b8:	2003e65c 	.word	0x2003e65c
   b48bc:	2003e62c 	.word	0x2003e62c

000b48c0 <loop>:
  measure_zones();
   b48c0:	f7ff bf46 	b.w	b4750 <_Z13measure_zonesv>

000b48c4 <_GLOBAL__sub_I_distanceSensor>:
        val_(val) {
   b48c4:	4b0b      	ldr	r3, [pc, #44]	; (b48f4 <_GLOBAL__sub_I_distanceSensor+0x30>)
   b48c6:	2200      	movs	r2, #0
}
   b48c8:	b510      	push	{r4, lr}
   b48ca:	701a      	strb	r2, [r3, #0]
   b48cc:	4b0a      	ldr	r3, [pc, #40]	; (b48f8 <_GLOBAL__sub_I_distanceSensor+0x34>)
   b48ce:	2201      	movs	r2, #1
   b48d0:	701a      	strb	r2, [r3, #0]
SFEVL53L1X distanceSensor(Wire);
   b48d2:	f003 f883 	bl	b79dc <_Z19__fetch_global_Wirev>
   b48d6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   b48da:	4601      	mov	r1, r0
   b48dc:	461a      	mov	r2, r3
   b48de:	4807      	ldr	r0, [pc, #28]	; (b48fc <_GLOBAL__sub_I_distanceSensor+0x38>)
   b48e0:	f001 f946 	bl	b5b70 <_ZN10SFEVL53L1XC1ER7TwoWireii>
}
   b48e4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
Adafruit_ST7789 tft = Adafruit_ST7789(TFT_CS, TFT_DC, TFT_RST);   // Hardware SPI
   b48e8:	4805      	ldr	r0, [pc, #20]	; (b4900 <_GLOBAL__sub_I_distanceSensor+0x3c>)
   b48ea:	2306      	movs	r3, #6
   b48ec:	2205      	movs	r2, #5
   b48ee:	210e      	movs	r1, #14
   b48f0:	f000 bff8 	b.w	b58e4 <_ZN15Adafruit_ST7789C1Eaaa>
   b48f4:	2003e628 	.word	0x2003e628
   b48f8:	2003e634 	.word	0x2003e634
   b48fc:	2003e648 	.word	0x2003e648
   b4900:	2003e668 	.word	0x2003e668

000b4904 <_ZN12Adafruit_GFX9writeLineEsssst>:
    @param    y1  End point y coordinate
    @param    color 16-bit 5-6-5 Color to draw with
*/
/**************************************************************************/
void Adafruit_GFX::writeLine(int16_t x0, int16_t y0, int16_t x1, int16_t y1,
        uint16_t color) {
   b4904:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b4908:	b085      	sub	sp, #20
   b490a:	461f      	mov	r7, r3
   b490c:	f9bd 8038 	ldrsh.w	r8, [sp, #56]	; 0x38
   b4910:	f8bd 303c 	ldrh.w	r3, [sp, #60]	; 0x3c
#if defined(ESP8266)
    yield();
#endif
    int16_t steep = abs(y1 - y0) > abs(x1 - x0);
   b4914:	eba8 0902 	sub.w	r9, r8, r2
   b4918:	eba7 0a01 	sub.w	sl, r7, r1
   b491c:	f1b9 0f00 	cmp.w	r9, #0
   b4920:	bfb8      	it	lt
   b4922:	f1c9 0900 	rsblt	r9, r9, #0
   b4926:	f1ba 0f00 	cmp.w	sl, #0
   b492a:	bfb8      	it	lt
   b492c:	f1ca 0a00 	rsblt	sl, sl, #0
    if (steep) {
   b4930:	45d1      	cmp	r9, sl
        uint16_t color) {
   b4932:	4683      	mov	fp, r0
   b4934:	460c      	mov	r4, r1
   b4936:	4615      	mov	r5, r2
    if (steep) {
   b4938:	dd04      	ble.n	b4944 <_ZN12Adafruit_GFX9writeLineEsssst+0x40>
   b493a:	463a      	mov	r2, r7
        _swap_int16_t(x0, y0);
   b493c:	462c      	mov	r4, r5
        _swap_int16_t(x1, y1);
   b493e:	4647      	mov	r7, r8
        _swap_int16_t(x0, y0);
   b4940:	460d      	mov	r5, r1
        _swap_int16_t(x1, y1);
   b4942:	4690      	mov	r8, r2
    }

    if (x0 > x1) {
   b4944:	42bc      	cmp	r4, r7
   b4946:	dd05      	ble.n	b4954 <_ZN12Adafruit_GFX9writeLineEsssst+0x50>
   b4948:	462a      	mov	r2, r5
        _swap_int16_t(x0, x1);
        _swap_int16_t(y0, y1);
   b494a:	4645      	mov	r5, r8
   b494c:	4690      	mov	r8, r2
    if (x0 > x1) {
   b494e:	4622      	mov	r2, r4
   b4950:	463c      	mov	r4, r7
   b4952:	4617      	mov	r7, r2
    }

    int16_t dx, dy;
    dx = x1 - x0;
   b4954:	1b3e      	subs	r6, r7, r4
   b4956:	b2b2      	uxth	r2, r6
   b4958:	9200      	str	r2, [sp, #0]
    dy = abs(y1 - y0);
   b495a:	eba8 0205 	sub.w	r2, r8, r5
   b495e:	ea82 71e2 	eor.w	r1, r2, r2, asr #31
   b4962:	eba1 71e2 	sub.w	r1, r1, r2, asr #31

    int16_t err = dx / 2;
   b4966:	f3c6 32c0 	ubfx	r2, r6, #15, #1
   b496a:	fa02 f686 	sxtah	r6, r2, r6
    int16_t ystep;

    if (y0 < y1) {
        ystep = 1;
    } else {
        ystep = -1;
   b496e:	4545      	cmp	r5, r8
   b4970:	bfb4      	ite	lt
   b4972:	2201      	movlt	r2, #1
   b4974:	f04f 32ff 	movge.w	r2, #4294967295	; 0xffffffff
    dy = abs(y1 - y0);
   b4978:	9101      	str	r1, [sp, #4]
    int16_t err = dx / 2;
   b497a:	1076      	asrs	r6, r6, #1
        ystep = -1;
   b497c:	9202      	str	r2, [sp, #8]
    }

    for (; x0<=x1; x0++) {
   b497e:	42bc      	cmp	r4, r7
   b4980:	dc1c      	bgt.n	b49bc <_ZN12Adafruit_GFX9writeLineEsssst+0xb8>
        if (steep) {
            writePixel(y0, x0, color);
   b4982:	f8db 2000 	ldr.w	r2, [fp]
   b4986:	9303      	str	r3, [sp, #12]
        if (steep) {
   b4988:	45d1      	cmp	r9, sl
            writePixel(y0, x0, color);
   b498a:	f8d2 8018 	ldr.w	r8, [r2, #24]
   b498e:	bfc7      	ittee	gt
   b4990:	4629      	movgt	r1, r5
   b4992:	4622      	movgt	r2, r4
        } else {
            writePixel(x0, y0, color);
   b4994:	462a      	movle	r2, r5
   b4996:	4621      	movle	r1, r4
   b4998:	4658      	mov	r0, fp
   b499a:	47c0      	blx	r8
        }
        err -= dy;
   b499c:	9a01      	ldr	r2, [sp, #4]
            writePixel(x0, y0, color);
   b499e:	9b03      	ldr	r3, [sp, #12]
        err -= dy;
   b49a0:	1ab6      	subs	r6, r6, r2
   b49a2:	b2b1      	uxth	r1, r6
   b49a4:	b236      	sxth	r6, r6
        if (err < 0) {
   b49a6:	2e00      	cmp	r6, #0
   b49a8:	da05      	bge.n	b49b6 <_ZN12Adafruit_GFX9writeLineEsssst+0xb2>
            y0 += ystep;
   b49aa:	9a02      	ldr	r2, [sp, #8]
   b49ac:	4415      	add	r5, r2
            err += dx;
   b49ae:	9a00      	ldr	r2, [sp, #0]
   b49b0:	1856      	adds	r6, r2, r1
            y0 += ystep;
   b49b2:	b22d      	sxth	r5, r5
            err += dx;
   b49b4:	b236      	sxth	r6, r6
    for (; x0<=x1; x0++) {
   b49b6:	3401      	adds	r4, #1
   b49b8:	b224      	sxth	r4, r4
   b49ba:	e7e0      	b.n	b497e <_ZN12Adafruit_GFX9writeLineEsssst+0x7a>
        }
    }
}
   b49bc:	b005      	add	sp, #20
   b49be:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

000b49c2 <_ZN12Adafruit_GFX10startWriteEv>:
/*!
   @brief    Start a display-writing routine, overwrite in subclasses.
*/
/**************************************************************************/
void Adafruit_GFX::startWrite(){
}
   b49c2:	4770      	bx	lr

000b49c4 <_ZN12Adafruit_GFX10writePixelEsst>:
    @param   x   x coordinate
    @param   y   y coordinate
   @param    color 16-bit 5-6-5 Color to fill with
*/
/**************************************************************************/
void Adafruit_GFX::writePixel(int16_t x, int16_t y, uint16_t color){
   b49c4:	b410      	push	{r4}
    drawPixel(x, y, color);
   b49c6:	6804      	ldr	r4, [r0, #0]
   b49c8:	6924      	ldr	r4, [r4, #16]
   b49ca:	46a4      	mov	ip, r4
}
   b49cc:	f85d 4b04 	ldr.w	r4, [sp], #4
    drawPixel(x, y, color);
   b49d0:	4760      	bx	ip

000b49d2 <_ZN12Adafruit_GFX14writeFastVLineEssst>:
    @param    h   Height in pixels
   @param    color 16-bit 5-6-5 Color to fill with
*/
/**************************************************************************/
void Adafruit_GFX::writeFastVLine(int16_t x, int16_t y,
        int16_t h, uint16_t color) {
   b49d2:	b430      	push	{r4, r5}
    // Overwrite in subclasses if startWrite is defined!
    // Can be just writeLine(x, y, x, y+h-1, color);
    // or writeFillRect(x, y, 1, h, color);
    drawFastVLine(x, y, h, color);
   b49d4:	6804      	ldr	r4, [r0, #0]
        int16_t h, uint16_t color) {
   b49d6:	f8bd 5008 	ldrh.w	r5, [sp, #8]
    drawFastVLine(x, y, h, color);
   b49da:	9502      	str	r5, [sp, #8]
   b49dc:	6ba4      	ldr	r4, [r4, #56]	; 0x38
   b49de:	46a4      	mov	ip, r4
}
   b49e0:	bc30      	pop	{r4, r5}
    drawFastVLine(x, y, h, color);
   b49e2:	4760      	bx	ip

000b49e4 <_ZN12Adafruit_GFX14writeFastHLineEssst>:
    @param    w   Width in pixels
   @param    color 16-bit 5-6-5 Color to fill with
*/
/**************************************************************************/
void Adafruit_GFX::writeFastHLine(int16_t x, int16_t y,
        int16_t w, uint16_t color) {
   b49e4:	b430      	push	{r4, r5}
    // Overwrite in subclasses if startWrite is defined!
    // Example: writeLine(x, y, x+w-1, y, color);
    // or writeFillRect(x, y, w, 1, color);
    drawFastHLine(x, y, w, color);
   b49e6:	6804      	ldr	r4, [r0, #0]
        int16_t w, uint16_t color) {
   b49e8:	f8bd 5008 	ldrh.w	r5, [sp, #8]
    drawFastHLine(x, y, w, color);
   b49ec:	9502      	str	r5, [sp, #8]
   b49ee:	6be4      	ldr	r4, [r4, #60]	; 0x3c
   b49f0:	46a4      	mov	ip, r4
}
   b49f2:	bc30      	pop	{r4, r5}
    drawFastHLine(x, y, w, color);
   b49f4:	4760      	bx	ip

000b49f6 <_ZN12Adafruit_GFX13writeFillRectEsssst>:
    @param    h   Height in pixels
   @param    color 16-bit 5-6-5 Color to fill with
*/
/**************************************************************************/
void Adafruit_GFX::writeFillRect(int16_t x, int16_t y, int16_t w, int16_t h,
        uint16_t color) {
   b49f6:	b470      	push	{r4, r5, r6}
   b49f8:	f9bd 500c 	ldrsh.w	r5, [sp, #12]
   b49fc:	f8bd 6010 	ldrh.w	r6, [sp, #16]
    // Overwrite in subclasses if desired!
    fillRect(x,y,w,h,color);
   b4a00:	6804      	ldr	r4, [r0, #0]
   b4a02:	e9cd 5603 	strd	r5, r6, [sp, #12]
   b4a06:	6c24      	ldr	r4, [r4, #64]	; 0x40
   b4a08:	46a4      	mov	ip, r4
}
   b4a0a:	bc70      	pop	{r4, r5, r6}
    fillRect(x,y,w,h,color);
   b4a0c:	4760      	bx	ip

000b4a0e <_ZN12Adafruit_GFX13drawFastVLineEssst>:
    @param    h   Height in pixels
   @param    color 16-bit 5-6-5 Color to fill with
*/
/**************************************************************************/
void Adafruit_GFX::drawFastVLine(int16_t x, int16_t y,
        int16_t h, uint16_t color) {
   b4a0e:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   b4a12:	461c      	mov	r4, r3
    startWrite();
   b4a14:	6803      	ldr	r3, [r0, #0]
        int16_t h, uint16_t color) {
   b4a16:	f8bd 8020 	ldrh.w	r8, [sp, #32]
    startWrite();
   b4a1a:	695b      	ldr	r3, [r3, #20]
        int16_t h, uint16_t color) {
   b4a1c:	4605      	mov	r5, r0
   b4a1e:	4616      	mov	r6, r2
    writeLine(x, y, x, y+h-1, color);
   b4a20:	3c01      	subs	r4, #1
   b4a22:	4434      	add	r4, r6
        int16_t h, uint16_t color) {
   b4a24:	460f      	mov	r7, r1
    writeLine(x, y, x, y+h-1, color);
   b4a26:	b224      	sxth	r4, r4
    startWrite();
   b4a28:	4798      	blx	r3
    writeLine(x, y, x, y+h-1, color);
   b4a2a:	682b      	ldr	r3, [r5, #0]
   b4a2c:	f8cd 8004 	str.w	r8, [sp, #4]
   b4a30:	9400      	str	r4, [sp, #0]
   b4a32:	6a9c      	ldr	r4, [r3, #40]	; 0x28
   b4a34:	4628      	mov	r0, r5
   b4a36:	463b      	mov	r3, r7
   b4a38:	4632      	mov	r2, r6
   b4a3a:	4639      	mov	r1, r7
   b4a3c:	47a0      	blx	r4
    endWrite();
   b4a3e:	682b      	ldr	r3, [r5, #0]
   b4a40:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b4a42:	4628      	mov	r0, r5
}
   b4a44:	b002      	add	sp, #8
   b4a46:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    endWrite();
   b4a4a:	4718      	bx	r3

000b4a4c <_ZN12Adafruit_GFX13drawFastHLineEssst>:
    @param    w   Width in pixels
   @param    color 16-bit 5-6-5 Color to fill with
*/
/**************************************************************************/
void Adafruit_GFX::drawFastHLine(int16_t x, int16_t y,
        int16_t w, uint16_t color) {
   b4a4c:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   b4a50:	461d      	mov	r5, r3
    startWrite();
   b4a52:	6803      	ldr	r3, [r0, #0]
        int16_t w, uint16_t color) {
   b4a54:	f8bd 8020 	ldrh.w	r8, [sp, #32]
    startWrite();
   b4a58:	695b      	ldr	r3, [r3, #20]
        int16_t w, uint16_t color) {
   b4a5a:	4604      	mov	r4, r0
   b4a5c:	4617      	mov	r7, r2
   b4a5e:	460e      	mov	r6, r1
    startWrite();
   b4a60:	4798      	blx	r3
    writeLine(x, y, x+w-1, y, color);
   b4a62:	e9cd 7800 	strd	r7, r8, [sp]
   b4a66:	6822      	ldr	r2, [r4, #0]
   b4a68:	1e6b      	subs	r3, r5, #1
   b4a6a:	4433      	add	r3, r6
   b4a6c:	6a95      	ldr	r5, [r2, #40]	; 0x28
   b4a6e:	4620      	mov	r0, r4
   b4a70:	b21b      	sxth	r3, r3
   b4a72:	463a      	mov	r2, r7
   b4a74:	4631      	mov	r1, r6
   b4a76:	47a8      	blx	r5
    endWrite();
   b4a78:	6823      	ldr	r3, [r4, #0]
   b4a7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b4a7c:	4620      	mov	r0, r4
}
   b4a7e:	b002      	add	sp, #8
   b4a80:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    endWrite();
   b4a84:	4718      	bx	r3

000b4a86 <_ZN12Adafruit_GFX8fillRectEsssst>:
    @param    h   Height in pixels
   @param    color 16-bit 5-6-5 Color to fill with
*/
/**************************************************************************/
void Adafruit_GFX::fillRect(int16_t x, int16_t y, int16_t w, int16_t h,
        uint16_t color) {
   b4a86:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
   b4a8a:	461e      	mov	r6, r3
    startWrite();
   b4a8c:	6803      	ldr	r3, [r0, #0]
        uint16_t color) {
   b4a8e:	f9bd 9028 	ldrsh.w	r9, [sp, #40]	; 0x28
    startWrite();
   b4a92:	695b      	ldr	r3, [r3, #20]
        uint16_t color) {
   b4a94:	f8bd 802c 	ldrh.w	r8, [sp, #44]	; 0x2c
   b4a98:	460c      	mov	r4, r1
   b4a9a:	4605      	mov	r5, r0
   b4a9c:	4617      	mov	r7, r2
    startWrite();
   b4a9e:	4798      	blx	r3
    for (int16_t i=x; i<x+w; i++) {
   b4aa0:	4426      	add	r6, r4
   b4aa2:	42b4      	cmp	r4, r6
        writeFastVLine(i, y, h, color);
   b4aa4:	682b      	ldr	r3, [r5, #0]
    for (int16_t i=x; i<x+w; i++) {
   b4aa6:	da0b      	bge.n	b4ac0 <_ZN12Adafruit_GFX8fillRectEsssst+0x3a>
        writeFastVLine(i, y, h, color);
   b4aa8:	f8cd 8000 	str.w	r8, [sp]
   b4aac:	f8d3 a020 	ldr.w	sl, [r3, #32]
   b4ab0:	4621      	mov	r1, r4
   b4ab2:	464b      	mov	r3, r9
   b4ab4:	463a      	mov	r2, r7
   b4ab6:	4628      	mov	r0, r5
   b4ab8:	3401      	adds	r4, #1
   b4aba:	47d0      	blx	sl
    for (int16_t i=x; i<x+w; i++) {
   b4abc:	b224      	sxth	r4, r4
   b4abe:	e7f0      	b.n	b4aa2 <_ZN12Adafruit_GFX8fillRectEsssst+0x1c>
    }
    endWrite();
   b4ac0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b4ac2:	4628      	mov	r0, r5
}
   b4ac4:	b002      	add	sp, #8
   b4ac6:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    endWrite();
   b4aca:	4718      	bx	r3

000b4acc <_ZN12Adafruit_GFX10fillScreenEt>:
/*!
   @brief    Fill the screen completely with one color. Update in subclasses if desired!
    @param    color 16-bit 5-6-5 Color to fill with
*/
/**************************************************************************/
void Adafruit_GFX::fillScreen(uint16_t color) {
   b4acc:	b513      	push	{r0, r1, r4, lr}
    fillRect(0, 0, _width, _height, color);
   b4ace:	6802      	ldr	r2, [r0, #0]
   b4ad0:	9101      	str	r1, [sp, #4]
   b4ad2:	f9b0 100e 	ldrsh.w	r1, [r0, #14]
   b4ad6:	9100      	str	r1, [sp, #0]
   b4ad8:	6c14      	ldr	r4, [r2, #64]	; 0x40
   b4ada:	f9b0 300c 	ldrsh.w	r3, [r0, #12]
   b4ade:	2200      	movs	r2, #0
   b4ae0:	4611      	mov	r1, r2
   b4ae2:	47a0      	blx	r4
}
   b4ae4:	b002      	add	sp, #8
   b4ae6:	bd10      	pop	{r4, pc}

000b4ae8 <_ZN12Adafruit_GFX8drawLineEsssst>:
    @param    y1  End point y coordinate
    @param    color 16-bit 5-6-5 Color to draw with
*/
/**************************************************************************/
void Adafruit_GFX::drawLine(int16_t x0, int16_t y0, int16_t x1, int16_t y1,
        uint16_t color) {
   b4ae8:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
    // Update in subclasses if desired!
    if(x0 == x1){
   b4aec:	4299      	cmp	r1, r3
        uint16_t color) {
   b4aee:	4616      	mov	r6, r2
   b4af0:	f9bd 7028 	ldrsh.w	r7, [sp, #40]	; 0x28
   b4af4:	f8bd 902c 	ldrh.w	r9, [sp, #44]	; 0x2c
        if(y0 > y1) _swap_int16_t(y0, y1);
        drawFastVLine(x0, y0, y1 - y0 + 1, color);
   b4af8:	6802      	ldr	r2, [r0, #0]
        uint16_t color) {
   b4afa:	4680      	mov	r8, r0
   b4afc:	460d      	mov	r5, r1
   b4afe:	461c      	mov	r4, r3
    if(x0 == x1){
   b4b00:	d113      	bne.n	b4b2a <_ZN12Adafruit_GFX8drawLineEsssst+0x42>
        if(y0 > y1) _swap_int16_t(y0, y1);
   b4b02:	42be      	cmp	r6, r7
   b4b04:	bfc8      	it	gt
   b4b06:	4633      	movgt	r3, r6
        drawFastVLine(x0, y0, y1 - y0 + 1, color);
   b4b08:	f8cd 9028 	str.w	r9, [sp, #40]	; 0x28
        if(y0 > y1) _swap_int16_t(y0, y1);
   b4b0c:	bfc4      	itt	gt
   b4b0e:	463e      	movgt	r6, r7
   b4b10:	461f      	movgt	r7, r3
        drawFastVLine(x0, y0, y1 - y0 + 1, color);
   b4b12:	1c7b      	adds	r3, r7, #1
   b4b14:	6b94      	ldr	r4, [r2, #56]	; 0x38
   b4b16:	1b9b      	subs	r3, r3, r6
    } else if(y0 == y1){
        if(x0 > x1) _swap_int16_t(x0, x1);
        drawFastHLine(x0, y0, x1 - x0 + 1, color);
   b4b18:	b21b      	sxth	r3, r3
   b4b1a:	4632      	mov	r2, r6
   b4b1c:	4629      	mov	r1, r5
   b4b1e:	4640      	mov	r0, r8
   b4b20:	46a4      	mov	ip, r4
    } else {
        startWrite();
        writeLine(x0, y0, x1, y1, color);
        endWrite();
    }
}
   b4b22:	b003      	add	sp, #12
   b4b24:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
        drawFastHLine(x0, y0, x1 - x0 + 1, color);
   b4b28:	4760      	bx	ip
    } else if(y0 == y1){
   b4b2a:	42be      	cmp	r6, r7
   b4b2c:	d10a      	bne.n	b4b44 <_ZN12Adafruit_GFX8drawLineEsssst+0x5c>
        if(x0 > x1) _swap_int16_t(x0, x1);
   b4b2e:	4299      	cmp	r1, r3
   b4b30:	bfc2      	ittt	gt
   b4b32:	460b      	movgt	r3, r1
   b4b34:	4625      	movgt	r5, r4
   b4b36:	461c      	movgt	r4, r3
        drawFastHLine(x0, y0, x1 - x0 + 1, color);
   b4b38:	1c63      	adds	r3, r4, #1
   b4b3a:	f8cd 9028 	str.w	r9, [sp, #40]	; 0x28
   b4b3e:	6bd4      	ldr	r4, [r2, #60]	; 0x3c
   b4b40:	1b5b      	subs	r3, r3, r5
   b4b42:	e7e9      	b.n	b4b18 <_ZN12Adafruit_GFX8drawLineEsssst+0x30>
        startWrite();
   b4b44:	6953      	ldr	r3, [r2, #20]
   b4b46:	4798      	blx	r3
        writeLine(x0, y0, x1, y1, color);
   b4b48:	e9cd 7900 	strd	r7, r9, [sp]
   b4b4c:	f8d8 3000 	ldr.w	r3, [r8]
   b4b50:	4640      	mov	r0, r8
   b4b52:	6a9f      	ldr	r7, [r3, #40]	; 0x28
   b4b54:	4632      	mov	r2, r6
   b4b56:	4623      	mov	r3, r4
   b4b58:	4629      	mov	r1, r5
   b4b5a:	47b8      	blx	r7
        endWrite();
   b4b5c:	f8d8 3000 	ldr.w	r3, [r8]
   b4b60:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b4b62:	4640      	mov	r0, r8
}
   b4b64:	b003      	add	sp, #12
   b4b66:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
        endWrite();
   b4b6a:	4718      	bx	r3

000b4b6c <_ZN12Adafruit_GFX8drawRectEsssst>:
    @param    h   Height in pixels
    @param    color 16-bit 5-6-5 Color to draw with
*/
/**************************************************************************/
void Adafruit_GFX::drawRect(int16_t x, int16_t y, int16_t w, int16_t h,
        uint16_t color) {
   b4b6c:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
   b4b70:	461d      	mov	r5, r3
    startWrite();
   b4b72:	6803      	ldr	r3, [r0, #0]
        uint16_t color) {
   b4b74:	f8bd 802c 	ldrh.w	r8, [sp, #44]	; 0x2c
    startWrite();
   b4b78:	695b      	ldr	r3, [r3, #20]
        uint16_t color) {
   b4b7a:	f9bd 9028 	ldrsh.w	r9, [sp, #40]	; 0x28
   b4b7e:	4604      	mov	r4, r0
   b4b80:	460f      	mov	r7, r1
   b4b82:	4616      	mov	r6, r2
    startWrite();
   b4b84:	4798      	blx	r3
    writeFastHLine(x, y, w, color);
   b4b86:	6823      	ldr	r3, [r4, #0]
   b4b88:	f8cd 8000 	str.w	r8, [sp]
   b4b8c:	f8d3 a024 	ldr.w	sl, [r3, #36]	; 0x24
   b4b90:	4632      	mov	r2, r6
   b4b92:	462b      	mov	r3, r5
   b4b94:	4639      	mov	r1, r7
   b4b96:	4620      	mov	r0, r4
   b4b98:	47d0      	blx	sl
    writeFastHLine(x, y+h-1, w, color);
   b4b9a:	6823      	ldr	r3, [r4, #0]
   b4b9c:	f8cd 8000 	str.w	r8, [sp]
   b4ba0:	f109 32ff 	add.w	r2, r9, #4294967295	; 0xffffffff
   b4ba4:	4432      	add	r2, r6
   b4ba6:	f8d3 a024 	ldr.w	sl, [r3, #36]	; 0x24
   b4baa:	4639      	mov	r1, r7
   b4bac:	462b      	mov	r3, r5
   b4bae:	4620      	mov	r0, r4
   b4bb0:	b212      	sxth	r2, r2
   b4bb2:	47d0      	blx	sl
    writeFastVLine(x, y, h, color);
   b4bb4:	6823      	ldr	r3, [r4, #0]
   b4bb6:	f8cd 8000 	str.w	r8, [sp]
   b4bba:	f8d3 a020 	ldr.w	sl, [r3, #32]
   b4bbe:	4632      	mov	r2, r6
   b4bc0:	464b      	mov	r3, r9
   b4bc2:	4639      	mov	r1, r7
   b4bc4:	4620      	mov	r0, r4
   b4bc6:	47d0      	blx	sl
    writeFastVLine(x+w-1, y, h, color);
   b4bc8:	1e6b      	subs	r3, r5, #1
   b4bca:	19d9      	adds	r1, r3, r7
   b4bcc:	6823      	ldr	r3, [r4, #0]
   b4bce:	f8cd 8000 	str.w	r8, [sp]
   b4bd2:	6a1d      	ldr	r5, [r3, #32]
   b4bd4:	4620      	mov	r0, r4
   b4bd6:	464b      	mov	r3, r9
   b4bd8:	4632      	mov	r2, r6
   b4bda:	b209      	sxth	r1, r1
   b4bdc:	47a8      	blx	r5
    endWrite();
   b4bde:	6823      	ldr	r3, [r4, #0]
   b4be0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b4be2:	4620      	mov	r0, r4
}
   b4be4:	b002      	add	sp, #8
   b4be6:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    endWrite();
   b4bea:	4718      	bx	r3

000b4bec <_ZN12Adafruit_GFX13invertDisplayEb>:
    @param   i  True if you want to invert, false to make 'normal'
*/
/**************************************************************************/
void Adafruit_GFX::invertDisplay(boolean i) {
    // Do nothing, must be subclassed if supported by hardware
}
   b4bec:	4770      	bx	lr

000b4bee <_ZN12Adafruit_GFX11setRotationEh>:
    rotation = (x & 3);
   b4bee:	f001 0303 	and.w	r3, r1, #3
            _height = HEIGHT;
   b4bf2:	f9b0 200a 	ldrsh.w	r2, [r0, #10]
    rotation = (x & 3);
   b4bf6:	7683      	strb	r3, [r0, #26]
    switch(rotation) {
   b4bf8:	07c9      	lsls	r1, r1, #31
            _width  = WIDTH;
   b4bfa:	f9b0 3008 	ldrsh.w	r3, [r0, #8]
   b4bfe:	bf59      	ittee	pl
   b4c00:	8183      	strhpl	r3, [r0, #12]
            _height = HEIGHT;
   b4c02:	81c2      	strhpl	r2, [r0, #14]
            _width  = HEIGHT;
   b4c04:	8182      	strhmi	r2, [r0, #12]
            _height = WIDTH;
   b4c06:	81c3      	strhmi	r3, [r0, #14]
}
   b4c08:	4770      	bx	lr
	...

000b4c0c <_ZN12Adafruit_GFXC1Ess>:
Adafruit_GFX::Adafruit_GFX(int16_t w, int16_t h):
   b4c0c:	b530      	push	{r4, r5, lr}
WIDTH(w), HEIGHT(h)
   b4c0e:	8142      	strh	r2, [r0, #10]
    _height   = HEIGHT;
   b4c10:	81c2      	strh	r2, [r0, #14]
    textsize_x = textsize_y  = 1;
   b4c12:	4a07      	ldr	r2, [pc, #28]	; (b4c30 <_ZN12Adafruit_GFXC1Ess+0x24>)
WIDTH(w), HEIGHT(h)
   b4c14:	4d07      	ldr	r5, [pc, #28]	; (b4c34 <_ZN12Adafruit_GFXC1Ess+0x28>)
   b4c16:	8101      	strh	r1, [r0, #8]
    Print() : write_error(0) {}
   b4c18:	2400      	movs	r4, #0
    _width    = WIDTH;
   b4c1a:	8181      	strh	r1, [r0, #12]
    textsize_x = textsize_y  = 1;
   b4c1c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   b4c20:	e9c0 1205 	strd	r1, r2, [r0, #20]
   b4c24:	6044      	str	r4, [r0, #4]
WIDTH(w), HEIGHT(h)
   b4c26:	6005      	str	r5, [r0, #0]
    cursor_y  = cursor_x    = 0;
   b4c28:	6104      	str	r4, [r0, #16]
    _cp437    = false;
   b4c2a:	7704      	strb	r4, [r0, #28]
    gfxFont   = NULL;
   b4c2c:	6204      	str	r4, [r0, #32]
}
   b4c2e:	bd30      	pop	{r4, r5, pc}
   b4c30:	01000101 	.word	0x01000101
   b4c34:	000b8e10 	.word	0x000b8e10

000b4c38 <_ZN12Adafruit_GFX8drawCharEsshtthh>:
  uint16_t color, uint16_t bg, uint8_t size_x, uint8_t size_y) {
   b4c38:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b4c3c:	ed2d 8b02 	vpush	{d8}
   b4c40:	b091      	sub	sp, #68	; 0x44
   b4c42:	4616      	mov	r6, r2
    if(!gfxFont) { // 'Classic' built-in font
   b4c44:	6a02      	ldr	r2, [r0, #32]
  uint16_t color, uint16_t bg, uint8_t size_x, uint8_t size_y) {
   b4c46:	f8bd 8074 	ldrh.w	r8, [sp, #116]	; 0x74
   b4c4a:	f89d 5078 	ldrb.w	r5, [sp, #120]	; 0x78
   b4c4e:	f89d 407c 	ldrb.w	r4, [sp, #124]	; 0x7c
   b4c52:	9103      	str	r1, [sp, #12]
   b4c54:	461f      	mov	r7, r3
   b4c56:	f8bd 3070 	ldrh.w	r3, [sp, #112]	; 0x70
   b4c5a:	9304      	str	r3, [sp, #16]
   b4c5c:	4683      	mov	fp, r0
    if(!gfxFont) { // 'Classic' built-in font
   b4c5e:	2a00      	cmp	r2, #0
   b4c60:	f040 80c5 	bne.w	b4dee <_ZN12Adafruit_GFX8drawCharEsshtthh+0x1b6>
        if((x >= _width)            || // Clip right
   b4c64:	f9b0 300c 	ldrsh.w	r3, [r0, #12]
   b4c68:	428b      	cmp	r3, r1
   b4c6a:	f340 814c 	ble.w	b4f06 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x2ce>
   b4c6e:	f9b0 300e 	ldrsh.w	r3, [r0, #14]
   b4c72:	42b3      	cmp	r3, r6
   b4c74:	f340 8147 	ble.w	b4f06 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x2ce>
           ((x + 6 * size_x - 1) < 0) || // Clip left
   b4c78:	2306      	movs	r3, #6
   b4c7a:	fb13 1305 	smlabb	r3, r3, r5, r1
           (y >= _height)           || // Clip bottom
   b4c7e:	2b00      	cmp	r3, #0
   b4c80:	f340 8141 	ble.w	b4f06 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x2ce>
           ((y + 8 * size_y - 1) < 0))   // Clip top
   b4c84:	eb06 03c4 	add.w	r3, r6, r4, lsl #3
           ((x + 6 * size_x - 1) < 0) || // Clip left
   b4c88:	2b00      	cmp	r3, #0
   b4c8a:	f340 813c 	ble.w	b4f06 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x2ce>
        if(!_cp437 && (c >= 176)) c++; // Handle 'classic' charset behavior
   b4c8e:	7f03      	ldrb	r3, [r0, #28]
   b4c90:	b91b      	cbnz	r3, b4c9a <_ZN12Adafruit_GFX8drawCharEsshtthh+0x62>
   b4c92:	2faf      	cmp	r7, #175	; 0xaf
   b4c94:	bf84      	itt	hi
   b4c96:	3701      	addhi	r7, #1
   b4c98:	b2ff      	uxtbhi	r7, r7
        startWrite();
   b4c9a:	f8db 3000 	ldr.w	r3, [fp]
   b4c9e:	4658      	mov	r0, fp
   b4ca0:	695b      	ldr	r3, [r3, #20]
   b4ca2:	4798      	blx	r3
            uint8_t line = pgm_read_byte(&font[c * 5 + i]);
   b4ca4:	2205      	movs	r2, #5
   b4ca6:	9209      	str	r2, [sp, #36]	; 0x24
        for(int8_t i=0; i<5; i++ ) { // Char bitmap = 5 columns
   b4ca8:	2200      	movs	r2, #0
   b4caa:	9205      	str	r2, [sp, #20]
            uint8_t line = pgm_read_byte(&font[c * 5 + i]);
   b4cac:	4a98      	ldr	r2, [pc, #608]	; (b4f10 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x2d8>)
   b4cae:	eb07 0387 	add.w	r3, r7, r7, lsl #2
   b4cb2:	18d3      	adds	r3, r2, r3
   b4cb4:	930c      	str	r3, [sp, #48]	; 0x30
                        writePixel(x+i, y+j, color);
   b4cb6:	b2b3      	uxth	r3, r6
   b4cb8:	9306      	str	r3, [sp, #24]
            uint8_t line = pgm_read_byte(&font[c * 5 + i]);
   b4cba:	9a05      	ldr	r2, [sp, #20]
   b4cbc:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   b4cbe:	5c9b      	ldrb	r3, [r3, r2]
   b4cc0:	9307      	str	r3, [sp, #28]
                        writeFillRect(x+i*size_x, y+j*size_y, size_x, size_y, bg);
   b4cc2:	b2ab      	uxth	r3, r5
   b4cc4:	930b      	str	r3, [sp, #44]	; 0x2c
   b4cc6:	f8bd 300c 	ldrh.w	r3, [sp, #12]
   b4cca:	9308      	str	r3, [sp, #32]
   b4ccc:	9b03      	ldr	r3, [sp, #12]
   b4cce:	fb02 f905 	mul.w	r9, r2, r5
   b4cd2:	fa19 f983 	uxtah	r9, r9, r3
   b4cd6:	fa0f f389 	sxth.w	r3, r9
   b4cda:	ee08 3a10 	vmov	s16, r3
   b4cde:	2308      	movs	r3, #8
   b4ce0:	930a      	str	r3, [sp, #40]	; 0x28
                        writePixel(x+i, y+j, bg);
   b4ce2:	9b03      	ldr	r3, [sp, #12]
   b4ce4:	eb02 0a03 	add.w	sl, r2, r3
            for(int8_t j=0; j<8; j++, line >>= 1) {
   b4ce8:	f04f 0900 	mov.w	r9, #0
                        writePixel(x+i, y+j, bg);
   b4cec:	fa0f fa8a 	sxth.w	sl, sl
                if(line & 1) {
   b4cf0:	9a07      	ldr	r2, [sp, #28]
                        writePixel(x+i, y+j, color);
   b4cf2:	f8db 3000 	ldr.w	r3, [fp]
                if(line & 1) {
   b4cf6:	07d2      	lsls	r2, r2, #31
   b4cf8:	d552      	bpl.n	b4da0 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x168>
                    if(size_x == 1 && size_y == 1)
   b4cfa:	2d01      	cmp	r5, #1
                        writePixel(x+i, y+j, color);
   b4cfc:	fa1f f289 	uxth.w	r2, r9
                    if(size_x == 1 && size_y == 1)
   b4d00:	d13e      	bne.n	b4d80 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x148>
   b4d02:	2c01      	cmp	r4, #1
   b4d04:	d13c      	bne.n	b4d80 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x148>
                        writePixel(x+i, y+j, color);
   b4d06:	699b      	ldr	r3, [r3, #24]
   b4d08:	9906      	ldr	r1, [sp, #24]
   b4d0a:	461f      	mov	r7, r3
   b4d0c:	9b04      	ldr	r3, [sp, #16]
   b4d0e:	440a      	add	r2, r1
                        writePixel(x+i, y+j, bg);
   b4d10:	b212      	sxth	r2, r2
   b4d12:	4651      	mov	r1, sl
   b4d14:	4658      	mov	r0, fp
   b4d16:	47b8      	blx	r7
            for(int8_t j=0; j<8; j++, line >>= 1) {
   b4d18:	f109 0301 	add.w	r3, r9, #1
   b4d1c:	fa4f f983 	sxtb.w	r9, r3
   b4d20:	9b07      	ldr	r3, [sp, #28]
   b4d22:	085b      	lsrs	r3, r3, #1
   b4d24:	9307      	str	r3, [sp, #28]
   b4d26:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   b4d28:	3b01      	subs	r3, #1
   b4d2a:	f013 03ff 	ands.w	r3, r3, #255	; 0xff
   b4d2e:	930a      	str	r3, [sp, #40]	; 0x28
   b4d30:	d1de      	bne.n	b4cf0 <_ZN12Adafruit_GFX8drawCharEsshtthh+0xb8>
        for(int8_t i=0; i<5; i++ ) { // Char bitmap = 5 columns
   b4d32:	9f05      	ldr	r7, [sp, #20]
   b4d34:	3701      	adds	r7, #1
   b4d36:	b27b      	sxtb	r3, r7
   b4d38:	9305      	str	r3, [sp, #20]
   b4d3a:	9b09      	ldr	r3, [sp, #36]	; 0x24
   b4d3c:	3b01      	subs	r3, #1
   b4d3e:	f013 03ff 	ands.w	r3, r3, #255	; 0xff
   b4d42:	9309      	str	r3, [sp, #36]	; 0x24
   b4d44:	d1b9      	bne.n	b4cba <_ZN12Adafruit_GFX8drawCharEsshtthh+0x82>
        if(bg != color) { // If opaque, draw vertical line for last column
   b4d46:	9b04      	ldr	r3, [sp, #16]
   b4d48:	4543      	cmp	r3, r8
   b4d4a:	d00f      	beq.n	b4d6c <_ZN12Adafruit_GFX8drawCharEsshtthh+0x134>
            if(size_x == 1 && size_y == 1) writeFastVLine(x+5, y, 8, bg);
   b4d4c:	2d01      	cmp	r5, #1
   b4d4e:	f8db 3000 	ldr.w	r3, [fp]
   b4d52:	d13b      	bne.n	b4dcc <_ZN12Adafruit_GFX8drawCharEsshtthh+0x194>
   b4d54:	2c01      	cmp	r4, #1
   b4d56:	d139      	bne.n	b4dcc <_ZN12Adafruit_GFX8drawCharEsshtthh+0x194>
   b4d58:	9908      	ldr	r1, [sp, #32]
   b4d5a:	f8cd 8000 	str.w	r8, [sp]
   b4d5e:	3105      	adds	r1, #5
   b4d60:	6a1c      	ldr	r4, [r3, #32]
   b4d62:	4632      	mov	r2, r6
   b4d64:	2308      	movs	r3, #8
   b4d66:	b209      	sxth	r1, r1
   b4d68:	4658      	mov	r0, fp
   b4d6a:	47a0      	blx	r4
        endWrite();
   b4d6c:	f8db 3000 	ldr.w	r3, [fp]
   b4d70:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b4d72:	4658      	mov	r0, fp
}
   b4d74:	b011      	add	sp, #68	; 0x44
   b4d76:	ecbd 8b02 	vpop	{d8}
   b4d7a:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
        endWrite();
   b4d7e:	4718      	bx	r3
                        writeFillRect(x+i*size_x, y+j*size_y, size_x, size_y, color);
   b4d80:	9906      	ldr	r1, [sp, #24]
   b4d82:	fb14 f202 	smulbb	r2, r4, r2
   b4d86:	440a      	add	r2, r1
   b4d88:	9904      	ldr	r1, [sp, #16]
   b4d8a:	9101      	str	r1, [sp, #4]
                        writeFillRect(x+i*size_x, y+j*size_y, size_x, size_y, bg);
   b4d8c:	9400      	str	r4, [sp, #0]
   b4d8e:	69db      	ldr	r3, [r3, #28]
   b4d90:	ee18 1a10 	vmov	r1, s16
   b4d94:	461f      	mov	r7, r3
   b4d96:	b212      	sxth	r2, r2
   b4d98:	462b      	mov	r3, r5
   b4d9a:	4658      	mov	r0, fp
   b4d9c:	47b8      	blx	r7
   b4d9e:	e7bb      	b.n	b4d18 <_ZN12Adafruit_GFX8drawCharEsshtthh+0xe0>
                } else if(bg != color) {
   b4da0:	9a04      	ldr	r2, [sp, #16]
   b4da2:	4542      	cmp	r2, r8
   b4da4:	d0b8      	beq.n	b4d18 <_ZN12Adafruit_GFX8drawCharEsshtthh+0xe0>
                    if(size_x == 1 && size_y == 1)
   b4da6:	2d01      	cmp	r5, #1
                        writePixel(x+i, y+j, color);
   b4da8:	fa1f f289 	uxth.w	r2, r9
                    if(size_x == 1 && size_y == 1)
   b4dac:	d107      	bne.n	b4dbe <_ZN12Adafruit_GFX8drawCharEsshtthh+0x186>
   b4dae:	2c01      	cmp	r4, #1
   b4db0:	d105      	bne.n	b4dbe <_ZN12Adafruit_GFX8drawCharEsshtthh+0x186>
                        writePixel(x+i, y+j, bg);
   b4db2:	699b      	ldr	r3, [r3, #24]
   b4db4:	9906      	ldr	r1, [sp, #24]
   b4db6:	461f      	mov	r7, r3
   b4db8:	440a      	add	r2, r1
   b4dba:	4643      	mov	r3, r8
   b4dbc:	e7a8      	b.n	b4d10 <_ZN12Adafruit_GFX8drawCharEsshtthh+0xd8>
                        writeFillRect(x+i*size_x, y+j*size_y, size_x, size_y, bg);
   b4dbe:	9906      	ldr	r1, [sp, #24]
   b4dc0:	f8cd 8004 	str.w	r8, [sp, #4]
   b4dc4:	fb14 f202 	smulbb	r2, r4, r2
   b4dc8:	440a      	add	r2, r1
   b4dca:	e7df      	b.n	b4d8c <_ZN12Adafruit_GFX8drawCharEsshtthh+0x154>
            else          writeFillRect(x+5*size_x, y, size_x, 8*size_y, bg);
   b4dcc:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   b4dce:	f8cd 8004 	str.w	r8, [sp, #4]
   b4dd2:	eb02 0182 	add.w	r1, r2, r2, lsl #2
   b4dd6:	9a08      	ldr	r2, [sp, #32]
   b4dd8:	00e4      	lsls	r4, r4, #3
   b4dda:	440a      	add	r2, r1
   b4ddc:	4611      	mov	r1, r2
   b4dde:	9400      	str	r4, [sp, #0]
   b4de0:	69dc      	ldr	r4, [r3, #28]
   b4de2:	4632      	mov	r2, r6
   b4de4:	462b      	mov	r3, r5
   b4de6:	b209      	sxth	r1, r1
   b4de8:	4658      	mov	r0, fp
   b4dea:	47a0      	blx	r4
        endWrite();
   b4dec:	e7be      	b.n	b4d6c <_ZN12Adafruit_GFX8drawCharEsshtthh+0x134>
        c -= (uint8_t)pgm_read_byte(&gfxFont->first);
   b4dee:	7a13      	ldrb	r3, [r2, #8]
    return gfxFont->glyph + c;
   b4df0:	6851      	ldr	r1, [r2, #4]
    return gfxFont->bitmap;
   b4df2:	6812      	ldr	r2, [r2, #0]
   b4df4:	920b      	str	r2, [sp, #44]	; 0x2c
        c -= (uint8_t)pgm_read_byte(&gfxFont->first);
   b4df6:	1aff      	subs	r7, r7, r3
    return gfxFont->glyph + c;
   b4df8:	b2ff      	uxtb	r7, r7
   b4dfa:	eb01 03c7 	add.w	r3, r1, r7, lsl #3
        uint16_t bo = pgm_read_word(&glyph->bitmapOffset);
   b4dfe:	f831 2037 	ldrh.w	r2, [r1, r7, lsl #3]
   b4e02:	9206      	str	r2, [sp, #24]
        uint8_t  w  = pgm_read_byte(&glyph->width),
   b4e04:	789a      	ldrb	r2, [r3, #2]
   b4e06:	9209      	str	r2, [sp, #36]	; 0x24
                 h  = pgm_read_byte(&glyph->height);
   b4e08:	78da      	ldrb	r2, [r3, #3]
   b4e0a:	920c      	str	r2, [sp, #48]	; 0x30
        if(size_x > 1 || size_y > 1) {
   b4e0c:	2d01      	cmp	r5, #1
        int8_t   xo = pgm_read_byte(&glyph->xOffset),
   b4e0e:	f993 2005 	ldrsb.w	r2, [r3, #5]
                 yo = pgm_read_byte(&glyph->yOffset);
   b4e12:	f993 a006 	ldrsb.w	sl, [r3, #6]
        int8_t   xo = pgm_read_byte(&glyph->xOffset),
   b4e16:	920a      	str	r2, [sp, #40]	; 0x28
        if(size_x > 1 || size_y > 1) {
   b4e18:	d801      	bhi.n	b4e1e <_ZN12Adafruit_GFX8drawCharEsshtthh+0x1e6>
   b4e1a:	2c01      	cmp	r4, #1
   b4e1c:	d957      	bls.n	b4ece <_ZN12Adafruit_GFX8drawCharEsshtthh+0x296>
            xo16 = xo;
   b4e1e:	f9bd 3028 	ldrsh.w	r3, [sp, #40]	; 0x28
   b4e22:	9308      	str	r3, [sp, #32]
            yo16 = yo;
   b4e24:	fa0f f38a 	sxth.w	r3, sl
   b4e28:	9307      	str	r3, [sp, #28]
        startWrite();
   b4e2a:	f8db 3000 	ldr.w	r3, [fp]
   b4e2e:	4658      	mov	r0, fp
   b4e30:	695b      	ldr	r3, [r3, #20]
   b4e32:	4798      	blx	r3
                        writeFillRect(x+(xo16+xx)*size_x, y+(yo16+yy)*size_y,
   b4e34:	b2b3      	uxth	r3, r6
        uint8_t  xx, yy, bits = 0, bit = 0;
   b4e36:	f04f 0800 	mov.w	r8, #0
                        writeFillRect(x+(xo16+xx)*size_x, y+(yo16+yy)*size_y,
   b4e3a:	930e      	str	r3, [sp, #56]	; 0x38
                        writePixel(x+xo+xx, y+yo+yy, color);
   b4e3c:	fa1a f386 	uxtah	r3, sl, r6
        uint8_t  xx, yy, bits = 0, bit = 0;
   b4e40:	46c1      	mov	r9, r8
        for(yy=0; yy<h; yy++) {
   b4e42:	4647      	mov	r7, r8
                        writePixel(x+xo+xx, y+yo+yy, color);
   b4e44:	930f      	str	r3, [sp, #60]	; 0x3c
        for(yy=0; yy<h; yy++) {
   b4e46:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   b4e48:	429f      	cmp	r7, r3
   b4e4a:	d28f      	bcs.n	b4d6c <_ZN12Adafruit_GFX8drawCharEsshtthh+0x134>
                        writeFillRect(x+(xo16+xx)*size_x, y+(yo16+yy)*size_y,
   b4e4c:	9b07      	ldr	r3, [sp, #28]
   b4e4e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
   b4e50:	443b      	add	r3, r7
   b4e52:	fb03 2304 	mla	r3, r3, r4, r2
            for(xx=0; xx<w; xx++) {
   b4e56:	2200      	movs	r2, #0
   b4e58:	9205      	str	r2, [sp, #20]
                        writePixel(x+xo+xx, y+yo+yy, color);
   b4e5a:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
                        writeFillRect(x+(xo16+xx)*size_x, y+(yo16+yy)*size_y,
   b4e5c:	b21b      	sxth	r3, r3
                        writePixel(x+xo+xx, y+yo+yy, color);
   b4e5e:	eb02 0a07 	add.w	sl, r2, r7
                        writeFillRect(x+(xo16+xx)*size_x, y+(yo16+yy)*size_y,
   b4e62:	ee08 3a10 	vmov	s16, r3
                        writePixel(x+xo+xx, y+yo+yy, color);
   b4e66:	fa0f fa8a 	sxth.w	sl, sl
                        writeFillRect(x+(xo16+xx)*size_x, y+(yo16+yy)*size_y,
   b4e6a:	4643      	mov	r3, r8
            for(xx=0; xx<w; xx++) {
   b4e6c:	9a09      	ldr	r2, [sp, #36]	; 0x24
   b4e6e:	9905      	ldr	r1, [sp, #20]
   b4e70:	4291      	cmp	r1, r2
   b4e72:	d241      	bcs.n	b4ef8 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x2c0>
                if(!(bit++ & 7)) {
   b4e74:	1c5a      	adds	r2, r3, #1
   b4e76:	b2d2      	uxtb	r2, r2
   b4e78:	075b      	lsls	r3, r3, #29
   b4e7a:	920d      	str	r2, [sp, #52]	; 0x34
   b4e7c:	d107      	bne.n	b4e8e <_ZN12Adafruit_GFX8drawCharEsshtthh+0x256>
                    bits = pgm_read_byte(&bitmap[bo++]);
   b4e7e:	9b06      	ldr	r3, [sp, #24]
   b4e80:	9906      	ldr	r1, [sp, #24]
   b4e82:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   b4e84:	3301      	adds	r3, #1
   b4e86:	b29b      	uxth	r3, r3
   b4e88:	f812 9001 	ldrb.w	r9, [r2, r1]
   b4e8c:	9306      	str	r3, [sp, #24]
                if(bits & 0x80) {
   b4e8e:	f019 0f80 	tst.w	r9, #128	; 0x80
   b4e92:	d012      	beq.n	b4eba <_ZN12Adafruit_GFX8drawCharEsshtthh+0x282>
                    if(size_x == 1 && size_y == 1) {
   b4e94:	2d01      	cmp	r5, #1
                        writePixel(x+xo+xx, y+yo+yy, color);
   b4e96:	f8db 3000 	ldr.w	r3, [fp]
                        writeFillRect(x+i*size_x, y+j*size_y, size_x, size_y, bg);
   b4e9a:	f8bd 100c 	ldrh.w	r1, [sp, #12]
                    if(size_x == 1 && size_y == 1) {
   b4e9e:	d11a      	bne.n	b4ed6 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x29e>
   b4ea0:	2c01      	cmp	r4, #1
   b4ea2:	d118      	bne.n	b4ed6 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x29e>
                        writePixel(x+xo+xx, y+yo+yy, color);
   b4ea4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   b4ea6:	699b      	ldr	r3, [r3, #24]
   b4ea8:	4411      	add	r1, r2
   b4eaa:	9a05      	ldr	r2, [sp, #20]
   b4eac:	4411      	add	r1, r2
   b4eae:	461e      	mov	r6, r3
   b4eb0:	4652      	mov	r2, sl
   b4eb2:	9b04      	ldr	r3, [sp, #16]
   b4eb4:	b209      	sxth	r1, r1
   b4eb6:	4658      	mov	r0, fp
   b4eb8:	47b0      	blx	r6
            for(xx=0; xx<w; xx++) {
   b4eba:	9e05      	ldr	r6, [sp, #20]
   b4ebc:	3601      	adds	r6, #1
   b4ebe:	b2f3      	uxtb	r3, r6
                bits <<= 1;
   b4ec0:	ea4f 0949 	mov.w	r9, r9, lsl #1
            for(xx=0; xx<w; xx++) {
   b4ec4:	9305      	str	r3, [sp, #20]
                bits <<= 1;
   b4ec6:	fa5f f989 	uxtb.w	r9, r9
                if(!(bit++ & 7)) {
   b4eca:	9b0d      	ldr	r3, [sp, #52]	; 0x34
            for(xx=0; xx<w; xx++) {
   b4ecc:	e7ce      	b.n	b4e6c <_ZN12Adafruit_GFX8drawCharEsshtthh+0x234>
        int16_t  xo16 = 0, yo16 = 0;
   b4ece:	2300      	movs	r3, #0
   b4ed0:	e9cd 3307 	strd	r3, r3, [sp, #28]
   b4ed4:	e7a9      	b.n	b4e2a <_ZN12Adafruit_GFX8drawCharEsshtthh+0x1f2>
                        writeFillRect(x+(xo16+xx)*size_x, y+(yo16+yy)*size_y,
   b4ed6:	9805      	ldr	r0, [sp, #20]
   b4ed8:	9a08      	ldr	r2, [sp, #32]
   b4eda:	4402      	add	r2, r0
   b4edc:	fb02 1105 	mla	r1, r2, r5, r1
   b4ee0:	9a04      	ldr	r2, [sp, #16]
   b4ee2:	e9cd 4200 	strd	r4, r2, [sp]
   b4ee6:	69db      	ldr	r3, [r3, #28]
   b4ee8:	ee18 2a10 	vmov	r2, s16
   b4eec:	461e      	mov	r6, r3
   b4eee:	b209      	sxth	r1, r1
   b4ef0:	462b      	mov	r3, r5
   b4ef2:	4658      	mov	r0, fp
   b4ef4:	47b0      	blx	r6
   b4ef6:	e7e0      	b.n	b4eba <_ZN12Adafruit_GFX8drawCharEsshtthh+0x282>
   b4ef8:	9b09      	ldr	r3, [sp, #36]	; 0x24
        for(yy=0; yy<h; yy++) {
   b4efa:	3701      	adds	r7, #1
   b4efc:	4498      	add	r8, r3
   b4efe:	fa5f f888 	uxtb.w	r8, r8
   b4f02:	b2ff      	uxtb	r7, r7
   b4f04:	e79f      	b.n	b4e46 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x20e>
}
   b4f06:	b011      	add	sp, #68	; 0x44
   b4f08:	ecbd 8b02 	vpop	{d8}
   b4f0c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   b4f10:	000b8905 	.word	0x000b8905

000b4f14 <_ZN12Adafruit_GFX5writeEh>:
size_t Adafruit_GFX::write(uint8_t c) {
   b4f14:	b5f0      	push	{r4, r5, r6, r7, lr}
    if(!gfxFont) { // 'Classic' built-in font
   b4f16:	6a02      	ldr	r2, [r0, #32]
size_t Adafruit_GFX::write(uint8_t c) {
   b4f18:	b085      	sub	sp, #20
   b4f1a:	4604      	mov	r4, r0
   b4f1c:	460b      	mov	r3, r1
    if(!gfxFont) { // 'Classic' built-in font
   b4f1e:	2a00      	cmp	r2, #0
   b4f20:	d134      	bne.n	b4f8c <_ZN12Adafruit_GFX5writeEh+0x78>
        if(c == '\n') {                        // Newline?
   b4f22:	290a      	cmp	r1, #10
   b4f24:	d108      	bne.n	b4f38 <_ZN12Adafruit_GFX5writeEh+0x24>
            cursor_y += textsize_y * 8;        // advance y one line
   b4f26:	8a43      	ldrh	r3, [r0, #18]
            cursor_x  = 0;                     // Reset x to zero,
   b4f28:	8202      	strh	r2, [r0, #16]
            cursor_y += textsize_y * 8;        // advance y one line
   b4f2a:	7e42      	ldrb	r2, [r0, #25]
   b4f2c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
            cursor_y += (int16_t)textsize_y *
   b4f30:	8263      	strh	r3, [r4, #18]
}
   b4f32:	2001      	movs	r0, #1
   b4f34:	b005      	add	sp, #20
   b4f36:	bdf0      	pop	{r4, r5, r6, r7, pc}
        } else if(c != '\r') {                 // Ignore carriage returns
   b4f38:	290d      	cmp	r1, #13
   b4f3a:	d0fa      	beq.n	b4f32 <_ZN12Adafruit_GFX5writeEh+0x1e>
            if(wrap && ((cursor_x + textsize_x * 6) > _width)) { // Off right?
   b4f3c:	7ee1      	ldrb	r1, [r4, #27]
   b4f3e:	7e00      	ldrb	r0, [r0, #24]
            cursor_y += textsize_y * 8;        // advance y one line
   b4f40:	7e65      	ldrb	r5, [r4, #25]
            if(wrap && ((cursor_x + textsize_x * 6) > _width)) { // Off right?
   b4f42:	b171      	cbz	r1, b4f62 <_ZN12Adafruit_GFX5writeEh+0x4e>
   b4f44:	f9b4 6010 	ldrsh.w	r6, [r4, #16]
   b4f48:	2106      	movs	r1, #6
   b4f4a:	fb11 6100 	smlabb	r1, r1, r0, r6
   b4f4e:	f9b4 600c 	ldrsh.w	r6, [r4, #12]
   b4f52:	42b1      	cmp	r1, r6
            cursor_y += textsize_y * 8;        // advance y one line
   b4f54:	bfc1      	itttt	gt
   b4f56:	f9b4 1012 	ldrshgt.w	r1, [r4, #18]
                cursor_x  = 0;                 // Reset x to zero,
   b4f5a:	8222      	strhgt	r2, [r4, #16]
                cursor_y += textsize_y * 8;    // advance y one line
   b4f5c:	eb01 02c5 	addgt.w	r2, r1, r5, lsl #3
   b4f60:	8262      	strhgt	r2, [r4, #18]
            drawChar(cursor_x, cursor_y, c, textcolor, textbgcolor, textsize_x, textsize_y);
   b4f62:	8ae2      	ldrh	r2, [r4, #22]
   b4f64:	9201      	str	r2, [sp, #4]
   b4f66:	8aa2      	ldrh	r2, [r4, #20]
   b4f68:	9200      	str	r2, [sp, #0]
   b4f6a:	e9cd 0502 	strd	r0, r5, [sp, #8]
   b4f6e:	f9b4 2012 	ldrsh.w	r2, [r4, #18]
   b4f72:	f9b4 1010 	ldrsh.w	r1, [r4, #16]
   b4f76:	4620      	mov	r0, r4
   b4f78:	f7ff fe5e 	bl	b4c38 <_ZN12Adafruit_GFX8drawCharEsshtthh>
            cursor_x += textsize_x * 6;          // Advance x one char
   b4f7c:	7e23      	ldrb	r3, [r4, #24]
   b4f7e:	8a22      	ldrh	r2, [r4, #16]
   b4f80:	eb03 0343 	add.w	r3, r3, r3, lsl #1
   b4f84:	eb02 0343 	add.w	r3, r2, r3, lsl #1
                cursor_x += (uint8_t)pgm_read_byte(&glyph->xAdvance) * (int16_t)textsize_x;
   b4f88:	8223      	strh	r3, [r4, #16]
   b4f8a:	e7d2      	b.n	b4f32 <_ZN12Adafruit_GFX5writeEh+0x1e>
        if(c == '\n') {
   b4f8c:	290a      	cmp	r1, #10
   b4f8e:	d107      	bne.n	b4fa0 <_ZN12Adafruit_GFX5writeEh+0x8c>
            cursor_x  = 0;
   b4f90:	2300      	movs	r3, #0
   b4f92:	8203      	strh	r3, [r0, #16]
            cursor_y += (int16_t)textsize_y *
   b4f94:	7e41      	ldrb	r1, [r0, #25]
                        (uint8_t)pgm_read_byte(&gfxFont->yAdvance);
   b4f96:	7a92      	ldrb	r2, [r2, #10]
            cursor_y += (int16_t)textsize_y *
   b4f98:	8a43      	ldrh	r3, [r0, #18]
   b4f9a:	fb01 3302 	mla	r3, r1, r2, r3
   b4f9e:	e7c7      	b.n	b4f30 <_ZN12Adafruit_GFX5writeEh+0x1c>
        } else if(c != '\r') {
   b4fa0:	290d      	cmp	r1, #13
   b4fa2:	d0c6      	beq.n	b4f32 <_ZN12Adafruit_GFX5writeEh+0x1e>
            uint8_t first = pgm_read_byte(&gfxFont->first);
   b4fa4:	7a15      	ldrb	r5, [r2, #8]
            if((c >= first) && (c <= (uint8_t)pgm_read_byte(&gfxFont->last))) {
   b4fa6:	42a9      	cmp	r1, r5
   b4fa8:	d3c3      	bcc.n	b4f32 <_ZN12Adafruit_GFX5writeEh+0x1e>
   b4faa:	7a51      	ldrb	r1, [r2, #9]
   b4fac:	4299      	cmp	r1, r3
   b4fae:	d3c0      	bcc.n	b4f32 <_ZN12Adafruit_GFX5writeEh+0x1e>
    return gfxFont->glyph + c;
   b4fb0:	6851      	ldr	r1, [r2, #4]
                GFXglyph *glyph  = pgm_read_glyph_ptr(gfxFont, c - first);
   b4fb2:	1b5d      	subs	r5, r3, r5
    return gfxFont->glyph + c;
   b4fb4:	b2ed      	uxtb	r5, r5
   b4fb6:	eb01 05c5 	add.w	r5, r1, r5, lsl #3
                uint8_t   w     = pgm_read_byte(&glyph->width),
   b4fba:	78a8      	ldrb	r0, [r5, #2]
                if((w > 0) && (h > 0)) { // Is there an associated bitmap?
   b4fbc:	b328      	cbz	r0, b500a <_ZN12Adafruit_GFX5writeEh+0xf6>
   b4fbe:	78e9      	ldrb	r1, [r5, #3]
   b4fc0:	b319      	cbz	r1, b500a <_ZN12Adafruit_GFX5writeEh+0xf6>
                    if(wrap && ((cursor_x + textsize_x * (xo + w)) > _width)) {
   b4fc2:	7ee1      	ldrb	r1, [r4, #27]
            if(wrap && ((cursor_x + textsize_x * 6) > _width)) { // Off right?
   b4fc4:	7e26      	ldrb	r6, [r4, #24]
            cursor_y += textsize_y * 8;        // advance y one line
   b4fc6:	7e67      	ldrb	r7, [r4, #25]
                    if(wrap && ((cursor_x + textsize_x * (xo + w)) > _width)) {
   b4fc8:	b191      	cbz	r1, b4ff0 <_ZN12Adafruit_GFX5writeEh+0xdc>
   b4fca:	f995 1005 	ldrsb.w	r1, [r5, #5]
   b4fce:	4408      	add	r0, r1
   b4fd0:	f9b4 1010 	ldrsh.w	r1, [r4, #16]
   b4fd4:	fb06 1100 	mla	r1, r6, r0, r1
   b4fd8:	f9b4 000c 	ldrsh.w	r0, [r4, #12]
   b4fdc:	4281      	cmp	r1, r0
   b4fde:	dd07      	ble.n	b4ff0 <_ZN12Adafruit_GFX5writeEh+0xdc>
                        cursor_x  = 0;
   b4fe0:	2000      	movs	r0, #0
   b4fe2:	8220      	strh	r0, [r4, #16]
            cursor_y += textsize_y * 8;        // advance y one line
   b4fe4:	f9b4 1012 	ldrsh.w	r1, [r4, #18]
                          (uint8_t)pgm_read_byte(&gfxFont->yAdvance);
   b4fe8:	7a92      	ldrb	r2, [r2, #10]
                        cursor_y += (int16_t)textsize_y *
   b4fea:	fb02 1207 	mla	r2, r2, r7, r1
   b4fee:	8262      	strh	r2, [r4, #18]
                    drawChar(cursor_x, cursor_y, c, textcolor, textbgcolor, textsize_x, textsize_y);
   b4ff0:	8ae2      	ldrh	r2, [r4, #22]
   b4ff2:	9201      	str	r2, [sp, #4]
   b4ff4:	8aa2      	ldrh	r2, [r4, #20]
   b4ff6:	9200      	str	r2, [sp, #0]
   b4ff8:	e9cd 6702 	strd	r6, r7, [sp, #8]
   b4ffc:	f9b4 2012 	ldrsh.w	r2, [r4, #18]
   b5000:	f9b4 1010 	ldrsh.w	r1, [r4, #16]
   b5004:	4620      	mov	r0, r4
   b5006:	f7ff fe17 	bl	b4c38 <_ZN12Adafruit_GFX8drawCharEsshtthh>
                cursor_x += (uint8_t)pgm_read_byte(&glyph->xAdvance) * (int16_t)textsize_x;
   b500a:	7929      	ldrb	r1, [r5, #4]
   b500c:	7e22      	ldrb	r2, [r4, #24]
   b500e:	8a23      	ldrh	r3, [r4, #16]
   b5010:	fb01 3302 	mla	r3, r1, r2, r3
   b5014:	e7b8      	b.n	b4f88 <_ZN12Adafruit_GFX5writeEh+0x74>

000b5016 <_ZN12Adafruit_GFX11setTextSizeEh>:
    textsize_x = (s_x > 0) ? s_x : 1;
   b5016:	2901      	cmp	r1, #1
   b5018:	bf38      	it	cc
   b501a:	2101      	movcc	r1, #1
   b501c:	7601      	strb	r1, [r0, #24]
    textsize_y = (s_y > 0) ? s_y : 1;
   b501e:	7641      	strb	r1, [r0, #25]
}
   b5020:	4770      	bx	lr

000b5022 <_ZN15Adafruit_SPITFT11SPI_SCK_LOWEv.isra.0>:
  #endif
 #else  // !HAS_PORT_SET_CLR
    *swspi.sckPort   &= swspi.sckPinMaskClr;
 #endif // end !HAS_PORT_SET_CLR
#else  // !USE_FAST_PINIO
    digitalWrite(swspi._sck, LOW);
   b5022:	2100      	movs	r1, #0
   b5024:	b280      	uxth	r0, r0
   b5026:	f002 bca4 	b.w	b7972 <digitalWrite>

000b502a <_ZN15Adafruit_SPITFT12SPI_SCK_HIGHEv.isra.0>:
    digitalWrite(swspi._sck, HIGH);
   b502a:	2101      	movs	r1, #1
   b502c:	b280      	uxth	r0, r0
   b502e:	f002 bca0 	b.w	b7972 <digitalWrite>

000b5032 <_ZN15Adafruit_SPITFT12SPI_MOSI_LOWEv.isra.0>:
    digitalWrite(swspi._mosi, LOW);
   b5032:	2100      	movs	r1, #0
   b5034:	b280      	uxth	r0, r0
   b5036:	f002 bc9c 	b.w	b7972 <digitalWrite>

000b503a <_ZN15Adafruit_SPITFT13SPI_MOSI_HIGHEv.isra.0>:
    digitalWrite(swspi._mosi, HIGH);
   b503a:	2101      	movs	r1, #1
   b503c:	b280      	uxth	r0, r0
   b503e:	f002 bc98 	b.w	b7972 <digitalWrite>

000b5042 <_ZN15Adafruit_SPITFT10SPI_DC_LOWEv.isra.0>:
      #endif // end !KINETISK
     #else  // !HAS_PORT_SET_CLR
        *dcPort   &= dcPinMaskClr;
     #endif // end !HAS_PORT_SET_CLR
    #else  // !USE_FAST_PINIO
        digitalWrite(_dc, LOW);
   b5042:	2100      	movs	r1, #0
   b5044:	b280      	uxth	r0, r0
   b5046:	f002 bc94 	b.w	b7972 <digitalWrite>

000b504a <_ZN15Adafruit_SPITFT11SPI_DC_HIGHEv.isra.0>:
        digitalWrite(_dc, HIGH);
   b504a:	2101      	movs	r1, #1
   b504c:	b280      	uxth	r0, r0
   b504e:	f002 bc90 	b.w	b7972 <digitalWrite>
	...

000b5054 <_ZN15Adafruit_SPITFTC1EttP8SPIClassaaa>:
Adafruit_SPITFT::Adafruit_SPITFT(uint16_t w, uint16_t h, SPIClass *spiClass,
   b5054:	b538      	push	{r3, r4, r5, lr}
  connection(TFT_HARD_SPI), _rst(rst), _cs(cs), _dc(dc) {
   b5056:	b212      	sxth	r2, r2
Adafruit_SPITFT::Adafruit_SPITFT(uint16_t w, uint16_t h, SPIClass *spiClass,
   b5058:	4604      	mov	r4, r0
  connection(TFT_HARD_SPI), _rst(rst), _cs(cs), _dc(dc) {
   b505a:	b209      	sxth	r1, r1
Adafruit_SPITFT::Adafruit_SPITFT(uint16_t w, uint16_t h, SPIClass *spiClass,
   b505c:	461d      	mov	r5, r3
  connection(TFT_HARD_SPI), _rst(rst), _cs(cs), _dc(dc) {
   b505e:	f7ff fdd5 	bl	b4c0c <_ZN12Adafruit_GFXC1Ess>
   b5062:	4b0c      	ldr	r3, [pc, #48]	; (b5094 <_ZN15Adafruit_SPITFTC1EttP8SPIClassaaa+0x40>)
   b5064:	6023      	str	r3, [r4, #0]
   b5066:	f99d 3018 	ldrsb.w	r3, [sp, #24]
   b506a:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
   b506e:	f99d 3010 	ldrsb.w	r3, [sp, #16]
   b5072:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
   b5076:	2200      	movs	r2, #0
   b5078:	f99d 3014 	ldrsb.w	r3, [sp, #20]
   b507c:	f884 203c 	strb.w	r2, [r4, #60]	; 0x3c
   b5080:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
   b5084:	6422      	str	r2, [r4, #64]	; 0x40
   b5086:	f8a4 2044 	strh.w	r2, [r4, #68]	; 0x44
   b508a:	64a2      	str	r2, [r4, #72]	; 0x48
    hwspi._spi = spiClass;
   b508c:	6265      	str	r5, [r4, #36]	; 0x24
}
   b508e:	4620      	mov	r0, r4
   b5090:	bd38      	pop	{r3, r4, r5, pc}
   b5092:	bf00      	nop
   b5094:	000b8e68 	.word	0x000b8e68

000b5098 <_ZN15Adafruit_SPITFTC1Ettaaa>:
Adafruit_SPITFT::Adafruit_SPITFT(uint16_t w, uint16_t h, int8_t cs,
   b5098:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}

template <hal_spi_interface_t Interface>
class SpiProxy {
public:
    static SPIClass& instance() {
        static SPIClass instance(Interface);
   b509c:	f8df 8058 	ldr.w	r8, [pc, #88]	; b50f8 <_ZN15Adafruit_SPITFTC1Ettaaa+0x60>
   b50a0:	4604      	mov	r4, r0
   b50a2:	f898 0000 	ldrb.w	r0, [r8]
   b50a6:	f3bf 8f5b 	dmb	ish
   b50aa:	460d      	mov	r5, r1
   b50ac:	f010 0101 	ands.w	r1, r0, #1
   b50b0:	b086      	sub	sp, #24
   b50b2:	4616      	mov	r6, r2
   b50b4:	461f      	mov	r7, r3
   b50b6:	d10b      	bne.n	b50d0 <_ZN15Adafruit_SPITFTC1Ettaaa+0x38>
   b50b8:	4640      	mov	r0, r8
   b50ba:	9105      	str	r1, [sp, #20]
   b50bc:	f7fe fffe 	bl	b40bc <__cxa_guard_acquire>
   b50c0:	9905      	ldr	r1, [sp, #20]
   b50c2:	b128      	cbz	r0, b50d0 <_ZN15Adafruit_SPITFTC1Ettaaa+0x38>
   b50c4:	480b      	ldr	r0, [pc, #44]	; (b50f4 <_ZN15Adafruit_SPITFTC1Ettaaa+0x5c>)
   b50c6:	f001 fff1 	bl	b70ac <_ZN8SPIClassC1E19hal_spi_interface_t>
   b50ca:	4640      	mov	r0, r8
   b50cc:	f7fe fffb 	bl	b40c6 <__cxa_guard_release>
  int8_t dc, int8_t rst) : Adafruit_SPITFT(w, h, &SPI, cs, dc, rst) {
   b50d0:	f99d 3034 	ldrsb.w	r3, [sp, #52]	; 0x34
   b50d4:	9302      	str	r3, [sp, #8]
   b50d6:	f99d 3030 	ldrsb.w	r3, [sp, #48]	; 0x30
   b50da:	4632      	mov	r2, r6
   b50dc:	e9cd 7300 	strd	r7, r3, [sp]
   b50e0:	4629      	mov	r1, r5
   b50e2:	4b04      	ldr	r3, [pc, #16]	; (b50f4 <_ZN15Adafruit_SPITFTC1Ettaaa+0x5c>)
   b50e4:	4620      	mov	r0, r4
   b50e6:	f7ff ffb5 	bl	b5054 <_ZN15Adafruit_SPITFTC1EttP8SPIClassaaa>
}
   b50ea:	4620      	mov	r0, r4
   b50ec:	b006      	add	sp, #24
   b50ee:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   b50f2:	bf00      	nop
   b50f4:	2003e6bc 	.word	0x2003e6bc
   b50f8:	2003e6b8 	.word	0x2003e6b8

000b50fc <_ZN15Adafruit_SPITFT7initSPIEmh>:
void Adafruit_SPITFT::initSPI(uint32_t freq, uint8_t spiMode) {
   b50fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    if(!freq) freq = DEFAULT_SPI_FREQ; // If no freq specified, use default
   b50fe:	4f49      	ldr	r7, [pc, #292]	; (b5224 <_ZN15Adafruit_SPITFT7initSPIEmh+0x128>)
void Adafruit_SPITFT::initSPI(uint32_t freq, uint8_t spiMode) {
   b5100:	4604      	mov	r4, r0
    if(_cs >= 0) {
   b5102:	f990 003e 	ldrsb.w	r0, [r0, #62]	; 0x3e
    if(!freq) freq = DEFAULT_SPI_FREQ; // If no freq specified, use default
   b5106:	2900      	cmp	r1, #0
   b5108:	bf18      	it	ne
   b510a:	460f      	movne	r7, r1
    if(_cs >= 0) {
   b510c:	2800      	cmp	r0, #0
void Adafruit_SPITFT::initSPI(uint32_t freq, uint8_t spiMode) {
   b510e:	4616      	mov	r6, r2
    if(_cs >= 0) {
   b5110:	db09      	blt.n	b5126 <_ZN15Adafruit_SPITFT7initSPIEmh+0x2a>
        pinMode(_cs, OUTPUT);
   b5112:	2101      	movs	r1, #1
   b5114:	b280      	uxth	r0, r0
   b5116:	f002 fc1b 	bl	b7950 <pinMode>
        digitalWrite(_cs, HIGH); // Deselect
   b511a:	f994 003e 	ldrsb.w	r0, [r4, #62]	; 0x3e
   b511e:	2101      	movs	r1, #1
   b5120:	b280      	uxth	r0, r0
   b5122:	f002 fc26 	bl	b7972 <digitalWrite>
    pinMode(_dc, OUTPUT);
   b5126:	f994 003f 	ldrsb.w	r0, [r4, #63]	; 0x3f
   b512a:	2101      	movs	r1, #1
   b512c:	b280      	uxth	r0, r0
   b512e:	f002 fc0f 	bl	b7950 <pinMode>
    digitalWrite(_dc, HIGH); // Data mode
   b5132:	f994 003f 	ldrsb.w	r0, [r4, #63]	; 0x3f
   b5136:	2101      	movs	r1, #1
   b5138:	b280      	uxth	r0, r0
   b513a:	f002 fc1a 	bl	b7972 <digitalWrite>
    if(connection == TFT_HARD_SPI) {
   b513e:	f894 503c 	ldrb.w	r5, [r4, #60]	; 0x3c
   b5142:	bb85      	cbnz	r5, b51a6 <_ZN15Adafruit_SPITFT7initSPIEmh+0xaa>
    SPI_CLK_SYSTEM = 0,         // represents the system clock speed
    SPI_CLK_ARDUINO = 16*MHZ,
};

namespace particle {
class SPISettings : public Printable {
   b5144:	2301      	movs	r3, #1
            hwspi._spi->begin();
   b5146:	6a60      	ldr	r0, [r4, #36]	; 0x24
   b5148:	f884 502c 	strb.w	r5, [r4, #44]	; 0x2c
   b514c:	6327      	str	r7, [r4, #48]	; 0x30
   b514e:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
   b5152:	f884 6035 	strb.w	r6, [r4, #53]	; 0x35
        hwspi._mode    = spiMode; // Save spiMode value for later
   b5156:	63a6      	str	r6, [r4, #56]	; 0x38
            hwspi._spi->begin();
   b5158:	f001 ffb2 	bl	b70c0 <_ZN8SPIClass5beginEv>
    if(_rst >= 0) {
   b515c:	f994 003d 	ldrsb.w	r0, [r4, #61]	; 0x3d
   b5160:	2800      	cmp	r0, #0
   b5162:	db5e      	blt.n	b5222 <_ZN15Adafruit_SPITFT7initSPIEmh+0x126>
        pinMode(_rst, OUTPUT);
   b5164:	2101      	movs	r1, #1
   b5166:	b280      	uxth	r0, r0
   b5168:	f002 fbf2 	bl	b7950 <pinMode>
        digitalWrite(_rst, HIGH);
   b516c:	f994 003d 	ldrsb.w	r0, [r4, #61]	; 0x3d
   b5170:	2101      	movs	r1, #1
   b5172:	b280      	uxth	r0, r0
   b5174:	f002 fbfd 	bl	b7972 <digitalWrite>
        delay(100);
   b5178:	2064      	movs	r0, #100	; 0x64
   b517a:	f001 fa77 	bl	b666c <delay>
        digitalWrite(_rst, LOW);
   b517e:	f994 003d 	ldrsb.w	r0, [r4, #61]	; 0x3d
   b5182:	2100      	movs	r1, #0
   b5184:	b280      	uxth	r0, r0
   b5186:	f002 fbf4 	bl	b7972 <digitalWrite>
        delay(100);
   b518a:	2064      	movs	r0, #100	; 0x64
   b518c:	f001 fa6e 	bl	b666c <delay>
        digitalWrite(_rst, HIGH);
   b5190:	f994 003d 	ldrsb.w	r0, [r4, #61]	; 0x3d
   b5194:	2101      	movs	r1, #1
   b5196:	b280      	uxth	r0, r0
   b5198:	f002 fbeb 	bl	b7972 <digitalWrite>
}
   b519c:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
        delay(200);
   b51a0:	20c8      	movs	r0, #200	; 0xc8
   b51a2:	f001 ba63 	b.w	b666c <delay>
    } else if(connection == TFT_SOFT_SPI) {
   b51a6:	2d01      	cmp	r5, #1
   b51a8:	d120      	bne.n	b51ec <_ZN15Adafruit_SPITFT7initSPIEmh+0xf0>
        pinMode(swspi._mosi, OUTPUT);
   b51aa:	f994 0024 	ldrsb.w	r0, [r4, #36]	; 0x24
   b51ae:	4629      	mov	r1, r5
   b51b0:	b280      	uxth	r0, r0
   b51b2:	f002 fbcd 	bl	b7950 <pinMode>
        digitalWrite(swspi._mosi, LOW);
   b51b6:	f994 0024 	ldrsb.w	r0, [r4, #36]	; 0x24
   b51ba:	2100      	movs	r1, #0
   b51bc:	b280      	uxth	r0, r0
   b51be:	f002 fbd8 	bl	b7972 <digitalWrite>
        pinMode(swspi._sck, OUTPUT);
   b51c2:	f994 0026 	ldrsb.w	r0, [r4, #38]	; 0x26
   b51c6:	4629      	mov	r1, r5
   b51c8:	b280      	uxth	r0, r0
   b51ca:	f002 fbc1 	bl	b7950 <pinMode>
        digitalWrite(swspi._sck, LOW);
   b51ce:	f994 0026 	ldrsb.w	r0, [r4, #38]	; 0x26
   b51d2:	2100      	movs	r1, #0
   b51d4:	b280      	uxth	r0, r0
   b51d6:	f002 fbcc 	bl	b7972 <digitalWrite>
        if(swspi._miso >= 0) {
   b51da:	f994 0025 	ldrsb.w	r0, [r4, #37]	; 0x25
   b51de:	2800      	cmp	r0, #0
   b51e0:	dbbc      	blt.n	b515c <_ZN15Adafruit_SPITFT7initSPIEmh+0x60>
            pinMode(swspi._miso, INPUT);
   b51e2:	2100      	movs	r1, #0
   b51e4:	b280      	uxth	r0, r0
   b51e6:	f002 fbb3 	bl	b7950 <pinMode>
   b51ea:	e7b7      	b.n	b515c <_ZN15Adafruit_SPITFT7initSPIEmh+0x60>
        pinMode(tft8._wr, OUTPUT);
   b51ec:	f994 0025 	ldrsb.w	r0, [r4, #37]	; 0x25
   b51f0:	2101      	movs	r1, #1
   b51f2:	b280      	uxth	r0, r0
   b51f4:	f002 fbac 	bl	b7950 <pinMode>
        digitalWrite(tft8._wr, HIGH);
   b51f8:	f994 0025 	ldrsb.w	r0, [r4, #37]	; 0x25
   b51fc:	2101      	movs	r1, #1
   b51fe:	b280      	uxth	r0, r0
   b5200:	f002 fbb7 	bl	b7972 <digitalWrite>
        if(tft8._rd >= 0) {
   b5204:	f994 0026 	ldrsb.w	r0, [r4, #38]	; 0x26
   b5208:	2800      	cmp	r0, #0
   b520a:	dba7      	blt.n	b515c <_ZN15Adafruit_SPITFT7initSPIEmh+0x60>
            pinMode(tft8._rd, OUTPUT);
   b520c:	2101      	movs	r1, #1
   b520e:	b280      	uxth	r0, r0
   b5210:	f002 fb9e 	bl	b7950 <pinMode>
            digitalWrite(tft8._rd, HIGH);
   b5214:	f994 0026 	ldrsb.w	r0, [r4, #38]	; 0x26
   b5218:	2101      	movs	r1, #1
   b521a:	b280      	uxth	r0, r0
   b521c:	f002 fba9 	bl	b7972 <digitalWrite>
   b5220:	e79c      	b.n	b515c <_ZN15Adafruit_SPITFT7initSPIEmh+0x60>
}
   b5222:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   b5224:	00f42400 	.word	0x00f42400

000b5228 <_ZN15Adafruit_SPITFT21SPI_BEGIN_TRANSACTIONEv>:
    if(connection == TFT_HARD_SPI) {
   b5228:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
   b522c:	b923      	cbnz	r3, b5238 <_ZN15Adafruit_SPITFT21SPI_BEGIN_TRANSACTIONEv+0x10>
        hwspi._spi->beginTransaction(hwspi.settings);
   b522e:	f100 0128 	add.w	r1, r0, #40	; 0x28
   b5232:	6a40      	ldr	r0, [r0, #36]	; 0x24
   b5234:	f001 bf72 	b.w	b711c <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE>
}
   b5238:	4770      	bx	lr

000b523a <_ZN15Adafruit_SPITFT10startWriteEv>:
void Adafruit_SPITFT::startWrite(void) {
   b523a:	b510      	push	{r4, lr}
   b523c:	4604      	mov	r4, r0
    SPI_BEGIN_TRANSACTION();
   b523e:	f7ff fff3 	bl	b5228 <_ZN15Adafruit_SPITFT21SPI_BEGIN_TRANSACTIONEv>
    if(_cs >= 0) SPI_CS_LOW();
   b5242:	f994 003e 	ldrsb.w	r0, [r4, #62]	; 0x3e
   b5246:	2800      	cmp	r0, #0
   b5248:	db05      	blt.n	b5256 <_ZN15Adafruit_SPITFT10startWriteEv+0x1c>
}
   b524a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        digitalWrite(_cs, LOW);
   b524e:	2100      	movs	r1, #0
   b5250:	b280      	uxth	r0, r0
   b5252:	f002 bb8e 	b.w	b7972 <digitalWrite>
   b5256:	bd10      	pop	{r4, pc}

000b5258 <_ZN15Adafruit_SPITFT19SPI_END_TRANSACTIONEv>:
    if(connection == TFT_HARD_SPI) {
   b5258:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
   b525c:	b913      	cbnz	r3, b5264 <_ZN15Adafruit_SPITFT19SPI_END_TRANSACTIONEv+0xc>
        hwspi._spi->endTransaction();
   b525e:	6a40      	ldr	r0, [r0, #36]	; 0x24
   b5260:	f001 bf42 	b.w	b70e8 <_ZN8SPIClass14endTransactionEv>
}
   b5264:	4770      	bx	lr

000b5266 <_ZN15Adafruit_SPITFT8endWriteEv>:
void Adafruit_SPITFT::endWrite(void) {
   b5266:	b510      	push	{r4, lr}
   b5268:	4604      	mov	r4, r0
    if(_cs >= 0) SPI_CS_HIGH();
   b526a:	f990 003e 	ldrsb.w	r0, [r0, #62]	; 0x3e
   b526e:	2800      	cmp	r0, #0
   b5270:	db03      	blt.n	b527a <_ZN15Adafruit_SPITFT8endWriteEv+0x14>
        digitalWrite(_cs, HIGH);
   b5272:	2101      	movs	r1, #1
   b5274:	b280      	uxth	r0, r0
   b5276:	f002 fb7c 	bl	b7972 <digitalWrite>
    SPI_END_TRANSACTION();
   b527a:	4620      	mov	r0, r4
   b527c:	f7ff ffec 	bl	b5258 <_ZN15Adafruit_SPITFT19SPI_END_TRANSACTIONEv>
}
   b5280:	bd10      	pop	{r4, pc}

000b5282 <_ZN15Adafruit_SPITFT13TFT_WR_STROBEEv>:

/*!
    @brief  Set the WR line LOW, then HIGH. Used for parallel-connected
            interfaces when writing data.
*/
inline void Adafruit_SPITFT::TFT_WR_STROBE(void) {
   b5282:	b510      	push	{r4, lr}
   b5284:	4604      	mov	r4, r0
 #else  // !HAS_PORT_SET_CLR
    *tft8.wrPort   &= tft8.wrPinMaskClr;
    *tft8.wrPort   |= tft8.wrPinMaskSet;
 #endif // end !HAS_PORT_SET_CLR
#else  // !USE_FAST_PINIO
    digitalWrite(tft8._wr, LOW);
   b5286:	f990 0025 	ldrsb.w	r0, [r0, #37]	; 0x25
   b528a:	2100      	movs	r1, #0
   b528c:	b280      	uxth	r0, r0
   b528e:	f002 fb70 	bl	b7972 <digitalWrite>
    digitalWrite(tft8._wr, HIGH);
   b5292:	f994 0025 	ldrsb.w	r0, [r4, #37]	; 0x25
   b5296:	2101      	movs	r1, #1
#endif // end !USE_FAST_PINIO
}
   b5298:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    digitalWrite(tft8._wr, HIGH);
   b529c:	b280      	uxth	r0, r0
   b529e:	f002 bb68 	b.w	b7972 <digitalWrite>

000b52a2 <_ZN15Adafruit_SPITFT10writeColorEtm>:
void Adafruit_SPITFT::writeColor(uint16_t color, uint32_t len) {
   b52a2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   b52a6:	4605      	mov	r5, r0
   b52a8:	460e      	mov	r6, r1
    if(!len) return; // Avoid 0-byte transfers
   b52aa:	4614      	mov	r4, r2
   b52ac:	b17a      	cbz	r2, b52ce <_ZN15Adafruit_SPITFT10writeColorEtm+0x2c>
    if(connection == TFT_HARD_SPI) {
   b52ae:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
    uint8_t hi = color >> 8, lo = color;
   b52b2:	ea4f 2811 	mov.w	r8, r1, lsr #8
   b52b6:	b2cf      	uxtb	r7, r1
    if(connection == TFT_HARD_SPI) {
   b52b8:	b95b      	cbnz	r3, b52d2 <_ZN15Adafruit_SPITFT10writeColorEtm+0x30>
            hwspi._spi->transfer(hi);
   b52ba:	4641      	mov	r1, r8
   b52bc:	6a68      	ldr	r0, [r5, #36]	; 0x24
   b52be:	f001 ff9b 	bl	b71f8 <_ZN8SPIClass8transferEh>
            hwspi._spi->transfer(lo);
   b52c2:	6a68      	ldr	r0, [r5, #36]	; 0x24
   b52c4:	4639      	mov	r1, r7
   b52c6:	f001 ff97 	bl	b71f8 <_ZN8SPIClass8transferEh>
        while(len--) {
   b52ca:	3c01      	subs	r4, #1
   b52cc:	d1f5      	bne.n	b52ba <_ZN15Adafruit_SPITFT10writeColorEtm+0x18>
}
   b52ce:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    } else if(connection == TFT_SOFT_SPI) {
   b52d2:	2b01      	cmp	r3, #1
   b52d4:	d11e      	bne.n	b5314 <_ZN15Adafruit_SPITFT10writeColorEtm+0x72>
            for(uint16_t bit=0, x=color; bit<16; bit++) {
   b52d6:	46b0      	mov	r8, r6
   b52d8:	2710      	movs	r7, #16
                if(x & 0x8000) SPI_MOSI_HIGH();
   b52da:	f418 4f00 	tst.w	r8, #32768	; 0x8000
   b52de:	f995 0024 	ldrsb.w	r0, [r5, #36]	; 0x24
   b52e2:	d014      	beq.n	b530e <_ZN15Adafruit_SPITFT10writeColorEtm+0x6c>
   b52e4:	f7ff fea9 	bl	b503a <_ZN15Adafruit_SPITFT13SPI_MOSI_HIGHEv.isra.0>
                SPI_SCK_HIGH();
   b52e8:	f995 0026 	ldrsb.w	r0, [r5, #38]	; 0x26
            for(uint16_t bit=0, x=color; bit<16; bit++) {
   b52ec:	3f01      	subs	r7, #1
                SPI_SCK_HIGH();
   b52ee:	f7ff fe9c 	bl	b502a <_ZN15Adafruit_SPITFT12SPI_SCK_HIGHEv.isra.0>
                x <<= 1;
   b52f2:	ea4f 0848 	mov.w	r8, r8, lsl #1
                SPI_SCK_LOW();
   b52f6:	f995 0026 	ldrsb.w	r0, [r5, #38]	; 0x26
            for(uint16_t bit=0, x=color; bit<16; bit++) {
   b52fa:	b2bf      	uxth	r7, r7
                SPI_SCK_LOW();
   b52fc:	f7ff fe91 	bl	b5022 <_ZN15Adafruit_SPITFT11SPI_SCK_LOWEv.isra.0>
                x <<= 1;
   b5300:	fa1f f888 	uxth.w	r8, r8
            for(uint16_t bit=0, x=color; bit<16; bit++) {
   b5304:	2f00      	cmp	r7, #0
   b5306:	d1e8      	bne.n	b52da <_ZN15Adafruit_SPITFT10writeColorEtm+0x38>
        while(len--) {
   b5308:	3c01      	subs	r4, #1
   b530a:	d1e4      	bne.n	b52d6 <_ZN15Adafruit_SPITFT10writeColorEtm+0x34>
   b530c:	e7df      	b.n	b52ce <_ZN15Adafruit_SPITFT10writeColorEtm+0x2c>
                else           SPI_MOSI_LOW();
   b530e:	f7ff fe90 	bl	b5032 <_ZN15Adafruit_SPITFT12SPI_MOSI_LOWEv.isra.0>
   b5312:	e7e9      	b.n	b52e8 <_ZN15Adafruit_SPITFT10writeColorEtm+0x46>
        if(hi == lo) {
   b5314:	45b8      	cmp	r8, r7
   b5316:	d0da      	beq.n	b52ce <_ZN15Adafruit_SPITFT10writeColorEtm+0x2c>
                TFT_WR_STROBE();
   b5318:	4628      	mov	r0, r5
   b531a:	f7ff ffb2 	bl	b5282 <_ZN15Adafruit_SPITFT13TFT_WR_STROBEEv>
            while(len--) {
   b531e:	3c01      	subs	r4, #1
   b5320:	d1fa      	bne.n	b5318 <_ZN15Adafruit_SPITFT10writeColorEtm+0x76>
   b5322:	e7d4      	b.n	b52ce <_ZN15Adafruit_SPITFT10writeColorEtm+0x2c>

000b5324 <_ZN15Adafruit_SPITFT23writeFillRectPreclippedEsssst>:
  int16_t w, int16_t h, uint16_t color) {
   b5324:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   b5328:	461d      	mov	r5, r3
    setAddrWindow(x, y, w, h);
   b532a:	f8bd 3020 	ldrh.w	r3, [sp, #32]
   b532e:	9300      	str	r3, [sp, #0]
   b5330:	6803      	ldr	r3, [r0, #0]
  int16_t w, int16_t h, uint16_t color) {
   b5332:	f9bd 7020 	ldrsh.w	r7, [sp, #32]
    setAddrWindow(x, y, w, h);
   b5336:	f8d3 8054 	ldr.w	r8, [r3, #84]	; 0x54
  int16_t w, int16_t h, uint16_t color) {
   b533a:	f8bd 6024 	ldrh.w	r6, [sp, #36]	; 0x24
    setAddrWindow(x, y, w, h);
   b533e:	b2ab      	uxth	r3, r5
   b5340:	b292      	uxth	r2, r2
   b5342:	b289      	uxth	r1, r1
  int16_t w, int16_t h, uint16_t color) {
   b5344:	4604      	mov	r4, r0
    setAddrWindow(x, y, w, h);
   b5346:	47c0      	blx	r8
    writeColor(color, (uint32_t)w * h);
   b5348:	fb05 f207 	mul.w	r2, r5, r7
   b534c:	4631      	mov	r1, r6
   b534e:	4620      	mov	r0, r4
}
   b5350:	b002      	add	sp, #8
   b5352:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    writeColor(color, (uint32_t)w * h);
   b5356:	f7ff bfa4 	b.w	b52a2 <_ZN15Adafruit_SPITFT10writeColorEtm>

000b535a <_ZN15Adafruit_SPITFT13writeFillRectEsssst>:
  int16_t w, int16_t h, uint16_t color) {
   b535a:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   b535e:	f9bd 4020 	ldrsh.w	r4, [sp, #32]
    if(w && h) {                            // Nonzero width and height?
   b5362:	2b00      	cmp	r3, #0
   b5364:	d046      	beq.n	b53f4 <_ZN15Adafruit_SPITFT13writeFillRectEsssst+0x9a>
   b5366:	2c00      	cmp	r4, #0
   b5368:	d044      	beq.n	b53f4 <_ZN15Adafruit_SPITFT13writeFillRectEsssst+0x9a>
        if(w < 0) {                         // If negative width...
   b536a:	2b00      	cmp	r3, #0
   b536c:	da05      	bge.n	b537a <_ZN15Adafruit_SPITFT13writeFillRectEsssst+0x20>
            x +=  w + 1;                    //   Move X to left edge
   b536e:	3101      	adds	r1, #1
   b5370:	fa11 f183 	uxtah	r1, r1, r3
            w  = -w;                        //   Use positive width
   b5374:	425b      	negs	r3, r3
            x +=  w + 1;                    //   Move X to left edge
   b5376:	b209      	sxth	r1, r1
            w  = -w;                        //   Use positive width
   b5378:	b21b      	sxth	r3, r3
        if(x < _width) {                    // Not off right
   b537a:	f9b0 600c 	ldrsh.w	r6, [r0, #12]
   b537e:	428e      	cmp	r6, r1
   b5380:	dd38      	ble.n	b53f4 <_ZN15Adafruit_SPITFT13writeFillRectEsssst+0x9a>
            if(h < 0) {                     // If negative height...
   b5382:	2c00      	cmp	r4, #0
   b5384:	da05      	bge.n	b5392 <_ZN15Adafruit_SPITFT13writeFillRectEsssst+0x38>
                y +=  h + 1;                //   Move Y to top edge
   b5386:	3201      	adds	r2, #1
   b5388:	fa12 f284 	uxtah	r2, r2, r4
                h  = -h;                    //   Use positive height
   b538c:	4264      	negs	r4, r4
                y +=  h + 1;                //   Move Y to top edge
   b538e:	b212      	sxth	r2, r2
                h  = -h;                    //   Use positive height
   b5390:	b224      	sxth	r4, r4
            if(y < _height) {               // Not off bottom
   b5392:	f9b0 500e 	ldrsh.w	r5, [r0, #14]
   b5396:	4295      	cmp	r5, r2
   b5398:	dd2c      	ble.n	b53f4 <_ZN15Adafruit_SPITFT13writeFillRectEsssst+0x9a>
                int16_t x2 = x + w - 1;
   b539a:	eb01 0803 	add.w	r8, r1, r3
   b539e:	fa1f f888 	uxth.w	r8, r8
   b53a2:	f108 3cff 	add.w	ip, r8, #4294967295	; 0xffffffff
   b53a6:	fa0f fc8c 	sxth.w	ip, ip
                if(x2 >= 0) {               // Not off left
   b53aa:	f1bc 0f00 	cmp.w	ip, #0
   b53ae:	db21      	blt.n	b53f4 <_ZN15Adafruit_SPITFT13writeFillRectEsssst+0x9a>
                    int16_t y2 = y + h - 1;
   b53b0:	eb02 0e04 	add.w	lr, r2, r4
   b53b4:	fa1f fe8e 	uxth.w	lr, lr
   b53b8:	f10e 37ff 	add.w	r7, lr, #4294967295	; 0xffffffff
   b53bc:	b23f      	sxth	r7, r7
                    if(y2 >= 0) {           // Not off top
   b53be:	2f00      	cmp	r7, #0
   b53c0:	db18      	blt.n	b53f4 <_ZN15Adafruit_SPITFT13writeFillRectEsssst+0x9a>
                        if(x  <  0)       { x = 0; w = x2 + 1; } // Clip left
   b53c2:	2900      	cmp	r1, #0
   b53c4:	bfbc      	itt	lt
   b53c6:	fa0f f388 	sxthlt.w	r3, r8
   b53ca:	2100      	movlt	r1, #0
                        if(y  <  0)       { y = 0; h = y2 + 1; } // Clip top
   b53cc:	2a00      	cmp	r2, #0
   b53ce:	bfbc      	itt	lt
   b53d0:	fa0f f48e 	sxthlt.w	r4, lr
   b53d4:	2200      	movlt	r2, #0
                        if(x2 >= _width)  { w = _width  - x;   } // Clip right
   b53d6:	4566      	cmp	r6, ip
   b53d8:	bfdc      	itt	le
   b53da:	1a73      	suble	r3, r6, r1
   b53dc:	b21b      	sxthle	r3, r3
                        if(y2 >= _height) { h = _height - y;   } // Clip bottom
   b53de:	42bd      	cmp	r5, r7
   b53e0:	bfd8      	it	le
   b53e2:	1aac      	suble	r4, r5, r2
                        writeFillRectPreclipped(x, y, w, h, color);
   b53e4:	f8bd 5024 	ldrh.w	r5, [sp, #36]	; 0x24
                        if(y2 >= _height) { h = _height - y;   } // Clip bottom
   b53e8:	bfd8      	it	le
   b53ea:	b224      	sxthle	r4, r4
                        writeFillRectPreclipped(x, y, w, h, color);
   b53ec:	e9cd 4500 	strd	r4, r5, [sp]
   b53f0:	f7ff ff98 	bl	b5324 <_ZN15Adafruit_SPITFT23writeFillRectPreclippedEsssst>
}
   b53f4:	b002      	add	sp, #8
   b53f6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000b53fa <_ZN15Adafruit_SPITFT8fillRectEsssst>:
  uint16_t color) {
   b53fa:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   b53fe:	4680      	mov	r8, r0
   b5400:	f9bd 7028 	ldrsh.w	r7, [sp, #40]	; 0x28
   b5404:	f8bd 902c 	ldrh.w	r9, [sp, #44]	; 0x2c
   b5408:	460c      	mov	r4, r1
   b540a:	4615      	mov	r5, r2
    if(w && h) {                            // Nonzero width and height?
   b540c:	461e      	mov	r6, r3
   b540e:	2b00      	cmp	r3, #0
   b5410:	d052      	beq.n	b54b8 <_ZN15Adafruit_SPITFT8fillRectEsssst+0xbe>
   b5412:	2f00      	cmp	r7, #0
   b5414:	d050      	beq.n	b54b8 <_ZN15Adafruit_SPITFT8fillRectEsssst+0xbe>
        if(w < 0) {                         // If negative width...
   b5416:	2b00      	cmp	r3, #0
   b5418:	da05      	bge.n	b5426 <_ZN15Adafruit_SPITFT8fillRectEsssst+0x2c>
            x +=  w + 1;                    //   Move X to left edge
   b541a:	3401      	adds	r4, #1
   b541c:	fa14 f483 	uxtah	r4, r4, r3
            w  = -w;                        //   Use positive width
   b5420:	425e      	negs	r6, r3
            x +=  w + 1;                    //   Move X to left edge
   b5422:	b224      	sxth	r4, r4
            w  = -w;                        //   Use positive width
   b5424:	b236      	sxth	r6, r6
        if(x < _width) {                    // Not off right
   b5426:	f9b8 300c 	ldrsh.w	r3, [r8, #12]
   b542a:	42a3      	cmp	r3, r4
   b542c:	dd44      	ble.n	b54b8 <_ZN15Adafruit_SPITFT8fillRectEsssst+0xbe>
            if(h < 0) {                     // If negative height...
   b542e:	2f00      	cmp	r7, #0
   b5430:	da05      	bge.n	b543e <_ZN15Adafruit_SPITFT8fillRectEsssst+0x44>
                y +=  h + 1;                //   Move Y to top edge
   b5432:	3501      	adds	r5, #1
   b5434:	fa15 f587 	uxtah	r5, r5, r7
                h  = -h;                    //   Use positive height
   b5438:	427f      	negs	r7, r7
                y +=  h + 1;                //   Move Y to top edge
   b543a:	b22d      	sxth	r5, r5
                h  = -h;                    //   Use positive height
   b543c:	b23f      	sxth	r7, r7
            if(y < _height) {               // Not off bottom
   b543e:	f9b8 200e 	ldrsh.w	r2, [r8, #14]
   b5442:	42aa      	cmp	r2, r5
   b5444:	dd38      	ble.n	b54b8 <_ZN15Adafruit_SPITFT8fillRectEsssst+0xbe>
                int16_t x2 = x + w - 1;
   b5446:	eb04 0e06 	add.w	lr, r4, r6
   b544a:	fa1f fe8e 	uxth.w	lr, lr
   b544e:	f10e 30ff 	add.w	r0, lr, #4294967295	; 0xffffffff
   b5452:	b200      	sxth	r0, r0
                if(x2 >= 0) {               // Not off left
   b5454:	2800      	cmp	r0, #0
   b5456:	db2f      	blt.n	b54b8 <_ZN15Adafruit_SPITFT8fillRectEsssst+0xbe>
                    int16_t y2 = y + h - 1;
   b5458:	eb05 0c07 	add.w	ip, r5, r7
   b545c:	fa1f fc8c 	uxth.w	ip, ip
   b5460:	f10c 31ff 	add.w	r1, ip, #4294967295	; 0xffffffff
   b5464:	b209      	sxth	r1, r1
                    if(y2 >= 0) {           // Not off top
   b5466:	2900      	cmp	r1, #0
   b5468:	db26      	blt.n	b54b8 <_ZN15Adafruit_SPITFT8fillRectEsssst+0xbe>
                        if(x  <  0)       { x = 0; w = x2 + 1; } // Clip left
   b546a:	2c00      	cmp	r4, #0
   b546c:	bfbc      	itt	lt
   b546e:	fa0f f68e 	sxthlt.w	r6, lr
   b5472:	2400      	movlt	r4, #0
                        if(y  <  0)       { y = 0; h = y2 + 1; } // Clip top
   b5474:	2d00      	cmp	r5, #0
   b5476:	bfbc      	itt	lt
   b5478:	fa0f f78c 	sxthlt.w	r7, ip
   b547c:	2500      	movlt	r5, #0
                        if(x2 >= _width)  { w = _width  - x;   } // Clip right
   b547e:	4283      	cmp	r3, r0
   b5480:	bfdc      	itt	le
   b5482:	1b1b      	suble	r3, r3, r4
   b5484:	b21e      	sxthle	r6, r3
                        if(y2 >= _height) { h = _height - y;   } // Clip bottom
   b5486:	428a      	cmp	r2, r1
                        startWrite();
   b5488:	f8d8 3000 	ldr.w	r3, [r8]
                        if(y2 >= _height) { h = _height - y;   } // Clip bottom
   b548c:	bfdc      	itt	le
   b548e:	1b52      	suble	r2, r2, r5
   b5490:	b217      	sxthle	r7, r2
                        startWrite();
   b5492:	4640      	mov	r0, r8
   b5494:	695b      	ldr	r3, [r3, #20]
   b5496:	4798      	blx	r3
                        writeFillRectPreclipped(x, y, w, h, color);
   b5498:	4633      	mov	r3, r6
   b549a:	4640      	mov	r0, r8
   b549c:	e9cd 7900 	strd	r7, r9, [sp]
   b54a0:	462a      	mov	r2, r5
   b54a2:	4621      	mov	r1, r4
   b54a4:	f7ff ff3e 	bl	b5324 <_ZN15Adafruit_SPITFT23writeFillRectPreclippedEsssst>
                        endWrite();
   b54a8:	f8d8 3000 	ldr.w	r3, [r8]
   b54ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b54ae:	4640      	mov	r0, r8
}
   b54b0:	b003      	add	sp, #12
   b54b2:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
                        endWrite();
   b54b6:	4718      	bx	r3
}
   b54b8:	b003      	add	sp, #12
   b54ba:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

000b54be <_ZN15Adafruit_SPITFT13drawFastHLineEssst>:
  uint16_t color) {
   b54be:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
    if((y >= 0) && (y < _height) && w) { // Y on screen, nonzero width
   b54c2:	1e17      	subs	r7, r2, #0
  uint16_t color) {
   b54c4:	f8bd 8020 	ldrh.w	r8, [sp, #32]
   b54c8:	4606      	mov	r6, r0
   b54ca:	460c      	mov	r4, r1
   b54cc:	461d      	mov	r5, r3
    if((y >= 0) && (y < _height) && w) { // Y on screen, nonzero width
   b54ce:	db33      	blt.n	b5538 <_ZN15Adafruit_SPITFT13drawFastHLineEssst+0x7a>
   b54d0:	f9b0 300e 	ldrsh.w	r3, [r0, #14]
   b54d4:	42bb      	cmp	r3, r7
   b54d6:	dd2f      	ble.n	b5538 <_ZN15Adafruit_SPITFT13drawFastHLineEssst+0x7a>
   b54d8:	2d00      	cmp	r5, #0
   b54da:	d02d      	beq.n	b5538 <_ZN15Adafruit_SPITFT13drawFastHLineEssst+0x7a>
        if(w < 0) {                      // If negative width...
   b54dc:	da05      	bge.n	b54ea <_ZN15Adafruit_SPITFT13drawFastHLineEssst+0x2c>
            x +=  w + 1;                 //   Move X to left edge
   b54de:	3401      	adds	r4, #1
   b54e0:	fa14 f485 	uxtah	r4, r4, r5
            w  = -w;                     //   Use positive width
   b54e4:	426d      	negs	r5, r5
            x +=  w + 1;                 //   Move X to left edge
   b54e6:	b224      	sxth	r4, r4
            w  = -w;                     //   Use positive width
   b54e8:	b22d      	sxth	r5, r5
        if(x < _width) {                 // Not off right
   b54ea:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
   b54ee:	42a3      	cmp	r3, r4
   b54f0:	dd22      	ble.n	b5538 <_ZN15Adafruit_SPITFT13drawFastHLineEssst+0x7a>
            int16_t x2 = x + w - 1;
   b54f2:	1961      	adds	r1, r4, r5
   b54f4:	b289      	uxth	r1, r1
   b54f6:	1e4a      	subs	r2, r1, #1
   b54f8:	b212      	sxth	r2, r2
            if(x2 >= 0) {                // Not off left
   b54fa:	2a00      	cmp	r2, #0
   b54fc:	db1c      	blt.n	b5538 <_ZN15Adafruit_SPITFT13drawFastHLineEssst+0x7a>
                if(x  <  0)       { x = 0; w = x2 + 1; } // Clip left
   b54fe:	2c00      	cmp	r4, #0
   b5500:	bfbc      	itt	lt
   b5502:	b20d      	sxthlt	r5, r1
   b5504:	2400      	movlt	r4, #0
                if(x2 >= _width)  { w = _width  - x;   } // Clip right
   b5506:	4293      	cmp	r3, r2
   b5508:	bfdc      	itt	le
   b550a:	1b1b      	suble	r3, r3, r4
   b550c:	b21d      	sxthle	r5, r3
                startWrite();
   b550e:	6833      	ldr	r3, [r6, #0]
   b5510:	4630      	mov	r0, r6
   b5512:	695b      	ldr	r3, [r3, #20]
   b5514:	4798      	blx	r3
                writeFillRectPreclipped(x, y, w, 1, color);
   b5516:	2301      	movs	r3, #1
   b5518:	9300      	str	r3, [sp, #0]
   b551a:	4630      	mov	r0, r6
   b551c:	462b      	mov	r3, r5
   b551e:	f8cd 8004 	str.w	r8, [sp, #4]
   b5522:	463a      	mov	r2, r7
   b5524:	4621      	mov	r1, r4
   b5526:	f7ff fefd 	bl	b5324 <_ZN15Adafruit_SPITFT23writeFillRectPreclippedEsssst>
                endWrite();
   b552a:	6833      	ldr	r3, [r6, #0]
   b552c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b552e:	4630      	mov	r0, r6
}
   b5530:	b002      	add	sp, #8
   b5532:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
                endWrite();
   b5536:	4718      	bx	r3
}
   b5538:	b002      	add	sp, #8
   b553a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000b553e <_ZN15Adafruit_SPITFT13drawFastVLineEssst>:
  uint16_t color) {
   b553e:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
    if((x >= 0) && (x < _width) && h) { // X on screen, nonzero height
   b5542:	1e0f      	subs	r7, r1, #0
  uint16_t color) {
   b5544:	f8bd 8020 	ldrh.w	r8, [sp, #32]
   b5548:	4606      	mov	r6, r0
   b554a:	4614      	mov	r4, r2
   b554c:	461d      	mov	r5, r3
    if((x >= 0) && (x < _width) && h) { // X on screen, nonzero height
   b554e:	db31      	blt.n	b55b4 <_ZN15Adafruit_SPITFT13drawFastVLineEssst+0x76>
   b5550:	f9b0 300c 	ldrsh.w	r3, [r0, #12]
   b5554:	42bb      	cmp	r3, r7
   b5556:	dd2d      	ble.n	b55b4 <_ZN15Adafruit_SPITFT13drawFastVLineEssst+0x76>
   b5558:	2d00      	cmp	r5, #0
   b555a:	d02b      	beq.n	b55b4 <_ZN15Adafruit_SPITFT13drawFastVLineEssst+0x76>
        if(h < 0) {                     // If negative height...
   b555c:	da05      	bge.n	b556a <_ZN15Adafruit_SPITFT13drawFastVLineEssst+0x2c>
            y +=  h + 1;                //   Move Y to top edge
   b555e:	3401      	adds	r4, #1
   b5560:	fa14 f485 	uxtah	r4, r4, r5
            h  = -h;                    //   Use positive height
   b5564:	426d      	negs	r5, r5
            y +=  h + 1;                //   Move Y to top edge
   b5566:	b224      	sxth	r4, r4
            h  = -h;                    //   Use positive height
   b5568:	b22d      	sxth	r5, r5
        if(y < _height) {               // Not off bottom
   b556a:	f9b6 300e 	ldrsh.w	r3, [r6, #14]
   b556e:	42a3      	cmp	r3, r4
   b5570:	dd20      	ble.n	b55b4 <_ZN15Adafruit_SPITFT13drawFastVLineEssst+0x76>
            int16_t y2 = y + h - 1;
   b5572:	1961      	adds	r1, r4, r5
   b5574:	b289      	uxth	r1, r1
   b5576:	1e4a      	subs	r2, r1, #1
   b5578:	b212      	sxth	r2, r2
            if(y2 >= 0) {               // Not off top
   b557a:	2a00      	cmp	r2, #0
   b557c:	db1a      	blt.n	b55b4 <_ZN15Adafruit_SPITFT13drawFastVLineEssst+0x76>
                if(y  <  0)       { y = 0; h = y2 + 1; } // Clip top
   b557e:	2c00      	cmp	r4, #0
   b5580:	bfbc      	itt	lt
   b5582:	b20d      	sxthlt	r5, r1
   b5584:	2400      	movlt	r4, #0
                if(y2 >= _height) { h = _height - y;   } // Clip bottom
   b5586:	4293      	cmp	r3, r2
   b5588:	bfdc      	itt	le
   b558a:	1b1b      	suble	r3, r3, r4
   b558c:	b21d      	sxthle	r5, r3
                startWrite();
   b558e:	6833      	ldr	r3, [r6, #0]
   b5590:	4630      	mov	r0, r6
   b5592:	695b      	ldr	r3, [r3, #20]
   b5594:	4798      	blx	r3
                writeFillRectPreclipped(x, y, 1, h, color);
   b5596:	4630      	mov	r0, r6
   b5598:	e9cd 5800 	strd	r5, r8, [sp]
   b559c:	2301      	movs	r3, #1
   b559e:	4622      	mov	r2, r4
   b55a0:	4639      	mov	r1, r7
   b55a2:	f7ff febf 	bl	b5324 <_ZN15Adafruit_SPITFT23writeFillRectPreclippedEsssst>
                endWrite();
   b55a6:	6833      	ldr	r3, [r6, #0]
   b55a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b55aa:	4630      	mov	r0, r6
}
   b55ac:	b002      	add	sp, #8
   b55ae:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
                endWrite();
   b55b2:	4718      	bx	r3
}
   b55b4:	b002      	add	sp, #8
   b55b6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000b55ba <_ZN15Adafruit_SPITFT14writeFastHLineEssst>:
    if((y >= 0) && (y < _height) && w) { // Y on screen, nonzero width
   b55ba:	2a00      	cmp	r2, #0
  uint16_t color) {
   b55bc:	b573      	push	{r0, r1, r4, r5, r6, lr}
    if((y >= 0) && (y < _height) && w) { // Y on screen, nonzero width
   b55be:	db27      	blt.n	b5610 <_ZN15Adafruit_SPITFT14writeFastHLineEssst+0x56>
   b55c0:	f9b0 400e 	ldrsh.w	r4, [r0, #14]
   b55c4:	4294      	cmp	r4, r2
   b55c6:	dd23      	ble.n	b5610 <_ZN15Adafruit_SPITFT14writeFastHLineEssst+0x56>
   b55c8:	2b00      	cmp	r3, #0
   b55ca:	d021      	beq.n	b5610 <_ZN15Adafruit_SPITFT14writeFastHLineEssst+0x56>
        if(w < 0) {                      // If negative width...
   b55cc:	da05      	bge.n	b55da <_ZN15Adafruit_SPITFT14writeFastHLineEssst+0x20>
            x +=  w + 1;                 //   Move X to left edge
   b55ce:	3101      	adds	r1, #1
   b55d0:	fa11 f183 	uxtah	r1, r1, r3
            w  = -w;                     //   Use positive width
   b55d4:	425b      	negs	r3, r3
            x +=  w + 1;                 //   Move X to left edge
   b55d6:	b209      	sxth	r1, r1
            w  = -w;                     //   Use positive width
   b55d8:	b21b      	sxth	r3, r3
        if(x < _width) {                 // Not off right
   b55da:	f9b0 400c 	ldrsh.w	r4, [r0, #12]
   b55de:	428c      	cmp	r4, r1
   b55e0:	dd16      	ble.n	b5610 <_ZN15Adafruit_SPITFT14writeFastHLineEssst+0x56>
            int16_t x2 = x + w - 1;
   b55e2:	18ce      	adds	r6, r1, r3
   b55e4:	b2b6      	uxth	r6, r6
   b55e6:	1e75      	subs	r5, r6, #1
   b55e8:	b22d      	sxth	r5, r5
            if(x2 >= 0) {                // Not off left
   b55ea:	2d00      	cmp	r5, #0
   b55ec:	db10      	blt.n	b5610 <_ZN15Adafruit_SPITFT14writeFastHLineEssst+0x56>
                if(x  <  0)       { x = 0; w = x2 + 1; } // Clip left
   b55ee:	2900      	cmp	r1, #0
   b55f0:	bfbc      	itt	lt
   b55f2:	b233      	sxthlt	r3, r6
   b55f4:	2100      	movlt	r1, #0
                if(x2 >= _width)  { w = _width  - x;   } // Clip right
   b55f6:	42ac      	cmp	r4, r5
   b55f8:	bfd8      	it	le
   b55fa:	1a63      	suble	r3, r4, r1
                writeFillRectPreclipped(x, y, w, 1, color);
   b55fc:	f8bd 4018 	ldrh.w	r4, [sp, #24]
   b5600:	9401      	str	r4, [sp, #4]
   b5602:	f04f 0401 	mov.w	r4, #1
                if(x2 >= _width)  { w = _width  - x;   } // Clip right
   b5606:	bfd8      	it	le
   b5608:	b21b      	sxthle	r3, r3
                writeFillRectPreclipped(x, y, w, 1, color);
   b560a:	9400      	str	r4, [sp, #0]
   b560c:	f7ff fe8a 	bl	b5324 <_ZN15Adafruit_SPITFT23writeFillRectPreclippedEsssst>
}
   b5610:	b002      	add	sp, #8
   b5612:	bd70      	pop	{r4, r5, r6, pc}

000b5614 <_ZN15Adafruit_SPITFT14writeFastVLineEssst>:
  uint16_t color) {
   b5614:	b573      	push	{r0, r1, r4, r5, r6, lr}
    if((x >= 0) && (x < _width) && h) { // X on screen, nonzero height
   b5616:	2900      	cmp	r1, #0
   b5618:	db26      	blt.n	b5668 <_ZN15Adafruit_SPITFT14writeFastVLineEssst+0x54>
   b561a:	f9b0 400c 	ldrsh.w	r4, [r0, #12]
   b561e:	428c      	cmp	r4, r1
   b5620:	dd22      	ble.n	b5668 <_ZN15Adafruit_SPITFT14writeFastVLineEssst+0x54>
   b5622:	2b00      	cmp	r3, #0
   b5624:	d020      	beq.n	b5668 <_ZN15Adafruit_SPITFT14writeFastVLineEssst+0x54>
        if(h < 0) {                     // If negative height...
   b5626:	da05      	bge.n	b5634 <_ZN15Adafruit_SPITFT14writeFastVLineEssst+0x20>
            y +=  h + 1;                //   Move Y to top edge
   b5628:	3201      	adds	r2, #1
   b562a:	fa12 f283 	uxtah	r2, r2, r3
            h  = -h;                    //   Use positive height
   b562e:	425b      	negs	r3, r3
            y +=  h + 1;                //   Move Y to top edge
   b5630:	b212      	sxth	r2, r2
            h  = -h;                    //   Use positive height
   b5632:	b21b      	sxth	r3, r3
        if(y < _height) {               // Not off bottom
   b5634:	f9b0 400e 	ldrsh.w	r4, [r0, #14]
   b5638:	4294      	cmp	r4, r2
   b563a:	dd15      	ble.n	b5668 <_ZN15Adafruit_SPITFT14writeFastVLineEssst+0x54>
            int16_t y2 = y + h - 1;
   b563c:	18d6      	adds	r6, r2, r3
   b563e:	b2b6      	uxth	r6, r6
   b5640:	1e75      	subs	r5, r6, #1
   b5642:	b22d      	sxth	r5, r5
            if(y2 >= 0) {               // Not off top
   b5644:	2d00      	cmp	r5, #0
   b5646:	db0f      	blt.n	b5668 <_ZN15Adafruit_SPITFT14writeFastVLineEssst+0x54>
                if(y  <  0)       { y = 0; h = y2 + 1; } // Clip top
   b5648:	2a00      	cmp	r2, #0
   b564a:	bfbc      	itt	lt
   b564c:	b233      	sxthlt	r3, r6
   b564e:	2200      	movlt	r2, #0
                if(y2 >= _height) { h = _height - y;   } // Clip bottom
   b5650:	42ac      	cmp	r4, r5
   b5652:	bfd8      	it	le
   b5654:	1aa3      	suble	r3, r4, r2
                writeFillRectPreclipped(x, y, 1, h, color);
   b5656:	f8bd 4018 	ldrh.w	r4, [sp, #24]
                if(y2 >= _height) { h = _height - y;   } // Clip bottom
   b565a:	bfd8      	it	le
   b565c:	b21b      	sxthle	r3, r3
                writeFillRectPreclipped(x, y, 1, h, color);
   b565e:	e9cd 3400 	strd	r3, r4, [sp]
   b5662:	2301      	movs	r3, #1
   b5664:	f7ff fe5e 	bl	b5324 <_ZN15Adafruit_SPITFT23writeFillRectPreclippedEsssst>
}
   b5668:	b002      	add	sp, #8
   b566a:	bd70      	pop	{r4, r5, r6, pc}

000b566c <_ZN15Adafruit_SPITFT8spiWriteEh>:
void Adafruit_SPITFT::spiWrite(uint8_t b) {
   b566c:	b570      	push	{r4, r5, r6, lr}
    if(connection == TFT_HARD_SPI) {
   b566e:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
void Adafruit_SPITFT::spiWrite(uint8_t b) {
   b5672:	4604      	mov	r4, r0
   b5674:	460d      	mov	r5, r1
    if(connection == TFT_HARD_SPI) {
   b5676:	b923      	cbnz	r3, b5682 <_ZN15Adafruit_SPITFT8spiWriteEh+0x16>
}
   b5678:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        hwspi._spi->transfer(b);
   b567c:	6a40      	ldr	r0, [r0, #36]	; 0x24
   b567e:	f001 bdbb 	b.w	b71f8 <_ZN8SPIClass8transferEh>
    } else if(connection == TFT_SOFT_SPI) {
   b5682:	2b01      	cmp	r3, #1
   b5684:	d118      	bne.n	b56b8 <_ZN15Adafruit_SPITFT8spiWriteEh+0x4c>
   b5686:	2608      	movs	r6, #8
            if(b & 0x80) SPI_MOSI_HIGH();
   b5688:	062b      	lsls	r3, r5, #24
   b568a:	f994 0024 	ldrsb.w	r0, [r4, #36]	; 0x24
   b568e:	d510      	bpl.n	b56b2 <_ZN15Adafruit_SPITFT8spiWriteEh+0x46>
   b5690:	f7ff fcd3 	bl	b503a <_ZN15Adafruit_SPITFT13SPI_MOSI_HIGHEv.isra.0>
            SPI_SCK_HIGH();
   b5694:	f994 0026 	ldrsb.w	r0, [r4, #38]	; 0x26
   b5698:	f7ff fcc7 	bl	b502a <_ZN15Adafruit_SPITFT12SPI_SCK_HIGHEv.isra.0>
        for(uint8_t bit=0; bit<8; bit++) {
   b569c:	3e01      	subs	r6, #1
            SPI_SCK_LOW();
   b569e:	f994 0026 	ldrsb.w	r0, [r4, #38]	; 0x26
   b56a2:	f7ff fcbe 	bl	b5022 <_ZN15Adafruit_SPITFT11SPI_SCK_LOWEv.isra.0>
            b <<= 1;
   b56a6:	006d      	lsls	r5, r5, #1
        for(uint8_t bit=0; bit<8; bit++) {
   b56a8:	f016 06ff 	ands.w	r6, r6, #255	; 0xff
            b <<= 1;
   b56ac:	b2ed      	uxtb	r5, r5
        for(uint8_t bit=0; bit<8; bit++) {
   b56ae:	d1eb      	bne.n	b5688 <_ZN15Adafruit_SPITFT8spiWriteEh+0x1c>
}
   b56b0:	bd70      	pop	{r4, r5, r6, pc}
            else         SPI_MOSI_LOW();
   b56b2:	f7ff fcbe 	bl	b5032 <_ZN15Adafruit_SPITFT12SPI_MOSI_LOWEv.isra.0>
   b56b6:	e7ed      	b.n	b5694 <_ZN15Adafruit_SPITFT8spiWriteEh+0x28>
        TFT_WR_STROBE();
   b56b8:	f7ff fde3 	bl	b5282 <_ZN15Adafruit_SPITFT13TFT_WR_STROBEEv>
}
   b56bc:	e7f8      	b.n	b56b0 <_ZN15Adafruit_SPITFT8spiWriteEh+0x44>

000b56be <_ZN15Adafruit_SPITFT12writeCommandEh>:
void Adafruit_SPITFT::writeCommand(uint8_t cmd) {
   b56be:	b513      	push	{r0, r1, r4, lr}
   b56c0:	4604      	mov	r4, r0
    SPI_DC_LOW();
   b56c2:	f990 003f 	ldrsb.w	r0, [r0, #63]	; 0x3f
void Adafruit_SPITFT::writeCommand(uint8_t cmd) {
   b56c6:	9101      	str	r1, [sp, #4]
    SPI_DC_LOW();
   b56c8:	f7ff fcbb 	bl	b5042 <_ZN15Adafruit_SPITFT10SPI_DC_LOWEv.isra.0>
    spiWrite(cmd);
   b56cc:	4620      	mov	r0, r4
   b56ce:	9901      	ldr	r1, [sp, #4]
   b56d0:	f7ff ffcc 	bl	b566c <_ZN15Adafruit_SPITFT8spiWriteEh>
    SPI_DC_HIGH();
   b56d4:	f994 003f 	ldrsb.w	r0, [r4, #63]	; 0x3f
}
   b56d8:	b002      	add	sp, #8
   b56da:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    SPI_DC_HIGH();
   b56de:	f7ff bcb4 	b.w	b504a <_ZN15Adafruit_SPITFT11SPI_DC_HIGHEv.isra.0>

000b56e2 <_ZN15Adafruit_SPITFT13invertDisplayEb>:
void Adafruit_SPITFT::invertDisplay(bool i) {
   b56e2:	b570      	push	{r4, r5, r6, lr}
    startWrite();
   b56e4:	6803      	ldr	r3, [r0, #0]
void Adafruit_SPITFT::invertDisplay(bool i) {
   b56e6:	460d      	mov	r5, r1
    startWrite();
   b56e8:	695b      	ldr	r3, [r3, #20]
void Adafruit_SPITFT::invertDisplay(bool i) {
   b56ea:	4604      	mov	r4, r0
    startWrite();
   b56ec:	4798      	blx	r3
    writeCommand(i ? invertOnCommand : invertOffCommand);
   b56ee:	b155      	cbz	r5, b5706 <_ZN15Adafruit_SPITFT13invertDisplayEb+0x24>
   b56f0:	f894 1044 	ldrb.w	r1, [r4, #68]	; 0x44
   b56f4:	4620      	mov	r0, r4
   b56f6:	f7ff ffe2 	bl	b56be <_ZN15Adafruit_SPITFT12writeCommandEh>
    endWrite();
   b56fa:	6823      	ldr	r3, [r4, #0]
   b56fc:	4620      	mov	r0, r4
   b56fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
}
   b5700:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    endWrite();
   b5704:	4718      	bx	r3
    writeCommand(i ? invertOnCommand : invertOffCommand);
   b5706:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
   b570a:	e7f3      	b.n	b56f4 <_ZN15Adafruit_SPITFT13invertDisplayEb+0x12>

000b570c <_ZN15Adafruit_SPITFT11SPI_WRITE16Et>:
void Adafruit_SPITFT::SPI_WRITE16(uint16_t w) {
   b570c:	b570      	push	{r4, r5, r6, lr}
    if(connection == TFT_HARD_SPI) {
   b570e:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
void Adafruit_SPITFT::SPI_WRITE16(uint16_t w) {
   b5712:	4605      	mov	r5, r0
   b5714:	460c      	mov	r4, r1
    if(connection == TFT_HARD_SPI) {
   b5716:	b94b      	cbnz	r3, b572c <_ZN15Adafruit_SPITFT11SPI_WRITE16Et+0x20>
        hwspi._spi->transfer(w >> 8);
   b5718:	0a09      	lsrs	r1, r1, #8
   b571a:	6a40      	ldr	r0, [r0, #36]	; 0x24
   b571c:	f001 fd6c 	bl	b71f8 <_ZN8SPIClass8transferEh>
        hwspi._spi->transfer(w);
   b5720:	6a68      	ldr	r0, [r5, #36]	; 0x24
   b5722:	b2e1      	uxtb	r1, r4
}
   b5724:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        hwspi._spi->transfer(w);
   b5728:	f001 bd66 	b.w	b71f8 <_ZN8SPIClass8transferEh>
    } else if(connection == TFT_SOFT_SPI) {
   b572c:	2b01      	cmp	r3, #1
   b572e:	d118      	bne.n	b5762 <_ZN15Adafruit_SPITFT11SPI_WRITE16Et+0x56>
   b5730:	2610      	movs	r6, #16
            if(w & 0x8000) SPI_MOSI_HIGH();
   b5732:	0423      	lsls	r3, r4, #16
   b5734:	f995 0024 	ldrsb.w	r0, [r5, #36]	; 0x24
   b5738:	d510      	bpl.n	b575c <_ZN15Adafruit_SPITFT11SPI_WRITE16Et+0x50>
   b573a:	f7ff fc7e 	bl	b503a <_ZN15Adafruit_SPITFT13SPI_MOSI_HIGHEv.isra.0>
            SPI_SCK_HIGH();
   b573e:	f995 0026 	ldrsb.w	r0, [r5, #38]	; 0x26
   b5742:	f7ff fc72 	bl	b502a <_ZN15Adafruit_SPITFT12SPI_SCK_HIGHEv.isra.0>
        for(uint8_t bit=0; bit<16; bit++) {
   b5746:	3e01      	subs	r6, #1
            SPI_SCK_LOW();
   b5748:	f995 0026 	ldrsb.w	r0, [r5, #38]	; 0x26
   b574c:	f7ff fc69 	bl	b5022 <_ZN15Adafruit_SPITFT11SPI_SCK_LOWEv.isra.0>
            w <<= 1;
   b5750:	0064      	lsls	r4, r4, #1
        for(uint8_t bit=0; bit<16; bit++) {
   b5752:	f016 06ff 	ands.w	r6, r6, #255	; 0xff
            w <<= 1;
   b5756:	b2a4      	uxth	r4, r4
        for(uint8_t bit=0; bit<16; bit++) {
   b5758:	d1eb      	bne.n	b5732 <_ZN15Adafruit_SPITFT11SPI_WRITE16Et+0x26>
}
   b575a:	bd70      	pop	{r4, r5, r6, pc}
            else           SPI_MOSI_LOW();
   b575c:	f7ff fc69 	bl	b5032 <_ZN15Adafruit_SPITFT12SPI_MOSI_LOWEv.isra.0>
   b5760:	e7ed      	b.n	b573e <_ZN15Adafruit_SPITFT11SPI_WRITE16Et+0x32>
        TFT_WR_STROBE();
   b5762:	f7ff fd8e 	bl	b5282 <_ZN15Adafruit_SPITFT13TFT_WR_STROBEEv>
}
   b5766:	e7f8      	b.n	b575a <_ZN15Adafruit_SPITFT11SPI_WRITE16Et+0x4e>

000b5768 <_ZN15Adafruit_SPITFT10writePixelEsst>:
void Adafruit_SPITFT::writePixel(int16_t x, int16_t y, uint16_t color) {
   b5768:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    if((x >= 0) && (x < _width) && (y >= 0) && (y < _height)) {
   b576a:	2900      	cmp	r1, #0
void Adafruit_SPITFT::writePixel(int16_t x, int16_t y, uint16_t color) {
   b576c:	4604      	mov	r4, r0
   b576e:	461e      	mov	r6, r3
    if((x >= 0) && (x < _width) && (y >= 0) && (y < _height)) {
   b5770:	db17      	blt.n	b57a2 <_ZN15Adafruit_SPITFT10writePixelEsst+0x3a>
   b5772:	f9b0 300c 	ldrsh.w	r3, [r0, #12]
   b5776:	428b      	cmp	r3, r1
   b5778:	dd13      	ble.n	b57a2 <_ZN15Adafruit_SPITFT10writePixelEsst+0x3a>
   b577a:	2a00      	cmp	r2, #0
   b577c:	db11      	blt.n	b57a2 <_ZN15Adafruit_SPITFT10writePixelEsst+0x3a>
   b577e:	f9b0 300e 	ldrsh.w	r3, [r0, #14]
   b5782:	4293      	cmp	r3, r2
   b5784:	dd0d      	ble.n	b57a2 <_ZN15Adafruit_SPITFT10writePixelEsst+0x3a>
        setAddrWindow(x, y, 1, 1);
   b5786:	6805      	ldr	r5, [r0, #0]
   b5788:	2301      	movs	r3, #1
   b578a:	9300      	str	r3, [sp, #0]
   b578c:	6d6f      	ldr	r7, [r5, #84]	; 0x54
   b578e:	b292      	uxth	r2, r2
   b5790:	b289      	uxth	r1, r1
   b5792:	47b8      	blx	r7
        SPI_WRITE16(color);
   b5794:	4631      	mov	r1, r6
   b5796:	4620      	mov	r0, r4
}
   b5798:	b003      	add	sp, #12
   b579a:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
        SPI_WRITE16(color);
   b579e:	f7ff bfb5 	b.w	b570c <_ZN15Adafruit_SPITFT11SPI_WRITE16Et>
}
   b57a2:	b003      	add	sp, #12
   b57a4:	bdf0      	pop	{r4, r5, r6, r7, pc}

000b57a6 <_ZN15Adafruit_SPITFT9drawPixelEsst>:
void Adafruit_SPITFT::drawPixel(int16_t x, int16_t y, uint16_t color) {
   b57a6:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
    if((x >= 0) && (x < _width) && (y >= 0) && (y < _height)) {
   b57aa:	1e0d      	subs	r5, r1, #0
void Adafruit_SPITFT::drawPixel(int16_t x, int16_t y, uint16_t color) {
   b57ac:	4604      	mov	r4, r0
   b57ae:	4616      	mov	r6, r2
   b57b0:	461f      	mov	r7, r3
    if((x >= 0) && (x < _width) && (y >= 0) && (y < _height)) {
   b57b2:	db20      	blt.n	b57f6 <_ZN15Adafruit_SPITFT9drawPixelEsst+0x50>
   b57b4:	f9b0 300c 	ldrsh.w	r3, [r0, #12]
   b57b8:	42ab      	cmp	r3, r5
   b57ba:	dd1c      	ble.n	b57f6 <_ZN15Adafruit_SPITFT9drawPixelEsst+0x50>
   b57bc:	2a00      	cmp	r2, #0
   b57be:	db1a      	blt.n	b57f6 <_ZN15Adafruit_SPITFT9drawPixelEsst+0x50>
   b57c0:	f9b0 300e 	ldrsh.w	r3, [r0, #14]
   b57c4:	4293      	cmp	r3, r2
   b57c6:	dd16      	ble.n	b57f6 <_ZN15Adafruit_SPITFT9drawPixelEsst+0x50>
        startWrite();
   b57c8:	6803      	ldr	r3, [r0, #0]
   b57ca:	695b      	ldr	r3, [r3, #20]
   b57cc:	4798      	blx	r3
        setAddrWindow(x, y, 1, 1);
   b57ce:	6822      	ldr	r2, [r4, #0]
   b57d0:	2301      	movs	r3, #1
   b57d2:	9300      	str	r3, [sp, #0]
   b57d4:	f8d2 8054 	ldr.w	r8, [r2, #84]	; 0x54
   b57d8:	b2a9      	uxth	r1, r5
   b57da:	b2b2      	uxth	r2, r6
   b57dc:	4620      	mov	r0, r4
   b57de:	47c0      	blx	r8
        SPI_WRITE16(color);
   b57e0:	4620      	mov	r0, r4
   b57e2:	4639      	mov	r1, r7
   b57e4:	f7ff ff92 	bl	b570c <_ZN15Adafruit_SPITFT11SPI_WRITE16Et>
        endWrite();
   b57e8:	6823      	ldr	r3, [r4, #0]
   b57ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b57ec:	4620      	mov	r0, r4
}
   b57ee:	b002      	add	sp, #8
   b57f0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
        endWrite();
   b57f4:	4718      	bx	r3
}
   b57f6:	b002      	add	sp, #8
   b57f8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000b57fc <_ZN15Adafruit_SPITFT11SPI_WRITE32Em>:
void Adafruit_SPITFT::SPI_WRITE32(uint32_t l) {
   b57fc:	b570      	push	{r4, r5, r6, lr}
    if(connection == TFT_HARD_SPI) {
   b57fe:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
void Adafruit_SPITFT::SPI_WRITE32(uint32_t l) {
   b5802:	4604      	mov	r4, r0
   b5804:	460d      	mov	r5, r1
    if(connection == TFT_HARD_SPI) {
   b5806:	b99b      	cbnz	r3, b5830 <_ZN15Adafruit_SPITFT11SPI_WRITE32Em+0x34>
        hwspi._spi->transfer(l >> 24);
   b5808:	0e09      	lsrs	r1, r1, #24
   b580a:	6a40      	ldr	r0, [r0, #36]	; 0x24
   b580c:	f001 fcf4 	bl	b71f8 <_ZN8SPIClass8transferEh>
        hwspi._spi->transfer(l >> 16);
   b5810:	f3c5 4107 	ubfx	r1, r5, #16, #8
   b5814:	6a60      	ldr	r0, [r4, #36]	; 0x24
   b5816:	f001 fcef 	bl	b71f8 <_ZN8SPIClass8transferEh>
        hwspi._spi->transfer(l >> 8);
   b581a:	f3c5 2107 	ubfx	r1, r5, #8, #8
   b581e:	6a60      	ldr	r0, [r4, #36]	; 0x24
   b5820:	f001 fcea 	bl	b71f8 <_ZN8SPIClass8transferEh>
        hwspi._spi->transfer(l);
   b5824:	6a60      	ldr	r0, [r4, #36]	; 0x24
   b5826:	b2e9      	uxtb	r1, r5
}
   b5828:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        hwspi._spi->transfer(l);
   b582c:	f001 bce4 	b.w	b71f8 <_ZN8SPIClass8transferEh>
    } else if(connection == TFT_SOFT_SPI) {
   b5830:	2b01      	cmp	r3, #1
   b5832:	d118      	bne.n	b5866 <_ZN15Adafruit_SPITFT11SPI_WRITE32Em+0x6a>
   b5834:	2620      	movs	r6, #32
            if(l & 0x80000000) SPI_MOSI_HIGH();
   b5836:	2d00      	cmp	r5, #0
   b5838:	f994 0024 	ldrsb.w	r0, [r4, #36]	; 0x24
   b583c:	da10      	bge.n	b5860 <_ZN15Adafruit_SPITFT11SPI_WRITE32Em+0x64>
   b583e:	f7ff fbfc 	bl	b503a <_ZN15Adafruit_SPITFT13SPI_MOSI_HIGHEv.isra.0>
            SPI_SCK_HIGH();
   b5842:	f994 0026 	ldrsb.w	r0, [r4, #38]	; 0x26
   b5846:	f7ff fbf0 	bl	b502a <_ZN15Adafruit_SPITFT12SPI_SCK_HIGHEv.isra.0>
        for(uint8_t bit=0; bit<32; bit++) {
   b584a:	3e01      	subs	r6, #1
            SPI_SCK_LOW();
   b584c:	f994 0026 	ldrsb.w	r0, [r4, #38]	; 0x26
   b5850:	f7ff fbe7 	bl	b5022 <_ZN15Adafruit_SPITFT11SPI_SCK_LOWEv.isra.0>
        for(uint8_t bit=0; bit<32; bit++) {
   b5854:	f016 06ff 	ands.w	r6, r6, #255	; 0xff
            l <<= 1;
   b5858:	ea4f 0545 	mov.w	r5, r5, lsl #1
        for(uint8_t bit=0; bit<32; bit++) {
   b585c:	d1eb      	bne.n	b5836 <_ZN15Adafruit_SPITFT11SPI_WRITE32Em+0x3a>
}
   b585e:	bd70      	pop	{r4, r5, r6, pc}
            else               SPI_MOSI_LOW();
   b5860:	f7ff fbe7 	bl	b5032 <_ZN15Adafruit_SPITFT12SPI_MOSI_LOWEv.isra.0>
   b5864:	e7ed      	b.n	b5842 <_ZN15Adafruit_SPITFT11SPI_WRITE32Em+0x46>
        TFT_WR_STROBE();
   b5866:	f7ff fd0c 	bl	b5282 <_ZN15Adafruit_SPITFT13TFT_WR_STROBEEv>
}
   b586a:	e7f8      	b.n	b585e <_ZN15Adafruit_SPITFT11SPI_WRITE32Em+0x62>

000b586c <_ZN15Adafruit_ST7789D1Ev>:

//#include "Adafruit_ST77xx.h"
#include "../lib/Adafruit_ST7735_RK/src/Adafruit_ST77xx.h"

/// Subclass of ST77XX type display for ST7789 TFT Driver
class Adafruit_ST7789 : public Adafruit_ST77xx {
   b586c:	4770      	bx	lr

000b586e <_ZN15Adafruit_ST778911setRotationEh>:
*/
/**************************************************************************/
void Adafruit_ST7789::setRotation(uint8_t m) {
  uint8_t madctl = 0;

  rotation = m & 3; // can't be higher than 3
   b586e:	f001 0103 	and.w	r1, r1, #3

  switch (rotation) {
   b5872:	2902      	cmp	r1, #2
void Adafruit_ST7789::setRotation(uint8_t m) {
   b5874:	b570      	push	{r4, r5, r6, lr}
   b5876:	4604      	mov	r4, r0
  rotation = m & 3; // can't be higher than 3
   b5878:	7681      	strb	r1, [r0, #26]
  switch (rotation) {
   b587a:	d024      	beq.n	b58c6 <_ZN15Adafruit_ST778911setRotationEh+0x58>
   b587c:	2903      	cmp	r1, #3
   b587e:	d025      	beq.n	b58cc <_ZN15Adafruit_ST778911setRotationEh+0x5e>
   b5880:	2901      	cmp	r1, #1
   b5882:	f890 304c 	ldrb.w	r3, [r0, #76]	; 0x4c
   b5886:	f890 204d 	ldrb.w	r2, [r0, #77]	; 0x4d
   case 0:
     madctl  = ST77XX_MADCTL_MX | ST77XX_MADCTL_MY | ST77XX_MADCTL_RGB;
     _xstart = _colstart;
   b588a:	bf1d      	ittte	ne
   b588c:	f8a0 3040 	strhne.w	r3, [r0, #64]	; 0x40
     _ystart = _rowstart;
   b5890:	f8a0 2042 	strhne.w	r2, [r0, #66]	; 0x42
     madctl  = ST77XX_MADCTL_MX | ST77XX_MADCTL_MY | ST77XX_MADCTL_RGB;
   b5894:	25c0      	movne	r5, #192	; 0xc0
     break;
   case 1:
     madctl  = ST77XX_MADCTL_MY | ST77XX_MADCTL_MV | ST77XX_MADCTL_RGB;
     _xstart = _rowstart;
   b5896:	f8a0 2040 	strheq.w	r2, [r0, #64]	; 0x40
     _ystart = _colstart;
   b589a:	bf04      	itt	eq
   b589c:	f8a0 3042 	strheq.w	r3, [r0, #66]	; 0x42
     madctl  = ST77XX_MADCTL_MY | ST77XX_MADCTL_MV | ST77XX_MADCTL_RGB;
   b58a0:	25a0      	moveq	r5, #160	; 0xa0
     madctl  = ST77XX_MADCTL_MX | ST77XX_MADCTL_MV | ST77XX_MADCTL_RGB;
     _xstart = 0;
     _ystart = 0;
     break;
  }
  startWrite();
   b58a2:	6823      	ldr	r3, [r4, #0]
   b58a4:	4620      	mov	r0, r4
   b58a6:	695b      	ldr	r3, [r3, #20]
   b58a8:	4798      	blx	r3
  writeCommand(ST77XX_MADCTL);
   b58aa:	4620      	mov	r0, r4
   b58ac:	2136      	movs	r1, #54	; 0x36
   b58ae:	f7ff ff06 	bl	b56be <_ZN15Adafruit_SPITFT12writeCommandEh>
  spiWrite(madctl);
   b58b2:	4620      	mov	r0, r4
   b58b4:	4629      	mov	r1, r5
   b58b6:	f7ff fed9 	bl	b566c <_ZN15Adafruit_SPITFT8spiWriteEh>
  endWrite();
   b58ba:	6823      	ldr	r3, [r4, #0]
   b58bc:	4620      	mov	r0, r4
   b58be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
}
   b58c0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  endWrite();
   b58c4:	4718      	bx	r3
     _xstart = 0;
   b58c6:	2500      	movs	r5, #0
   b58c8:	6405      	str	r5, [r0, #64]	; 0x40
     break;
   b58ca:	e7ea      	b.n	b58a2 <_ZN15Adafruit_ST778911setRotationEh+0x34>
     _xstart = 0;
   b58cc:	2300      	movs	r3, #0
   b58ce:	6403      	str	r3, [r0, #64]	; 0x40
     madctl  = ST77XX_MADCTL_MX | ST77XX_MADCTL_MV | ST77XX_MADCTL_RGB;
   b58d0:	2560      	movs	r5, #96	; 0x60
     break;
   b58d2:	e7e6      	b.n	b58a2 <_ZN15Adafruit_ST778911setRotationEh+0x34>

000b58d4 <_ZN15Adafruit_ST7789D0Ev>:
   b58d4:	b510      	push	{r4, lr}
   b58d6:	2150      	movs	r1, #80	; 0x50
   b58d8:	4604      	mov	r4, r0
   b58da:	f7fe fbe0 	bl	b409e <_ZdlPvj>
   b58de:	4620      	mov	r0, r4
   b58e0:	bd10      	pop	{r4, pc}
	...

000b58e4 <_ZN15Adafruit_ST7789C1Eaaa>:
Adafruit_ST7789::Adafruit_ST7789(int8_t cs, int8_t dc, int8_t rst) :
   b58e4:	b510      	push	{r4, lr}
   b58e6:	4604      	mov	r4, r0
  Adafruit_ST77xx(cs, dc, rst) {
   b58e8:	f000 f89a 	bl	b5a20 <_ZN15Adafruit_ST77xxC1Eaaa>
   b58ec:	4b01      	ldr	r3, [pc, #4]	; (b58f4 <_ZN15Adafruit_ST7789C1Eaaa+0x10>)
   b58ee:	6023      	str	r3, [r4, #0]
}
   b58f0:	4620      	mov	r0, r4
   b58f2:	bd10      	pop	{r4, pc}
   b58f4:	000b8eec 	.word	0x000b8eec

000b58f8 <_ZN15Adafruit_ST77894initEtt>:
void Adafruit_ST7789::init(uint16_t width, uint16_t height) {
   b58f8:	b570      	push	{r4, r5, r6, lr}
  commonInit(NULL);
   b58fa:	2100      	movs	r1, #0
void Adafruit_ST7789::init(uint16_t width, uint16_t height) {
   b58fc:	4604      	mov	r4, r0
  _colstart = ST7789_240x240_XSTART;
   b58fe:	2500      	movs	r5, #0
  commonInit(NULL);
   b5900:	f000 f8e5 	bl	b5ace <_ZN15Adafruit_ST77xx10commonInitEPKh>
  _width    = 240;
   b5904:	4b07      	ldr	r3, [pc, #28]	; (b5924 <_ZN15Adafruit_ST77894initEtt+0x2c>)
   b5906:	60e3      	str	r3, [r4, #12]
  displayInit(cmd_240x240);
   b5908:	4620      	mov	r0, r4
   b590a:	4907      	ldr	r1, [pc, #28]	; (b5928 <_ZN15Adafruit_ST77894initEtt+0x30>)
  _colstart = ST7789_240x240_XSTART;
   b590c:	f8a4 504c 	strh.w	r5, [r4, #76]	; 0x4c
  displayInit(cmd_240x240);
   b5910:	f000 f89a 	bl	b5a48 <_ZN15Adafruit_ST77xx11displayInitEPKh>
  setRotation(0);
   b5914:	6823      	ldr	r3, [r4, #0]
   b5916:	4629      	mov	r1, r5
   b5918:	4620      	mov	r0, r4
   b591a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
}
   b591c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  setRotation(0);
   b5920:	4718      	bx	r3
   b5922:	bf00      	nop
   b5924:	014000f0 	.word	0x014000f0
   b5928:	000b8ec0 	.word	0x000b8ec0

000b592c <_ZN15Adafruit_ST77xxD1Ev>:
#define ST77XX_MAGENTA    0xF81F
#define ST77XX_YELLOW     0xFFE0
#define	ST77XX_ORANGE     0xFC00

/// Subclass of SPITFT for ST77xx displays (lots in common!)
class Adafruit_ST77xx : public Adafruit_SPITFT {
   b592c:	4770      	bx	lr

000b592e <_ZN15Adafruit_ST77xx11setRotationEh>:
/*!
    @brief  Set origin of (0,0) and orientation of TFT display
    @param  m  The index for rotation, from 0-3 inclusive
*/
/**************************************************************************/
void Adafruit_ST77xx::setRotation(uint8_t m) {
   b592e:	b570      	push	{r4, r5, r6, lr}
  uint8_t madctl = 0;

  rotation = m % 4; // can't be higher than 3
   b5930:	f001 0103 	and.w	r1, r1, #3

  switch(rotation) {
   b5934:	2902      	cmp	r1, #2
   case 0:
     madctl  = ST77XX_MADCTL_MX | ST77XX_MADCTL_MY | ST77XX_MADCTL_RGB;
     _xstart = _colstart;
   b5936:	f890 204c 	ldrb.w	r2, [r0, #76]	; 0x4c
     _ystart = _rowstart;
   b593a:	f890 304d 	ldrb.w	r3, [r0, #77]	; 0x4d
  rotation = m % 4; // can't be higher than 3
   b593e:	7681      	strb	r1, [r0, #26]
void Adafruit_ST77xx::setRotation(uint8_t m) {
   b5940:	4604      	mov	r4, r0
  switch(rotation) {
   b5942:	d020      	beq.n	b5986 <_ZN15Adafruit_ST77xx11setRotationEh+0x58>
   b5944:	2903      	cmp	r1, #3
   b5946:	d024      	beq.n	b5992 <_ZN15Adafruit_ST77xx11setRotationEh+0x64>
   b5948:	2901      	cmp	r1, #1
     _xstart = _colstart;
   b594a:	bf1d      	ittte	ne
   b594c:	f8a0 2040 	strhne.w	r2, [r0, #64]	; 0x40
     _ystart = _rowstart;
   b5950:	f8a0 3042 	strhne.w	r3, [r0, #66]	; 0x42
     madctl  = ST77XX_MADCTL_MX | ST77XX_MADCTL_MY | ST77XX_MADCTL_RGB;
   b5954:	25c0      	movne	r5, #192	; 0xc0
     break;
   case 1:
     madctl  = ST77XX_MADCTL_MY | ST77XX_MADCTL_MV | ST77XX_MADCTL_RGB;
     _ystart = _colstart;
   b5956:	f8a0 2042 	strheq.w	r2, [r0, #66]	; 0x42
     _xstart = _rowstart;
   b595a:	bf04      	itt	eq
   b595c:	f8a0 3040 	strheq.w	r3, [r0, #64]	; 0x40
     madctl  = ST77XX_MADCTL_MY | ST77XX_MADCTL_MV | ST77XX_MADCTL_RGB;
   b5960:	25a0      	moveq	r5, #160	; 0xa0
     madctl  = ST77XX_MADCTL_MX | ST77XX_MADCTL_MV | ST77XX_MADCTL_RGB;
     _ystart = _colstart;
     _xstart = _rowstart;
     break;
  }
  startWrite();
   b5962:	6823      	ldr	r3, [r4, #0]
   b5964:	4620      	mov	r0, r4
   b5966:	695b      	ldr	r3, [r3, #20]
   b5968:	4798      	blx	r3
  writeCommand(ST77XX_MADCTL);
   b596a:	4620      	mov	r0, r4
   b596c:	2136      	movs	r1, #54	; 0x36
   b596e:	f7ff fea6 	bl	b56be <_ZN15Adafruit_SPITFT12writeCommandEh>
  spiWrite(madctl);
   b5972:	4620      	mov	r0, r4
   b5974:	4629      	mov	r1, r5
   b5976:	f7ff fe79 	bl	b566c <_ZN15Adafruit_SPITFT8spiWriteEh>
  endWrite();
   b597a:	6823      	ldr	r3, [r4, #0]
   b597c:	4620      	mov	r0, r4
   b597e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
}
   b5980:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  endWrite();
   b5984:	4718      	bx	r3
     _xstart = _colstart;
   b5986:	f8a0 2040 	strh.w	r2, [r0, #64]	; 0x40
     _ystart = _rowstart;
   b598a:	f8a0 3042 	strh.w	r3, [r0, #66]	; 0x42
     madctl  = ST77XX_MADCTL_RGB;
   b598e:	2500      	movs	r5, #0
     break;
   b5990:	e7e7      	b.n	b5962 <_ZN15Adafruit_ST77xx11setRotationEh+0x34>
     _ystart = _colstart;
   b5992:	f8a0 2042 	strh.w	r2, [r0, #66]	; 0x42
     _xstart = _rowstart;
   b5996:	f8a0 3040 	strh.w	r3, [r0, #64]	; 0x40
     madctl  = ST77XX_MADCTL_MX | ST77XX_MADCTL_MV | ST77XX_MADCTL_RGB;
   b599a:	2560      	movs	r5, #96	; 0x60
     break;
   b599c:	e7e1      	b.n	b5962 <_ZN15Adafruit_ST77xx11setRotationEh+0x34>
	...

000b59a0 <_ZN15Adafruit_ST77xx5beginEm>:
    freq = SPI_DEFAULT_FREQ;
   b59a0:	4b06      	ldr	r3, [pc, #24]	; (b59bc <_ZN15Adafruit_ST77xx5beginEm+0x1c>)
   b59a2:	2900      	cmp	r1, #0
   b59a4:	bf18      	it	ne
   b59a6:	460b      	movne	r3, r1
  invertOnCommand  = ST77XX_INVON;
   b59a8:	f242 0121 	movw	r1, #8225	; 0x2021
   b59ac:	f8a0 1044 	strh.w	r1, [r0, #68]	; 0x44
  _freq = freq;
   b59b0:	6483      	str	r3, [r0, #72]	; 0x48
  initSPI(freq);
   b59b2:	2200      	movs	r2, #0
   b59b4:	4619      	mov	r1, r3
   b59b6:	f7ff bba1 	b.w	b50fc <_ZN15Adafruit_SPITFT7initSPIEmh>
   b59ba:	bf00      	nop
   b59bc:	00f42400 	.word	0x00f42400

000b59c0 <_ZN15Adafruit_ST77xx13setAddrWindowEtttt>:
  uint16_t h) {
   b59c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  x += _xstart;
   b59c2:	f8b0 7040 	ldrh.w	r7, [r0, #64]	; 0x40
  y += _ystart;
   b59c6:	f8b0 5042 	ldrh.w	r5, [r0, #66]	; 0x42
  uint16_t h) {
   b59ca:	f8bd 6018 	ldrh.w	r6, [sp, #24]
  x += _xstart;
   b59ce:	4439      	add	r1, r7
  uint32_t xa = ((uint32_t)x << 16) | (x+w-1);
   b59d0:	fa13 f781 	uxtah	r7, r3, r1
  y += _ystart;
   b59d4:	442a      	add	r2, r5
  uint32_t ya = ((uint32_t)y << 16) | (y+h-1); 
   b59d6:	fa16 f582 	uxtah	r5, r6, r2
  uint32_t xa = ((uint32_t)x << 16) | (x+w-1);
   b59da:	3f01      	subs	r7, #1
  uint16_t h) {
   b59dc:	4604      	mov	r4, r0
  uint32_t xa = ((uint32_t)x << 16) | (x+w-1);
   b59de:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
  uint32_t ya = ((uint32_t)y << 16) | (y+h-1); 
   b59e2:	3d01      	subs	r5, #1
  writeCommand(ST77XX_CASET); // Column addr set
   b59e4:	212a      	movs	r1, #42	; 0x2a
  uint32_t ya = ((uint32_t)y << 16) | (y+h-1); 
   b59e6:	ea45 4502 	orr.w	r5, r5, r2, lsl #16
  writeCommand(ST77XX_CASET); // Column addr set
   b59ea:	f7ff fe68 	bl	b56be <_ZN15Adafruit_SPITFT12writeCommandEh>
  SPI_WRITE32(xa);
   b59ee:	4639      	mov	r1, r7
   b59f0:	4620      	mov	r0, r4
   b59f2:	f7ff ff03 	bl	b57fc <_ZN15Adafruit_SPITFT11SPI_WRITE32Em>
  writeCommand(ST77XX_RASET); // Row addr set
   b59f6:	4620      	mov	r0, r4
   b59f8:	212b      	movs	r1, #43	; 0x2b
   b59fa:	f7ff fe60 	bl	b56be <_ZN15Adafruit_SPITFT12writeCommandEh>
  SPI_WRITE32(ya);
   b59fe:	4629      	mov	r1, r5
   b5a00:	4620      	mov	r0, r4
   b5a02:	f7ff fefb 	bl	b57fc <_ZN15Adafruit_SPITFT11SPI_WRITE32Em>
  writeCommand(ST77XX_RAMWR); // write to RAM
   b5a06:	4620      	mov	r0, r4
   b5a08:	212c      	movs	r1, #44	; 0x2c
}
   b5a0a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
  writeCommand(ST77XX_RAMWR); // write to RAM
   b5a0e:	f7ff be56 	b.w	b56be <_ZN15Adafruit_SPITFT12writeCommandEh>

000b5a12 <_ZN15Adafruit_ST77xxD0Ev>:
   b5a12:	b510      	push	{r4, lr}
   b5a14:	2150      	movs	r1, #80	; 0x50
   b5a16:	4604      	mov	r4, r0
   b5a18:	f7fe fb41 	bl	b409e <_ZdlPvj>
   b5a1c:	4620      	mov	r0, r4
   b5a1e:	bd10      	pop	{r4, pc}

000b5a20 <_ZN15Adafruit_ST77xxC1Eaaa>:
Adafruit_ST77xx::Adafruit_ST77xx(int8_t cs, int8_t dc, int8_t rst) :
   b5a20:	b513      	push	{r0, r1, r4, lr}
  Adafruit_SPITFT(ST7735_TFTWIDTH_128, ST7735_TFTHEIGHT_160, cs, dc, rst) {
   b5a22:	e9cd 2300 	strd	r2, r3, [sp]
   b5a26:	460b      	mov	r3, r1
   b5a28:	22a0      	movs	r2, #160	; 0xa0
   b5a2a:	2180      	movs	r1, #128	; 0x80
Adafruit_ST77xx::Adafruit_ST77xx(int8_t cs, int8_t dc, int8_t rst) :
   b5a2c:	4604      	mov	r4, r0
  Adafruit_SPITFT(ST7735_TFTWIDTH_128, ST7735_TFTHEIGHT_160, cs, dc, rst) {
   b5a2e:	f7ff fb33 	bl	b5098 <_ZN15Adafruit_SPITFTC1Ettaaa>
   b5a32:	4b04      	ldr	r3, [pc, #16]	; (b5a44 <_ZN15Adafruit_ST77xxC1Eaaa+0x24>)
   b5a34:	6023      	str	r3, [r4, #0]
}
   b5a36:	4620      	mov	r0, r4
  Adafruit_SPITFT(ST7735_TFTWIDTH_128, ST7735_TFTHEIGHT_160, cs, dc, rst) {
   b5a38:	2300      	movs	r3, #0
   b5a3a:	f8a4 304c 	strh.w	r3, [r4, #76]	; 0x4c
}
   b5a3e:	b002      	add	sp, #8
   b5a40:	bd10      	pop	{r4, pc}
   b5a42:	bf00      	nop
   b5a44:	000b8f4c 	.word	0x000b8f4c

000b5a48 <_ZN15Adafruit_ST77xx11displayInitEPKh>:
void Adafruit_ST77xx::displayInit(const uint8_t *addr) {
   b5a48:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  startWrite();
   b5a4c:	6803      	ldr	r3, [r0, #0]
void Adafruit_ST77xx::displayInit(const uint8_t *addr) {
   b5a4e:	460c      	mov	r4, r1
  startWrite();
   b5a50:	695b      	ldr	r3, [r3, #20]
void Adafruit_ST77xx::displayInit(const uint8_t *addr) {
   b5a52:	4605      	mov	r5, r0
  startWrite();
   b5a54:	4798      	blx	r3
  numCommands = pgm_read_byte(addr++);   // Number of commands to follow
   b5a56:	f814 7b01 	ldrb.w	r7, [r4], #1
  while(numCommands--) {                 // For each command...
   b5a5a:	b397      	cbz	r7, b5ac2 <_ZN15Adafruit_ST77xx11displayInitEPKh+0x7a>
    writeCommand(pgm_read_byte(addr++)); // Read, issue command
   b5a5c:	4626      	mov	r6, r4
   b5a5e:	4628      	mov	r0, r5
   b5a60:	f816 1b02 	ldrb.w	r1, [r6], #2
   b5a64:	f7ff fe2b 	bl	b56be <_ZN15Adafruit_SPITFT12writeCommandEh>
    numArgs  = pgm_read_byte(addr++);    // Number of args to follow
   b5a68:	f894 9001 	ldrb.w	r9, [r4, #1]
    numArgs &= ~ST_CMD_DELAY;            // Mask out delay bit
   b5a6c:	f009 087f 	and.w	r8, r9, #127	; 0x7f
   b5a70:	4644      	mov	r4, r8
    numArgs  = pgm_read_byte(addr++);    // Number of args to follow
   b5a72:	46b2      	mov	sl, r6
    while(numArgs--) {                   // For each argument...
   b5a74:	3c01      	subs	r4, #1
   b5a76:	b2e4      	uxtb	r4, r4
   b5a78:	2cff      	cmp	r4, #255	; 0xff
   b5a7a:	d005      	beq.n	b5a88 <_ZN15Adafruit_ST77xx11displayInitEPKh+0x40>
      spiWrite(pgm_read_byte(addr++));   // Read, issue argument
   b5a7c:	f81a 1b01 	ldrb.w	r1, [sl], #1
   b5a80:	4628      	mov	r0, r5
   b5a82:	f7ff fdf3 	bl	b566c <_ZN15Adafruit_SPITFT8spiWriteEh>
    while(numArgs--) {                   // For each argument...
   b5a86:	e7f5      	b.n	b5a74 <_ZN15Adafruit_ST77xx11displayInitEPKh+0x2c>
   b5a88:	f995 003e 	ldrsb.w	r0, [r5, #62]	; 0x3e
   b5a8c:	2101      	movs	r1, #1
   b5a8e:	b280      	uxth	r0, r0
   b5a90:	f001 ff6f 	bl	b7972 <digitalWrite>
        digitalWrite(_cs, LOW);
   b5a94:	f995 003e 	ldrsb.w	r0, [r5, #62]	; 0x3e
   b5a98:	2100      	movs	r1, #0
   b5a9a:	b280      	uxth	r0, r0
   b5a9c:	f001 ff69 	bl	b7972 <digitalWrite>
    if(ms) {
   b5aa0:	f019 0f80 	tst.w	r9, #128	; 0x80
   b5aa4:	eb06 0408 	add.w	r4, r6, r8
   b5aa8:	d008      	beq.n	b5abc <_ZN15Adafruit_ST77xx11displayInitEPKh+0x74>
      ms = pgm_read_byte(addr++); // Read post-command delay time (ms)
   b5aaa:	f816 0008 	ldrb.w	r0, [r6, r8]
      if(ms == 255) ms = 500;     // If 255, delay for 500 ms
   b5aae:	28ff      	cmp	r0, #255	; 0xff
      delay(ms);
   b5ab0:	bf08      	it	eq
   b5ab2:	f44f 70fa 	moveq.w	r0, #500	; 0x1f4
      ms = pgm_read_byte(addr++); // Read post-command delay time (ms)
   b5ab6:	3401      	adds	r4, #1
      delay(ms);
   b5ab8:	f000 fdd8 	bl	b666c <delay>
   b5abc:	3f01      	subs	r7, #1
   b5abe:	b2ff      	uxtb	r7, r7
   b5ac0:	e7cb      	b.n	b5a5a <_ZN15Adafruit_ST77xx11displayInitEPKh+0x12>
  endWrite();
   b5ac2:	682b      	ldr	r3, [r5, #0]
   b5ac4:	4628      	mov	r0, r5
   b5ac6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
}
   b5ac8:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  endWrite();
   b5acc:	4718      	bx	r3

000b5ace <_ZN15Adafruit_ST77xx10commonInitEPKh>:
void Adafruit_ST77xx::commonInit(const uint8_t *cmdList) {
   b5ace:	b538      	push	{r3, r4, r5, lr}
  begin();
   b5ad0:	6803      	ldr	r3, [r0, #0]
void Adafruit_ST77xx::commonInit(const uint8_t *cmdList) {
   b5ad2:	460d      	mov	r5, r1
  begin();
   b5ad4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   b5ad6:	2100      	movs	r1, #0
void Adafruit_ST77xx::commonInit(const uint8_t *cmdList) {
   b5ad8:	4604      	mov	r4, r0
  begin();
   b5ada:	4798      	blx	r3
  if(cmdList) {
   b5adc:	b12d      	cbz	r5, b5aea <_ZN15Adafruit_ST77xx10commonInitEPKh+0x1c>
    displayInit(cmdList);
   b5ade:	4629      	mov	r1, r5
   b5ae0:	4620      	mov	r0, r4
}
   b5ae2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    displayInit(cmdList);
   b5ae6:	f7ff bfaf 	b.w	b5a48 <_ZN15Adafruit_ST77xx11displayInitEPKh>
}
   b5aea:	bd38      	pop	{r3, r4, r5, pc}

000b5aec <_ZN7VL53L1XD1Ev>:
       }
    }
    
   /** Destructor
    */
    virtual ~VL53L1X(){}
   b5aec:	4770      	bx	lr

000b5aee <_ZN7VL53L1X10VL53L1_OffEv>:
	/**
	 * @brief       PowerOff the sensor
	 * @return      void
	 */
    /* turns off the sensor */
    virtual void VL53L1_Off(void)
   b5aee:	b508      	push	{r3, lr}
    {
       if(gpio0 >= 0)
   b5af0:	6880      	ldr	r0, [r0, #8]
   b5af2:	2800      	cmp	r0, #0
   b5af4:	db03      	blt.n	b5afe <_ZN7VL53L1X10VL53L1_OffEv+0x10>
       {
         digitalWrite(gpio0, LOW);
   b5af6:	2100      	movs	r1, #0
   b5af8:	b280      	uxth	r0, r0
   b5afa:	f001 ff3a 	bl	b7972 <digitalWrite>
       }
       delay(10);
    }
   b5afe:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
       delay(10);
   b5b02:	200a      	movs	r0, #10
   b5b04:	f000 bdb2 	b.w	b666c <delay>

000b5b08 <_ZN7VL53L1X9VL53L1_OnEv>:
    virtual void VL53L1_On(void)
   b5b08:	b508      	push	{r3, lr}
       if(gpio0 >= 0)
   b5b0a:	6880      	ldr	r0, [r0, #8]
   b5b0c:	2800      	cmp	r0, #0
   b5b0e:	db03      	blt.n	b5b18 <_ZN7VL53L1X9VL53L1_OnEv+0x10>
         digitalWrite(gpio0, HIGH);
   b5b10:	2101      	movs	r1, #1
   b5b12:	b280      	uxth	r0, r0
   b5b14:	f001 ff2d 	bl	b7972 <digitalWrite>
    }
   b5b18:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
       delay(10);
   b5b1c:	200a      	movs	r0, #10
   b5b1e:	f000 bda5 	b.w	b666c <delay>

000b5b22 <_ZN7VL53L1XD0Ev>:
    virtual ~VL53L1X(){}
   b5b22:	b510      	push	{r4, lr}
   b5b24:	211c      	movs	r1, #28
   b5b26:	4604      	mov	r4, r0
   b5b28:	f7fe fab9 	bl	b409e <_ZdlPvj>
   b5b2c:	4620      	mov	r0, r4
   b5b2e:	bd10      	pop	{r4, pc}

000b5b30 <_ZN7VL53L1X11GetDistanceEPm>:
/**
 * @brief Get ranging result and only that
 * @param pRange_mm  Pointer to range distance
 * @return           0 on success
 */
	int GetDistance(uint32_t *piData)
   b5b30:	b513      	push	{r0, r1, r4, lr}
   b5b32:	460c      	mov	r4, r1
    {
	int status;
	uint16_t distance;
	status = VL53L1X_GetDistance(&distance);
   b5b34:	f10d 0106 	add.w	r1, sp, #6
   b5b38:	f000 fb3f 	bl	b61ba <_ZN7VL53L1X19VL53L1X_GetDistanceEPt>
	*piData = (uint32_t) distance;
   b5b3c:	f8bd 3006 	ldrh.w	r3, [sp, #6]
   b5b40:	6023      	str	r3, [r4, #0]
	return status;
    }
   b5b42:	b002      	add	sp, #8
   b5b44:	bd10      	pop	{r4, pc}

000b5b46 <_ZN7VL53L1X6ReadIDEv>:
    virtual int ReadID(){
   b5b46:	b507      	push	{r0, r1, r2, lr}
		VL53L1X_GetSensorId(&sensorId);
   b5b48:	f10d 0106 	add.w	r1, sp, #6
   b5b4c:	f000 fb24 	bl	b6198 <_ZN7VL53L1X19VL53L1X_GetSensorIdEPt>
		if (sensorId == 0xEEAC)
   b5b50:	f8bd 0006 	ldrh.w	r0, [sp, #6]
	}
   b5b54:	f64e 63ac 	movw	r3, #61100	; 0xeeac
   b5b58:	1ac0      	subs	r0, r0, r3
   b5b5a:	bf18      	it	ne
   b5b5c:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
   b5b60:	b003      	add	sp, #12
   b5b62:	f85d fb04 	ldr.w	pc, [sp], #4

000b5b66 <_ZN7VL53L1X4InitEv>:
    virtual int Init()
   b5b66:	b508      	push	{r3, lr}
       return VL53L1X_SensorInit();
   b5b68:	f000 f946 	bl	b5df8 <_ZN7VL53L1X18VL53L1X_SensorInitEv>
    }
   b5b6c:	bd08      	pop	{r3, pc}
	...

000b5b70 <_ZN10SFEVL53L1XC1ER7TwoWireii>:
#include <stdlib.h>
#include "Arduino.h"
#include "SparkFun_VL53L1X.h"
#include "vl53l1x_class.h"

SFEVL53L1X::SFEVL53L1X(TwoWire &i2cPort, int shutdownPin, int interruptPin)
   b5b70:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   b5b74:	f04f 0952 	mov.w	r9, #82	; 0x52
{
	_i2cPort = &i2cPort;
	_shutdownPin = shutdownPin;
   b5b78:	e9c0 1200 	strd	r1, r2, [r0]
SFEVL53L1X::SFEVL53L1X(TwoWire &i2cPort, int shutdownPin, int interruptPin)
   b5b7c:	f8c0 900c 	str.w	r9, [r0, #12]
	_interruptPin = interruptPin;
   b5b80:	6083      	str	r3, [r0, #8]
SFEVL53L1X::SFEVL53L1X(TwoWire &i2cPort, int shutdownPin, int interruptPin)
   b5b82:	4605      	mov	r5, r0
	_device = new VL53L1X(&i2cPort, shutdownPin, interruptPin);
   b5b84:	201c      	movs	r0, #28
SFEVL53L1X::SFEVL53L1X(TwoWire &i2cPort, int shutdownPin, int interruptPin)
   b5b86:	460f      	mov	r7, r1
   b5b88:	4616      	mov	r6, r2
   b5b8a:	4698      	mov	r8, r3
	_device = new VL53L1X(&i2cPort, shutdownPin, interruptPin);
   b5b8c:	f7fe fa83 	bl	b4096 <_Znwj>
   b5b90:	4604      	mov	r4, r0
   b5b92:	b180      	cbz	r0, b5bb6 <_ZN10SFEVL53L1XC1ER7TwoWireii+0x46>
    VL53L1X(TwoWire *i2c, int pin, int pin_gpio1) : RangeSensor(), dev_i2c(i2c), gpio0(pin), gpio1Int(pin_gpio1)
   b5b94:	4b0a      	ldr	r3, [pc, #40]	; (b5bc0 <_ZN10SFEVL53L1XC1ER7TwoWireii+0x50>)
       MyDevice.I2cDevAddr=VL53L1X_DEFAULT_DEVICE_ADDRESS;
   b5b96:	f880 9010 	strb.w	r9, [r0, #16]
    VL53L1X(TwoWire *i2c, int pin, int pin_gpio1) : RangeSensor(), dev_i2c(i2c), gpio0(pin), gpio1Int(pin_gpio1)
   b5b9a:	e9c0 3700 	strd	r3, r7, [r0]
       if(gpio0 >= 0)
   b5b9e:	2e00      	cmp	r6, #0
       Device = &MyDevice;
   b5ba0:	f100 0310 	add.w	r3, r0, #16
    VL53L1X(TwoWire *i2c, int pin, int pin_gpio1) : RangeSensor(), dev_i2c(i2c), gpio0(pin), gpio1Int(pin_gpio1)
   b5ba4:	e9c0 6802 	strd	r6, r8, [r0, #8]
       MyDevice.I2cHandle = i2c;
   b5ba8:	6147      	str	r7, [r0, #20]
       Device = &MyDevice;
   b5baa:	6183      	str	r3, [r0, #24]
       if(gpio0 >= 0)
   b5bac:	db03      	blt.n	b5bb6 <_ZN10SFEVL53L1XC1ER7TwoWireii+0x46>
         pinMode(gpio0, OUTPUT);
   b5bae:	2101      	movs	r1, #1
   b5bb0:	b2b0      	uxth	r0, r6
   b5bb2:	f001 fecd 	bl	b7950 <pinMode>
   b5bb6:	612c      	str	r4, [r5, #16]
}
   b5bb8:	4628      	mov	r0, r5
   b5bba:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   b5bbe:	bf00      	nop
   b5bc0:	000b8fac 	.word	0x000b8fac

000b5bc4 <_ZN10SFEVL53L1X4initEv>:

bool SFEVL53L1X::init()
{
   b5bc4:	b508      	push	{r3, lr}
	return _device->VL53L1X_SensorInit();
   b5bc6:	6900      	ldr	r0, [r0, #16]
   b5bc8:	f000 f916 	bl	b5df8 <_ZN7VL53L1X18VL53L1X_SensorInitEv>
}
   b5bcc:	3800      	subs	r0, #0
   b5bce:	bf18      	it	ne
   b5bd0:	2001      	movne	r0, #1
   b5bd2:	bd08      	pop	{r3, pc}

000b5bd4 <_ZN10SFEVL53L1X12startRangingEv>:
	return tmp;
}

void SFEVL53L1X::startRanging()
{
	_device->VL53L1X_StartRanging();
   b5bd4:	6900      	ldr	r0, [r0, #16]
   b5bd6:	f000 b852 	b.w	b5c7e <_ZN7VL53L1X20VL53L1X_StartRangingEv>

000b5bda <_ZN10SFEVL53L1X11stopRangingEv>:
}

void SFEVL53L1X::stopRanging()
{
	_device->VL53L1X_StopRanging();
   b5bda:	6900      	ldr	r0, [r0, #16]
   b5bdc:	f000 b854 	b.w	b5c88 <_ZN7VL53L1X19VL53L1X_StopRangingEv>

000b5be0 <_ZN10SFEVL53L1X19setTimingBudgetInMsEt>:
	return (bool)dataReady;
}

void SFEVL53L1X::setTimingBudgetInMs(uint16_t timingBudget)
{
	_device->VL53L1X_SetTimingBudgetInMs(timingBudget);
   b5be0:	6900      	ldr	r0, [r0, #16]
   b5be2:	f000 b95b 	b.w	b5e9c <_ZN7VL53L1X27VL53L1X_SetTimingBudgetInMsEt>

000b5be6 <_ZN10SFEVL53L1X19setDistanceModeLongEv>:
	return timingBudget;
}

void SFEVL53L1X::setDistanceModeLong()
{
	_device->VL53L1X_SetDistanceMode(2);
   b5be6:	6900      	ldr	r0, [r0, #16]
   b5be8:	2102      	movs	r1, #2
   b5bea:	f000 ba50 	b.w	b608e <_ZN7VL53L1X23VL53L1X_SetDistanceModeEt>

000b5bee <_ZN10SFEVL53L1X25setIntermeasurementPeriodEt>:
	return distanceMode;
}

void SFEVL53L1X::setIntermeasurementPeriod(uint16_t intermeasurement)
{
	_device->VL53L1X_SetInterMeasurementInMs(intermeasurement);
   b5bee:	6900      	ldr	r0, [r0, #16]
   b5bf0:	f000 baaa 	b.w	b6148 <_ZN7VL53L1X31VL53L1X_SetInterMeasurementInMsEt>

000b5bf4 <_ZN10SFEVL53L1X11getDistanceEv>:
	_device->VL53L1X_GetSensorId(&id);
	return id;
}

uint16_t SFEVL53L1X::getDistance()
{
   b5bf4:	b507      	push	{r0, r1, r2, lr}
	uint16_t distance;
	_device->VL53L1X_GetDistance(&distance);
   b5bf6:	f10d 0106 	add.w	r1, sp, #6
   b5bfa:	6900      	ldr	r0, [r0, #16]
   b5bfc:	f000 fadd 	bl	b61ba <_ZN7VL53L1X19VL53L1X_GetDistanceEPt>
	return (int)distance;
}
   b5c00:	f8bd 0006 	ldrh.w	r0, [sp, #6]
   b5c04:	b003      	add	sp, #12
   b5c06:	f85d fb04 	ldr.w	pc, [sp], #4

000b5c0a <_ZN10SFEVL53L1X6setROIEhhh>:
	return temp;
}

void SFEVL53L1X::setROI(uint8_t x, uint8_t y, uint8_t opticalCenter)
{
	_device->VL53L1X_SetROI(x, y, opticalCenter);
   b5c0a:	6900      	ldr	r0, [r0, #16]
   b5c0c:	f000 b841 	b.w	b5c92 <_ZN7VL53L1X14VL53L1X_SetROIEhhh>

000b5c10 <_ZN7VL53L1X15VL53L1_I2CWriteEhtPht>:
	}
	return status;
}

VL53L1X_ERROR VL53L1X::VL53L1_I2CWrite(uint8_t DeviceAddr, uint16_t RegisterAddr, uint8_t *pBuffer, uint16_t NumByteToWrite)
{
   b5c10:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   b5c12:	4604      	mov	r4, r0
   b5c14:	4615      	mov	r5, r2
#ifdef DEBUG_MODE
	Serial.print("Beginning transmission to ");
	Serial.println(((DeviceAddr) >> 1) & 0x7F);
#endif
	dev_i2c->beginTransmission(((uint8_t)(((DeviceAddr) >> 1) & 0x7F)));
   b5c16:	6840      	ldr	r0, [r0, #4]
{
   b5c18:	f8bd 7020 	ldrh.w	r7, [sp, #32]
	dev_i2c->beginTransmission(((uint8_t)(((DeviceAddr) >> 1) & 0x7F)));
   b5c1c:	0849      	lsrs	r1, r1, #1
{
   b5c1e:	461e      	mov	r6, r3
	dev_i2c->beginTransmission(((uint8_t)(((DeviceAddr) >> 1) & 0x7F)));
   b5c20:	f001 f8b0 	bl	b6d84 <_ZN7TwoWire17beginTransmissionEh>
#ifdef DEBUG_MODE
	Serial.print("Writing port number ");
	Serial.println(RegisterAddr);
#endif
	uint8_t buffer[2];
	buffer[0] = RegisterAddr >> 8;
   b5c24:	0a2b      	lsrs	r3, r5, #8
	buffer[1] = RegisterAddr & 0xFF;
	dev_i2c->write(buffer, 2);
   b5c26:	6860      	ldr	r0, [r4, #4]
	buffer[1] = RegisterAddr & 0xFF;
   b5c28:	f88d 5005 	strb.w	r5, [sp, #5]
	buffer[0] = RegisterAddr >> 8;
   b5c2c:	f88d 3004 	strb.w	r3, [sp, #4]
	dev_i2c->write(buffer, 2);
   b5c30:	6803      	ldr	r3, [r0, #0]
   b5c32:	2202      	movs	r2, #2
   b5c34:	68db      	ldr	r3, [r3, #12]
   b5c36:	a901      	add	r1, sp, #4
   b5c38:	4798      	blx	r3
	for (int i = 0; i < NumByteToWrite; i++)
   b5c3a:	2500      	movs	r5, #0
   b5c3c:	42af      	cmp	r7, r5
		dev_i2c->write(pBuffer[i]);
   b5c3e:	6860      	ldr	r0, [r4, #4]
	for (int i = 0; i < NumByteToWrite; i++)
   b5c40:	dd05      	ble.n	b5c4e <_ZN7VL53L1X15VL53L1_I2CWriteEhtPht+0x3e>
		dev_i2c->write(pBuffer[i]);
   b5c42:	6803      	ldr	r3, [r0, #0]
   b5c44:	5d71      	ldrb	r1, [r6, r5]
   b5c46:	689b      	ldr	r3, [r3, #8]
   b5c48:	4798      	blx	r3
	for (int i = 0; i < NumByteToWrite; i++)
   b5c4a:	3501      	adds	r5, #1
   b5c4c:	e7f6      	b.n	b5c3c <_ZN7VL53L1X15VL53L1_I2CWriteEhtPht+0x2c>

	dev_i2c->endTransmission(true);
   b5c4e:	2101      	movs	r1, #1
   b5c50:	f001 f89c 	bl	b6d8c <_ZN7TwoWire15endTransmissionEh>
	return 0;
}
   b5c54:	2000      	movs	r0, #0
   b5c56:	b003      	add	sp, #12
   b5c58:	bdf0      	pop	{r4, r5, r6, r7, pc}

000b5c5a <_ZN7VL53L1X13VL53L1_WrByteEP12VL53L1_Dev_tth>:
{
   b5c5a:	b51f      	push	{r0, r1, r2, r3, r4, lr}
   b5c5c:	f88d 300f 	strb.w	r3, [sp, #15]
	status = VL53L1_I2CWrite(Dev->I2cDevAddr, index, &data, 1);
   b5c60:	2301      	movs	r3, #1
   b5c62:	7809      	ldrb	r1, [r1, #0]
   b5c64:	9300      	str	r3, [sp, #0]
   b5c66:	f10d 030f 	add.w	r3, sp, #15
   b5c6a:	f7ff ffd1 	bl	b5c10 <_ZN7VL53L1X15VL53L1_I2CWriteEhtPht>
}
   b5c6e:	b005      	add	sp, #20
   b5c70:	f85d fb04 	ldr.w	pc, [sp], #4

000b5c74 <_ZN7VL53L1X22VL53L1X_ClearInterruptEv>:
	status = VL53L1_WrByte(Device, SYSTEM__INTERRUPT_CLEAR, 0x01);
   b5c74:	6981      	ldr	r1, [r0, #24]
   b5c76:	2301      	movs	r3, #1
   b5c78:	2286      	movs	r2, #134	; 0x86
   b5c7a:	f7ff bfee 	b.w	b5c5a <_ZN7VL53L1X13VL53L1_WrByteEP12VL53L1_Dev_tth>

000b5c7e <_ZN7VL53L1X20VL53L1X_StartRangingEv>:
	status = VL53L1_WrByte(Device, SYSTEM__MODE_START, 0x40); /* Enable VL53L1X */
   b5c7e:	6981      	ldr	r1, [r0, #24]
   b5c80:	2340      	movs	r3, #64	; 0x40
   b5c82:	2287      	movs	r2, #135	; 0x87
   b5c84:	f7ff bfe9 	b.w	b5c5a <_ZN7VL53L1X13VL53L1_WrByteEP12VL53L1_Dev_tth>

000b5c88 <_ZN7VL53L1X19VL53L1X_StopRangingEv>:
	status = VL53L1_WrByte(Device, SYSTEM__MODE_START, 0x00); /* Disable VL53L1X */
   b5c88:	6981      	ldr	r1, [r0, #24]
   b5c8a:	2300      	movs	r3, #0
   b5c8c:	2287      	movs	r2, #135	; 0x87
   b5c8e:	f7ff bfe4 	b.w	b5c5a <_ZN7VL53L1X13VL53L1_WrByteEP12VL53L1_Dev_tth>

000b5c92 <_ZN7VL53L1X14VL53L1X_SetROIEhhh>:
	if (X > 16)
   b5c92:	2910      	cmp	r1, #16
{
   b5c94:	b570      	push	{r4, r5, r6, lr}
   b5c96:	460d      	mov	r5, r1
   b5c98:	bf28      	it	cs
   b5c9a:	2510      	movcs	r5, #16
	if (Y > 16)
   b5c9c:	2a10      	cmp	r2, #16
   b5c9e:	4616      	mov	r6, r2
   b5ca0:	bf28      	it	cs
   b5ca2:	2610      	movcs	r6, #16
	if (X > 10 || Y > 10)
   b5ca4:	290a      	cmp	r1, #10
{
   b5ca6:	4604      	mov	r4, r0
	if (X > 10 || Y > 10)
   b5ca8:	d813      	bhi.n	b5cd2 <_ZN7VL53L1X14VL53L1X_SetROIEhhh+0x40>
		opticalCenter = 199;
   b5caa:	2a0b      	cmp	r2, #11
   b5cac:	bf28      	it	cs
   b5cae:	23c7      	movcs	r3, #199	; 0xc7
	status = VL53L1_WrByte(Device, ROI_CONFIG__USER_ROI_CENTRE_SPAD, opticalCenter);
   b5cb0:	69a1      	ldr	r1, [r4, #24]
   b5cb2:	227f      	movs	r2, #127	; 0x7f
   b5cb4:	4620      	mov	r0, r4
   b5cb6:	f7ff ffd0 	bl	b5c5a <_ZN7VL53L1X13VL53L1_WrByteEP12VL53L1_Dev_tth>
						   (Y - 1) << 4 | (X - 1));
   b5cba:	3d01      	subs	r5, #1
   b5cbc:	1e73      	subs	r3, r6, #1
   b5cbe:	ea45 1303 	orr.w	r3, r5, r3, lsl #4
	status = VL53L1_WrByte(Device, ROI_CONFIG__USER_ROI_REQUESTED_GLOBAL_XY_SIZE,
   b5cc2:	69a1      	ldr	r1, [r4, #24]
   b5cc4:	4620      	mov	r0, r4
   b5cc6:	b2db      	uxtb	r3, r3
}
   b5cc8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	status = VL53L1_WrByte(Device, ROI_CONFIG__USER_ROI_REQUESTED_GLOBAL_XY_SIZE,
   b5ccc:	2280      	movs	r2, #128	; 0x80
   b5cce:	f7ff bfc4 	b.w	b5c5a <_ZN7VL53L1X13VL53L1_WrByteEP12VL53L1_Dev_tth>
		opticalCenter = 199;
   b5cd2:	23c7      	movs	r3, #199	; 0xc7
   b5cd4:	e7ec      	b.n	b5cb0 <_ZN7VL53L1X14VL53L1X_SetROIEhhh+0x1e>

000b5cd6 <_ZN7VL53L1X13VL53L1_WrWordEP12VL53L1_Dev_ttt>:
{
   b5cd6:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	buffer[0] = data >> 8;
   b5cd8:	0a1c      	lsrs	r4, r3, #8
	buffer[1] = data & 0x00FF;
   b5cda:	f88d 300d 	strb.w	r3, [sp, #13]
	status = VL53L1_I2CWrite(Dev->I2cDevAddr, index, (uint8_t *)buffer, 2);
   b5cde:	2302      	movs	r3, #2
   b5ce0:	7809      	ldrb	r1, [r1, #0]
   b5ce2:	9300      	str	r3, [sp, #0]
   b5ce4:	ab03      	add	r3, sp, #12
	buffer[0] = data >> 8;
   b5ce6:	f88d 400c 	strb.w	r4, [sp, #12]
	status = VL53L1_I2CWrite(Dev->I2cDevAddr, index, (uint8_t *)buffer, 2);
   b5cea:	f7ff ff91 	bl	b5c10 <_ZN7VL53L1X15VL53L1_I2CWriteEhtPht>
}
   b5cee:	b004      	add	sp, #16
   b5cf0:	bd10      	pop	{r4, pc}

000b5cf2 <_ZN7VL53L1X14VL53L1_WrDWordEP12VL53L1_Dev_ttm>:
{
   b5cf2:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	buffer[0] = (data >> 24) & 0xFF;
   b5cf4:	0e1c      	lsrs	r4, r3, #24
   b5cf6:	f88d 400c 	strb.w	r4, [sp, #12]
	buffer[1] = (data >> 16) & 0xFF;
   b5cfa:	0c1c      	lsrs	r4, r3, #16
   b5cfc:	f88d 400d 	strb.w	r4, [sp, #13]
	buffer[3] = (data >> 0) & 0xFF;
   b5d00:	f88d 300f 	strb.w	r3, [sp, #15]
	buffer[2] = (data >> 8) & 0xFF;
   b5d04:	0a1c      	lsrs	r4, r3, #8
	status = VL53L1_I2CWrite(Dev->I2cDevAddr, index, (uint8_t *)buffer, 4);
   b5d06:	2304      	movs	r3, #4
   b5d08:	7809      	ldrb	r1, [r1, #0]
   b5d0a:	9300      	str	r3, [sp, #0]
   b5d0c:	ab03      	add	r3, sp, #12
	buffer[2] = (data >> 8) & 0xFF;
   b5d0e:	f88d 400e 	strb.w	r4, [sp, #14]
	status = VL53L1_I2CWrite(Dev->I2cDevAddr, index, (uint8_t *)buffer, 4);
   b5d12:	f7ff ff7d 	bl	b5c10 <_ZN7VL53L1X15VL53L1_I2CWriteEhtPht>
}
   b5d16:	b004      	add	sp, #16
   b5d18:	bd10      	pop	{r4, pc}

000b5d1a <_ZN7VL53L1X14VL53L1_I2CReadEhtPht>:

VL53L1X_ERROR VL53L1X::VL53L1_I2CRead(uint8_t DeviceAddr, uint16_t RegisterAddr, uint8_t *pBuffer, uint16_t NumByteToRead)
{
   b5d1a:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   b5d1e:	4604      	mov	r4, r0
   b5d20:	4690      	mov	r8, r2
   b5d22:	461d      	mov	r5, r3
	{
#ifdef DEBUG_MODE
		Serial.print("Beginning transmission to ");
		Serial.println(((DeviceAddr) >> 1) & 0x7F);
#endif
		dev_i2c->beginTransmission(((uint8_t)(((DeviceAddr) >> 1) & 0x7F)));
   b5d24:	084f      	lsrs	r7, r1, #1
#ifdef DEBUG_MODE
		Serial.print("Writing port number ");
		Serial.println(RegisterAddr);
#endif
		uint8_t buffer[2];
		buffer[0] = RegisterAddr >> 8;
   b5d26:	ea4f 2912 	mov.w	r9, r2, lsr #8
   b5d2a:	2605      	movs	r6, #5
		dev_i2c->beginTransmission(((uint8_t)(((DeviceAddr) >> 1) & 0x7F)));
   b5d2c:	6860      	ldr	r0, [r4, #4]
   b5d2e:	4639      	mov	r1, r7
   b5d30:	f001 f828 	bl	b6d84 <_ZN7TwoWire17beginTransmissionEh>
		buffer[1] = RegisterAddr & 0xFF;
		dev_i2c->write(buffer, 2);
   b5d34:	6860      	ldr	r0, [r4, #4]
		buffer[0] = RegisterAddr >> 8;
   b5d36:	f88d 9004 	strb.w	r9, [sp, #4]
		buffer[1] = RegisterAddr & 0xFF;
   b5d3a:	f88d 8005 	strb.w	r8, [sp, #5]
		dev_i2c->write(buffer, 2);
   b5d3e:	6803      	ldr	r3, [r0, #0]
   b5d40:	a901      	add	r1, sp, #4
   b5d42:	68db      	ldr	r3, [r3, #12]
   b5d44:	2202      	movs	r2, #2
   b5d46:	4798      	blx	r3
		status = dev_i2c->endTransmission(false);
   b5d48:	6860      	ldr	r0, [r4, #4]
   b5d4a:	2100      	movs	r1, #0
   b5d4c:	f001 f81e 	bl	b6d8c <_ZN7TwoWire15endTransmissionEh>

		if (status == 0)
   b5d50:	b118      	cbz	r0, b5d5a <_ZN7VL53L1X14VL53L1_I2CReadEhtPht+0x40>
	for (uint8_t x = 0; x < maxAttempts; x++)
   b5d52:	3e01      	subs	r6, #1
   b5d54:	f016 06ff 	ands.w	r6, r6, #255	; 0xff
   b5d58:	d1e8      	bne.n	b5d2c <_ZN7VL53L1X14VL53L1_I2CReadEhtPht+0x12>
		}
#endif
		//End of fix
	}

	dev_i2c->requestFrom(((uint8_t)(((DeviceAddr) >> 1) & 0x7F)), (byte)NumByteToRead);
   b5d5a:	f89d 2028 	ldrb.w	r2, [sp, #40]	; 0x28
   b5d5e:	6860      	ldr	r0, [r4, #4]
   b5d60:	4639      	mov	r1, r7
   b5d62:	f001 f80c 	bl	b6d7e <_ZN7TwoWire11requestFromEhj>

	int i = 0;
   b5d66:	3d01      	subs	r5, #1
	while (dev_i2c->available())
   b5d68:	6860      	ldr	r0, [r4, #4]
   b5d6a:	6803      	ldr	r3, [r0, #0]
   b5d6c:	691b      	ldr	r3, [r3, #16]
   b5d6e:	4798      	blx	r3
   b5d70:	b130      	cbz	r0, b5d80 <_ZN7VL53L1X14VL53L1_I2CReadEhtPht+0x66>
	{
		pBuffer[i] = dev_i2c->read();
   b5d72:	6860      	ldr	r0, [r4, #4]
   b5d74:	6803      	ldr	r3, [r0, #0]
   b5d76:	695b      	ldr	r3, [r3, #20]
   b5d78:	4798      	blx	r3
   b5d7a:	f805 0f01 	strb.w	r0, [r5, #1]!
	while (dev_i2c->available())
   b5d7e:	e7f3      	b.n	b5d68 <_ZN7VL53L1X14VL53L1_I2CReadEhtPht+0x4e>
		i++;
	}

	return 0;
}
   b5d80:	b003      	add	sp, #12
   b5d82:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

000b5d86 <_ZN7VL53L1X13VL53L1_RdByteEP12VL53L1_Dev_ttPh>:
{
   b5d86:	b513      	push	{r0, r1, r4, lr}
	status = VL53L1_I2CRead(Dev->I2cDevAddr, index, data, 1);
   b5d88:	2401      	movs	r4, #1
   b5d8a:	7809      	ldrb	r1, [r1, #0]
   b5d8c:	9400      	str	r4, [sp, #0]
   b5d8e:	f7ff ffc4 	bl	b5d1a <_ZN7VL53L1X14VL53L1_I2CReadEhtPht>
	if (status)
   b5d92:	3800      	subs	r0, #0
   b5d94:	bf18      	it	ne
   b5d96:	2001      	movne	r0, #1
}
   b5d98:	4240      	negs	r0, r0
   b5d9a:	b002      	add	sp, #8
   b5d9c:	bd10      	pop	{r4, pc}

000b5d9e <_ZN7VL53L1X28VL53L1X_GetInterruptPolarityEPh>:
{
   b5d9e:	b513      	push	{r0, r1, r4, lr}
	status = VL53L1_RdByte(Device, GPIO_HV_MUX__CTRL, &Temp);
   b5da0:	2230      	movs	r2, #48	; 0x30
{
   b5da2:	460c      	mov	r4, r1
	status = VL53L1_RdByte(Device, GPIO_HV_MUX__CTRL, &Temp);
   b5da4:	f10d 0307 	add.w	r3, sp, #7
   b5da8:	6981      	ldr	r1, [r0, #24]
   b5daa:	f7ff ffec 	bl	b5d86 <_ZN7VL53L1X13VL53L1_RdByteEP12VL53L1_Dev_ttPh>
	*pInterruptPolarity = !(Temp >> 4);
   b5dae:	f89d 3007 	ldrb.w	r3, [sp, #7]
   b5db2:	ea6f 1313 	mvn.w	r3, r3, lsr #4
   b5db6:	f003 0301 	and.w	r3, r3, #1
   b5dba:	7023      	strb	r3, [r4, #0]
}
   b5dbc:	b002      	add	sp, #8
   b5dbe:	bd10      	pop	{r4, pc}

000b5dc0 <_ZN7VL53L1X25VL53L1X_CheckForDataReadyEPh>:
{
   b5dc0:	b537      	push	{r0, r1, r2, r4, r5, lr}
   b5dc2:	4605      	mov	r5, r0
   b5dc4:	460c      	mov	r4, r1
	status = VL53L1X_GetInterruptPolarity(&IntPol);
   b5dc6:	f10d 0107 	add.w	r1, sp, #7
   b5dca:	f7ff ffe8 	bl	b5d9e <_ZN7VL53L1X28VL53L1X_GetInterruptPolarityEPh>
	status = VL53L1_RdByte(Device, GPIO__TIO_HV_STATUS, &Temp);
   b5dce:	69a9      	ldr	r1, [r5, #24]
   b5dd0:	f10d 0306 	add.w	r3, sp, #6
   b5dd4:	2231      	movs	r2, #49	; 0x31
   b5dd6:	4628      	mov	r0, r5
   b5dd8:	f7ff ffd5 	bl	b5d86 <_ZN7VL53L1X13VL53L1_RdByteEP12VL53L1_Dev_ttPh>
	if (status == 0)
   b5ddc:	b950      	cbnz	r0, b5df4 <_ZN7VL53L1X25VL53L1X_CheckForDataReadyEPh+0x34>
		if ((Temp & 1) == IntPol)
   b5dde:	f89d 3006 	ldrb.w	r3, [sp, #6]
   b5de2:	f89d 2007 	ldrb.w	r2, [sp, #7]
   b5de6:	f003 0301 	and.w	r3, r3, #1
   b5dea:	429a      	cmp	r2, r3
			*isDataReady = 1;
   b5dec:	bf06      	itte	eq
   b5dee:	2301      	moveq	r3, #1
   b5df0:	7023      	strbeq	r3, [r4, #0]
			*isDataReady = 0;
   b5df2:	7020      	strbne	r0, [r4, #0]
}
   b5df4:	b003      	add	sp, #12
   b5df6:	bd30      	pop	{r4, r5, pc}

000b5df8 <_ZN7VL53L1X18VL53L1X_SensorInitEv>:
{
   b5df8:	b573      	push	{r0, r1, r4, r5, r6, lr}
	uint8_t Addr = 0x00, dataReady = 0, timeout = 0;
   b5dfa:	2300      	movs	r3, #0
   b5dfc:	4e1c      	ldr	r6, [pc, #112]	; (b5e70 <_ZN7VL53L1X18VL53L1X_SensorInitEv+0x78>)
   b5dfe:	f88d 3007 	strb.w	r3, [sp, #7]
{
   b5e02:	4604      	mov	r4, r0
	uint8_t Addr = 0x00, dataReady = 0, timeout = 0;
   b5e04:	252d      	movs	r5, #45	; 0x2d
		status = VL53L1_WrByte(Device, Addr, VL51L1X_DEFAULT_CONFIGURATION[Addr - 0x2D]);
   b5e06:	b2aa      	uxth	r2, r5
   b5e08:	f816 3b01 	ldrb.w	r3, [r6], #1
   b5e0c:	69a1      	ldr	r1, [r4, #24]
   b5e0e:	4620      	mov	r0, r4
	for (Addr = 0x2D; Addr <= 0x87; Addr++)
   b5e10:	3501      	adds	r5, #1
		status = VL53L1_WrByte(Device, Addr, VL51L1X_DEFAULT_CONFIGURATION[Addr - 0x2D]);
   b5e12:	f7ff ff22 	bl	b5c5a <_ZN7VL53L1X13VL53L1_WrByteEP12VL53L1_Dev_tth>
	for (Addr = 0x2D; Addr <= 0x87; Addr++)
   b5e16:	2d88      	cmp	r5, #136	; 0x88
   b5e18:	d1f5      	bne.n	b5e06 <_ZN7VL53L1X18VL53L1X_SensorInitEv+0xe>
	status = VL53L1X_StartRanging();
   b5e1a:	4620      	mov	r0, r4
   b5e1c:	f7ff ff2f 	bl	b5c7e <_ZN7VL53L1X20VL53L1X_StartRangingEv>
   b5e20:	2598      	movs	r5, #152	; 0x98
	while (dataReady == 0)
   b5e22:	f89d 3007 	ldrb.w	r3, [sp, #7]
   b5e26:	b963      	cbnz	r3, b5e42 <_ZN7VL53L1X18VL53L1X_SensorInitEv+0x4a>
		status = VL53L1X_CheckForDataReady(&dataReady);
   b5e28:	f10d 0107 	add.w	r1, sp, #7
   b5e2c:	4620      	mov	r0, r4
		if (timeout++ > 150)
   b5e2e:	3d01      	subs	r5, #1
		status = VL53L1X_CheckForDataReady(&dataReady);
   b5e30:	f7ff ffc6 	bl	b5dc0 <_ZN7VL53L1X25VL53L1X_CheckForDataReadyEPh>
		if (timeout++ > 150)
   b5e34:	f015 05ff 	ands.w	r5, r5, #255	; 0xff
   b5e38:	d017      	beq.n	b5e6a <_ZN7VL53L1X18VL53L1X_SensorInitEv+0x72>
		delay(1);
   b5e3a:	2001      	movs	r0, #1
   b5e3c:	f000 fc16 	bl	b666c <delay>
	while (dataReady == 0)
   b5e40:	e7ef      	b.n	b5e22 <_ZN7VL53L1X18VL53L1X_SensorInitEv+0x2a>
	status = VL53L1X_ClearInterrupt();
   b5e42:	4620      	mov	r0, r4
   b5e44:	f7ff ff16 	bl	b5c74 <_ZN7VL53L1X22VL53L1X_ClearInterruptEv>
	status = VL53L1X_StopRanging();
   b5e48:	4620      	mov	r0, r4
   b5e4a:	f7ff ff1d 	bl	b5c88 <_ZN7VL53L1X19VL53L1X_StopRangingEv>
	status = VL53L1_WrByte(Device, VL53L1_VHV_CONFIG__TIMEOUT_MACROP_LOOP_BOUND, 0x09); /* two bounds VHV */
   b5e4e:	69a1      	ldr	r1, [r4, #24]
   b5e50:	2309      	movs	r3, #9
   b5e52:	2208      	movs	r2, #8
   b5e54:	4620      	mov	r0, r4
   b5e56:	f7ff ff00 	bl	b5c5a <_ZN7VL53L1X13VL53L1_WrByteEP12VL53L1_Dev_tth>
	status = VL53L1_WrByte(Device, 0x0B, 0);											/* start VHV from the previous temperature */
   b5e5a:	69a1      	ldr	r1, [r4, #24]
   b5e5c:	2300      	movs	r3, #0
   b5e5e:	220b      	movs	r2, #11
   b5e60:	4620      	mov	r0, r4
   b5e62:	f7ff fefa 	bl	b5c5a <_ZN7VL53L1X13VL53L1_WrByteEP12VL53L1_Dev_tth>
}
   b5e66:	b002      	add	sp, #8
   b5e68:	bd70      	pop	{r4, r5, r6, pc}
			return VL53L1_ERROR_TIME_OUT;
   b5e6a:	f06f 0006 	mvn.w	r0, #6
   b5e6e:	e7fa      	b.n	b5e66 <_ZN7VL53L1X18VL53L1X_SensorInitEv+0x6e>
   b5e70:	000b8fc8 	.word	0x000b8fc8

000b5e74 <_ZN7VL53L1X23VL53L1X_GetDistanceModeEPt>:
{
   b5e74:	b513      	push	{r0, r1, r4, lr}
	status = VL53L1_RdByte(Device, PHASECAL_CONFIG__TIMEOUT_MACROP, &TempDM);
   b5e76:	224b      	movs	r2, #75	; 0x4b
   b5e78:	f10d 0307 	add.w	r3, sp, #7
{
   b5e7c:	460c      	mov	r4, r1
	status = VL53L1_RdByte(Device, PHASECAL_CONFIG__TIMEOUT_MACROP, &TempDM);
   b5e7e:	6981      	ldr	r1, [r0, #24]
   b5e80:	f7ff ff81 	bl	b5d86 <_ZN7VL53L1X13VL53L1_RdByteEP12VL53L1_Dev_ttPh>
	if (TempDM == 0x14)
   b5e84:	f89d 3007 	ldrb.w	r3, [sp, #7]
   b5e88:	2b14      	cmp	r3, #20
   b5e8a:	d103      	bne.n	b5e94 <_ZN7VL53L1X23VL53L1X_GetDistanceModeEPt+0x20>
		*DM = 1;
   b5e8c:	2301      	movs	r3, #1
		*DM = 2;
   b5e8e:	8023      	strh	r3, [r4, #0]
}
   b5e90:	b002      	add	sp, #8
   b5e92:	bd10      	pop	{r4, pc}
	if (TempDM == 0x0A)
   b5e94:	2b0a      	cmp	r3, #10
   b5e96:	d1fb      	bne.n	b5e90 <_ZN7VL53L1X23VL53L1X_GetDistanceModeEPt+0x1c>
		*DM = 2;
   b5e98:	2302      	movs	r3, #2
   b5e9a:	e7f8      	b.n	b5e8e <_ZN7VL53L1X23VL53L1X_GetDistanceModeEPt+0x1a>

000b5e9c <_ZN7VL53L1X27VL53L1X_SetTimingBudgetInMsEt>:
{
   b5e9c:	b573      	push	{r0, r1, r4, r5, r6, lr}
   b5e9e:	460d      	mov	r5, r1
	status = VL53L1X_GetDistanceMode(&DM);
   b5ea0:	f10d 0106 	add.w	r1, sp, #6
{
   b5ea4:	4604      	mov	r4, r0
	status = VL53L1X_GetDistanceMode(&DM);
   b5ea6:	f7ff ffe5 	bl	b5e74 <_ZN7VL53L1X23VL53L1X_GetDistanceModeEPt>
	if (DM == 0)
   b5eaa:	f8bd 3006 	ldrh.w	r3, [sp, #6]
	status = VL53L1X_GetDistanceMode(&DM);
   b5eae:	4606      	mov	r6, r0
	if (DM == 0)
   b5eb0:	b153      	cbz	r3, b5ec8 <_ZN7VL53L1X27VL53L1X_SetTimingBudgetInMsEt+0x2c>
	else if (DM == 1)
   b5eb2:	2b01      	cmp	r3, #1
   b5eb4:	d152      	bne.n	b5f5c <_ZN7VL53L1X27VL53L1X_SetTimingBudgetInMsEt+0xc0>
		switch (TimingBudgetInMs)
   b5eb6:	2d32      	cmp	r5, #50	; 0x32
   b5eb8:	d032      	beq.n	b5f20 <_ZN7VL53L1X27VL53L1X_SetTimingBudgetInMsEt+0x84>
   b5eba:	d807      	bhi.n	b5ecc <_ZN7VL53L1X27VL53L1X_SetTimingBudgetInMsEt+0x30>
   b5ebc:	2d14      	cmp	r5, #20
   b5ebe:	d025      	beq.n	b5f0c <_ZN7VL53L1X27VL53L1X_SetTimingBudgetInMsEt+0x70>
   b5ec0:	2d21      	cmp	r5, #33	; 0x21
   b5ec2:	d02b      	beq.n	b5f1c <_ZN7VL53L1X27VL53L1X_SetTimingBudgetInMsEt+0x80>
   b5ec4:	2d0f      	cmp	r5, #15
   b5ec6:	d012      	beq.n	b5eee <_ZN7VL53L1X27VL53L1X_SetTimingBudgetInMsEt+0x52>
		return 1;
   b5ec8:	2601      	movs	r6, #1
   b5eca:	e01c      	b.n	b5f06 <_ZN7VL53L1X27VL53L1X_SetTimingBudgetInMsEt+0x6a>
		switch (TimingBudgetInMs)
   b5ecc:	2dc8      	cmp	r5, #200	; 0xc8
   b5ece:	d031      	beq.n	b5f34 <_ZN7VL53L1X27VL53L1X_SetTimingBudgetInMsEt+0x98>
   b5ed0:	f5b5 7ffa 	cmp.w	r5, #500	; 0x1f4
   b5ed4:	d038      	beq.n	b5f48 <_ZN7VL53L1X27VL53L1X_SetTimingBudgetInMsEt+0xac>
   b5ed6:	2d64      	cmp	r5, #100	; 0x64
   b5ed8:	d1f6      	bne.n	b5ec8 <_ZN7VL53L1X27VL53L1X_SetTimingBudgetInMsEt+0x2c>
			VL53L1_WrWord(Device, RANGE_CONFIG__TIMEOUT_MACROP_A_HI,
   b5eda:	f240 23e1 	movw	r3, #737	; 0x2e1
   b5ede:	69a1      	ldr	r1, [r4, #24]
   b5ee0:	225e      	movs	r2, #94	; 0x5e
   b5ee2:	4620      	mov	r0, r4
   b5ee4:	f7ff fef7 	bl	b5cd6 <_ZN7VL53L1X13VL53L1_WrWordEP12VL53L1_Dev_ttt>
			VL53L1_WrWord(Device, RANGE_CONFIG__TIMEOUT_MACROP_B_HI,
   b5ee8:	f44f 7362 	mov.w	r3, #904	; 0x388
   b5eec:	e006      	b.n	b5efc <_ZN7VL53L1X27VL53L1X_SetTimingBudgetInMsEt+0x60>
			VL53L1_WrWord(Device, RANGE_CONFIG__TIMEOUT_MACROP_A_HI,
   b5eee:	231d      	movs	r3, #29
   b5ef0:	69a1      	ldr	r1, [r4, #24]
   b5ef2:	225e      	movs	r2, #94	; 0x5e
   b5ef4:	4620      	mov	r0, r4
   b5ef6:	f7ff feee 	bl	b5cd6 <_ZN7VL53L1X13VL53L1_WrWordEP12VL53L1_Dev_ttt>
			VL53L1_WrWord(Device, RANGE_CONFIG__TIMEOUT_MACROP_B_HI,
   b5efa:	2327      	movs	r3, #39	; 0x27
			VL53L1_WrWord(Device, RANGE_CONFIG__TIMEOUT_MACROP_B_HI,
   b5efc:	69a1      	ldr	r1, [r4, #24]
   b5efe:	2261      	movs	r2, #97	; 0x61
   b5f00:	4620      	mov	r0, r4
   b5f02:	f7ff fee8 	bl	b5cd6 <_ZN7VL53L1X13VL53L1_WrWordEP12VL53L1_Dev_ttt>
}
   b5f06:	4630      	mov	r0, r6
   b5f08:	b002      	add	sp, #8
   b5f0a:	bd70      	pop	{r4, r5, r6, pc}
			VL53L1_WrWord(Device, RANGE_CONFIG__TIMEOUT_MACROP_A_HI,
   b5f0c:	2351      	movs	r3, #81	; 0x51
			VL53L1_WrWord(Device, RANGE_CONFIG__TIMEOUT_MACROP_A_HI,
   b5f0e:	69a1      	ldr	r1, [r4, #24]
   b5f10:	225e      	movs	r2, #94	; 0x5e
   b5f12:	4620      	mov	r0, r4
   b5f14:	f7ff fedf 	bl	b5cd6 <_ZN7VL53L1X13VL53L1_WrWordEP12VL53L1_Dev_ttt>
			VL53L1_WrWord(Device, RANGE_CONFIG__TIMEOUT_MACROP_B_HI,
   b5f18:	236e      	movs	r3, #110	; 0x6e
   b5f1a:	e7ef      	b.n	b5efc <_ZN7VL53L1X27VL53L1X_SetTimingBudgetInMsEt+0x60>
			VL53L1_WrWord(Device, RANGE_CONFIG__TIMEOUT_MACROP_A_HI,
   b5f1c:	23d6      	movs	r3, #214	; 0xd6
   b5f1e:	e7f6      	b.n	b5f0e <_ZN7VL53L1X27VL53L1X_SetTimingBudgetInMsEt+0x72>
			VL53L1_WrWord(Device, RANGE_CONFIG__TIMEOUT_MACROP_A_HI,
   b5f20:	f44f 73d7 	mov.w	r3, #430	; 0x1ae
   b5f24:	69a1      	ldr	r1, [r4, #24]
   b5f26:	225e      	movs	r2, #94	; 0x5e
   b5f28:	4620      	mov	r0, r4
   b5f2a:	f7ff fed4 	bl	b5cd6 <_ZN7VL53L1X13VL53L1_WrWordEP12VL53L1_Dev_ttt>
			VL53L1_WrWord(Device, RANGE_CONFIG__TIMEOUT_MACROP_B_HI,
   b5f2e:	f44f 73f4 	mov.w	r3, #488	; 0x1e8
   b5f32:	e7e3      	b.n	b5efc <_ZN7VL53L1X27VL53L1X_SetTimingBudgetInMsEt+0x60>
			VL53L1_WrWord(Device, RANGE_CONFIG__TIMEOUT_MACROP_A_HI,
   b5f34:	f240 33e1 	movw	r3, #993	; 0x3e1
   b5f38:	69a1      	ldr	r1, [r4, #24]
   b5f3a:	225e      	movs	r2, #94	; 0x5e
   b5f3c:	4620      	mov	r0, r4
   b5f3e:	f7ff feca 	bl	b5cd6 <_ZN7VL53L1X13VL53L1_WrWordEP12VL53L1_Dev_ttt>
			VL53L1_WrWord(Device, RANGE_CONFIG__TIMEOUT_MACROP_B_HI,
   b5f42:	f240 4396 	movw	r3, #1174	; 0x496
   b5f46:	e7d9      	b.n	b5efc <_ZN7VL53L1X27VL53L1X_SetTimingBudgetInMsEt+0x60>
			VL53L1_WrWord(Device, RANGE_CONFIG__TIMEOUT_MACROP_A_HI,
   b5f48:	f240 5391 	movw	r3, #1425	; 0x591
   b5f4c:	69a1      	ldr	r1, [r4, #24]
   b5f4e:	225e      	movs	r2, #94	; 0x5e
   b5f50:	4620      	mov	r0, r4
   b5f52:	f7ff fec0 	bl	b5cd6 <_ZN7VL53L1X13VL53L1_WrWordEP12VL53L1_Dev_ttt>
			VL53L1_WrWord(Device, RANGE_CONFIG__TIMEOUT_MACROP_B_HI,
   b5f56:	f240 53c1 	movw	r3, #1473	; 0x5c1
   b5f5a:	e7cf      	b.n	b5efc <_ZN7VL53L1X27VL53L1X_SetTimingBudgetInMsEt+0x60>
		switch (TimingBudgetInMs)
   b5f5c:	2d64      	cmp	r5, #100	; 0x64
   b5f5e:	d027      	beq.n	b5fb0 <_ZN7VL53L1X27VL53L1X_SetTimingBudgetInMsEt+0x114>
   b5f60:	d80d      	bhi.n	b5f7e <_ZN7VL53L1X27VL53L1X_SetTimingBudgetInMsEt+0xe2>
   b5f62:	2d21      	cmp	r5, #33	; 0x21
   b5f64:	d01a      	beq.n	b5f9c <_ZN7VL53L1X27VL53L1X_SetTimingBudgetInMsEt+0x100>
   b5f66:	2d32      	cmp	r5, #50	; 0x32
   b5f68:	d01a      	beq.n	b5fa0 <_ZN7VL53L1X27VL53L1X_SetTimingBudgetInMsEt+0x104>
   b5f6a:	2d14      	cmp	r5, #20
   b5f6c:	d1ac      	bne.n	b5ec8 <_ZN7VL53L1X27VL53L1X_SetTimingBudgetInMsEt+0x2c>
			VL53L1_WrWord(Device, RANGE_CONFIG__TIMEOUT_MACROP_A_HI,
   b5f6e:	231e      	movs	r3, #30
   b5f70:	69a1      	ldr	r1, [r4, #24]
   b5f72:	225e      	movs	r2, #94	; 0x5e
   b5f74:	4620      	mov	r0, r4
   b5f76:	f7ff feae 	bl	b5cd6 <_ZN7VL53L1X13VL53L1_WrWordEP12VL53L1_Dev_ttt>
			VL53L1_WrWord(Device, RANGE_CONFIG__TIMEOUT_MACROP_B_HI,
   b5f7a:	2322      	movs	r3, #34	; 0x22
   b5f7c:	e7be      	b.n	b5efc <_ZN7VL53L1X27VL53L1X_SetTimingBudgetInMsEt+0x60>
		switch (TimingBudgetInMs)
   b5f7e:	2dc8      	cmp	r5, #200	; 0xc8
   b5f80:	d020      	beq.n	b5fc4 <_ZN7VL53L1X27VL53L1X_SetTimingBudgetInMsEt+0x128>
   b5f82:	f5b5 7ffa 	cmp.w	r5, #500	; 0x1f4
   b5f86:	d19f      	bne.n	b5ec8 <_ZN7VL53L1X27VL53L1X_SetTimingBudgetInMsEt+0x2c>
			VL53L1_WrWord(Device, RANGE_CONFIG__TIMEOUT_MACROP_A_HI,
   b5f88:	f240 438f 	movw	r3, #1167	; 0x48f
   b5f8c:	69a1      	ldr	r1, [r4, #24]
   b5f8e:	225e      	movs	r2, #94	; 0x5e
   b5f90:	4620      	mov	r0, r4
   b5f92:	f7ff fea0 	bl	b5cd6 <_ZN7VL53L1X13VL53L1_WrWordEP12VL53L1_Dev_ttt>
			VL53L1_WrWord(Device, RANGE_CONFIG__TIMEOUT_MACROP_B_HI,
   b5f96:	f240 43a4 	movw	r3, #1188	; 0x4a4
   b5f9a:	e7af      	b.n	b5efc <_ZN7VL53L1X27VL53L1X_SetTimingBudgetInMsEt+0x60>
			VL53L1_WrWord(Device, RANGE_CONFIG__TIMEOUT_MACROP_A_HI,
   b5f9c:	2360      	movs	r3, #96	; 0x60
   b5f9e:	e7b6      	b.n	b5f0e <_ZN7VL53L1X27VL53L1X_SetTimingBudgetInMsEt+0x72>
			VL53L1_WrWord(Device, RANGE_CONFIG__TIMEOUT_MACROP_A_HI,
   b5fa0:	23ad      	movs	r3, #173	; 0xad
   b5fa2:	69a1      	ldr	r1, [r4, #24]
   b5fa4:	225e      	movs	r2, #94	; 0x5e
   b5fa6:	4620      	mov	r0, r4
   b5fa8:	f7ff fe95 	bl	b5cd6 <_ZN7VL53L1X13VL53L1_WrWordEP12VL53L1_Dev_ttt>
			VL53L1_WrWord(Device, RANGE_CONFIG__TIMEOUT_MACROP_B_HI,
   b5fac:	23c6      	movs	r3, #198	; 0xc6
   b5fae:	e7a5      	b.n	b5efc <_ZN7VL53L1X27VL53L1X_SetTimingBudgetInMsEt+0x60>
			VL53L1_WrWord(Device, RANGE_CONFIG__TIMEOUT_MACROP_A_HI,
   b5fb0:	f44f 73e6 	mov.w	r3, #460	; 0x1cc
   b5fb4:	69a1      	ldr	r1, [r4, #24]
   b5fb6:	225e      	movs	r2, #94	; 0x5e
   b5fb8:	4620      	mov	r0, r4
   b5fba:	f7ff fe8c 	bl	b5cd6 <_ZN7VL53L1X13VL53L1_WrWordEP12VL53L1_Dev_ttt>
			VL53L1_WrWord(Device, RANGE_CONFIG__TIMEOUT_MACROP_B_HI,
   b5fbe:	f44f 73f5 	mov.w	r3, #490	; 0x1ea
   b5fc2:	e79b      	b.n	b5efc <_ZN7VL53L1X27VL53L1X_SetTimingBudgetInMsEt+0x60>
			VL53L1_WrWord(Device, RANGE_CONFIG__TIMEOUT_MACROP_A_HI,
   b5fc4:	f240 23d9 	movw	r3, #729	; 0x2d9
   b5fc8:	69a1      	ldr	r1, [r4, #24]
   b5fca:	225e      	movs	r2, #94	; 0x5e
   b5fcc:	4620      	mov	r0, r4
   b5fce:	f7ff fe82 	bl	b5cd6 <_ZN7VL53L1X13VL53L1_WrWordEP12VL53L1_Dev_ttt>
			VL53L1_WrWord(Device, RANGE_CONFIG__TIMEOUT_MACROP_B_HI,
   b5fd2:	f44f 733e 	mov.w	r3, #760	; 0x2f8
   b5fd6:	e791      	b.n	b5efc <_ZN7VL53L1X27VL53L1X_SetTimingBudgetInMsEt+0x60>

000b5fd8 <_ZN7VL53L1X13VL53L1_RdWordEP12VL53L1_Dev_ttPt>:
{
   b5fd8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
   b5fda:	461c      	mov	r4, r3
	uint8_t buffer[2] = {0, 0};
   b5fdc:	2300      	movs	r3, #0
   b5fde:	f8ad 300c 	strh.w	r3, [sp, #12]
	status = VL53L1_I2CRead(Dev->I2cDevAddr, index, buffer, 2);
   b5fe2:	2302      	movs	r3, #2
   b5fe4:	7809      	ldrb	r1, [r1, #0]
   b5fe6:	9300      	str	r3, [sp, #0]
   b5fe8:	ab03      	add	r3, sp, #12
   b5fea:	f7ff fe96 	bl	b5d1a <_ZN7VL53L1X14VL53L1_I2CReadEhtPht>
	if (!status)
   b5fee:	b930      	cbnz	r0, b5ffe <_ZN7VL53L1X13VL53L1_RdWordEP12VL53L1_Dev_ttPt+0x26>
		*data = (buffer[0] << 8) + buffer[1];
   b5ff0:	f89d 200c 	ldrb.w	r2, [sp, #12]
   b5ff4:	f89d 300d 	ldrb.w	r3, [sp, #13]
   b5ff8:	eb03 2302 	add.w	r3, r3, r2, lsl #8
   b5ffc:	8023      	strh	r3, [r4, #0]
}
   b5ffe:	b004      	add	sp, #16
   b6000:	bd10      	pop	{r4, pc}

000b6002 <_ZN7VL53L1X27VL53L1X_GetTimingBudgetInMsEPt>:
{
   b6002:	b513      	push	{r0, r1, r4, lr}
	status = VL53L1_RdWord(Device, RANGE_CONFIG__TIMEOUT_MACROP_A_HI, &Temp);
   b6004:	225e      	movs	r2, #94	; 0x5e
   b6006:	f10d 0306 	add.w	r3, sp, #6
{
   b600a:	460c      	mov	r4, r1
	status = VL53L1_RdWord(Device, RANGE_CONFIG__TIMEOUT_MACROP_A_HI, &Temp);
   b600c:	6981      	ldr	r1, [r0, #24]
   b600e:	f7ff ffe3 	bl	b5fd8 <_ZN7VL53L1X13VL53L1_RdWordEP12VL53L1_Dev_ttPt>
	switch (Temp)
   b6012:	f8bd 3006 	ldrh.w	r3, [sp, #6]
   b6016:	f5b3 7fd7 	cmp.w	r3, #430	; 0x1ae
   b601a:	d034      	beq.n	b6086 <_ZN7VL53L1X27VL53L1X_GetTimingBudgetInMsEPt+0x84>
   b601c:	d810      	bhi.n	b6040 <_ZN7VL53L1X27VL53L1X_GetTimingBudgetInMsEPt+0x3e>
   b601e:	2b51      	cmp	r3, #81	; 0x51
   b6020:	d02f      	beq.n	b6082 <_ZN7VL53L1X27VL53L1X_GetTimingBudgetInMsEPt+0x80>
   b6022:	d805      	bhi.n	b6030 <_ZN7VL53L1X27VL53L1X_GetTimingBudgetInMsEPt+0x2e>
   b6024:	2b1d      	cmp	r3, #29
   b6026:	d028      	beq.n	b607a <_ZN7VL53L1X27VL53L1X_GetTimingBudgetInMsEPt+0x78>
   b6028:	2b1e      	cmp	r3, #30
   b602a:	d02a      	beq.n	b6082 <_ZN7VL53L1X27VL53L1X_GetTimingBudgetInMsEPt+0x80>
		*pTimingBudget = 0;
   b602c:	2300      	movs	r3, #0
   b602e:	e025      	b.n	b607c <_ZN7VL53L1X27VL53L1X_GetTimingBudgetInMsEPt+0x7a>
	switch (Temp)
   b6030:	2bad      	cmp	r3, #173	; 0xad
   b6032:	d028      	beq.n	b6086 <_ZN7VL53L1X27VL53L1X_GetTimingBudgetInMsEPt+0x84>
   b6034:	2bd6      	cmp	r3, #214	; 0xd6
   b6036:	d001      	beq.n	b603c <_ZN7VL53L1X27VL53L1X_GetTimingBudgetInMsEPt+0x3a>
   b6038:	2b60      	cmp	r3, #96	; 0x60
   b603a:	d1f7      	bne.n	b602c <_ZN7VL53L1X27VL53L1X_GetTimingBudgetInMsEPt+0x2a>
		*pTimingBudget = 33;
   b603c:	2321      	movs	r3, #33	; 0x21
   b603e:	e01d      	b.n	b607c <_ZN7VL53L1X27VL53L1X_GetTimingBudgetInMsEPt+0x7a>
	switch (Temp)
   b6040:	f240 32e1 	movw	r2, #993	; 0x3e1
   b6044:	4293      	cmp	r3, r2
   b6046:	d020      	beq.n	b608a <_ZN7VL53L1X27VL53L1X_GetTimingBudgetInMsEPt+0x88>
   b6048:	d80c      	bhi.n	b6064 <_ZN7VL53L1X27VL53L1X_GetTimingBudgetInMsEPt+0x62>
   b604a:	f240 22d9 	movw	r2, #729	; 0x2d9
   b604e:	4293      	cmp	r3, r2
   b6050:	d01b      	beq.n	b608a <_ZN7VL53L1X27VL53L1X_GetTimingBudgetInMsEPt+0x88>
   b6052:	f240 22e1 	movw	r2, #737	; 0x2e1
   b6056:	4293      	cmp	r3, r2
   b6058:	d002      	beq.n	b6060 <_ZN7VL53L1X27VL53L1X_GetTimingBudgetInMsEPt+0x5e>
   b605a:	f5b3 7fe6 	cmp.w	r3, #460	; 0x1cc
   b605e:	d1e5      	bne.n	b602c <_ZN7VL53L1X27VL53L1X_GetTimingBudgetInMsEPt+0x2a>
		*pTimingBudget = 100;
   b6060:	2364      	movs	r3, #100	; 0x64
   b6062:	e00b      	b.n	b607c <_ZN7VL53L1X27VL53L1X_GetTimingBudgetInMsEPt+0x7a>
	switch (Temp)
   b6064:	f240 428f 	movw	r2, #1167	; 0x48f
   b6068:	4293      	cmp	r3, r2
   b606a:	d003      	beq.n	b6074 <_ZN7VL53L1X27VL53L1X_GetTimingBudgetInMsEPt+0x72>
   b606c:	f240 5291 	movw	r2, #1425	; 0x591
   b6070:	4293      	cmp	r3, r2
   b6072:	d1db      	bne.n	b602c <_ZN7VL53L1X27VL53L1X_GetTimingBudgetInMsEPt+0x2a>
		*pTimingBudget = 500;
   b6074:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
   b6078:	e000      	b.n	b607c <_ZN7VL53L1X27VL53L1X_GetTimingBudgetInMsEPt+0x7a>
		*pTimingBudget = 15;
   b607a:	230f      	movs	r3, #15
		*pTimingBudget = 0;
   b607c:	8023      	strh	r3, [r4, #0]
}
   b607e:	b002      	add	sp, #8
   b6080:	bd10      	pop	{r4, pc}
		*pTimingBudget = 20;
   b6082:	2314      	movs	r3, #20
   b6084:	e7fa      	b.n	b607c <_ZN7VL53L1X27VL53L1X_GetTimingBudgetInMsEPt+0x7a>
		*pTimingBudget = 50;
   b6086:	2332      	movs	r3, #50	; 0x32
   b6088:	e7f8      	b.n	b607c <_ZN7VL53L1X27VL53L1X_GetTimingBudgetInMsEPt+0x7a>
		*pTimingBudget = 200;
   b608a:	23c8      	movs	r3, #200	; 0xc8
   b608c:	e7f6      	b.n	b607c <_ZN7VL53L1X27VL53L1X_GetTimingBudgetInMsEPt+0x7a>

000b608e <_ZN7VL53L1X23VL53L1X_SetDistanceModeEt>:
{
   b608e:	b537      	push	{r0, r1, r2, r4, r5, lr}
   b6090:	460d      	mov	r5, r1
	status = VL53L1X_GetTimingBudgetInMs(&TB);
   b6092:	f10d 0106 	add.w	r1, sp, #6
{
   b6096:	4604      	mov	r4, r0
	status = VL53L1X_GetTimingBudgetInMs(&TB);
   b6098:	f7ff ffb3 	bl	b6002 <_ZN7VL53L1X27VL53L1X_GetTimingBudgetInMsEPt>
	switch (DM)
   b609c:	2d01      	cmp	r5, #1
   b609e:	d008      	beq.n	b60b2 <_ZN7VL53L1X23VL53L1X_SetDistanceModeEt+0x24>
   b60a0:	2d02      	cmp	r5, #2
   b60a2:	d02d      	beq.n	b6100 <_ZN7VL53L1X23VL53L1X_SetDistanceModeEt+0x72>
	status = VL53L1X_SetTimingBudgetInMs(TB);
   b60a4:	f8bd 1006 	ldrh.w	r1, [sp, #6]
   b60a8:	4620      	mov	r0, r4
   b60aa:	f7ff fef7 	bl	b5e9c <_ZN7VL53L1X27VL53L1X_SetTimingBudgetInMsEt>
}
   b60ae:	b003      	add	sp, #12
   b60b0:	bd30      	pop	{r4, r5, pc}
		status = VL53L1_WrByte(Device, PHASECAL_CONFIG__TIMEOUT_MACROP, 0x14);
   b60b2:	69a1      	ldr	r1, [r4, #24]
   b60b4:	2314      	movs	r3, #20
   b60b6:	224b      	movs	r2, #75	; 0x4b
   b60b8:	4620      	mov	r0, r4
   b60ba:	f7ff fdce 	bl	b5c5a <_ZN7VL53L1X13VL53L1_WrByteEP12VL53L1_Dev_tth>
		status = VL53L1_WrByte(Device, RANGE_CONFIG__VCSEL_PERIOD_A, 0x07);
   b60be:	69a1      	ldr	r1, [r4, #24]
   b60c0:	2307      	movs	r3, #7
   b60c2:	2260      	movs	r2, #96	; 0x60
   b60c4:	4620      	mov	r0, r4
   b60c6:	f7ff fdc8 	bl	b5c5a <_ZN7VL53L1X13VL53L1_WrByteEP12VL53L1_Dev_tth>
		status = VL53L1_WrByte(Device, RANGE_CONFIG__VCSEL_PERIOD_B, 0x05);
   b60ca:	69a1      	ldr	r1, [r4, #24]
   b60cc:	2305      	movs	r3, #5
   b60ce:	2263      	movs	r2, #99	; 0x63
   b60d0:	4620      	mov	r0, r4
   b60d2:	f7ff fdc2 	bl	b5c5a <_ZN7VL53L1X13VL53L1_WrByteEP12VL53L1_Dev_tth>
		status = VL53L1_WrByte(Device, RANGE_CONFIG__VALID_PHASE_HIGH, 0x38);
   b60d6:	69a1      	ldr	r1, [r4, #24]
   b60d8:	2338      	movs	r3, #56	; 0x38
   b60da:	2269      	movs	r2, #105	; 0x69
   b60dc:	4620      	mov	r0, r4
   b60de:	f7ff fdbc 	bl	b5c5a <_ZN7VL53L1X13VL53L1_WrByteEP12VL53L1_Dev_tth>
		status = VL53L1_WrWord(Device, SD_CONFIG__WOI_SD0, 0x0705);
   b60e2:	f240 7305 	movw	r3, #1797	; 0x705
   b60e6:	69a1      	ldr	r1, [r4, #24]
   b60e8:	2278      	movs	r2, #120	; 0x78
   b60ea:	4620      	mov	r0, r4
   b60ec:	f7ff fdf3 	bl	b5cd6 <_ZN7VL53L1X13VL53L1_WrWordEP12VL53L1_Dev_ttt>
		status = VL53L1_WrWord(Device, SD_CONFIG__INITIAL_PHASE_SD0, 0x0606);
   b60f0:	f240 6306 	movw	r3, #1542	; 0x606
		status = VL53L1_WrWord(Device, SD_CONFIG__INITIAL_PHASE_SD0, 0x0E0E);
   b60f4:	69a1      	ldr	r1, [r4, #24]
   b60f6:	227a      	movs	r2, #122	; 0x7a
   b60f8:	4620      	mov	r0, r4
   b60fa:	f7ff fdec 	bl	b5cd6 <_ZN7VL53L1X13VL53L1_WrWordEP12VL53L1_Dev_ttt>
		break;
   b60fe:	e7d1      	b.n	b60a4 <_ZN7VL53L1X23VL53L1X_SetDistanceModeEt+0x16>
		status = VL53L1_WrByte(Device, PHASECAL_CONFIG__TIMEOUT_MACROP, 0x0A);
   b6100:	69a1      	ldr	r1, [r4, #24]
   b6102:	230a      	movs	r3, #10
   b6104:	224b      	movs	r2, #75	; 0x4b
   b6106:	4620      	mov	r0, r4
   b6108:	f7ff fda7 	bl	b5c5a <_ZN7VL53L1X13VL53L1_WrByteEP12VL53L1_Dev_tth>
		status = VL53L1_WrByte(Device, RANGE_CONFIG__VCSEL_PERIOD_A, 0x0F);
   b610c:	69a1      	ldr	r1, [r4, #24]
   b610e:	230f      	movs	r3, #15
   b6110:	2260      	movs	r2, #96	; 0x60
   b6112:	4620      	mov	r0, r4
   b6114:	f7ff fda1 	bl	b5c5a <_ZN7VL53L1X13VL53L1_WrByteEP12VL53L1_Dev_tth>
		status = VL53L1_WrByte(Device, RANGE_CONFIG__VCSEL_PERIOD_B, 0x0D);
   b6118:	69a1      	ldr	r1, [r4, #24]
   b611a:	230d      	movs	r3, #13
   b611c:	2263      	movs	r2, #99	; 0x63
   b611e:	4620      	mov	r0, r4
   b6120:	f7ff fd9b 	bl	b5c5a <_ZN7VL53L1X13VL53L1_WrByteEP12VL53L1_Dev_tth>
		status = VL53L1_WrByte(Device, RANGE_CONFIG__VALID_PHASE_HIGH, 0xB8);
   b6124:	69a1      	ldr	r1, [r4, #24]
   b6126:	23b8      	movs	r3, #184	; 0xb8
   b6128:	2269      	movs	r2, #105	; 0x69
   b612a:	4620      	mov	r0, r4
   b612c:	f7ff fd95 	bl	b5c5a <_ZN7VL53L1X13VL53L1_WrByteEP12VL53L1_Dev_tth>
		status = VL53L1_WrWord(Device, SD_CONFIG__WOI_SD0, 0x0F0D);
   b6130:	f640 730d 	movw	r3, #3853	; 0xf0d
   b6134:	69a1      	ldr	r1, [r4, #24]
   b6136:	2278      	movs	r2, #120	; 0x78
   b6138:	4620      	mov	r0, r4
   b613a:	f7ff fdcc 	bl	b5cd6 <_ZN7VL53L1X13VL53L1_WrWordEP12VL53L1_Dev_ttt>
		status = VL53L1_WrWord(Device, SD_CONFIG__INITIAL_PHASE_SD0, 0x0E0E);
   b613e:	f640 630e 	movw	r3, #3598	; 0xe0e
   b6142:	e7d7      	b.n	b60f4 <_ZN7VL53L1X23VL53L1X_SetDistanceModeEt+0x66>
   b6144:	0000      	movs	r0, r0
	...

000b6148 <_ZN7VL53L1X31VL53L1X_SetInterMeasurementInMsEt>:
{
   b6148:	b573      	push	{r0, r1, r4, r5, r6, lr}
	status = VL53L1_RdWord(Device, VL53L1_RESULT__OSC_CALIBRATE_VAL, &ClockPLL);
   b614a:	22de      	movs	r2, #222	; 0xde
{
   b614c:	460e      	mov	r6, r1
	status = VL53L1_RdWord(Device, VL53L1_RESULT__OSC_CALIBRATE_VAL, &ClockPLL);
   b614e:	f10d 0306 	add.w	r3, sp, #6
   b6152:	6981      	ldr	r1, [r0, #24]
{
   b6154:	4604      	mov	r4, r0
	status = VL53L1_RdWord(Device, VL53L1_RESULT__OSC_CALIBRATE_VAL, &ClockPLL);
   b6156:	f7ff ff3f 	bl	b5fd8 <_ZN7VL53L1X13VL53L1_RdWordEP12VL53L1_Dev_ttPt>
	ClockPLL = ClockPLL & 0x3FF;
   b615a:	f8bd 3006 	ldrh.w	r3, [sp, #6]
   b615e:	f3c3 0309 	ubfx	r3, r3, #0, #10
	status = VL53L1_RdWord(Device, VL53L1_RESULT__OSC_CALIBRATE_VAL, &ClockPLL);
   b6162:	4605      	mov	r5, r0
				   (uint32_t)(ClockPLL * InterMeasMs * 1.075));
   b6164:	fb06 f003 	mul.w	r0, r6, r3
	ClockPLL = ClockPLL & 0x3FF;
   b6168:	f8ad 3006 	strh.w	r3, [sp, #6]
				   (uint32_t)(ClockPLL * InterMeasMs * 1.075));
   b616c:	f001 fdf2 	bl	b7d54 <__aeabi_i2d>
   b6170:	a307      	add	r3, pc, #28	; (adr r3, b6190 <_ZN7VL53L1X31VL53L1X_SetInterMeasurementInMsEt+0x48>)
   b6172:	e9d3 2300 	ldrd	r2, r3, [r3]
   b6176:	f001 fe57 	bl	b7e28 <__aeabi_dmul>
	VL53L1_WrDWord(Device, VL53L1_SYSTEM__INTERMEASUREMENT_PERIOD,
   b617a:	f002 f8ef 	bl	b835c <__aeabi_d2uiz>
   b617e:	69a1      	ldr	r1, [r4, #24]
   b6180:	4603      	mov	r3, r0
   b6182:	226c      	movs	r2, #108	; 0x6c
   b6184:	4620      	mov	r0, r4
   b6186:	f7ff fdb4 	bl	b5cf2 <_ZN7VL53L1X14VL53L1_WrDWordEP12VL53L1_Dev_ttm>
}
   b618a:	4628      	mov	r0, r5
   b618c:	b002      	add	sp, #8
   b618e:	bd70      	pop	{r4, r5, r6, pc}
   b6190:	33333333 	.word	0x33333333
   b6194:	3ff13333 	.word	0x3ff13333

000b6198 <_ZN7VL53L1X19VL53L1X_GetSensorIdEPt>:
{
   b6198:	b513      	push	{r0, r1, r4, lr}
	uint16_t tmp = 0;
   b619a:	2300      	movs	r3, #0
{
   b619c:	460c      	mov	r4, r1
	uint16_t tmp = 0;
   b619e:	f8ad 3006 	strh.w	r3, [sp, #6]
	status = VL53L1_RdWord(Device, VL53L1_IDENTIFICATION__MODEL_ID, &tmp);
   b61a2:	6981      	ldr	r1, [r0, #24]
   b61a4:	f10d 0306 	add.w	r3, sp, #6
   b61a8:	f240 120f 	movw	r2, #271	; 0x10f
   b61ac:	f7ff ff14 	bl	b5fd8 <_ZN7VL53L1X13VL53L1_RdWordEP12VL53L1_Dev_ttPt>
	*sensorId = tmp;
   b61b0:	f8bd 3006 	ldrh.w	r3, [sp, #6]
   b61b4:	8023      	strh	r3, [r4, #0]
}
   b61b6:	b002      	add	sp, #8
   b61b8:	bd10      	pop	{r4, pc}

000b61ba <_ZN7VL53L1X19VL53L1X_GetDistanceEPt>:
{
   b61ba:	b513      	push	{r0, r1, r4, lr}
	status = (VL53L1_RdWord(Device,
   b61bc:	2296      	movs	r2, #150	; 0x96
{
   b61be:	460c      	mov	r4, r1
	status = (VL53L1_RdWord(Device,
   b61c0:	f10d 0306 	add.w	r3, sp, #6
   b61c4:	6981      	ldr	r1, [r0, #24]
   b61c6:	f7ff ff07 	bl	b5fd8 <_ZN7VL53L1X13VL53L1_RdWordEP12VL53L1_Dev_ttPt>
	*distance = tmp;
   b61ca:	f8bd 3006 	ldrh.w	r3, [sp, #6]
   b61ce:	8023      	strh	r3, [r4, #0]
}
   b61d0:	b002      	add	sp, #8
   b61d2:	bd10      	pop	{r4, pc}

000b61d4 <os_mutex_recursive_create>:
DYNALIB_FN(13, hal_concurrent, os_mutex_destroy, int(os_mutex_t))
DYNALIB_FN(14, hal_concurrent, os_mutex_lock, int(os_mutex_t))
DYNALIB_FN(15, hal_concurrent, os_mutex_trylock, int(os_mutex_t))
DYNALIB_FN(16, hal_concurrent, os_mutex_unlock, int(os_mutex_t))

DYNALIB_FN(17, hal_concurrent, os_mutex_recursive_create, int(os_mutex_recursive_t*))
   b61d4:	b508      	push	{r3, lr}
   b61d6:	4b02      	ldr	r3, [pc, #8]	; (b61e0 <os_mutex_recursive_create+0xc>)
   b61d8:	681b      	ldr	r3, [r3, #0]
   b61da:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   b61dc:	9301      	str	r3, [sp, #4]
   b61de:	bd08      	pop	{r3, pc}
   b61e0:	00030248 	.word	0x00030248

000b61e4 <HAL_RNG_GetRandomNumber>:

DYNALIB_BEGIN(hal)

#if PLATFORM_ID > PLATFORM_GCC
DYNALIB_FN(0, hal, HAL_RNG_Configuration, void(void))
DYNALIB_FN(1, hal, HAL_RNG_GetRandomNumber, uint32_t(void))
   b61e4:	b508      	push	{r3, lr}
   b61e6:	4b02      	ldr	r3, [pc, #8]	; (b61f0 <HAL_RNG_GetRandomNumber+0xc>)
   b61e8:	681b      	ldr	r3, [r3, #0]
   b61ea:	685b      	ldr	r3, [r3, #4]
   b61ec:	9301      	str	r3, [sp, #4]
   b61ee:	bd08      	pop	{r3, pc}
   b61f0:	00030218 	.word	0x00030218

000b61f4 <HAL_Delay_Microseconds>:
#else
#define BASE_IDX 0
#endif // PLATFORM_ID > PLATFORM_GCC

DYNALIB_FN(BASE_IDX + 0, hal, HAL_Delay_Milliseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 1, hal, HAL_Delay_Microseconds, void(uint32_t))
   b61f4:	b508      	push	{r3, lr}
   b61f6:	4b02      	ldr	r3, [pc, #8]	; (b6200 <HAL_Delay_Microseconds+0xc>)
   b61f8:	681b      	ldr	r3, [r3, #0]
   b61fa:	68db      	ldr	r3, [r3, #12]
   b61fc:	9301      	str	r3, [sp, #4]
   b61fe:	bd08      	pop	{r3, pc}
   b6200:	00030218 	.word	0x00030218

000b6204 <HAL_Timer_Get_Milli_Seconds>:
DYNALIB_FN(BASE_IDX + 2, hal, HAL_Timer_Get_Micro_Seconds, system_tick_t(void))
DYNALIB_FN(BASE_IDX + 3, hal, HAL_Timer_Get_Milli_Seconds, system_tick_t(void))
   b6204:	b508      	push	{r3, lr}
   b6206:	4b02      	ldr	r3, [pc, #8]	; (b6210 <HAL_Timer_Get_Milli_Seconds+0xc>)
   b6208:	681b      	ldr	r3, [r3, #0]
   b620a:	695b      	ldr	r3, [r3, #20]
   b620c:	9301      	str	r3, [sp, #4]
   b620e:	bd08      	pop	{r3, pc}
   b6210:	00030218 	.word	0x00030218

000b6214 <HAL_Pin_Mode>:

DYNALIB_BEGIN(hal_gpio)

DYNALIB_FN(0, hal_gpio, HAL_Pin_Map, Hal_Pin_Info*(void))
DYNALIB_FN(1, hal_gpio, HAL_Validate_Pin_Function, PinFunction(pin_t, PinFunction))
DYNALIB_FN(2, hal_gpio, HAL_Pin_Mode, void(pin_t, PinMode))
   b6214:	b508      	push	{r3, lr}
   b6216:	4b02      	ldr	r3, [pc, #8]	; (b6220 <HAL_Pin_Mode+0xc>)
   b6218:	681b      	ldr	r3, [r3, #0]
   b621a:	689b      	ldr	r3, [r3, #8]
   b621c:	9301      	str	r3, [sp, #4]
   b621e:	bd08      	pop	{r3, pc}
   b6220:	0003022c 	.word	0x0003022c

000b6224 <HAL_Get_Pin_Mode>:
DYNALIB_FN(3, hal_gpio, HAL_Get_Pin_Mode, PinMode(pin_t))
   b6224:	b508      	push	{r3, lr}
   b6226:	4b02      	ldr	r3, [pc, #8]	; (b6230 <HAL_Get_Pin_Mode+0xc>)
   b6228:	681b      	ldr	r3, [r3, #0]
   b622a:	68db      	ldr	r3, [r3, #12]
   b622c:	9301      	str	r3, [sp, #4]
   b622e:	bd08      	pop	{r3, pc}
   b6230:	0003022c 	.word	0x0003022c

000b6234 <HAL_GPIO_Write>:
DYNALIB_FN(4, hal_gpio, HAL_GPIO_Write, void(pin_t, uint8_t))
   b6234:	b508      	push	{r3, lr}
   b6236:	4b02      	ldr	r3, [pc, #8]	; (b6240 <HAL_GPIO_Write+0xc>)
   b6238:	681b      	ldr	r3, [r3, #0]
   b623a:	691b      	ldr	r3, [r3, #16]
   b623c:	9301      	str	r3, [sp, #4]
   b623e:	bd08      	pop	{r3, pc}
   b6240:	0003022c 	.word	0x0003022c

000b6244 <hal_i2c_begin>:
DYNALIB_BEGIN(hal_i2c)

DYNALIB_FN(0, hal_i2c, hal_i2c_set_speed, void(hal_i2c_interface_t, uint32_t, void*))
DYNALIB_FN(1, hal_i2c, hal_i2c_enable_dma_mode, void(hal_i2c_interface_t, bool, void*))
DYNALIB_FN(2, hal_i2c, hal_i2c_stretch_clock, void(hal_i2c_interface_t, bool, void*))
DYNALIB_FN(3, hal_i2c, hal_i2c_begin, void(hal_i2c_interface_t, hal_i2c_mode_t, uint8_t, void*))
   b6244:	b508      	push	{r3, lr}
   b6246:	4b02      	ldr	r3, [pc, #8]	; (b6250 <hal_i2c_begin+0xc>)
   b6248:	681b      	ldr	r3, [r3, #0]
   b624a:	68db      	ldr	r3, [r3, #12]
   b624c:	9301      	str	r3, [sp, #4]
   b624e:	bd08      	pop	{r3, pc}
   b6250:	00030228 	.word	0x00030228

000b6254 <hal_i2c_begin_transmission>:
DYNALIB_FN(4, hal_i2c, hal_i2c_end, void(hal_i2c_interface_t, void*))
DYNALIB_FN(5, hal_i2c, hal_i2c_request, uint32_t(hal_i2c_interface_t, uint8_t, uint8_t, uint8_t, void*))
DYNALIB_FN(6, hal_i2c, hal_i2c_begin_transmission, void(hal_i2c_interface_t, uint8_t, const hal_i2c_transmission_config_t*))
   b6254:	b508      	push	{r3, lr}
   b6256:	4b02      	ldr	r3, [pc, #8]	; (b6260 <hal_i2c_begin_transmission+0xc>)
   b6258:	681b      	ldr	r3, [r3, #0]
   b625a:	699b      	ldr	r3, [r3, #24]
   b625c:	9301      	str	r3, [sp, #4]
   b625e:	bd08      	pop	{r3, pc}
   b6260:	00030228 	.word	0x00030228

000b6264 <hal_i2c_end_transmission>:
DYNALIB_FN(7, hal_i2c, hal_i2c_end_transmission, uint8_t(hal_i2c_interface_t, uint8_t, void*))
   b6264:	b508      	push	{r3, lr}
   b6266:	4b02      	ldr	r3, [pc, #8]	; (b6270 <hal_i2c_end_transmission+0xc>)
   b6268:	681b      	ldr	r3, [r3, #0]
   b626a:	69db      	ldr	r3, [r3, #28]
   b626c:	9301      	str	r3, [sp, #4]
   b626e:	bd08      	pop	{r3, pc}
   b6270:	00030228 	.word	0x00030228

000b6274 <hal_i2c_write>:
DYNALIB_FN(8, hal_i2c, hal_i2c_write, uint32_t(hal_i2c_interface_t, uint8_t, void*))
   b6274:	b508      	push	{r3, lr}
   b6276:	4b02      	ldr	r3, [pc, #8]	; (b6280 <hal_i2c_write+0xc>)
   b6278:	681b      	ldr	r3, [r3, #0]
   b627a:	6a1b      	ldr	r3, [r3, #32]
   b627c:	9301      	str	r3, [sp, #4]
   b627e:	bd08      	pop	{r3, pc}
   b6280:	00030228 	.word	0x00030228

000b6284 <hal_i2c_available>:
DYNALIB_FN(9, hal_i2c, hal_i2c_available, int32_t(hal_i2c_interface_t, void*))
   b6284:	b508      	push	{r3, lr}
   b6286:	4b02      	ldr	r3, [pc, #8]	; (b6290 <hal_i2c_available+0xc>)
   b6288:	681b      	ldr	r3, [r3, #0]
   b628a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   b628c:	9301      	str	r3, [sp, #4]
   b628e:	bd08      	pop	{r3, pc}
   b6290:	00030228 	.word	0x00030228

000b6294 <hal_i2c_read>:
DYNALIB_FN(10, hal_i2c, hal_i2c_read, int32_t(hal_i2c_interface_t, void*))
   b6294:	b508      	push	{r3, lr}
   b6296:	4b02      	ldr	r3, [pc, #8]	; (b62a0 <hal_i2c_read+0xc>)
   b6298:	681b      	ldr	r3, [r3, #0]
   b629a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   b629c:	9301      	str	r3, [sp, #4]
   b629e:	bd08      	pop	{r3, pc}
   b62a0:	00030228 	.word	0x00030228

000b62a4 <hal_i2c_peek>:
DYNALIB_FN(11, hal_i2c, hal_i2c_peek, int32_t(hal_i2c_interface_t, void*))
   b62a4:	b508      	push	{r3, lr}
   b62a6:	4b02      	ldr	r3, [pc, #8]	; (b62b0 <hal_i2c_peek+0xc>)
   b62a8:	681b      	ldr	r3, [r3, #0]
   b62aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b62ac:	9301      	str	r3, [sp, #4]
   b62ae:	bd08      	pop	{r3, pc}
   b62b0:	00030228 	.word	0x00030228

000b62b4 <hal_i2c_flush>:
DYNALIB_FN(12, hal_i2c, hal_i2c_flush, void(hal_i2c_interface_t, void*))
   b62b4:	b508      	push	{r3, lr}
   b62b6:	4b02      	ldr	r3, [pc, #8]	; (b62c0 <hal_i2c_flush+0xc>)
   b62b8:	681b      	ldr	r3, [r3, #0]
   b62ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   b62bc:	9301      	str	r3, [sp, #4]
   b62be:	bd08      	pop	{r3, pc}
   b62c0:	00030228 	.word	0x00030228

000b62c4 <hal_i2c_is_enabled>:
DYNALIB_FN(13, hal_i2c, hal_i2c_is_enabled, bool(hal_i2c_interface_t, void*))
   b62c4:	b508      	push	{r3, lr}
   b62c6:	4b02      	ldr	r3, [pc, #8]	; (b62d0 <hal_i2c_is_enabled+0xc>)
   b62c8:	681b      	ldr	r3, [r3, #0]
   b62ca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   b62cc:	9301      	str	r3, [sp, #4]
   b62ce:	bd08      	pop	{r3, pc}
   b62d0:	00030228 	.word	0x00030228

000b62d4 <hal_i2c_init>:
DYNALIB_FN(14, hal_i2c, hal_i2c_set_callback_on_received, void(hal_i2c_interface_t, void(*)(int), void*))
DYNALIB_FN(15, hal_i2c, hal_i2c_set_callback_on_requested, void(hal_i2c_interface_t, void(*)(void), void*))
DYNALIB_FN(16, hal_i2c, hal_i2c_init, int(hal_i2c_interface_t, const hal_i2c_config_t*))
   b62d4:	b508      	push	{r3, lr}
   b62d6:	4b02      	ldr	r3, [pc, #8]	; (b62e0 <hal_i2c_init+0xc>)
   b62d8:	681b      	ldr	r3, [r3, #0]
   b62da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b62dc:	9301      	str	r3, [sp, #4]
   b62de:	bd08      	pop	{r3, pc}
   b62e0:	00030228 	.word	0x00030228

000b62e4 <hal_i2c_request_ex>:
DYNALIB_FN(17, hal_i2c, hal_i2c_reset, uint8_t(hal_i2c_interface_t, uint32_t, void*))
DYNALIB_FN(18, hal_i2c, hal_i2c_lock, int32_t(hal_i2c_interface_t, void*))
DYNALIB_FN(19, hal_i2c, hal_i2c_unlock, int32_t(hal_i2c_interface_t, void*))
DYNALIB_FN(20, hal_i2c, hal_i2c_request_ex, int32_t(hal_i2c_interface_t, const hal_i2c_transmission_config_t*, void*))
   b62e4:	b508      	push	{r3, lr}
   b62e6:	4b02      	ldr	r3, [pc, #8]	; (b62f0 <hal_i2c_request_ex+0xc>)
   b62e8:	681b      	ldr	r3, [r3, #0]
   b62ea:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   b62ec:	9301      	str	r3, [sp, #4]
   b62ee:	bd08      	pop	{r3, pc}
   b62f0:	00030228 	.word	0x00030228

000b62f4 <inet_inet_ntop>:
DYNALIB_FN(0, hal_inet, inet_inet_addr, in_addr_t(const char*))
DYNALIB_FN(1, hal_inet, inet_inet_aton, int(const char*, struct in_addr*))
DYNALIB_FN(2, hal_inet, inet_inet_network, in_addr_t(const char*))
DYNALIB_FN(3, hal_inet, inet_inet_ntoa, char*(struct in_addr))
DYNALIB_FN(4, hal_inet, inet_inet_ntoa_r, char*(struct in_addr, char*, socklen_t))
DYNALIB_FN(5, hal_inet, inet_inet_ntop, const char*(int, const void*, char*, socklen_t))
   b62f4:	b508      	push	{r3, lr}
   b62f6:	4b02      	ldr	r3, [pc, #8]	; (b6300 <inet_inet_ntop+0xc>)
   b62f8:	681b      	ldr	r3, [r3, #0]
   b62fa:	695b      	ldr	r3, [r3, #20]
   b62fc:	9301      	str	r3, [sp, #4]
   b62fe:	bd08      	pop	{r3, pc}
   b6300:	00030264 	.word	0x00030264

000b6304 <netdb_freeaddrinfo>:

DYNALIB_BEGIN(hal_netdb)

DYNALIB_FN(0, hal_netdb, netdb_gethostbyname, struct hostent*(const char*))
DYNALIB_FN(1, hal_netdb, netdb_gethostbyname_r, int(const char*, struct hostent*, char*, size_t, struct hostent**, int*))
DYNALIB_FN(2, hal_netdb, netdb_freeaddrinfo, void(struct addrinfo*))
   b6304:	b508      	push	{r3, lr}
   b6306:	4b02      	ldr	r3, [pc, #8]	; (b6310 <netdb_freeaddrinfo+0xc>)
   b6308:	681b      	ldr	r3, [r3, #0]
   b630a:	689b      	ldr	r3, [r3, #8]
   b630c:	9301      	str	r3, [sp, #4]
   b630e:	bd08      	pop	{r3, pc}
   b6310:	00030268 	.word	0x00030268

000b6314 <netdb_getaddrinfo>:
DYNALIB_FN(3, hal_netdb, netdb_getaddrinfo, int(const char*, const char*, const struct addrinfo*, struct addrinfo**))
   b6314:	b508      	push	{r3, lr}
   b6316:	4b02      	ldr	r3, [pc, #8]	; (b6320 <netdb_getaddrinfo+0xc>)
   b6318:	681b      	ldr	r3, [r3, #0]
   b631a:	68db      	ldr	r3, [r3, #12]
   b631c:	9301      	str	r3, [sp, #4]
   b631e:	bd08      	pop	{r3, pc}
   b6320:	00030268 	.word	0x00030268

000b6324 <hal_spi_begin>:
// New HAL functions must be added to the end of this list.
// GNINRAW

DYNALIB_BEGIN(hal_spi)

DYNALIB_FN(0, hal_spi, hal_spi_begin, void(hal_spi_interface_t, uint16_t))
   b6324:	b508      	push	{r3, lr}
   b6326:	4b02      	ldr	r3, [pc, #8]	; (b6330 <hal_spi_begin+0xc>)
   b6328:	681b      	ldr	r3, [r3, #0]
   b632a:	681b      	ldr	r3, [r3, #0]
   b632c:	9301      	str	r3, [sp, #4]
   b632e:	bd08      	pop	{r3, pc}
   b6330:	00030230 	.word	0x00030230

000b6334 <hal_spi_transfer>:
DYNALIB_FN(1, hal_spi, hal_spi_end, void(hal_spi_interface_t))
DYNALIB_FN(2, hal_spi, hal_spi_set_bit_order, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(3, hal_spi, hal_spi_set_data_mode, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(4, hal_spi, hal_spi_set_clock_divider, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(5, hal_spi, hal_spi_transfer, uint16_t(hal_spi_interface_t, uint16_t))
   b6334:	b508      	push	{r3, lr}
   b6336:	4b02      	ldr	r3, [pc, #8]	; (b6340 <hal_spi_transfer+0xc>)
   b6338:	681b      	ldr	r3, [r3, #0]
   b633a:	695b      	ldr	r3, [r3, #20]
   b633c:	9301      	str	r3, [sp, #4]
   b633e:	bd08      	pop	{r3, pc}
   b6340:	00030230 	.word	0x00030230

000b6344 <hal_spi_init>:
DYNALIB_FN(6, hal_spi, hal_spi_is_enabled_deprecated, bool(void))
DYNALIB_FN(7, hal_spi, hal_spi_init, void(hal_spi_interface_t))
   b6344:	b508      	push	{r3, lr}
   b6346:	4b02      	ldr	r3, [pc, #8]	; (b6350 <hal_spi_init+0xc>)
   b6348:	681b      	ldr	r3, [r3, #0]
   b634a:	69db      	ldr	r3, [r3, #28]
   b634c:	9301      	str	r3, [sp, #4]
   b634e:	bd08      	pop	{r3, pc}
   b6350:	00030230 	.word	0x00030230

000b6354 <hal_spi_is_enabled>:
DYNALIB_FN(8, hal_spi, hal_spi_is_enabled, bool(hal_spi_interface_t))
   b6354:	b508      	push	{r3, lr}
   b6356:	4b02      	ldr	r3, [pc, #8]	; (b6360 <hal_spi_is_enabled+0xc>)
   b6358:	681b      	ldr	r3, [r3, #0]
   b635a:	6a1b      	ldr	r3, [r3, #32]
   b635c:	9301      	str	r3, [sp, #4]
   b635e:	bd08      	pop	{r3, pc}
   b6360:	00030230 	.word	0x00030230

000b6364 <hal_spi_info>:
DYNALIB_FN(9, hal_spi, hal_spi_info, void(hal_spi_interface_t, hal_spi_info_t*, void*))
   b6364:	b508      	push	{r3, lr}
   b6366:	4b02      	ldr	r3, [pc, #8]	; (b6370 <hal_spi_info+0xc>)
   b6368:	681b      	ldr	r3, [r3, #0]
   b636a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   b636c:	9301      	str	r3, [sp, #4]
   b636e:	bd08      	pop	{r3, pc}
   b6370:	00030230 	.word	0x00030230

000b6374 <hal_spi_set_settings>:
DYNALIB_FN(10, hal_spi, hal_spi_transfer_dma, void(hal_spi_interface_t, const void*, void*, uint32_t, hal_spi_dma_user_callback))
DYNALIB_FN(11, hal_spi, hal_spi_begin_ext, void(hal_spi_interface_t, hal_spi_mode_t, uint16_t, void*))
DYNALIB_FN(12, hal_spi, hal_spi_set_callback_on_selected, void(hal_spi_interface_t, hal_spi_select_user_callback, void*))
DYNALIB_FN(13, hal_spi, hal_spi_transfer_dma_cancel, void(hal_spi_interface_t))
DYNALIB_FN(14, hal_spi, hal_spi_transfer_dma_status, int32_t(hal_spi_interface_t, hal_spi_transfer_status_t*))
DYNALIB_FN(15, hal_spi, hal_spi_set_settings, int32_t(hal_spi_interface_t, uint8_t, uint8_t, uint8_t, uint8_t, void*))
   b6374:	b508      	push	{r3, lr}
   b6376:	4b02      	ldr	r3, [pc, #8]	; (b6380 <hal_spi_set_settings+0xc>)
   b6378:	681b      	ldr	r3, [r3, #0]
   b637a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   b637c:	9301      	str	r3, [sp, #4]
   b637e:	bd08      	pop	{r3, pc}
   b6380:	00030230 	.word	0x00030230

000b6384 <hal_spi_acquire>:
#if HAL_PLATFORM_SPI_HAL_THREAD_SAFETY
DYNALIB_FN(16, hal_spi, hal_spi_acquire, int32_t(hal_spi_interface_t, const hal_spi_acquire_config_t*))
   b6384:	b508      	push	{r3, lr}
   b6386:	4b02      	ldr	r3, [pc, #8]	; (b6390 <hal_spi_acquire+0xc>)
   b6388:	681b      	ldr	r3, [r3, #0]
   b638a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b638c:	9301      	str	r3, [sp, #4]
   b638e:	bd08      	pop	{r3, pc}
   b6390:	00030230 	.word	0x00030230

000b6394 <hal_spi_release>:
DYNALIB_FN(17, hal_spi, hal_spi_release, int32_t(hal_spi_interface_t, void*))
   b6394:	b508      	push	{r3, lr}
   b6396:	4b02      	ldr	r3, [pc, #8]	; (b63a0 <hal_spi_release+0xc>)
   b6398:	681b      	ldr	r3, [r3, #0]
   b639a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   b639c:	9301      	str	r3, [sp, #4]
   b639e:	bd08      	pop	{r3, pc}
   b63a0:	00030230 	.word	0x00030230

000b63a4 <hal_usart_write>:
#endif

DYNALIB_FN(BASE_IDX + 0, hal_usart, hal_usart_init, void(hal_usart_interface_t, hal_usart_ring_buffer_t*, hal_usart_ring_buffer_t*))
DYNALIB_FN(BASE_IDX + 1, hal_usart, hal_usart_begin, void(hal_usart_interface_t, uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal_usart, hal_usart_end, void(hal_usart_interface_t))
DYNALIB_FN(BASE_IDX + 3, hal_usart, hal_usart_write, uint32_t(hal_usart_interface_t, uint8_t))
   b63a4:	b508      	push	{r3, lr}
   b63a6:	4b02      	ldr	r3, [pc, #8]	; (b63b0 <hal_usart_write+0xc>)
   b63a8:	681b      	ldr	r3, [r3, #0]
   b63aa:	68db      	ldr	r3, [r3, #12]
   b63ac:	9301      	str	r3, [sp, #4]
   b63ae:	bd08      	pop	{r3, pc}
   b63b0:	0003023c 	.word	0x0003023c

000b63b4 <hal_usart_available>:
DYNALIB_FN(BASE_IDX + 4, hal_usart, hal_usart_available, int32_t(hal_usart_interface_t))
   b63b4:	b508      	push	{r3, lr}
   b63b6:	4b02      	ldr	r3, [pc, #8]	; (b63c0 <hal_usart_available+0xc>)
   b63b8:	681b      	ldr	r3, [r3, #0]
   b63ba:	691b      	ldr	r3, [r3, #16]
   b63bc:	9301      	str	r3, [sp, #4]
   b63be:	bd08      	pop	{r3, pc}
   b63c0:	0003023c 	.word	0x0003023c

000b63c4 <hal_usart_read>:
DYNALIB_FN(BASE_IDX + 5, hal_usart, hal_usart_read, int32_t(hal_usart_interface_t))
   b63c4:	b508      	push	{r3, lr}
   b63c6:	4b02      	ldr	r3, [pc, #8]	; (b63d0 <hal_usart_read+0xc>)
   b63c8:	681b      	ldr	r3, [r3, #0]
   b63ca:	695b      	ldr	r3, [r3, #20]
   b63cc:	9301      	str	r3, [sp, #4]
   b63ce:	bd08      	pop	{r3, pc}
   b63d0:	0003023c 	.word	0x0003023c

000b63d4 <hal_usart_peek>:
DYNALIB_FN(BASE_IDX + 6, hal_usart, hal_usart_peek, int32_t(hal_usart_interface_t))
   b63d4:	b508      	push	{r3, lr}
   b63d6:	4b02      	ldr	r3, [pc, #8]	; (b63e0 <hal_usart_peek+0xc>)
   b63d8:	681b      	ldr	r3, [r3, #0]
   b63da:	699b      	ldr	r3, [r3, #24]
   b63dc:	9301      	str	r3, [sp, #4]
   b63de:	bd08      	pop	{r3, pc}
   b63e0:	0003023c 	.word	0x0003023c

000b63e4 <hal_usart_flush>:
DYNALIB_FN(BASE_IDX + 7, hal_usart, hal_usart_flush, void(hal_usart_interface_t))
   b63e4:	b508      	push	{r3, lr}
   b63e6:	4b02      	ldr	r3, [pc, #8]	; (b63f0 <hal_usart_flush+0xc>)
   b63e8:	681b      	ldr	r3, [r3, #0]
   b63ea:	69db      	ldr	r3, [r3, #28]
   b63ec:	9301      	str	r3, [sp, #4]
   b63ee:	bd08      	pop	{r3, pc}
   b63f0:	0003023c 	.word	0x0003023c

000b63f4 <hal_usart_is_enabled>:
DYNALIB_FN(BASE_IDX + 8, hal_usart, hal_usart_is_enabled, bool(hal_usart_interface_t))
   b63f4:	b508      	push	{r3, lr}
   b63f6:	4b02      	ldr	r3, [pc, #8]	; (b6400 <hal_usart_is_enabled+0xc>)
   b63f8:	681b      	ldr	r3, [r3, #0]
   b63fa:	6a1b      	ldr	r3, [r3, #32]
   b63fc:	9301      	str	r3, [sp, #4]
   b63fe:	bd08      	pop	{r3, pc}
   b6400:	0003023c 	.word	0x0003023c

000b6404 <hal_usart_available_data_for_write>:
DYNALIB_FN(BASE_IDX + 9, hal_usart, hal_usart_half_duplex, void(hal_usart_interface_t, bool))
DYNALIB_FN(BASE_IDX + 10, hal_usart, hal_usart_available_data_for_write, int32_t(hal_usart_interface_t))
   b6404:	b508      	push	{r3, lr}
   b6406:	4b02      	ldr	r3, [pc, #8]	; (b6410 <hal_usart_available_data_for_write+0xc>)
   b6408:	681b      	ldr	r3, [r3, #0]
   b640a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   b640c:	9301      	str	r3, [sp, #4]
   b640e:	bd08      	pop	{r3, pc}
   b6410:	0003023c 	.word	0x0003023c

000b6414 <hal_usart_init_ex>:
DYNALIB_FN(BASE_IDX2 + 0, hal_usart, hal_usart_begin_config, void(hal_usart_interface_t serial, uint32_t baud, uint32_t config, void *ptr))
DYNALIB_FN(BASE_IDX2 + 1, hal_usart, hal_usart_write_nine_bits, uint32_t(hal_usart_interface_t serial, uint16_t data))
DYNALIB_FN(BASE_IDX2 + 2, hal_usart, hal_usart_send_break, void(hal_usart_interface_t, void*))
DYNALIB_FN(BASE_IDX2 + 3, hal_usart, hal_usart_break_detected, uint8_t(hal_usart_interface_t))
DYNALIB_FN(BASE_IDX2 + 4, hal_usart, hal_usart_sleep, int(hal_usart_interface_t serial, bool, void*))
DYNALIB_FN(BASE_IDX2 + 5, hal_usart, hal_usart_init_ex, int(hal_usart_interface_t, const hal_usart_buffer_config_t*, void*))
   b6414:	b508      	push	{r3, lr}
   b6416:	4b02      	ldr	r3, [pc, #8]	; (b6420 <hal_usart_init_ex+0xc>)
   b6418:	681b      	ldr	r3, [r3, #0]
   b641a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b641c:	9301      	str	r3, [sp, #4]
   b641e:	bd08      	pop	{r3, pc}
   b6420:	0003023c 	.word	0x0003023c

000b6424 <HAL_USB_USART_Init>:
// GNINRAW

DYNALIB_BEGIN(hal_usb)

#ifdef USB_CDC_ENABLE
DYNALIB_FN(0, hal_usb, HAL_USB_USART_Init, void(HAL_USB_USART_Serial, const HAL_USB_USART_Config*))
   b6424:	b508      	push	{r3, lr}
   b6426:	4b02      	ldr	r3, [pc, #8]	; (b6430 <HAL_USB_USART_Init+0xc>)
   b6428:	681b      	ldr	r3, [r3, #0]
   b642a:	681b      	ldr	r3, [r3, #0]
   b642c:	9301      	str	r3, [sp, #4]
   b642e:	bd08      	pop	{r3, pc}
   b6430:	0003024c 	.word	0x0003024c

000b6434 <HAL_USB_USART_Begin>:
DYNALIB_FN(1, hal_usb, HAL_USB_USART_Begin, void(HAL_USB_USART_Serial, uint32_t, void *))
   b6434:	b508      	push	{r3, lr}
   b6436:	4b02      	ldr	r3, [pc, #8]	; (b6440 <HAL_USB_USART_Begin+0xc>)
   b6438:	681b      	ldr	r3, [r3, #0]
   b643a:	685b      	ldr	r3, [r3, #4]
   b643c:	9301      	str	r3, [sp, #4]
   b643e:	bd08      	pop	{r3, pc}
   b6440:	0003024c 	.word	0x0003024c

000b6444 <HAL_USB_USART_Available_Data>:
DYNALIB_FN(2, hal_usb, HAL_USB_USART_End, void(HAL_USB_USART_Serial))
DYNALIB_FN(3, hal_usb, HAL_USB_USART_Baud_Rate, unsigned int(HAL_USB_USART_Serial))
DYNALIB_FN(4, hal_usb, HAL_USB_USART_Available_Data, int32_t(HAL_USB_USART_Serial))
   b6444:	b508      	push	{r3, lr}
   b6446:	4b02      	ldr	r3, [pc, #8]	; (b6450 <HAL_USB_USART_Available_Data+0xc>)
   b6448:	681b      	ldr	r3, [r3, #0]
   b644a:	691b      	ldr	r3, [r3, #16]
   b644c:	9301      	str	r3, [sp, #4]
   b644e:	bd08      	pop	{r3, pc}
   b6450:	0003024c 	.word	0x0003024c

000b6454 <HAL_USB_USART_Available_Data_For_Write>:
DYNALIB_FN(5, hal_usb, HAL_USB_USART_Available_Data_For_Write, int32_t(HAL_USB_USART_Serial))
   b6454:	b508      	push	{r3, lr}
   b6456:	4b02      	ldr	r3, [pc, #8]	; (b6460 <HAL_USB_USART_Available_Data_For_Write+0xc>)
   b6458:	681b      	ldr	r3, [r3, #0]
   b645a:	695b      	ldr	r3, [r3, #20]
   b645c:	9301      	str	r3, [sp, #4]
   b645e:	bd08      	pop	{r3, pc}
   b6460:	0003024c 	.word	0x0003024c

000b6464 <HAL_USB_USART_Receive_Data>:
DYNALIB_FN(6, hal_usb, HAL_USB_USART_Receive_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   b6464:	b508      	push	{r3, lr}
   b6466:	4b02      	ldr	r3, [pc, #8]	; (b6470 <HAL_USB_USART_Receive_Data+0xc>)
   b6468:	681b      	ldr	r3, [r3, #0]
   b646a:	699b      	ldr	r3, [r3, #24]
   b646c:	9301      	str	r3, [sp, #4]
   b646e:	bd08      	pop	{r3, pc}
   b6470:	0003024c 	.word	0x0003024c

000b6474 <HAL_USB_USART_Send_Data>:
DYNALIB_FN(7, hal_usb, HAL_USB_USART_Send_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   b6474:	b508      	push	{r3, lr}
   b6476:	4b02      	ldr	r3, [pc, #8]	; (b6480 <HAL_USB_USART_Send_Data+0xc>)
   b6478:	681b      	ldr	r3, [r3, #0]
   b647a:	69db      	ldr	r3, [r3, #28]
   b647c:	9301      	str	r3, [sp, #4]
   b647e:	bd08      	pop	{r3, pc}
   b6480:	0003024c 	.word	0x0003024c

000b6484 <HAL_USB_USART_Flush_Data>:
DYNALIB_FN(8, hal_usb, HAL_USB_USART_Flush_Data, void(HAL_USB_USART_Serial))
   b6484:	b508      	push	{r3, lr}
   b6486:	4b02      	ldr	r3, [pc, #8]	; (b6490 <HAL_USB_USART_Flush_Data+0xc>)
   b6488:	681b      	ldr	r3, [r3, #0]
   b648a:	6a1b      	ldr	r3, [r3, #32]
   b648c:	9301      	str	r3, [sp, #4]
   b648e:	bd08      	pop	{r3, pc}
   b6490:	0003024c 	.word	0x0003024c

000b6494 <panic_>:
DYNALIB_FN(9, services, LED_Toggle, void(Led_TypeDef))
DYNALIB_FN(10, services, LED_Fade, void(Led_TypeDef))
DYNALIB_FN(11, services, Get_LED_Brightness, uint8_t(void))

DYNALIB_FN(12, services, set_logger_output, void(debug_output_fn, LoggerOutputLevel)) // Deprecated
DYNALIB_FN(13, services, panic_, void(ePanicCode, void*, void(*)(uint32_t)))
   b6494:	b508      	push	{r3, lr}
   b6496:	4b02      	ldr	r3, [pc, #8]	; (b64a0 <panic_+0xc>)
   b6498:	681b      	ldr	r3, [r3, #0]
   b649a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   b649c:	9301      	str	r3, [sp, #4]
   b649e:	bd08      	pop	{r3, pc}
   b64a0:	00030260 	.word	0x00030260

000b64a4 <set_system_mode>:
#endif

DYNALIB_BEGIN(system)

DYNALIB_FN(0, system, system_mode, System_Mode_TypeDef(void))
DYNALIB_FN(1, system, set_system_mode, void(System_Mode_TypeDef))
   b64a4:	b508      	push	{r3, lr}
   b64a6:	4b02      	ldr	r3, [pc, #8]	; (b64b0 <set_system_mode+0xc>)
   b64a8:	681b      	ldr	r3, [r3, #0]
   b64aa:	685b      	ldr	r3, [r3, #4]
   b64ac:	9301      	str	r3, [sp, #4]
   b64ae:	bd08      	pop	{r3, pc}
   b64b0:	00030220 	.word	0x00030220

000b64b4 <system_delay_ms>:

DYNALIB_FN(2, system, set_ymodem_serial_flash_update_handler, void(ymodem_serial_flash_update_handler))
DYNALIB_FN(3, system, system_firmwareUpdate, bool(Stream*, void*))
DYNALIB_FN(4, system, system_fileTransfer, bool(system_file_transfer_t*, void*))

DYNALIB_FN(5, system, system_delay_ms, void(unsigned long, bool))
   b64b4:	b508      	push	{r3, lr}
   b64b6:	4b02      	ldr	r3, [pc, #8]	; (b64c0 <system_delay_ms+0xc>)
   b64b8:	681b      	ldr	r3, [r3, #0]
   b64ba:	695b      	ldr	r3, [r3, #20]
   b64bc:	9301      	str	r3, [sp, #4]
   b64be:	bd08      	pop	{r3, pc}
   b64c0:	00030220 	.word	0x00030220

000b64c4 <application_thread_current>:
DYNALIB_FN(15, system, system_get_flag, int(system_flag_t, uint8_t*, void*))
DYNALIB_FN(16, system, Spark_Prepare_For_Firmware_Update, int(FileTransfer::Descriptor&, uint32_t, void*))
DYNALIB_FN(17, system, Spark_Save_Firmware_Chunk, int(FileTransfer::Descriptor&, const uint8_t*, void*))
DYNALIB_FN(18, system, Spark_Finish_Firmware_Update, int(FileTransfer::Descriptor&, uint32_t, void*))

DYNALIB_FN(19, system, application_thread_current, uint8_t(void*))
   b64c4:	b508      	push	{r3, lr}
   b64c6:	4b02      	ldr	r3, [pc, #8]	; (b64d0 <application_thread_current+0xc>)
   b64c8:	681b      	ldr	r3, [r3, #0]
   b64ca:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   b64cc:	9301      	str	r3, [sp, #4]
   b64ce:	bd08      	pop	{r3, pc}
   b64d0:	00030220 	.word	0x00030220

000b64d4 <application_thread_invoke>:
DYNALIB_FN(20, system, system_thread_current, uint8_t(void*))
DYNALIB_FN(21, system, application_thread_invoke, uint8_t(void(*)(void*), void*, void*))
   b64d4:	b508      	push	{r3, lr}
   b64d6:	4b02      	ldr	r3, [pc, #8]	; (b64e0 <application_thread_invoke+0xc>)
   b64d8:	681b      	ldr	r3, [r3, #0]
   b64da:	6d5b      	ldr	r3, [r3, #84]	; 0x54
   b64dc:	9301      	str	r3, [sp, #4]
   b64de:	bd08      	pop	{r3, pc}
   b64e0:	00030220 	.word	0x00030220

000b64e4 <system_ctrl_set_app_request_handler>:
DYNALIB_FN(BASE_IDX + 6, system, led_pattern_period, uint16_t(int, int, void*))
DYNALIB_FN(BASE_IDX + 7, system, system_set_tester_handlers, int(system_tester_handlers_t*, void*))
DYNALIB_FN(BASE_IDX + 8, system, system_format_diag_data, int(const uint16_t*, size_t, unsigned, appender_fn, void*, void*))

// Control requests
DYNALIB_FN(BASE_IDX + 9, system, system_ctrl_set_app_request_handler, int(ctrl_request_handler_fn, void*))
   b64e4:	b508      	push	{r3, lr}
   b64e6:	4b03      	ldr	r3, [pc, #12]	; (b64f4 <system_ctrl_set_app_request_handler+0x10>)
   b64e8:	681b      	ldr	r3, [r3, #0]
   b64ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
   b64ee:	9301      	str	r3, [sp, #4]
   b64f0:	bd08      	pop	{r3, pc}
   b64f2:	0000      	.short	0x0000
   b64f4:	00030220 	.word	0x00030220

000b64f8 <system_ctrl_set_result>:
DYNALIB_FN(BASE_IDX + 10, system, system_ctrl_alloc_reply_data, int(ctrl_request*, size_t, void*))
DYNALIB_FN(BASE_IDX + 11, system, system_ctrl_free_request_data, void(ctrl_request*, void*))
DYNALIB_FN(BASE_IDX + 12, system, system_ctrl_set_result, void(ctrl_request*, int, ctrl_completion_handler_fn, void*, void*))
   b64f8:	b508      	push	{r3, lr}
   b64fa:	4b03      	ldr	r3, [pc, #12]	; (b6508 <system_ctrl_set_result+0x10>)
   b64fc:	681b      	ldr	r3, [r3, #0]
   b64fe:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
   b6502:	9301      	str	r3, [sp, #4]
   b6504:	bd08      	pop	{r3, pc}
   b6506:	0000      	.short	0x0000
   b6508:	00030220 	.word	0x00030220

000b650c <spark_cloud_flag_connected>:
DYNALIB_FN(0, system_cloud, spark_variable, bool(const char*, const void*, Spark_Data_TypeDef, spark_variable_t*))
DYNALIB_FN(1, system_cloud, spark_function, bool(const char*, p_user_function_int_str_t, void*))
DYNALIB_FN(2, system_cloud, spark_process, void(void))
DYNALIB_FN(3, system_cloud, spark_cloud_flag_connect, void(void))
DYNALIB_FN(4, system_cloud, spark_cloud_flag_disconnect, void(void))
DYNALIB_FN(5, system_cloud, spark_cloud_flag_connected, bool(void))
   b650c:	b508      	push	{r3, lr}
   b650e:	4b02      	ldr	r3, [pc, #8]	; (b6518 <spark_cloud_flag_connected+0xc>)
   b6510:	681b      	ldr	r3, [r3, #0]
   b6512:	695b      	ldr	r3, [r3, #20]
   b6514:	9301      	str	r3, [sp, #4]
   b6516:	bd08      	pop	{r3, pc}
   b6518:	00030244 	.word	0x00030244

000b651c <spark_send_event>:
DYNALIB_FN(6, system_cloud, system_cloud_protocol_instance, ProtocolFacade*(void))
DYNALIB_FN(7, system_cloud, spark_deviceID, String(void))
DYNALIB_FN(8, system_cloud, spark_send_event, bool(const char*, const char*, int, uint32_t, void*))
   b651c:	b508      	push	{r3, lr}
   b651e:	4b02      	ldr	r3, [pc, #8]	; (b6528 <spark_send_event+0xc>)
   b6520:	681b      	ldr	r3, [r3, #0]
   b6522:	6a1b      	ldr	r3, [r3, #32]
   b6524:	9301      	str	r3, [sp, #4]
   b6526:	bd08      	pop	{r3, pc}
   b6528:	00030244 	.word	0x00030244

000b652c <spark_set_random_seed_from_cloud_handler>:
DYNALIB_FN(10, system_cloud, spark_unsubscribe, void(void*))
DYNALIB_FN(11, system_cloud, spark_sync_time, bool(void*))
DYNALIB_FN(12, system_cloud, spark_sync_time_pending, bool(void*))
DYNALIB_FN(13, system_cloud, spark_sync_time_last, system_tick_t(time32_t*, time_t*))
DYNALIB_FN(14, system_cloud, spark_set_connection_property, int(unsigned, unsigned, const void*, void*))
DYNALIB_FN(15, system_cloud, spark_set_random_seed_from_cloud_handler, int(void (*handler)(unsigned int), void*))
   b652c:	b508      	push	{r3, lr}
   b652e:	4b02      	ldr	r3, [pc, #8]	; (b6538 <spark_set_random_seed_from_cloud_handler+0xc>)
   b6530:	681b      	ldr	r3, [r3, #0]
   b6532:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   b6534:	9301      	str	r3, [sp, #4]
   b6536:	bd08      	pop	{r3, pc}
   b6538:	00030244 	.word	0x00030244

000b653c <network_connect>:
#endif

DYNALIB_BEGIN(system_net)

DYNALIB_FN(0, system_net, network_config, const void*(network_handle_t, uint32_t, void*))
DYNALIB_FN(1, system_net, network_connect, void(network_handle_t, uint32_t, uint32_t, void*))
   b653c:	b508      	push	{r3, lr}
   b653e:	4b02      	ldr	r3, [pc, #8]	; (b6548 <network_connect+0xc>)
   b6540:	681b      	ldr	r3, [r3, #0]
   b6542:	685b      	ldr	r3, [r3, #4]
   b6544:	9301      	str	r3, [sp, #4]
   b6546:	bd08      	pop	{r3, pc}
   b6548:	00030240 	.word	0x00030240

000b654c <network_connecting>:
DYNALIB_FN(2, system_net, network_connecting, bool(network_handle_t, uint32_t, void*))
   b654c:	b508      	push	{r3, lr}
   b654e:	4b02      	ldr	r3, [pc, #8]	; (b6558 <network_connecting+0xc>)
   b6550:	681b      	ldr	r3, [r3, #0]
   b6552:	689b      	ldr	r3, [r3, #8]
   b6554:	9301      	str	r3, [sp, #4]
   b6556:	bd08      	pop	{r3, pc}
   b6558:	00030240 	.word	0x00030240

000b655c <network_disconnect>:
DYNALIB_FN(3, system_net, network_disconnect, void(network_handle_t, uint32_t, void*))
   b655c:	b508      	push	{r3, lr}
   b655e:	4b02      	ldr	r3, [pc, #8]	; (b6568 <network_disconnect+0xc>)
   b6560:	681b      	ldr	r3, [r3, #0]
   b6562:	68db      	ldr	r3, [r3, #12]
   b6564:	9301      	str	r3, [sp, #4]
   b6566:	bd08      	pop	{r3, pc}
   b6568:	00030240 	.word	0x00030240

000b656c <network_ready>:
DYNALIB_FN(4, system_net, network_ready, bool(network_handle_t, uint32_t, void*))
   b656c:	b508      	push	{r3, lr}
   b656e:	4b02      	ldr	r3, [pc, #8]	; (b6578 <network_ready+0xc>)
   b6570:	681b      	ldr	r3, [r3, #0]
   b6572:	691b      	ldr	r3, [r3, #16]
   b6574:	9301      	str	r3, [sp, #4]
   b6576:	bd08      	pop	{r3, pc}
   b6578:	00030240 	.word	0x00030240

000b657c <network_on>:
DYNALIB_FN(5, system_net, network_on, void(network_handle_t, uint32_t, uint32_t, void*))
   b657c:	b508      	push	{r3, lr}
   b657e:	4b02      	ldr	r3, [pc, #8]	; (b6588 <network_on+0xc>)
   b6580:	681b      	ldr	r3, [r3, #0]
   b6582:	695b      	ldr	r3, [r3, #20]
   b6584:	9301      	str	r3, [sp, #4]
   b6586:	bd08      	pop	{r3, pc}
   b6588:	00030240 	.word	0x00030240

000b658c <network_off>:
DYNALIB_FN(6, system_net, network_off, void(network_handle_t, uint32_t, uint32_t, void*))
   b658c:	b508      	push	{r3, lr}
   b658e:	4b02      	ldr	r3, [pc, #8]	; (b6598 <network_off+0xc>)
   b6590:	681b      	ldr	r3, [r3, #0]
   b6592:	699b      	ldr	r3, [r3, #24]
   b6594:	9301      	str	r3, [sp, #4]
   b6596:	bd08      	pop	{r3, pc}
   b6598:	00030240 	.word	0x00030240

000b659c <network_listen>:
DYNALIB_FN(7, system_net, network_listen, void(network_handle_t, uint32_t, void*))
   b659c:	b508      	push	{r3, lr}
   b659e:	4b02      	ldr	r3, [pc, #8]	; (b65a8 <network_listen+0xc>)
   b65a0:	681b      	ldr	r3, [r3, #0]
   b65a2:	69db      	ldr	r3, [r3, #28]
   b65a4:	9301      	str	r3, [sp, #4]
   b65a6:	bd08      	pop	{r3, pc}
   b65a8:	00030240 	.word	0x00030240

000b65ac <network_listening>:
DYNALIB_FN(8, system_net, network_listening, bool(network_handle_t, uint32_t, void*))
   b65ac:	b508      	push	{r3, lr}
   b65ae:	4b02      	ldr	r3, [pc, #8]	; (b65b8 <network_listening+0xc>)
   b65b0:	681b      	ldr	r3, [r3, #0]
   b65b2:	6a1b      	ldr	r3, [r3, #32]
   b65b4:	9301      	str	r3, [sp, #4]
   b65b6:	bd08      	pop	{r3, pc}
   b65b8:	00030240 	.word	0x00030240

000b65bc <network_set_listen_timeout>:
DYNALIB_FN(9, system_net, network_has_credentials, bool(network_handle_t, uint32_t, void*))
DYNALIB_FN(10, system_net, network_set_credentials, int(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(11, system_net, network_clear_credentials, bool(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(12, system_net, network_set_listen_timeout, void(network_handle_t, uint16_t, void*))
   b65bc:	b508      	push	{r3, lr}
   b65be:	4b02      	ldr	r3, [pc, #8]	; (b65c8 <network_set_listen_timeout+0xc>)
   b65c0:	681b      	ldr	r3, [r3, #0]
   b65c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   b65c4:	9301      	str	r3, [sp, #4]
   b65c6:	bd08      	pop	{r3, pc}
   b65c8:	00030240 	.word	0x00030240

000b65cc <network_get_listen_timeout>:
DYNALIB_FN(13, system_net, network_get_listen_timeout, uint16_t(network_handle_t, uint32_t, void*))
   b65cc:	b508      	push	{r3, lr}
   b65ce:	4b02      	ldr	r3, [pc, #8]	; (b65d8 <network_get_listen_timeout+0xc>)
   b65d0:	681b      	ldr	r3, [r3, #0]
   b65d2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   b65d4:	9301      	str	r3, [sp, #4]
   b65d6:	bd08      	pop	{r3, pc}
   b65d8:	00030240 	.word	0x00030240

000b65dc <network_is_on>:
DYNALIB_FN(14, system_net, network_set_hostname, int(network_handle_t, uint32_t, const char*, void*))
DYNALIB_FN(15, system_net, network_get_hostname, int(network_handle_t, uint32_t, char*, size_t, void*))
DYNALIB_FN(16, system_net, network_is_on, bool(network_handle_t, void*))
   b65dc:	b508      	push	{r3, lr}
   b65de:	4b02      	ldr	r3, [pc, #8]	; (b65e8 <network_is_on+0xc>)
   b65e0:	681b      	ldr	r3, [r3, #0]
   b65e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b65e4:	9301      	str	r3, [sp, #4]
   b65e6:	bd08      	pop	{r3, pc}
   b65e8:	00030240 	.word	0x00030240

000b65ec <network_is_off>:
DYNALIB_FN(17, system_net, network_is_off, bool(network_handle_t, void*))
   b65ec:	b508      	push	{r3, lr}
   b65ee:	4b02      	ldr	r3, [pc, #8]	; (b65f8 <network_is_off+0xc>)
   b65f0:	681b      	ldr	r3, [r3, #0]
   b65f2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   b65f4:	9301      	str	r3, [sp, #4]
   b65f6:	bd08      	pop	{r3, pc}
   b65f8:	00030240 	.word	0x00030240

000b65fc <malloc>:
#include "hal_platform.h"
#endif // defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))

DYNALIB_BEGIN(rt)

DYNALIB_FN(0, rt, malloc, void*(size_t))
   b65fc:	b508      	push	{r3, lr}
   b65fe:	4b02      	ldr	r3, [pc, #8]	; (b6608 <malloc+0xc>)
   b6600:	681b      	ldr	r3, [r3, #0]
   b6602:	681b      	ldr	r3, [r3, #0]
   b6604:	9301      	str	r3, [sp, #4]
   b6606:	bd08      	pop	{r3, pc}
   b6608:	0003021c 	.word	0x0003021c

000b660c <free>:
DYNALIB_FN(1, rt, free, void(void*))
   b660c:	b508      	push	{r3, lr}
   b660e:	4b02      	ldr	r3, [pc, #8]	; (b6618 <free+0xc>)
   b6610:	681b      	ldr	r3, [r3, #0]
   b6612:	685b      	ldr	r3, [r3, #4]
   b6614:	9301      	str	r3, [sp, #4]
   b6616:	bd08      	pop	{r3, pc}
   b6618:	0003021c 	.word	0x0003021c

000b661c <realloc>:
DYNALIB_FN(2, rt, realloc, void*(void*, size_t))
   b661c:	b508      	push	{r3, lr}
   b661e:	4b02      	ldr	r3, [pc, #8]	; (b6628 <realloc+0xc>)
   b6620:	681b      	ldr	r3, [r3, #0]
   b6622:	689b      	ldr	r3, [r3, #8]
   b6624:	9301      	str	r3, [sp, #4]
   b6626:	bd08      	pop	{r3, pc}
   b6628:	0003021c 	.word	0x0003021c

000b662c <abort>:
DYNALIB_FN(6, rt, siscanf, int(const char*, const char*, ...))
DYNALIB_FN(7, rt, snprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(8, rt, sniprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(9, rt, vsnprintf, int(char*, size_t, const char*, va_list))
DYNALIB_FN(10, rt, vsniprintf, int(char*, size_t, const char*, va_list))
DYNALIB_FN(11, rt, abort, void(void))
   b662c:	b508      	push	{r3, lr}
   b662e:	4b02      	ldr	r3, [pc, #8]	; (b6638 <abort+0xc>)
   b6630:	681b      	ldr	r3, [r3, #0]
   b6632:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b6634:	9301      	str	r3, [sp, #4]
   b6636:	bd08      	pop	{r3, pc}
   b6638:	0003021c 	.word	0x0003021c

000b663c <_malloc_r>:
DYNALIB_FN(12, rt, _malloc_r, void*(struct _reent*, size_t))
   b663c:	b508      	push	{r3, lr}
   b663e:	4b02      	ldr	r3, [pc, #8]	; (b6648 <_malloc_r+0xc>)
   b6640:	681b      	ldr	r3, [r3, #0]
   b6642:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   b6644:	9301      	str	r3, [sp, #4]
   b6646:	bd08      	pop	{r3, pc}
   b6648:	0003021c 	.word	0x0003021c

000b664c <__assert_func>:
DYNALIB_FN(13, rt, _free_r, void(struct _reent*, void*))
DYNALIB_FN(14, rt, _realloc_r, void*(struct _reent*, void*, size_t))
DYNALIB_FN(15, rt, __errno, int*())

#if defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))
DYNALIB_FN(16, rt, __assert_func, void(const char*, int, const char*, const char*))
   b664c:	b508      	push	{r3, lr}
   b664e:	4b02      	ldr	r3, [pc, #8]	; (b6658 <__assert_func+0xc>)
   b6650:	681b      	ldr	r3, [r3, #0]
   b6652:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b6654:	9301      	str	r3, [sp, #4]
   b6656:	bd08      	pop	{r3, pc}
   b6658:	0003021c 	.word	0x0003021c

000b665c <newlib_impure_ptr_callback>:
DYNALIB_FN(17, rt, newlib_impure_ptr_callback, void(void (*)(struct _reent*, size_t, uint32_t, void*), void*))
   b665c:	b508      	push	{r3, lr}
   b665e:	4b02      	ldr	r3, [pc, #8]	; (b6668 <newlib_impure_ptr_callback+0xc>)
   b6660:	681b      	ldr	r3, [r3, #0]
   b6662:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   b6664:	9301      	str	r3, [sp, #4]
   b6666:	bd08      	pop	{r3, pc}
   b6668:	0003021c 	.word	0x0003021c

000b666c <delay>:
    return (value - fromStart) * (toEnd - toStart) / (fromEnd - fromStart) + toStart;
}

void delay(unsigned long ms)
{
    system_delay_ms(ms, false);
   b666c:	2100      	movs	r1, #0
   b666e:	f7ff bf21 	b.w	b64b4 <system_delay_ms>

000b6672 <_ZN8particle6detail21futureCallbackWrapperEPv>:
 * License along with this library; if not, see <http://www.gnu.org/licenses/>.
 */

#include "spark_wiring_async.h"

void particle::detail::futureCallbackWrapper(void* data) {
   b6672:	b510      	push	{r4, lr}
  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
   b6674:	6883      	ldr	r3, [r0, #8]
   b6676:	4604      	mov	r4, r0
   b6678:	b90b      	cbnz	r3, b667e <_ZN8particle6detail21futureCallbackWrapperEPv+0xc>
	__throw_bad_function_call();
   b667a:	f001 fa15 	bl	b7aa8 <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   b667e:	68c3      	ldr	r3, [r0, #12]
   b6680:	4798      	blx	r3
      if (_M_manager)
   b6682:	68a3      	ldr	r3, [r4, #8]
   b6684:	b11b      	cbz	r3, b668e <_ZN8particle6detail21futureCallbackWrapperEPv+0x1c>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   b6686:	2203      	movs	r2, #3
   b6688:	4621      	mov	r1, r4
   b668a:	4620      	mov	r0, r4
   b668c:	4798      	blx	r3
    auto callbackPtr = static_cast<const std::function<void()>*>(data);
    (*callbackPtr)();
    delete callbackPtr;
   b668e:	4620      	mov	r0, r4
   b6690:	2110      	movs	r1, #16
}
   b6692:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    delete callbackPtr;
   b6696:	f7fd bd02 	b.w	b409e <_ZdlPvj>

000b669a <_ZNSt14_Function_baseD1Ev>:
    ~_Function_base()
   b669a:	b510      	push	{r4, lr}
      if (_M_manager)
   b669c:	6883      	ldr	r3, [r0, #8]
    ~_Function_base()
   b669e:	4604      	mov	r4, r0
      if (_M_manager)
   b66a0:	b113      	cbz	r3, b66a8 <_ZNSt14_Function_baseD1Ev+0xe>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   b66a2:	2203      	movs	r2, #3
   b66a4:	4601      	mov	r1, r0
   b66a6:	4798      	blx	r3
    }
   b66a8:	4620      	mov	r0, r4
   b66aa:	bd10      	pop	{r4, pc}

000b66ac <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>:
			      is_move_constructible<_Tp>,
			      is_move_assignable<_Tp>>::value>::type
#else
    void
#endif
    swap(_Tp& __a, _Tp& __b)
   b66ac:	b513      	push	{r0, r1, r4, lr}
   b66ae:	460b      	mov	r3, r1
   b66b0:	4602      	mov	r2, r0
    {
#if __cplusplus < 201103L
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)
#endif
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b66b2:	e9d0 0100 	ldrd	r0, r1, [r0]
   b66b6:	466c      	mov	r4, sp
   b66b8:	e884 0003 	stmia.w	r4, {r0, r1}
      __a = _GLIBCXX_MOVE(__b);
   b66bc:	e893 0003 	ldmia.w	r3, {r0, r1}
   b66c0:	e882 0003 	stmia.w	r2, {r0, r1}
      __b = _GLIBCXX_MOVE(__tmp);
   b66c4:	e894 0003 	ldmia.w	r4, {r0, r1}
   b66c8:	e883 0003 	stmia.w	r3, {r0, r1}
    }
   b66cc:	b002      	add	sp, #8
   b66ce:	bd10      	pop	{r4, pc}

000b66d0 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E>:
    /**
     * Creates a shared mutex.
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
   b66d0:	4802      	ldr	r0, [pc, #8]	; (b66dc <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0xc>)
   b66d2:	2300      	movs	r3, #0
   b66d4:	6003      	str	r3, [r0, #0]
    {
        os_mutex_recursive_create(&handle_);
   b66d6:	f7ff bd7d 	b.w	b61d4 <os_mutex_recursive_create>
   b66da:	bf00      	nop
   b66dc:	2003e6c4 	.word	0x2003e6c4

000b66e0 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED1Ev>:
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
   b66e0:	4770      	bx	lr

000b66e2 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info>:
      { return nullptr; }
   b66e2:	2000      	movs	r0, #0
   b66e4:	4770      	bx	lr

000b66e6 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED0Ev>:
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
   b66e6:	b510      	push	{r4, lr}
   b66e8:	2110      	movs	r1, #16
   b66ea:	4604      	mov	r4, r0
   b66ec:	f7fd fcd7 	bl	b409e <_ZdlPvj>
   b66f0:	4620      	mov	r0, r4
   b66f2:	bd10      	pop	{r4, pc}

000b66f4 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv>:
      _M_destroy() noexcept
   b66f4:	b508      	push	{r3, lr}
      { delete this; }
   b66f6:	f7ff fff6 	bl	b66e6 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED0Ev>
   b66fa:	bd08      	pop	{r3, pc}

000b66fc <_ZN8particle5ErrorC1EOS0_>:

inline particle::Error::Error(const Error& error) :
        Error(error.type_, error.msg_) {
}

inline particle::Error::Error(Error&& error) :
   b66fc:	b530      	push	{r4, r5, lr}
        type_(type) {
   b66fe:	2200      	movs	r2, #0
   b6700:	f64f 749c 	movw	r4, #65436	; 0xff9c
   b6704:	6002      	str	r2, [r0, #0]
   b6706:	8084      	strh	r4, [r0, #4]
      __a = _GLIBCXX_MOVE(__b);
   b6708:	888d      	ldrh	r5, [r1, #4]
      __b = _GLIBCXX_MOVE(__tmp);
   b670a:	808c      	strh	r4, [r1, #4]
      __a = _GLIBCXX_MOVE(__b);
   b670c:	680c      	ldr	r4, [r1, #0]
   b670e:	8085      	strh	r5, [r0, #4]
   b6710:	6004      	str	r4, [r0, #0]
      __b = _GLIBCXX_MOVE(__tmp);
   b6712:	600a      	str	r2, [r1, #0]
        Error() {
    swap(*this, error);
}
   b6714:	bd30      	pop	{r4, r5, pc}

000b6716 <_ZN8particle5ErrorD1Ev>:

inline particle::Error::~Error() {
   b6716:	b510      	push	{r4, lr}
   b6718:	4604      	mov	r4, r0
    free((void*)msg_);
   b671a:	6800      	ldr	r0, [r0, #0]
   b671c:	f7ff ff76 	bl	b660c <free>
}
   b6720:	4620      	mov	r0, r4
   b6722:	bd10      	pop	{r4, pc}

000b6724 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv>:
      _M_dispose() noexcept
   b6724:	b538      	push	{r3, r4, r5, lr}
      { delete _M_ptr; }
   b6726:	68c4      	ldr	r4, [r0, #12]
   b6728:	b1f4      	cbz	r4, b6768 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x44>
      _Tp
      load(memory_order __m = memory_order_seq_cst) const noexcept
      {
	alignas(_Tp) unsigned char __buf[sizeof(_Tp)];
	_Tp* __ptr = reinterpret_cast<_Tp*>(__buf);
	__atomic_load(std::__addressof(_M_i), __ptr, int(__m));
   b672a:	7823      	ldrb	r3, [r4, #0]
    ~FutureImpl() {
        // Call destructor of the appropriate unnamed enum's field
        const State s = this->state();
        if (s == State::SUCCEEDED) {
            result_.~ResultT();
        } else if (s == State::FAILED) {
   b672c:	2b02      	cmp	r3, #2
   b672e:	d103      	bne.n	b6738 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x14>
            error_.~Error();
   b6730:	f104 000c 	add.w	r0, r4, #12
   b6734:	f7ff ffef 	bl	b6716 <_ZN8particle5ErrorD1Ev>
      {
	memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_release);
	__glibcxx_assert(__b != memory_order_acq_rel);

	return __atomic_load_n(&_M_p, int(__m));
   b6738:	6865      	ldr	r5, [r4, #4]
        delete onSuccess_.load(std::memory_order_relaxed);
   b673a:	b135      	cbz	r5, b674a <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x26>
    class function<_Res(_ArgTypes...)>
   b673c:	4628      	mov	r0, r5
   b673e:	f7ff ffac 	bl	b669a <_ZNSt14_Function_baseD1Ev>
   b6742:	2110      	movs	r1, #16
   b6744:	4628      	mov	r0, r5
   b6746:	f7fd fcaa 	bl	b409e <_ZdlPvj>
   b674a:	68a5      	ldr	r5, [r4, #8]
        delete onError_.load(std::memory_order_relaxed);
   b674c:	b135      	cbz	r5, b675c <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x38>
   b674e:	4628      	mov	r0, r5
   b6750:	f7ff ffa3 	bl	b669a <_ZNSt14_Function_baseD1Ev>
   b6754:	2110      	movs	r1, #16
   b6756:	4628      	mov	r0, r5
   b6758:	f7fd fca1 	bl	b409e <_ZdlPvj>
   b675c:	4620      	mov	r0, r4
   b675e:	2114      	movs	r1, #20
   b6760:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   b6764:	f7fd bc9b 	b.w	b409e <_ZdlPvj>
   b6768:	bd38      	pop	{r3, r4, r5, pc}

000b676a <_ZNSt12__shared_ptrIN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EEC1ERKS7_>:
      __shared_ptr(const __shared_ptr&) noexcept = default;
   b676a:	680b      	ldr	r3, [r1, #0]
   b676c:	6003      	str	r3, [r0, #0]
      : _M_pi(__r._M_pi)
   b676e:	684b      	ldr	r3, [r1, #4]
   b6770:	6043      	str	r3, [r0, #4]
	if (_M_pi != 0)
   b6772:	b113      	cbz	r3, b677a <_ZNSt12__shared_ptrIN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EEC1ERKS7_+0x10>
    { ++_M_use_count; }
   b6774:	685a      	ldr	r2, [r3, #4]
   b6776:	3201      	adds	r2, #1
   b6778:	605a      	str	r2, [r3, #4]
      __shared_ptr(const __shared_ptr&) noexcept = default;
   b677a:	4770      	bx	lr

000b677c <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>:
        // TODO: Use custom reference counting object to avoid unnecessary memory allocation
        return new detail::FutureImplPtr<ResultT, ContextT>(p_);
    }

    // Unwraps promise from an object pointer created via dataPtr() method
    static Promise<ResultT, ContextT> fromDataPtr(void* data) {
   b677c:	b537      	push	{r0, r1, r2, r4, r5, lr}
   b677e:	4604      	mov	r4, r0
       *  @brief  Construct an empty %shared_ptr.
       *  @post   use_count()==0 && get()==0
       */
      constexpr shared_ptr() noexcept : __shared_ptr<_Tp>() { }

      shared_ptr(const shared_ptr&) noexcept = default; ///< Copy constructor
   b6780:	4668      	mov	r0, sp
   b6782:	460d      	mov	r5, r1
   b6784:	f7ff fff1 	bl	b676a <_ZNSt12__shared_ptrIN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EEC1ERKS7_>
	__shared_ptr(const __shared_ptr<_Yp, _Lp>& __r) noexcept
	: _M_ptr(__r._M_ptr), _M_refcount(__r._M_refcount)
	{ }

      __shared_ptr(__shared_ptr&& __r) noexcept
      : _M_ptr(__r._M_ptr), _M_refcount()
   b6788:	9b00      	ldr	r3, [sp, #0]
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
   b678a:	9a01      	ldr	r2, [sp, #4]
      : _M_ptr(__r._M_ptr), _M_refcount()
   b678c:	6023      	str	r3, [r4, #0]
	_M_pi = __tmp;
   b678e:	6062      	str	r2, [r4, #4]
	__r._M_pi = _M_pi;
   b6790:	2300      	movs	r3, #0
      ~__shared_ptr() = default;
   b6792:	a801      	add	r0, sp, #4
	__r._M_pi = _M_pi;
   b6794:	9301      	str	r3, [sp, #4]
      {
	_M_refcount._M_swap(__r._M_refcount);
	__r._M_ptr = 0;
   b6796:	9300      	str	r3, [sp, #0]
      ~__shared_ptr() = default;
   b6798:	f7fd fcc2 	bl	b4120 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
        auto d = static_cast<detail::FutureImplPtr<ResultT, ContextT>*>(data);
        const Promise<ResultT, ContextT> p(*d);
        delete d;
   b679c:	b135      	cbz	r5, b67ac <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv+0x30>
   b679e:	1d28      	adds	r0, r5, #4
   b67a0:	f7fd fcbe 	bl	b4120 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   b67a4:	2108      	movs	r1, #8
   b67a6:	4628      	mov	r0, r5
   b67a8:	f7fd fc79 	bl	b409e <_ZdlPvj>
        return p;
    }
   b67ac:	4620      	mov	r0, r4
   b67ae:	b003      	add	sp, #12
   b67b0:	bd30      	pop	{r4, r5, pc}

000b67b2 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>:
      if (_M_empty())
   b67b2:	6882      	ldr	r2, [r0, #8]
    function<_Res(_ArgTypes...)>::
   b67b4:	b510      	push	{r4, lr}
      if (_M_empty())
   b67b6:	b90a      	cbnz	r2, b67bc <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_+0xa>
	__throw_bad_function_call();
   b67b8:	f001 f976 	bl	b7aa8 <_ZSt25__throw_bad_function_callv>
    }
   b67bc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   b67c0:	68c3      	ldr	r3, [r0, #12]
   b67c2:	4718      	bx	r3

000b67c4 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE9_M_invokeERKSt9_Any_data>:
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
   b67c4:	b508      	push	{r3, lr}
	    return __source._M_access<_Functor*>();
   b67c6:	6800      	ldr	r0, [r0, #0]
    { return static_cast<_Up&&>(__t); }

  template<typename _Res, typename _Fn, typename... _Args>
    constexpr _Res
    __invoke_impl(__invoke_other, _Fn&& __f, _Args&&... __args)
    { return std::forward<_Fn>(__f)(std::forward<_Args>(__args)...); }
   b67c8:	f100 0110 	add.w	r1, r0, #16
   b67cc:	f7ff fff1 	bl	b67b2 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>
      }
   b67d0:	bd08      	pop	{r3, pc}

000b67d2 <_ZNKSt8functionIFvRKbEEclES1_>:
      if (_M_empty())
   b67d2:	6882      	ldr	r2, [r0, #8]
    function<_Res(_ArgTypes...)>::
   b67d4:	b510      	push	{r4, lr}
      if (_M_empty())
   b67d6:	b90a      	cbnz	r2, b67dc <_ZNKSt8functionIFvRKbEEclES1_+0xa>
	__throw_bad_function_call();
   b67d8:	f001 f966 	bl	b7aa8 <_ZSt25__throw_bad_function_callv>
    }
   b67dc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   b67e0:	68c3      	ldr	r3, [r0, #12]
   b67e2:	4718      	bx	r3

000b67e4 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE9_M_invokeERKSt9_Any_data>:
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
   b67e4:	b508      	push	{r3, lr}
	    return __source._M_access<_Functor*>();
   b67e6:	6800      	ldr	r0, [r0, #0]
   b67e8:	f100 0110 	add.w	r1, r0, #16
   b67ec:	f7ff fff1 	bl	b67d2 <_ZNKSt8functionIFvRKbEEclES1_>
      }
   b67f0:	bd08      	pop	{r3, pc}
	...

000b67f4 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>:
	__shared_count(_Ptr __p) : _M_pi(0)
   b67f4:	b538      	push	{r3, r4, r5, lr}
   b67f6:	2300      	movs	r3, #0
   b67f8:	4604      	mov	r4, r0
   b67fa:	6003      	str	r3, [r0, #0]
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
   b67fc:	2010      	movs	r0, #16
	__shared_count(_Ptr __p) : _M_pi(0)
   b67fe:	460d      	mov	r5, r1
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
   b6800:	f7fd fc49 	bl	b4096 <_Znwj>
   b6804:	b128      	cbz	r0, b6812 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_+0x1e>
      : _M_use_count(1), _M_weak_count(1) { }
   b6806:	2301      	movs	r3, #1
   b6808:	e9c0 3301 	strd	r3, r3, [r0, #4]
      : _M_ptr(__p) { }
   b680c:	4b02      	ldr	r3, [pc, #8]	; (b6818 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_+0x24>)
   b680e:	6003      	str	r3, [r0, #0]
   b6810:	60c5      	str	r5, [r0, #12]
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
   b6812:	6020      	str	r0, [r4, #0]
	}
   b6814:	4620      	mov	r0, r4
   b6816:	bd38      	pop	{r3, r4, r5, pc}
   b6818:	000b902c 	.word	0x000b902c

000b681c <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>:
    function<_Res(_ArgTypes...)>::
   b681c:	b538      	push	{r3, r4, r5, lr}
    _Function_base() : _M_manager(nullptr) { }
   b681e:	2300      	movs	r3, #0
   b6820:	6083      	str	r3, [r0, #8]
    bool _M_empty() const { return !_M_manager; }
   b6822:	688b      	ldr	r3, [r1, #8]
    function<_Res(_ArgTypes...)>::
   b6824:	4604      	mov	r4, r0
   b6826:	460d      	mov	r5, r1
      if (static_cast<bool>(__x))
   b6828:	b12b      	cbz	r3, b6836 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_+0x1a>
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
   b682a:	2202      	movs	r2, #2
   b682c:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
   b682e:	68eb      	ldr	r3, [r5, #12]
   b6830:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
   b6832:	68ab      	ldr	r3, [r5, #8]
   b6834:	60a3      	str	r3, [r4, #8]
    }
   b6836:	4620      	mov	r0, r4
   b6838:	bd38      	pop	{r3, r4, r5, pc}
	...

000b683c <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>:
    void setError(Error error) {
   b683c:	b5f0      	push	{r4, r5, r6, r7, lr}
   b683e:	b089      	sub	sp, #36	; 0x24
        { __shared_ptr(__p, std::move(__d), std::move(__a)).swap(*this); }

      /// Return the stored pointer.
      element_type*
      get() const noexcept
      { return _M_ptr; }
   b6840:	6804      	ldr	r4, [r0, #0]
        p_->setError(std::move(error));
   b6842:	4668      	mov	r0, sp
   b6844:	f7ff ff5a 	bl	b66fc <_ZN8particle5ErrorC1EOS0_>

      bool
      compare_exchange_strong(_Tp& __e, _Tp __i, memory_order __s,
			      memory_order __f) noexcept
      {
	return __atomic_compare_exchange(std::__addressof(_M_i),
   b6848:	f04f 0302 	mov.w	r3, #2
   b684c:	e8d4 2f4f 	ldrexb	r2, [r4]
   b6850:	2a00      	cmp	r2, #0
   b6852:	d103      	bne.n	b685c <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x20>
   b6854:	e8c4 3f41 	strexb	r1, r3, [r4]
   b6858:	2900      	cmp	r1, #0
   b685a:	d1f7      	bne.n	b684c <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x10>
        if (this->changeState(State::FAILED)) {
   b685c:	d125      	bne.n	b68aa <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x6e>
            new(&error_) Error(std::move(error));
   b685e:	f104 050c 	add.w	r5, r4, #12
   b6862:	4669      	mov	r1, sp
   b6864:	4628      	mov	r0, r5
   b6866:	f7ff ff49 	bl	b66fc <_ZN8particle5ErrorC1EOS0_>
	__atomic_store_n(&_M_i, __i, int(__m));
   b686a:	f3bf 8f5b 	dmb	ish
   b686e:	2301      	movs	r3, #1
   b6870:	7063      	strb	r3, [r4, #1]

      _GLIBCXX_ALWAYS_INLINE __pointer_type
      exchange(__pointer_type __p,
	       memory_order __m = memory_order_seq_cst) noexcept
      {
	return __atomic_exchange_n(&_M_p, __p, int(__m));
   b6872:	2000      	movs	r0, #0
   b6874:	f104 0308 	add.w	r3, r4, #8
   b6878:	f3bf 8f5b 	dmb	ish
   b687c:	e853 6f00 	ldrex	r6, [r3]
   b6880:	e843 0200 	strex	r2, r0, [r3]
   b6884:	2a00      	cmp	r2, #0
   b6886:	d1f9      	bne.n	b687c <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x40>
   b6888:	f3bf 8f5b 	dmb	ish
        if (callbackPtr) {
   b688c:	b16e      	cbz	r6, b68aa <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x6e>
        return (application_thread_current(nullptr) != 0);
   b688e:	f7ff fe19 	bl	b64c4 <application_thread_current>
        if (ContextT::isApplicationThreadCurrent()) {
   b6892:	b178      	cbz	r0, b68b4 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x78>
            callback(std::forward<ArgsT>(args)...); // Synchronous call
   b6894:	4629      	mov	r1, r5
   b6896:	4630      	mov	r0, r6
   b6898:	f7ff ff8b 	bl	b67b2 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>
    class function<_Res(_ArgTypes...)>
   b689c:	4630      	mov	r0, r6
   b689e:	f7ff fefc 	bl	b669a <_ZNSt14_Function_baseD1Ev>
            delete callbackPtr;
   b68a2:	2110      	movs	r1, #16
   b68a4:	4630      	mov	r0, r6
   b68a6:	f7fd fbfa 	bl	b409e <_ZdlPvj>
        p_->setError(std::move(error));
   b68aa:	4668      	mov	r0, sp
   b68ac:	f7ff ff33 	bl	b6716 <_ZN8particle5ErrorD1Ev>
    }
   b68b0:	b009      	add	sp, #36	; 0x24
   b68b2:	bdf0      	pop	{r4, r5, r6, r7, pc}

     public:
      template<typename... _Args>
	explicit _GLIBCXX20_CONSTEXPR
	_Bind(const _Functor& __f, _Args&&... __args)
	: _M_f(__f), _M_bound_args(std::forward<_Args>(__args)...)
   b68b4:	4631      	mov	r1, r6
   b68b6:	a802      	add	r0, sp, #8
   b68b8:	f7ff ffb0 	bl	b681c <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>
        Error(error.type_, error.msg_) {
   b68bc:	68e0      	ldr	r0, [r4, #12]
   b68be:	f9b4 5010 	ldrsh.w	r5, [r4, #16]
        msg_(msg ? (const char*)strdup(msg) : nullptr),
   b68c2:	b108      	cbz	r0, b68c8 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x8c>
   b68c4:	f001 ff5c 	bl	b8780 <strdup>
        type_(type) {
   b68c8:	9006      	str	r0, [sp, #24]
            auto callbackPtr = new std::function<void()>(std::bind(callback, std::forward<ArgsT>(args)...));
   b68ca:	2010      	movs	r0, #16
   b68cc:	f8ad 501c 	strh.w	r5, [sp, #28]
   b68d0:	f7fd fbe1 	bl	b4096 <_Znwj>
   b68d4:	4605      	mov	r5, r0
   b68d6:	b1e8      	cbz	r0, b6914 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xd8>
    _Function_base() : _M_manager(nullptr) { }
   b68d8:	2700      	movs	r7, #0
   b68da:	6087      	str	r7, [r0, #8]
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   b68dc:	2018      	movs	r0, #24
   b68de:	f7fd fbda 	bl	b4096 <_Znwj>
   b68e2:	4604      	mov	r4, r0
   b68e4:	b188      	cbz	r0, b690a <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xce>
	std::swap(_M_functor, __x._M_functor);
   b68e6:	4601      	mov	r1, r0
    _Function_base() : _M_manager(nullptr) { }
   b68e8:	6087      	str	r7, [r0, #8]
	std::swap(_M_functor, __x._M_functor);
   b68ea:	a802      	add	r0, sp, #8
   b68ec:	f7ff fede 	bl	b66ac <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b68f0:	9b04      	ldr	r3, [sp, #16]
      __a = _GLIBCXX_MOVE(__b);
   b68f2:	68a2      	ldr	r2, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   b68f4:	60a3      	str	r3, [r4, #8]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b68f6:	9b05      	ldr	r3, [sp, #20]
      __a = _GLIBCXX_MOVE(__b);
   b68f8:	9204      	str	r2, [sp, #16]
      constexpr _Head_base(const _Head_base&) = default;
      constexpr _Head_base(_Head_base&&) = default;

      template<typename _UHead>
        constexpr _Head_base(_UHead&& __h)
	: _M_head_impl(std::forward<_UHead>(__h)) { }
   b68fa:	a906      	add	r1, sp, #24
   b68fc:	68e2      	ldr	r2, [r4, #12]
      __b = _GLIBCXX_MOVE(__tmp);
   b68fe:	60e3      	str	r3, [r4, #12]
   b6900:	f104 0010 	add.w	r0, r4, #16
      __a = _GLIBCXX_MOVE(__b);
   b6904:	9205      	str	r2, [sp, #20]
   b6906:	f7ff fef9 	bl	b66fc <_ZN8particle5ErrorC1EOS0_>
	    _M_invoker = &_My_handler::_M_invoke;
   b690a:	4b08      	ldr	r3, [pc, #32]	; (b692c <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xf0>)
   b690c:	60eb      	str	r3, [r5, #12]
	    _M_manager = &_My_handler::_M_manager;
   b690e:	4b08      	ldr	r3, [pc, #32]	; (b6930 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xf4>)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   b6910:	602c      	str	r4, [r5, #0]
	    _M_manager = &_My_handler::_M_manager;
   b6912:	60ab      	str	r3, [r5, #8]
    struct _Head_base<_Idx, _Head, false>
   b6914:	a806      	add	r0, sp, #24
   b6916:	f7ff fefe 	bl	b6716 <_ZN8particle5ErrorD1Ev>
    class function<_Res(_ArgTypes...)>
   b691a:	a802      	add	r0, sp, #8
   b691c:	f7ff febd 	bl	b669a <_ZNSt14_Function_baseD1Ev>
        return (application_thread_invoke(callback, data, nullptr) == 0);
   b6920:	2200      	movs	r2, #0
   b6922:	4629      	mov	r1, r5
   b6924:	4803      	ldr	r0, [pc, #12]	; (b6934 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xf8>)
   b6926:	f7ff fdd5 	bl	b64d4 <application_thread_invoke>
   b692a:	e7b7      	b.n	b689c <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x60>
   b692c:	000b67c5 	.word	0x000b67c5
   b6930:	000b6a49 	.word	0x000b6a49
   b6934:	000b6673 	.word	0x000b6673

000b6938 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>:
    desc.data = (void*)data;
    desc.funcKey = funcKey;
    return spark_function(NULL, (user_function_int_str_t*)&desc, NULL);
}

Future<bool> CloudClass::publish_event(const char *eventName, const char *eventData, int ttl, PublishFlags flags) {
   b6938:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b693c:	b08b      	sub	sp, #44	; 0x2c
   b693e:	4605      	mov	r5, r0
   b6940:	f89d a050 	ldrb.w	sl, [sp, #80]	; 0x50
   b6944:	460f      	mov	r7, r1
   b6946:	4690      	mov	r8, r2
   b6948:	4699      	mov	r9, r3
    static void sleep(Spark_Sleep_TypeDef sleepMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(sleepMode, seconds); }
    static void sleep(uint16_t wakeUpPin, InterruptMode edgeTriggerMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
   b694a:	f7ff fddf 	bl	b650c <spark_cloud_flag_connected>
   b694e:	ae07      	add	r6, sp, #28
    if (!connected()) {
   b6950:	4683      	mov	fp, r0
   b6952:	bb38      	cbnz	r0, b69a4 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x6c>
        type_(type) {
   b6954:	f64f 732e 	movw	r3, #65326	; 0xff2e
   b6958:	9005      	str	r0, [sp, #20]
    typedef typename detail::FutureImpl<ResultT, ContextT>::OnSuccessCallback OnSuccessCallback;
    typedef typename detail::FutureImpl<ResultT, ContextT>::OnErrorCallback OnErrorCallback;

    // Construct failed future
    explicit FutureBase(Error error) :
            p_(new detail::FutureImpl<ResultT, ContextT>(std::move(error))) {
   b695a:	a905      	add	r1, sp, #20
   b695c:	4630      	mov	r0, r6
   b695e:	f8ad 3018 	strh.w	r3, [sp, #24]
   b6962:	f7ff fecb 	bl	b66fc <_ZN8particle5ErrorC1EOS0_>
   b6966:	2014      	movs	r0, #20
   b6968:	f7fd fb95 	bl	b4096 <_Znwj>
   b696c:	4604      	mov	r4, r0
   b696e:	b148      	cbz	r0, b6984 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x4c>
      constexpr atomic(_Tp __i) noexcept : _M_i(__i) { }
   b6970:	2302      	movs	r3, #2
   b6972:	7003      	strb	r3, [r0, #0]
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
   b6974:	2301      	movs	r3, #1
      constexpr __atomic_base(__pointer_type __p) noexcept : _M_p (__p) { }
   b6976:	e9c0 bb01 	strd	fp, fp, [r0, #4]
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
   b697a:	7043      	strb	r3, [r0, #1]
            error_(std::move(error)) {
   b697c:	4631      	mov	r1, r6
   b697e:	300c      	adds	r0, #12
   b6980:	f7ff febc 	bl	b66fc <_ZN8particle5ErrorC1EOS0_>
	: _M_ptr(__p), _M_refcount(__p, typename is_array<_Tp>::type())
   b6984:	4628      	mov	r0, r5
	: __shared_count(__p)
   b6986:	4621      	mov	r1, r4
	: _M_ptr(__p), _M_refcount(__p, typename is_array<_Tp>::type())
   b6988:	f840 4b04 	str.w	r4, [r0], #4
	: __shared_count(__p)
   b698c:	f7ff ff32 	bl	b67f4 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>
            p_(new detail::FutureImpl<ResultT, ContextT>(std::move(error))) {
   b6990:	4630      	mov	r0, r6
   b6992:	f7ff fec0 	bl	b6716 <_ZN8particle5ErrorD1Ev>
    }

    explicit FutureBase(Error::Type error) :
            FutureBase(Error(error)) {
   b6996:	a805      	add	r0, sp, #20
   b6998:	f7ff febd 	bl	b6716 <_ZN8particle5ErrorD1Ev>
        p.setError(Error::UNKNOWN);
        p.fromDataPtr(d.handler_data); // Free wrapper object
    }

    return p.future();
}
   b699c:	4628      	mov	r0, r5
   b699e:	b00b      	add	sp, #44	; 0x2c
   b69a0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    d.size = sizeof(spark_send_event_data);
   b69a4:	230c      	movs	r3, #12
    spark_send_event_data d = {};
   b69a6:	2400      	movs	r4, #0
            p_(new detail::FutureImpl<ResultT, ContextT>(State::RUNNING)) {
   b69a8:	2014      	movs	r0, #20
   b69aa:	e9cd 4408 	strd	r4, r4, [sp, #32]
    d.size = sizeof(spark_send_event_data);
   b69ae:	9307      	str	r3, [sp, #28]
   b69b0:	f7fd fb71 	bl	b4096 <_Znwj>
   b69b4:	4601      	mov	r1, r0
   b69b6:	b118      	cbz	r0, b69c0 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x88>
      constexpr __atomic_base(__pointer_type __p) noexcept : _M_p (__p) { }
   b69b8:	e9c0 4401 	strd	r4, r4, [r0, #4]
   b69bc:	7004      	strb	r4, [r0, #0]
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
   b69be:	7044      	strb	r4, [r0, #1]
   b69c0:	a804      	add	r0, sp, #16
	: _M_ptr(__p), _M_refcount(__p, typename is_array<_Tp>::type())
   b69c2:	9103      	str	r1, [sp, #12]
	: __shared_count(__p)
   b69c4:	f7ff ff16 	bl	b67f4 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>
    d.handler_callback = publishCompletionCallback;
   b69c8:	4b1e      	ldr	r3, [pc, #120]	; (b6a44 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x10c>)
   b69ca:	9308      	str	r3, [sp, #32]
        return new detail::FutureImplPtr<ResultT, ContextT>(p_);
   b69cc:	2008      	movs	r0, #8
   b69ce:	f7fd fb62 	bl	b4096 <_Znwj>
   b69d2:	4604      	mov	r4, r0
   b69d4:	b110      	cbz	r0, b69dc <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xa4>
   b69d6:	a903      	add	r1, sp, #12
   b69d8:	f7ff fec7 	bl	b676a <_ZNSt12__shared_ptrIN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EEC1ERKS7_>
    if (!spark_send_event(eventName, eventData, ttl, flags.value(), &d) && !p.isDone()) {
   b69dc:	9600      	str	r6, [sp, #0]
   b69de:	fa5f f38a 	uxtb.w	r3, sl
   b69e2:	464a      	mov	r2, r9
   b69e4:	4641      	mov	r1, r8
   b69e6:	4638      	mov	r0, r7
    d.handler_data = p.dataPtr();
   b69e8:	9409      	str	r4, [sp, #36]	; 0x24
    if (!spark_send_event(eventName, eventData, ttl, flags.value(), &d) && !p.isDone()) {
   b69ea:	f7ff fd97 	bl	b651c <spark_send_event>
   b69ee:	b9b8      	cbnz	r0, b6a20 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xe8>
	return __atomic_load_n(&_M_i, int(__m));
   b69f0:	9b03      	ldr	r3, [sp, #12]
   b69f2:	785b      	ldrb	r3, [r3, #1]
   b69f4:	f003 02ff 	and.w	r2, r3, #255	; 0xff
   b69f8:	b993      	cbnz	r3, b6a20 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xe8>
   b69fa:	f64f 739c 	movw	r3, #65436	; 0xff9c
        p.setError(Error::UNKNOWN);
   b69fe:	a905      	add	r1, sp, #20
   b6a00:	a803      	add	r0, sp, #12
   b6a02:	9205      	str	r2, [sp, #20]
   b6a04:	f8ad 3018 	strh.w	r3, [sp, #24]
   b6a08:	f7ff ff18 	bl	b683c <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>
   b6a0c:	a805      	add	r0, sp, #20
   b6a0e:	f7ff fe82 	bl	b6716 <_ZN8particle5ErrorD1Ev>
        p.fromDataPtr(d.handler_data); // Free wrapper object
   b6a12:	a805      	add	r0, sp, #20
   b6a14:	9909      	ldr	r1, [sp, #36]	; 0x24
   b6a16:	f7ff feb1 	bl	b677c <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>
      ~__shared_ptr() = default;
   b6a1a:	a806      	add	r0, sp, #24
   b6a1c:	f7fd fb80 	bl	b4120 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   b6a20:	a903      	add	r1, sp, #12
   b6a22:	a805      	add	r0, sp, #20
   b6a24:	f7ff fea1 	bl	b676a <_ZNSt12__shared_ptrIN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EEC1ERKS7_>
      : _M_ptr(__r._M_ptr), _M_refcount()
   b6a28:	9b05      	ldr	r3, [sp, #20]
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
   b6a2a:	9a06      	ldr	r2, [sp, #24]
      : _M_ptr(__r._M_ptr), _M_refcount()
   b6a2c:	602b      	str	r3, [r5, #0]
	_M_pi = __tmp;
   b6a2e:	606a      	str	r2, [r5, #4]
	__r._M_pi = _M_pi;
   b6a30:	2300      	movs	r3, #0
      ~__shared_ptr() = default;
   b6a32:	a806      	add	r0, sp, #24
	__r._M_pi = _M_pi;
   b6a34:	9306      	str	r3, [sp, #24]
	__r._M_ptr = 0;
   b6a36:	9305      	str	r3, [sp, #20]
      ~__shared_ptr() = default;
   b6a38:	f7fd fb72 	bl	b4120 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   b6a3c:	a804      	add	r0, sp, #16
   b6a3e:	f7fd fb6f 	bl	b4120 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
class Promise: public PromiseBase<ResultT, ContextT> {
   b6a42:	e7ab      	b.n	b699c <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x64>
   b6a44:	000b6ac5 	.word	0x000b6ac5

000b6a48 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation>:
	switch (__op)
   b6a48:	2a01      	cmp	r2, #1
      _M_manager(_Any_data& __dest, const _Any_data& __source,
   b6a4a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b6a4c:	4605      	mov	r5, r0
	switch (__op)
   b6a4e:	d103      	bne.n	b6a58 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x10>
	    return __source._M_access<_Functor*>();
   b6a50:	680b      	ldr	r3, [r1, #0]
	    __dest._M_access<_Functor*>() = _Base::_M_get_pointer(__source);
   b6a52:	6003      	str	r3, [r0, #0]
      }
   b6a54:	2000      	movs	r0, #0
   b6a56:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	  switch (__op)
   b6a58:	2a02      	cmp	r2, #2
   b6a5a:	d010      	beq.n	b6a7e <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x36>
   b6a5c:	2a03      	cmp	r2, #3
   b6a5e:	d1f9      	bne.n	b6a54 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0xc>
	  delete __victim._M_access<_Functor*>();
   b6a60:	6804      	ldr	r4, [r0, #0]
   b6a62:	2c00      	cmp	r4, #0
   b6a64:	d0f6      	beq.n	b6a54 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0xc>
   b6a66:	f104 0010 	add.w	r0, r4, #16
   b6a6a:	f7ff fe54 	bl	b6716 <_ZN8particle5ErrorD1Ev>
    class function<_Res(_ArgTypes...)>
   b6a6e:	4620      	mov	r0, r4
   b6a70:	f7ff fe13 	bl	b669a <_ZNSt14_Function_baseD1Ev>
	  delete __victim._M_access<_Functor*>();
   b6a74:	2118      	movs	r1, #24
   b6a76:	4620      	mov	r0, r4
   b6a78:	f7fd fb11 	bl	b409e <_ZdlPvj>
   b6a7c:	e7ea      	b.n	b6a54 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0xc>
	    new _Functor(*__source._M_access<const _Functor*>());
   b6a7e:	2018      	movs	r0, #24
	  __dest._M_access<_Functor*>() =
   b6a80:	680e      	ldr	r6, [r1, #0]
	    new _Functor(*__source._M_access<const _Functor*>());
   b6a82:	f7fd fb08 	bl	b4096 <_Znwj>
   b6a86:	4604      	mov	r4, r0
   b6a88:	b150      	cbz	r0, b6aa0 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x58>
	explicit _GLIBCXX20_CONSTEXPR
	_Bind(_Functor&& __f, _Args&&... __args)
	: _M_f(std::move(__f)), _M_bound_args(std::forward<_Args>(__args)...)
	{ }

      _Bind(const _Bind&) = default;
   b6a8a:	4631      	mov	r1, r6
   b6a8c:	f7ff fec6 	bl	b681c <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>
        Error(error.type_, error.msg_) {
   b6a90:	6930      	ldr	r0, [r6, #16]
   b6a92:	f9b6 7014 	ldrsh.w	r7, [r6, #20]
        msg_(msg ? (const char*)strdup(msg) : nullptr),
   b6a96:	b108      	cbz	r0, b6a9c <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x54>
   b6a98:	f001 fe72 	bl	b8780 <strdup>
        type_(type) {
   b6a9c:	6120      	str	r0, [r4, #16]
   b6a9e:	82a7      	strh	r7, [r4, #20]
	  __dest._M_access<_Functor*>() =
   b6aa0:	602c      	str	r4, [r5, #0]
	}
   b6aa2:	e7d7      	b.n	b6a54 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0xc>

000b6aa4 <_ZNSt8functionIFvRKbEEC1ERKS3_>:
    function<_Res(_ArgTypes...)>::
   b6aa4:	b538      	push	{r3, r4, r5, lr}
    _Function_base() : _M_manager(nullptr) { }
   b6aa6:	2300      	movs	r3, #0
   b6aa8:	6083      	str	r3, [r0, #8]
    bool _M_empty() const { return !_M_manager; }
   b6aaa:	688b      	ldr	r3, [r1, #8]
    function<_Res(_ArgTypes...)>::
   b6aac:	4604      	mov	r4, r0
   b6aae:	460d      	mov	r5, r1
      if (static_cast<bool>(__x))
   b6ab0:	b12b      	cbz	r3, b6abe <_ZNSt8functionIFvRKbEEC1ERKS3_+0x1a>
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
   b6ab2:	2202      	movs	r2, #2
   b6ab4:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
   b6ab6:	68eb      	ldr	r3, [r5, #12]
   b6ab8:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
   b6aba:	68ab      	ldr	r3, [r5, #8]
   b6abc:	60a3      	str	r3, [r4, #8]
    }
   b6abe:	4620      	mov	r0, r4
   b6ac0:	bd38      	pop	{r3, r4, r5, pc}
	...

000b6ac4 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_>:
void publishCompletionCallback(int error, const void* data, void* callbackData, void* reserved) {
   b6ac4:	b5f0      	push	{r4, r5, r6, r7, lr}
   b6ac6:	b089      	sub	sp, #36	; 0x24
   b6ac8:	4604      	mov	r4, r0
   b6aca:	460d      	mov	r5, r1
    auto p = Promise<bool>::fromDataPtr(callbackData);
   b6acc:	a801      	add	r0, sp, #4
   b6ace:	4611      	mov	r1, r2
   b6ad0:	f7ff fe54 	bl	b677c <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>
    if (error != Error::NONE) {
   b6ad4:	b1a4      	cbz	r4, b6b00 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x3c>
        p.setError(Error((Error::Type)error, (const char*)data));
   b6ad6:	b224      	sxth	r4, r4
        msg_(msg ? (const char*)strdup(msg) : nullptr),
   b6ad8:	b11d      	cbz	r5, b6ae2 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x1e>
   b6ada:	4628      	mov	r0, r5
   b6adc:	f001 fe50 	bl	b8780 <strdup>
   b6ae0:	4605      	mov	r5, r0
   b6ae2:	a801      	add	r0, sp, #4
   b6ae4:	a903      	add	r1, sp, #12
        type_(type) {
   b6ae6:	9503      	str	r5, [sp, #12]
   b6ae8:	f8ad 4010 	strh.w	r4, [sp, #16]
   b6aec:	f7ff fea6 	bl	b683c <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>
   b6af0:	a803      	add	r0, sp, #12
   b6af2:	f7ff fe10 	bl	b6716 <_ZN8particle5ErrorD1Ev>
   b6af6:	a802      	add	r0, sp, #8
   b6af8:	f7fd fb12 	bl	b4120 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   b6afc:	b009      	add	sp, #36	; 0x24
   b6afe:	bdf0      	pop	{r4, r5, r6, r7, pc}
      { return _M_ptr; }
   b6b00:	9d01      	ldr	r5, [sp, #4]
	return __atomic_compare_exchange(std::__addressof(_M_i),
   b6b02:	2301      	movs	r3, #1
   b6b04:	e8d5 2f4f 	ldrexb	r2, [r5]
   b6b08:	2a00      	cmp	r2, #0
   b6b0a:	d103      	bne.n	b6b14 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x50>
   b6b0c:	e8c5 3f41 	strexb	r1, r3, [r5]
   b6b10:	2900      	cmp	r1, #0
   b6b12:	d1f7      	bne.n	b6b04 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x40>
        if (this->changeState(State::SUCCEEDED)) {
   b6b14:	d1ef      	bne.n	b6af6 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x32>
            new(&result_) ResultT(std::move(result));
   b6b16:	732b      	strb	r3, [r5, #12]
	__atomic_store_n(&_M_i, __i, int(__m));
   b6b18:	f3bf 8f5b 	dmb	ish
   b6b1c:	706b      	strb	r3, [r5, #1]
	return __atomic_exchange_n(&_M_p, __p, int(__m));
   b6b1e:	1d2b      	adds	r3, r5, #4
   b6b20:	f3bf 8f5b 	dmb	ish
   b6b24:	e853 6f00 	ldrex	r6, [r3]
   b6b28:	e843 4200 	strex	r2, r4, [r3]
   b6b2c:	2a00      	cmp	r2, #0
   b6b2e:	d1f9      	bne.n	b6b24 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x60>
   b6b30:	f3bf 8f5b 	dmb	ish
        if (callbackPtr) {
   b6b34:	2e00      	cmp	r6, #0
   b6b36:	d0de      	beq.n	b6af6 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x32>
        return (application_thread_current(nullptr) != 0);
   b6b38:	4620      	mov	r0, r4
   b6b3a:	f7ff fcc3 	bl	b64c4 <application_thread_current>
        if (ContextT::isApplicationThreadCurrent()) {
   b6b3e:	4607      	mov	r7, r0
   b6b40:	b160      	cbz	r0, b6b5c <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x98>
            callback(std::forward<ArgsT>(args)...); // Synchronous call
   b6b42:	f105 010c 	add.w	r1, r5, #12
   b6b46:	4630      	mov	r0, r6
   b6b48:	f7ff fe43 	bl	b67d2 <_ZNKSt8functionIFvRKbEEclES1_>
    class function<_Res(_ArgTypes...)>
   b6b4c:	4630      	mov	r0, r6
   b6b4e:	f7ff fda4 	bl	b669a <_ZNSt14_Function_baseD1Ev>
            delete callbackPtr;
   b6b52:	2110      	movs	r1, #16
   b6b54:	4630      	mov	r0, r6
   b6b56:	f7fd faa2 	bl	b409e <_ZdlPvj>
   b6b5a:	e7cc      	b.n	b6af6 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x32>
	: _M_f(__f), _M_bound_args(std::forward<_Args>(__args)...)
   b6b5c:	4631      	mov	r1, r6
   b6b5e:	a803      	add	r0, sp, #12
   b6b60:	f7ff ffa0 	bl	b6aa4 <_ZNSt8functionIFvRKbEEC1ERKS3_>
	: _M_head_impl(std::forward<_UHead>(__h)) { }
   b6b64:	7b2b      	ldrb	r3, [r5, #12]
   b6b66:	f88d 301c 	strb.w	r3, [sp, #28]
            auto callbackPtr = new std::function<void()>(std::bind(callback, std::forward<ArgsT>(args)...));
   b6b6a:	2010      	movs	r0, #16
   b6b6c:	f7fd fa93 	bl	b4096 <_Znwj>
   b6b70:	4605      	mov	r5, r0
   b6b72:	b1d0      	cbz	r0, b6baa <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0xe6>
    _Function_base() : _M_manager(nullptr) { }
   b6b74:	6087      	str	r7, [r0, #8]
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   b6b76:	2014      	movs	r0, #20
   b6b78:	f7fd fa8d 	bl	b4096 <_Znwj>
   b6b7c:	4604      	mov	r4, r0
   b6b7e:	b178      	cbz	r0, b6ba0 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0xdc>
    _Function_base() : _M_manager(nullptr) { }
   b6b80:	6087      	str	r7, [r0, #8]
	std::swap(_M_functor, __x._M_functor);
   b6b82:	4601      	mov	r1, r0
   b6b84:	a803      	add	r0, sp, #12
   b6b86:	f7ff fd91 	bl	b66ac <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b6b8a:	9b05      	ldr	r3, [sp, #20]
      __a = _GLIBCXX_MOVE(__b);
   b6b8c:	68a2      	ldr	r2, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   b6b8e:	60a3      	str	r3, [r4, #8]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b6b90:	9b06      	ldr	r3, [sp, #24]
      __a = _GLIBCXX_MOVE(__b);
   b6b92:	9205      	str	r2, [sp, #20]
   b6b94:	68e2      	ldr	r2, [r4, #12]
      __b = _GLIBCXX_MOVE(__tmp);
   b6b96:	60e3      	str	r3, [r4, #12]
   b6b98:	f89d 301c 	ldrb.w	r3, [sp, #28]
      __a = _GLIBCXX_MOVE(__b);
   b6b9c:	9206      	str	r2, [sp, #24]
   b6b9e:	7423      	strb	r3, [r4, #16]
	    _M_invoker = &_My_handler::_M_invoke;
   b6ba0:	4b06      	ldr	r3, [pc, #24]	; (b6bbc <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0xf8>)
   b6ba2:	60eb      	str	r3, [r5, #12]
	    _M_manager = &_My_handler::_M_manager;
   b6ba4:	4b06      	ldr	r3, [pc, #24]	; (b6bc0 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0xfc>)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   b6ba6:	602c      	str	r4, [r5, #0]
	    _M_manager = &_My_handler::_M_manager;
   b6ba8:	60ab      	str	r3, [r5, #8]
    class function<_Res(_ArgTypes...)>
   b6baa:	a803      	add	r0, sp, #12
   b6bac:	f7ff fd75 	bl	b669a <_ZNSt14_Function_baseD1Ev>
        return (application_thread_invoke(callback, data, nullptr) == 0);
   b6bb0:	2200      	movs	r2, #0
   b6bb2:	4629      	mov	r1, r5
   b6bb4:	4803      	ldr	r0, [pc, #12]	; (b6bc4 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x100>)
   b6bb6:	f7ff fc8d 	bl	b64d4 <application_thread_invoke>
   b6bba:	e7c7      	b.n	b6b4c <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x88>
   b6bbc:	000b67e5 	.word	0x000b67e5
   b6bc0:	000b6bc9 	.word	0x000b6bc9
   b6bc4:	000b6673 	.word	0x000b6673

000b6bc8 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation>:
	switch (__op)
   b6bc8:	2a01      	cmp	r2, #1
      _M_manager(_Any_data& __dest, const _Any_data& __source,
   b6bca:	b570      	push	{r4, r5, r6, lr}
   b6bcc:	4604      	mov	r4, r0
	switch (__op)
   b6bce:	d103      	bne.n	b6bd8 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x10>
	    return __source._M_access<_Functor*>();
   b6bd0:	680b      	ldr	r3, [r1, #0]
	    __dest._M_access<_Functor*>() = _Base::_M_get_pointer(__source);
   b6bd2:	6003      	str	r3, [r0, #0]
      }
   b6bd4:	2000      	movs	r0, #0
   b6bd6:	bd70      	pop	{r4, r5, r6, pc}
	  switch (__op)
   b6bd8:	2a02      	cmp	r2, #2
   b6bda:	d00c      	beq.n	b6bf6 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x2e>
   b6bdc:	2a03      	cmp	r2, #3
   b6bde:	d1f9      	bne.n	b6bd4 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0xc>
	  delete __victim._M_access<_Functor*>();
   b6be0:	6804      	ldr	r4, [r0, #0]
   b6be2:	2c00      	cmp	r4, #0
   b6be4:	d0f6      	beq.n	b6bd4 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0xc>
    class function<_Res(_ArgTypes...)>
   b6be6:	4620      	mov	r0, r4
   b6be8:	f7ff fd57 	bl	b669a <_ZNSt14_Function_baseD1Ev>
	  delete __victim._M_access<_Functor*>();
   b6bec:	2114      	movs	r1, #20
   b6bee:	4620      	mov	r0, r4
   b6bf0:	f7fd fa55 	bl	b409e <_ZdlPvj>
   b6bf4:	e7ee      	b.n	b6bd4 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0xc>
	    new _Functor(*__source._M_access<const _Functor*>());
   b6bf6:	2014      	movs	r0, #20
	  __dest._M_access<_Functor*>() =
   b6bf8:	680e      	ldr	r6, [r1, #0]
	    new _Functor(*__source._M_access<const _Functor*>());
   b6bfa:	f7fd fa4c 	bl	b4096 <_Znwj>
   b6bfe:	4605      	mov	r5, r0
   b6c00:	b120      	cbz	r0, b6c0c <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x44>
      _Bind(const _Bind&) = default;
   b6c02:	4631      	mov	r1, r6
   b6c04:	f7ff ff4e 	bl	b6aa4 <_ZNSt8functionIFvRKbEEC1ERKS3_>
   b6c08:	7c33      	ldrb	r3, [r6, #16]
   b6c0a:	742b      	strb	r3, [r5, #16]
	  __dest._M_access<_Functor*>() =
   b6c0c:	6025      	str	r5, [r4, #0]
	}
   b6c0e:	e7e1      	b.n	b6bd4 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0xc>

000b6c10 <_ZN5spark13EthernetClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   b6c10:	2200      	movs	r2, #0
   b6c12:	6840      	ldr	r0, [r0, #4]
   b6c14:	4611      	mov	r1, r2
   b6c16:	f7ff bcc9 	b.w	b65ac <network_listening>

000b6c1a <_ZN5spark13EthernetClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
   b6c1a:	2200      	movs	r2, #0
   b6c1c:	6840      	ldr	r0, [r0, #4]
   b6c1e:	4611      	mov	r1, r2
   b6c20:	f7ff bcd4 	b.w	b65cc <network_get_listen_timeout>

000b6c24 <_ZN5spark13EthernetClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
   b6c24:	6840      	ldr	r0, [r0, #4]
   b6c26:	2200      	movs	r2, #0
   b6c28:	f7ff bcc8 	b.w	b65bc <network_set_listen_timeout>

000b6c2c <_ZN5spark13EthernetClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
   b6c2c:	6840      	ldr	r0, [r0, #4]
   b6c2e:	2200      	movs	r2, #0
   b6c30:	f081 0101 	eor.w	r1, r1, #1
   b6c34:	f7ff bcb2 	b.w	b659c <network_listen>

000b6c38 <_ZN5spark13EthernetClass3offEv>:
        network_off(*this, 0, 0, NULL);
   b6c38:	2300      	movs	r3, #0
   b6c3a:	6840      	ldr	r0, [r0, #4]
   b6c3c:	461a      	mov	r2, r3
   b6c3e:	4619      	mov	r1, r3
   b6c40:	f7ff bca4 	b.w	b658c <network_off>

000b6c44 <_ZN5spark13EthernetClass2onEv>:
        network_on(*this, 0, 0, NULL);
   b6c44:	2300      	movs	r3, #0
   b6c46:	6840      	ldr	r0, [r0, #4]
   b6c48:	461a      	mov	r2, r3
   b6c4a:	4619      	mov	r1, r3
   b6c4c:	f7ff bc96 	b.w	b657c <network_on>

000b6c50 <_ZN5spark13EthernetClass5readyEv>:
    }

    bool ready() {
        return network_ready(*this, 0,  NULL);
   b6c50:	2200      	movs	r2, #0
   b6c52:	6840      	ldr	r0, [r0, #4]
   b6c54:	4611      	mov	r1, r2
   b6c56:	f7ff bc89 	b.w	b656c <network_ready>

000b6c5a <_ZN5spark13EthernetClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
   b6c5a:	2200      	movs	r2, #0
   b6c5c:	6840      	ldr	r0, [r0, #4]
   b6c5e:	4611      	mov	r1, r2
   b6c60:	f7ff bc74 	b.w	b654c <network_connecting>

000b6c64 <_ZN5spark13EthernetClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   b6c64:	6840      	ldr	r0, [r0, #4]
   b6c66:	2200      	movs	r2, #0
   b6c68:	2102      	movs	r1, #2
   b6c6a:	f7ff bc77 	b.w	b655c <network_disconnect>

000b6c6e <_ZN5spark13EthernetClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
   b6c6e:	2300      	movs	r3, #0
   b6c70:	6840      	ldr	r0, [r0, #4]
   b6c72:	461a      	mov	r2, r3
   b6c74:	f7ff bc62 	b.w	b653c <network_connect>

000b6c78 <_GLOBAL__sub_I__ZN5spark8EthernetE>:
    static NetworkClass& from(network_interface_t nif);

    virtual IPAddress resolve(const char* name);

    explicit NetworkClass(network_interface_t iface)
            : iface_(iface) {
   b6c78:	4b02      	ldr	r3, [pc, #8]	; (b6c84 <_GLOBAL__sub_I__ZN5spark8EthernetE+0xc>)
   b6c7a:	2203      	movs	r2, #3
   b6c7c:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_ETHERNET) {
   b6c7e:	4a02      	ldr	r2, [pc, #8]	; (b6c88 <_GLOBAL__sub_I__ZN5spark8EthernetE+0x10>)
   b6c80:	601a      	str	r2, [r3, #0]

namespace spark {

EthernetClass Ethernet;

} // spark
   b6c82:	4770      	bx	lr
   b6c84:	2003e6c8 	.word	0x2003e6c8
   b6c88:	000b9048 	.word	0x000b9048

000b6c8c <_ZN7TwoWireD1Ev>:
private:
  hal_i2c_interface_t _i2c;

public:
  TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& config);
  virtual ~TwoWire() {};
   b6c8c:	4770      	bx	lr

000b6c8e <_ZN7TwoWire5writeEPKhj>:

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
   b6c8e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b6c90:	4606      	mov	r6, r0
   b6c92:	4615      	mov	r5, r2
   b6c94:	460c      	mov	r4, r1
   b6c96:	188f      	adds	r7, r1, r2
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
   b6c98:	42bc      	cmp	r4, r7
   b6c9a:	d006      	beq.n	b6caa <_ZN7TwoWire5writeEPKhj+0x1c>
  {
    write(data[i]);
   b6c9c:	6833      	ldr	r3, [r6, #0]
   b6c9e:	f814 1b01 	ldrb.w	r1, [r4], #1
   b6ca2:	689b      	ldr	r3, [r3, #8]
   b6ca4:	4630      	mov	r0, r6
   b6ca6:	4798      	blx	r3
  for(size_t i = 0; i < quantity; ++i)
   b6ca8:	e7f6      	b.n	b6c98 <_ZN7TwoWire5writeEPKhj+0xa>
  }

  return quantity;
}
   b6caa:	4628      	mov	r0, r5
   b6cac:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000b6cae <_ZN7TwoWire5writeEh>:
  return hal_i2c_write(_i2c, data, NULL);
   b6cae:	7c00      	ldrb	r0, [r0, #16]
   b6cb0:	2200      	movs	r2, #0
   b6cb2:	f7ff badf 	b.w	b6274 <hal_i2c_write>

000b6cb6 <_ZN7TwoWire9availableEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::available(void)
{
  return hal_i2c_available(_i2c, NULL);
   b6cb6:	7c00      	ldrb	r0, [r0, #16]
   b6cb8:	2100      	movs	r1, #0
   b6cba:	f7ff bae3 	b.w	b6284 <hal_i2c_available>

000b6cbe <_ZN7TwoWire4readEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::read(void)
{
  return hal_i2c_read(_i2c, NULL);
   b6cbe:	7c00      	ldrb	r0, [r0, #16]
   b6cc0:	2100      	movs	r1, #0
   b6cc2:	f7ff bae7 	b.w	b6294 <hal_i2c_read>

000b6cc6 <_ZN7TwoWire4peekEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::peek(void)
{
  return hal_i2c_peek(_i2c, NULL);
   b6cc6:	7c00      	ldrb	r0, [r0, #16]
   b6cc8:	2100      	movs	r1, #0
   b6cca:	f7ff baeb 	b.w	b62a4 <hal_i2c_peek>

000b6cce <_ZN7TwoWire5flushEv>:
}

void TwoWire::flush(void)
{
  hal_i2c_flush(_i2c, NULL);
   b6cce:	7c00      	ldrb	r0, [r0, #16]
   b6cd0:	2100      	movs	r1, #0
   b6cd2:	f7ff baef 	b.w	b62b4 <hal_i2c_flush>

000b6cd6 <_ZN7TwoWireD0Ev>:
   b6cd6:	b510      	push	{r4, lr}
   b6cd8:	2114      	movs	r1, #20
   b6cda:	4604      	mov	r4, r0
   b6cdc:	f7fd f9df 	bl	b409e <_ZdlPvj>
   b6ce0:	4620      	mov	r0, r4
   b6ce2:	bd10      	pop	{r4, pc}

000b6ce4 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>:
TwoWire::TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& conf)
   b6ce4:	b538      	push	{r3, r4, r5, lr}
   b6ce6:	4604      	mov	r4, r0
   b6ce8:	4615      	mov	r5, r2
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
   b6cea:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   b6cee:	2200      	movs	r2, #0
   b6cf0:	e9c4 2301 	strd	r2, r3, [r4, #4]
   b6cf4:	4b09      	ldr	r3, [pc, #36]	; (b6d1c <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t+0x38>)
  _i2c = i2c;
   b6cf6:	7421      	strb	r1, [r4, #16]
TwoWire::TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& conf)
   b6cf8:	4608      	mov	r0, r1
   b6cfa:	6023      	str	r3, [r4, #0]
  int result = hal_i2c_init(_i2c, &conf);
   b6cfc:	4629      	mov	r1, r5
   b6cfe:	f7ff fae9 	bl	b62d4 <hal_i2c_init>
  if (result == SYSTEM_ERROR_NOT_ENOUGH_DATA && 
   b6d02:	30bf      	adds	r0, #191	; 0xbf
   b6d04:	d108      	bne.n	b6d18 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t+0x34>
      (conf.flags & HAL_I2C_CONFIG_FLAG_FREEABLE)) {
   b6d06:	696b      	ldr	r3, [r5, #20]
  if (result == SYSTEM_ERROR_NOT_ENOUGH_DATA && 
   b6d08:	07db      	lsls	r3, r3, #31
   b6d0a:	d505      	bpl.n	b6d18 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t+0x34>
    free(conf.rx_buffer);
   b6d0c:	6868      	ldr	r0, [r5, #4]
   b6d0e:	f7ff fc7d 	bl	b660c <free>
    free(conf.tx_buffer);
   b6d12:	68e8      	ldr	r0, [r5, #12]
   b6d14:	f7ff fc7a 	bl	b660c <free>
}
   b6d18:	4620      	mov	r0, r4
   b6d1a:	bd38      	pop	{r3, r4, r5, pc}
   b6d1c:	000b9084 	.word	0x000b9084

000b6d20 <_ZN7TwoWire5beginEv>:
	hal_i2c_begin(_i2c, I2C_MODE_MASTER, 0x00, NULL);
   b6d20:	2300      	movs	r3, #0
   b6d22:	7c00      	ldrb	r0, [r0, #16]
   b6d24:	461a      	mov	r2, r3
   b6d26:	4619      	mov	r1, r3
   b6d28:	f7ff ba8c 	b.w	b6244 <hal_i2c_begin>

000b6d2c <_ZN7TwoWire11requestFromERK16WireTransmission>:
size_t TwoWire::requestFrom(const WireTransmission& transfer) {
   b6d2c:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    hal_i2c_transmission_config_t conf = {
   b6d2e:	2200      	movs	r2, #0
   b6d30:	2314      	movs	r3, #20
   b6d32:	e9cd 2201 	strd	r2, r2, [sp, #4]
   b6d36:	f8ad 3004 	strh.w	r3, [sp, #4]
    };
   b6d3a:	780b      	ldrb	r3, [r1, #0]
   b6d3c:	f88d 3008 	strb.w	r3, [sp, #8]
   b6d40:	684b      	ldr	r3, [r1, #4]
   b6d42:	9303      	str	r3, [sp, #12]
   b6d44:	68cb      	ldr	r3, [r1, #12]
   b6d46:	9304      	str	r3, [sp, #16]
  return hal_i2c_request_ex(_i2c, &conf, nullptr);
   b6d48:	7c00      	ldrb	r0, [r0, #16]
      .flags = (uint32_t)(stop_ ? HAL_I2C_TRANSMISSION_FLAG_STOP : 0)
   b6d4a:	7a0b      	ldrb	r3, [r1, #8]
   b6d4c:	9305      	str	r3, [sp, #20]
   b6d4e:	a901      	add	r1, sp, #4
   b6d50:	f7ff fac8 	bl	b62e4 <hal_i2c_request_ex>
}
   b6d54:	b007      	add	sp, #28
   b6d56:	f85d fb04 	ldr.w	pc, [sp], #4

000b6d5a <_ZN7TwoWire11requestFromEhjh>:
{
   b6d5a:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  return requestFrom(WireTransmission(address).quantity(quantity).stop(sendStop));
   b6d5c:	3b00      	subs	r3, #0
        timeout_{HAL_I2C_DEFAULT_TIMEOUT_MS} {
   b6d5e:	f88d 1000 	strb.w	r1, [sp]
   b6d62:	f04f 0164 	mov.w	r1, #100	; 0x64
   b6d66:	9103      	str	r1, [sp, #12]
   b6d68:	bf18      	it	ne
   b6d6a:	2301      	movne	r3, #1
   b6d6c:	4669      	mov	r1, sp
    size_ = size;
   b6d6e:	9201      	str	r2, [sp, #4]
   b6d70:	f88d 3008 	strb.w	r3, [sp, #8]
   b6d74:	f7ff ffda 	bl	b6d2c <_ZN7TwoWire11requestFromERK16WireTransmission>
}
   b6d78:	b005      	add	sp, #20
   b6d7a:	f85d fb04 	ldr.w	pc, [sp], #4

000b6d7e <_ZN7TwoWire11requestFromEhj>:
  return requestFrom(address, quantity, (uint8_t)true);
   b6d7e:	2301      	movs	r3, #1
   b6d80:	f7ff bfeb 	b.w	b6d5a <_ZN7TwoWire11requestFromEhjh>

000b6d84 <_ZN7TwoWire17beginTransmissionEh>:
	hal_i2c_begin_transmission(_i2c, address, NULL);
   b6d84:	7c00      	ldrb	r0, [r0, #16]
   b6d86:	2200      	movs	r2, #0
   b6d88:	f7ff ba64 	b.w	b6254 <hal_i2c_begin_transmission>

000b6d8c <_ZN7TwoWire15endTransmissionEh>:
	return hal_i2c_end_transmission(_i2c, sendStop, NULL);
   b6d8c:	7c00      	ldrb	r0, [r0, #16]
   b6d8e:	2200      	movs	r2, #0
   b6d90:	f7ff ba68 	b.w	b6264 <hal_i2c_end_transmission>

000b6d94 <_ZN9IPAddressD1Ev>:
    IPAddress(uint32_t address);
    // 4 bytes defining the IP address in network order
    IPAddress(const uint8_t* address);
    IPAddress(const HAL_IPAddress& address);

    virtual ~IPAddress() {}
   b6d94:	4770      	bx	lr

000b6d96 <_ZN9IPAddressD0Ev>:
   b6d96:	b510      	push	{r4, lr}
   b6d98:	2118      	movs	r1, #24
   b6d9a:	4604      	mov	r4, r0
   b6d9c:	f7fd f97f 	bl	b409e <_ZdlPvj>
   b6da0:	4620      	mov	r0, r4
   b6da2:	bd10      	pop	{r4, pc}

000b6da4 <_ZNK9IPAddress7printToER5Print>:
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
   b6da4:	b5f0      	push	{r4, r5, r6, r7, lr}
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
   b6da6:	7d03      	ldrb	r3, [r0, #20]
   b6da8:	2b06      	cmp	r3, #6
{
   b6daa:	b08d      	sub	sp, #52	; 0x34
   b6dac:	460e      	mov	r6, r1
		char buf[INET6_ADDRSTRLEN+1];
		buf[0] = 0;
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   b6dae:	f100 0704 	add.w	r7, r0, #4
   b6db2:	f04f 0400 	mov.w	r4, #0
	if (address.v==6) {
   b6db6:	d012      	beq.n	b6dde <_ZNK9IPAddress7printToER5Print+0x3a>
   b6db8:	f100 0508 	add.w	r5, r0, #8
            val = n;
        }
#if __GNUC__ >= 9
#pragma GCC diagnostic pop
#endif // __GNUC__ >= 9
        return printNumber(val, base) + t;
   b6dbc:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
   b6dc0:	220a      	movs	r2, #10
   b6dc2:	4630      	mov	r0, r6
   b6dc4:	f000 f947 	bl	b7056 <_ZN5Print11printNumberEmh>
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
   b6dc8:	42af      	cmp	r7, r5
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
   b6dca:	4404      	add	r4, r0
    for (int i = 0; i < 4; i++)
   b6dcc:	d019      	beq.n	b6e02 <_ZNK9IPAddress7printToER5Print+0x5e>
        if (n)
   b6dce:	2c00      	cmp	r4, #0
   b6dd0:	d0f4      	beq.n	b6dbc <_ZNK9IPAddress7printToER5Print+0x18>
            n += p.print('.');
   b6dd2:	212e      	movs	r1, #46	; 0x2e
   b6dd4:	4630      	mov	r0, r6
   b6dd6:	f000 f93b 	bl	b7050 <_ZN5Print5printEc>
   b6dda:	4404      	add	r4, r0
   b6ddc:	e7ee      	b.n	b6dbc <_ZNK9IPAddress7printToER5Print+0x18>
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   b6dde:	232f      	movs	r3, #47	; 0x2f
   b6de0:	466a      	mov	r2, sp
   b6de2:	4639      	mov	r1, r7
   b6de4:	200a      	movs	r0, #10
		buf[0] = 0;
   b6de6:	f88d 4000 	strb.w	r4, [sp]
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   b6dea:	f7ff fa83 	bl	b62f4 <inet_inet_ntop>
      return write((const uint8_t *)str, strlen(str));
   b6dee:	4668      	mov	r0, sp
   b6df0:	f001 fce3 	bl	b87ba <strlen>
   b6df4:	6833      	ldr	r3, [r6, #0]
   b6df6:	4602      	mov	r2, r0
   b6df8:	68db      	ldr	r3, [r3, #12]
   b6dfa:	4669      	mov	r1, sp
   b6dfc:	4630      	mov	r0, r6
   b6dfe:	4798      	blx	r3
   b6e00:	4604      	mov	r4, r0
    }
    return n;
}
   b6e02:	4620      	mov	r0, r4
   b6e04:	b00d      	add	sp, #52	; 0x34
   b6e06:	bdf0      	pop	{r4, r5, r6, r7, pc}

000b6e08 <_ZN9IPAddressC1Ev>:
IPAddress::IPAddress()
   b6e08:	b510      	push	{r4, lr}
   b6e0a:	4b05      	ldr	r3, [pc, #20]	; (b6e20 <_ZN9IPAddressC1Ev+0x18>)
   b6e0c:	4604      	mov	r4, r0
        return address;
    }

    virtual size_t printTo(Print& p) const;

    void clear() { memset(&address, 0, sizeof (address)); }
   b6e0e:	2211      	movs	r2, #17
   b6e10:	f840 3b04 	str.w	r3, [r0], #4
   b6e14:	2100      	movs	r1, #0
   b6e16:	f001 fc75 	bl	b8704 <memset>
}
   b6e1a:	4620      	mov	r0, r4
   b6e1c:	bd10      	pop	{r4, pc}
   b6e1e:	bf00      	nop
   b6e20:	000b90ac 	.word	0x000b90ac

000b6e24 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>:
IPAddress::IPAddress(const HAL_IPAddress& address)
   b6e24:	4603      	mov	r3, r0
   b6e26:	4a07      	ldr	r2, [pc, #28]	; (b6e44 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0x20>)
   b6e28:	b510      	push	{r4, lr}
   b6e2a:	f843 2b04 	str.w	r2, [r3], #4
    memcpy(&this->address, &address, sizeof(address));
   b6e2e:	f101 0210 	add.w	r2, r1, #16
   b6e32:	f851 4b04 	ldr.w	r4, [r1], #4
   b6e36:	f843 4b04 	str.w	r4, [r3], #4
   b6e3a:	4291      	cmp	r1, r2
   b6e3c:	d1f9      	bne.n	b6e32 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0xe>
   b6e3e:	780a      	ldrb	r2, [r1, #0]
   b6e40:	701a      	strb	r2, [r3, #0]
}
   b6e42:	bd10      	pop	{r4, pc}
   b6e44:	000b90ac 	.word	0x000b90ac

000b6e48 <_ZN9IPAddress8set_ipv4Ehhhh>:
{
   b6e48:	b510      	push	{r4, lr}
    address.ipv4 = b0<<24 | b1 << 16 | b2 << 8 | b3;
   b6e4a:	f89d 4008 	ldrb.w	r4, [sp, #8]
   b6e4e:	ea44 2303 	orr.w	r3, r4, r3, lsl #8
   b6e52:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
   b6e56:	ea42 6101 	orr.w	r1, r2, r1, lsl #24
        address.v = version;
   b6e5a:	2304      	movs	r3, #4
   b6e5c:	6041      	str	r1, [r0, #4]
   b6e5e:	7503      	strb	r3, [r0, #20]
}
   b6e60:	bd10      	pop	{r4, pc}
	...

000b6e64 <_ZN9IPAddressC1EPKh>:
IPAddress::IPAddress(const uint8_t* addr)
   b6e64:	b507      	push	{r0, r1, r2, lr}
   b6e66:	4b06      	ldr	r3, [pc, #24]	; (b6e80 <_ZN9IPAddressC1EPKh+0x1c>)
   b6e68:	6003      	str	r3, [r0, #0]
    set_ipv4(addr[0], addr[1], addr[2], addr[3]);
   b6e6a:	78cb      	ldrb	r3, [r1, #3]
   b6e6c:	9300      	str	r3, [sp, #0]
   b6e6e:	788b      	ldrb	r3, [r1, #2]
   b6e70:	784a      	ldrb	r2, [r1, #1]
   b6e72:	7809      	ldrb	r1, [r1, #0]
   b6e74:	f7ff ffe8 	bl	b6e48 <_ZN9IPAddress8set_ipv4Ehhhh>
}
   b6e78:	b003      	add	sp, #12
   b6e7a:	f85d fb04 	ldr.w	pc, [sp], #4
   b6e7e:	bf00      	nop
   b6e80:	000b90ac 	.word	0x000b90ac

000b6e84 <_GLOBAL__sub_I__ZN5spark3LogE>:
    // This handler doesn't support direct logging
}

// spark::Logger
inline spark::Logger::Logger(const char *name) :
        name_(name) {
   b6e84:	4b01      	ldr	r3, [pc, #4]	; (b6e8c <_GLOBAL__sub_I__ZN5spark3LogE+0x8>)
   b6e86:	4a02      	ldr	r2, [pc, #8]	; (b6e90 <_GLOBAL__sub_I__ZN5spark3LogE+0xc>)
   b6e88:	601a      	str	r2, [r3, #0]
#if Wiring_LogConfig

// spark::
void spark::logProcessControlRequest(ctrl_request* req) {
    JSONRequestHandler::process(req);
}
   b6e8a:	4770      	bx	lr
   b6e8c:	2003e6d0 	.word	0x2003e6d0
   b6e90:	000b90b8 	.word	0x000b90b8

000b6e94 <_ZN5spark12NetworkClass7connectEj>:
        return Network;
    }
}

void NetworkClass::connect(unsigned flags) {
    network_connect(*this, flags, 0, nullptr);
   b6e94:	2300      	movs	r3, #0
   b6e96:	6840      	ldr	r0, [r0, #4]
   b6e98:	461a      	mov	r2, r3
   b6e9a:	f7ff bb4f 	b.w	b653c <network_connect>

000b6e9e <_ZN5spark12NetworkClass10disconnectEv>:
}

void NetworkClass::disconnect() {
    network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, nullptr);
   b6e9e:	6840      	ldr	r0, [r0, #4]
   b6ea0:	2200      	movs	r2, #0
   b6ea2:	2102      	movs	r1, #2
   b6ea4:	f7ff bb5a 	b.w	b655c <network_disconnect>

000b6ea8 <_ZN5spark12NetworkClass10connectingEv>:
}

bool NetworkClass::connecting() {
    return network_connecting(*this, 0, nullptr);
   b6ea8:	2200      	movs	r2, #0
   b6eaa:	6840      	ldr	r0, [r0, #4]
   b6eac:	4611      	mov	r1, r2
   b6eae:	f7ff bb4d 	b.w	b654c <network_connecting>

000b6eb2 <_ZN5spark12NetworkClass5readyEv>:
}

bool NetworkClass::ready() {
    return network_ready(*this, 0, nullptr);
   b6eb2:	2200      	movs	r2, #0
   b6eb4:	6840      	ldr	r0, [r0, #4]
   b6eb6:	4611      	mov	r1, r2
   b6eb8:	f7ff bb58 	b.w	b656c <network_ready>

000b6ebc <_ZN5spark12NetworkClass2onEv>:
}

void NetworkClass::on() {
    network_on(*this, 0, 0, nullptr);
   b6ebc:	2300      	movs	r3, #0
   b6ebe:	6840      	ldr	r0, [r0, #4]
   b6ec0:	461a      	mov	r2, r3
   b6ec2:	4619      	mov	r1, r3
   b6ec4:	f7ff bb5a 	b.w	b657c <network_on>

000b6ec8 <_ZN5spark12NetworkClass3offEv>:
}

void NetworkClass::off() {
    network_off(*this, 0, 0, nullptr);
   b6ec8:	2300      	movs	r3, #0
   b6eca:	6840      	ldr	r0, [r0, #4]
   b6ecc:	461a      	mov	r2, r3
   b6ece:	4619      	mov	r1, r3
   b6ed0:	f7ff bb5c 	b.w	b658c <network_off>

000b6ed4 <_ZN5spark12NetworkClass4isOnEv>:
}

bool NetworkClass::isOn() {
    return network_is_on(*this, nullptr);
   b6ed4:	6840      	ldr	r0, [r0, #4]
   b6ed6:	2100      	movs	r1, #0
   b6ed8:	f7ff bb80 	b.w	b65dc <network_is_on>

000b6edc <_ZN5spark12NetworkClass5isOffEv>:
}

bool NetworkClass::isOff() {
    return network_is_off(*this, nullptr);
   b6edc:	6840      	ldr	r0, [r0, #4]
   b6ede:	2100      	movs	r1, #0
   b6ee0:	f7ff bb84 	b.w	b65ec <network_is_off>

000b6ee4 <_ZN5spark12NetworkClass6listenEb>:
}

void NetworkClass::listen(bool begin) {
    network_listen(*this, begin ? 0 : 1, nullptr);
   b6ee4:	6840      	ldr	r0, [r0, #4]
   b6ee6:	2200      	movs	r2, #0
   b6ee8:	f081 0101 	eor.w	r1, r1, #1
   b6eec:	f7ff bb56 	b.w	b659c <network_listen>

000b6ef0 <_ZN5spark12NetworkClass16setListenTimeoutEt>:
}

void NetworkClass::setListenTimeout(uint16_t timeout) {
    network_set_listen_timeout(*this, timeout, nullptr);
   b6ef0:	6840      	ldr	r0, [r0, #4]
   b6ef2:	2200      	movs	r2, #0
   b6ef4:	f7ff bb62 	b.w	b65bc <network_set_listen_timeout>

000b6ef8 <_ZN5spark12NetworkClass16getListenTimeoutEv>:
}

uint16_t NetworkClass::getListenTimeout() {
    return network_get_listen_timeout(*this, 0, nullptr);
   b6ef8:	2200      	movs	r2, #0
   b6efa:	6840      	ldr	r0, [r0, #4]
   b6efc:	4611      	mov	r1, r2
   b6efe:	f7ff bb65 	b.w	b65cc <network_get_listen_timeout>

000b6f02 <_ZN5spark12NetworkClass9listeningEv>:
}

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
   b6f02:	2200      	movs	r2, #0
   b6f04:	6840      	ldr	r0, [r0, #4]
   b6f06:	4611      	mov	r1, r2
   b6f08:	f7ff bb50 	b.w	b65ac <network_listening>

000b6f0c <_ZN5spark12NetworkClass7resolveEPKc>:
}

IPAddress NetworkClass::resolve(const char* name) {
   b6f0c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   b6f10:	b095      	sub	sp, #84	; 0x54
   b6f12:	4614      	mov	r4, r2
   b6f14:	460d      	mov	r5, r1
   b6f16:	4607      	mov	r7, r0
    IPAddress addr;
   b6f18:	f7ff ff76 	bl	b6e08 <_ZN9IPAddressC1Ev>
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
   b6f1c:	2100      	movs	r1, #0
    struct addrinfo hints = {};
   b6f1e:	221c      	movs	r2, #28
   b6f20:	a80d      	add	r0, sp, #52	; 0x34
    struct addrinfo *ai = nullptr;
   b6f22:	9100      	str	r1, [sp, #0]
    struct addrinfo hints = {};
   b6f24:	f001 fbee 	bl	b8704 <memset>
    hints.ai_flags = AI_ADDRCONFIG;
   b6f28:	2340      	movs	r3, #64	; 0x40
   b6f2a:	930c      	str	r3, [sp, #48]	; 0x30
    hints.ai_family = AF_UNSPEC;
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
   b6f2c:	4620      	mov	r0, r4
   b6f2e:	466b      	mov	r3, sp
   b6f30:	aa0c      	add	r2, sp, #48	; 0x30
   b6f32:	2100      	movs	r1, #0
   b6f34:	f7ff f9ee 	bl	b6314 <netdb_getaddrinfo>
    if (!r) {
   b6f38:	4604      	mov	r4, r0
   b6f3a:	2800      	cmp	r0, #0
   b6f3c:	d14b      	bne.n	b6fd6 <_ZN5spark12NetworkClass7resolveEPKc+0xca>
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   b6f3e:	4602      	mov	r2, r0
   b6f40:	2101      	movs	r1, #1
   b6f42:	6868      	ldr	r0, [r5, #4]
   b6f44:	f7ff fb12 	bl	b656c <network_ready>
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   b6f48:	2102      	movs	r1, #2
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   b6f4a:	4680      	mov	r8, r0
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   b6f4c:	4622      	mov	r2, r4
   b6f4e:	6868      	ldr	r0, [r5, #4]
   b6f50:	f7ff fb0c 	bl	b656c <network_ready>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   b6f54:	9e00      	ldr	r6, [sp, #0]
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   b6f56:	4681      	mov	r9, r0
        bool ok = false;
   b6f58:	4621      	mov	r1, r4
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   b6f5a:	2e00      	cmp	r6, #0
   b6f5c:	d03b      	beq.n	b6fd6 <_ZN5spark12NetworkClass7resolveEPKc+0xca>
   b6f5e:	2900      	cmp	r1, #0
   b6f60:	d139      	bne.n	b6fd6 <_ZN5spark12NetworkClass7resolveEPKc+0xca>
            // NOTE: using only the first entry that matches the current state of IPv4/IPv6 connectivity
            switch (cur->ai_family) {
   b6f62:	6873      	ldr	r3, [r6, #4]
   b6f64:	2b02      	cmp	r3, #2
   b6f66:	d003      	beq.n	b6f70 <_ZN5spark12NetworkClass7resolveEPKc+0x64>
   b6f68:	2b0a      	cmp	r3, #10
   b6f6a:	d011      	beq.n	b6f90 <_ZN5spark12NetworkClass7resolveEPKc+0x84>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   b6f6c:	69f6      	ldr	r6, [r6, #28]
   b6f6e:	e7f4      	b.n	b6f5a <_ZN5spark12NetworkClass7resolveEPKc+0x4e>
                case AF_INET: {
                    if (!ipv4) {
   b6f70:	f1b8 0f00 	cmp.w	r8, #0
   b6f74:	d0fa      	beq.n	b6f6c <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                        continue;
                    }
                    // NOTE: HAL_IPAddress is little-endian
                    auto in = (struct sockaddr_in*)cur->ai_addr;
                    addr = (const uint8_t*)(&in->sin_addr.s_addr);
   b6f76:	6971      	ldr	r1, [r6, #20]
        return *this = IPAddress(address);
   b6f78:	a806      	add	r0, sp, #24
   b6f7a:	3104      	adds	r1, #4
class IPAddress : public Printable {
   b6f7c:	ad07      	add	r5, sp, #28
        return *this = IPAddress(address);
   b6f7e:	f7ff ff71 	bl	b6e64 <_ZN9IPAddressC1EPKh>
class IPAddress : public Printable {
   b6f82:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b6f84:	1d3c      	adds	r4, r7, #4
   b6f86:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b6f88:	682b      	ldr	r3, [r5, #0]
   b6f8a:	7023      	strb	r3, [r4, #0]
                    ok = true;
   b6f8c:	4641      	mov	r1, r8
        return *this = IPAddress(address);
   b6f8e:	e7ed      	b.n	b6f6c <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                    break;
                }
                case AF_INET6: {
                    if (!ipv6) {
   b6f90:	f1b9 0f00 	cmp.w	r9, #0
   b6f94:	d0ea      	beq.n	b6f6c <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                        continue;
                    }
                    auto in6 = (struct sockaddr_in6*)cur->ai_addr;
   b6f96:	6974      	ldr	r4, [r6, #20]
                    HAL_IPAddress a = {};
   b6f98:	2210      	movs	r2, #16
   b6f9a:	a801      	add	r0, sp, #4
   b6f9c:	f001 fbb2 	bl	b8704 <memset>
                    a.v = 6;
   b6fa0:	2306      	movs	r3, #6
   b6fa2:	f88d 3014 	strb.w	r3, [sp, #20]
                    memcpy(a.ipv6, in6->sin6_addr.s6_addr, sizeof(a.ipv6));
   b6fa6:	ad01      	add	r5, sp, #4
   b6fa8:	f104 0308 	add.w	r3, r4, #8
   b6fac:	3418      	adds	r4, #24
   b6fae:	6818      	ldr	r0, [r3, #0]
   b6fb0:	6859      	ldr	r1, [r3, #4]
   b6fb2:	462a      	mov	r2, r5
   b6fb4:	c203      	stmia	r2!, {r0, r1}
   b6fb6:	3308      	adds	r3, #8
   b6fb8:	42a3      	cmp	r3, r4
   b6fba:	4615      	mov	r5, r2
   b6fbc:	d1f7      	bne.n	b6fae <_ZN5spark12NetworkClass7resolveEPKc+0xa2>
                    addr = IPAddress(a);
   b6fbe:	a901      	add	r1, sp, #4
   b6fc0:	a806      	add	r0, sp, #24
class IPAddress : public Printable {
   b6fc2:	ad07      	add	r5, sp, #28
   b6fc4:	f7ff ff2e 	bl	b6e24 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
   b6fc8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b6fca:	1d3c      	adds	r4, r7, #4
   b6fcc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b6fce:	682b      	ldr	r3, [r5, #0]
   b6fd0:	7023      	strb	r3, [r4, #0]
                    ok = true;
   b6fd2:	4649      	mov	r1, r9
   b6fd4:	e7ca      	b.n	b6f6c <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                    break;
                }
            }
        }
    }
    freeaddrinfo(ai);
   b6fd6:	9800      	ldr	r0, [sp, #0]
   b6fd8:	f7ff f994 	bl	b6304 <netdb_freeaddrinfo>
    return Cellular.resolve(name);
#endif // Wiring_Cellular

#endif // HAL_USE_INET_HAL_POSIX
    return addr;
}
   b6fdc:	4638      	mov	r0, r7
   b6fde:	b015      	add	sp, #84	; 0x54
   b6fe0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

000b6fe4 <_GLOBAL__sub_I__ZN5spark7NetworkE>:
   b6fe4:	4b02      	ldr	r3, [pc, #8]	; (b6ff0 <_GLOBAL__sub_I__ZN5spark7NetworkE+0xc>)
   b6fe6:	4a03      	ldr	r2, [pc, #12]	; (b6ff4 <_GLOBAL__sub_I__ZN5spark7NetworkE+0x10>)
   b6fe8:	601a      	str	r2, [r3, #0]
   b6fea:	2200      	movs	r2, #0
   b6fec:	605a      	str	r2, [r3, #4]

} // spark
   b6fee:	4770      	bx	lr
   b6ff0:	2003e6d4 	.word	0x2003e6d4
   b6ff4:	000b90c4 	.word	0x000b90c4

000b6ff8 <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
   b6ff8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b6ffa:	4606      	mov	r6, r0
   b6ffc:	460d      	mov	r5, r1
  size_t n = 0;
   b6ffe:	188f      	adds	r7, r1, r2
   b7000:	2400      	movs	r4, #0
  while (size--) {
   b7002:	42bd      	cmp	r5, r7
   b7004:	d00c      	beq.n	b7020 <_ZN5Print5writeEPKhj+0x28>
     int chunk = write(*buffer++);
   b7006:	6833      	ldr	r3, [r6, #0]
   b7008:	f815 1b01 	ldrb.w	r1, [r5], #1
   b700c:	689b      	ldr	r3, [r3, #8]
   b700e:	4630      	mov	r0, r6
   b7010:	4798      	blx	r3
     if (chunk>=0)
   b7012:	1e03      	subs	r3, r0, #0
   b7014:	db01      	blt.n	b701a <_ZN5Print5writeEPKhj+0x22>
         n += chunk;
   b7016:	441c      	add	r4, r3
  while (size--) {
   b7018:	e7f3      	b.n	b7002 <_ZN5Print5writeEPKhj+0xa>
     int chunk = write(*buffer++);
   b701a:	2c00      	cmp	r4, #0
   b701c:	bf08      	it	eq
   b701e:	461c      	moveq	r4, r3
             n = chunk;
         break;
     }
  }
  return n;
}
   b7020:	4620      	mov	r0, r4
   b7022:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000b7024 <_ZN5Print5writeEPKc>:
    size_t write(const char *str) {
   b7024:	b513      	push	{r0, r1, r4, lr}
   b7026:	4604      	mov	r4, r0
    }
   b7028:	4608      	mov	r0, r1
      if (str == NULL) return 0;
   b702a:	b159      	cbz	r1, b7044 <_ZN5Print5writeEPKc+0x20>
      return write((const uint8_t *)str, strlen(str));
   b702c:	9101      	str	r1, [sp, #4]
   b702e:	f001 fbc4 	bl	b87ba <strlen>
   b7032:	6823      	ldr	r3, [r4, #0]
   b7034:	9901      	ldr	r1, [sp, #4]
   b7036:	68db      	ldr	r3, [r3, #12]
   b7038:	4602      	mov	r2, r0
   b703a:	4620      	mov	r0, r4
    }
   b703c:	b002      	add	sp, #8
   b703e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return write((const uint8_t *)str, strlen(str));
   b7042:	4718      	bx	r3
    }
   b7044:	b002      	add	sp, #8
   b7046:	bd10      	pop	{r4, pc}

000b7048 <_ZN5Print5printEPKc>:

size_t Print::print(const char str[])
{
   b7048:	b508      	push	{r3, lr}
  return write(str);
   b704a:	f7ff ffeb 	bl	b7024 <_ZN5Print5writeEPKc>
}
   b704e:	bd08      	pop	{r3, pc}

000b7050 <_ZN5Print5printEc>:

size_t Print::print(char c)
{
  return write(c);
   b7050:	6803      	ldr	r3, [r0, #0]
   b7052:	689b      	ldr	r3, [r3, #8]
   b7054:	4718      	bx	r3

000b7056 <_ZN5Print11printNumberEmh>:
  return println(reinterpret_cast<const char*>(str));
}

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base) {
   b7056:	b530      	push	{r4, r5, lr}
   b7058:	b08b      	sub	sp, #44	; 0x2c
  char buf[8 * sizeof(n) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
   b705a:	2300      	movs	r3, #0

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
   b705c:	2a01      	cmp	r2, #1
  *str = '\0';
   b705e:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
  if (base < 2) base = 10;
   b7062:	bf98      	it	ls
   b7064:	220a      	movls	r2, #10
   b7066:	ac09      	add	r4, sp, #36	; 0x24

  do {
   decltype(n) m = n;
   n /= base;
   b7068:	460d      	mov	r5, r1
   b706a:	fbb1 f1f2 	udiv	r1, r1, r2
   char c = m - base * n;
   b706e:	fb01 5312 	mls	r3, r1, r2, r5
   b7072:	f003 03ff 	and.w	r3, r3, #255	; 0xff
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
   b7076:	2b09      	cmp	r3, #9
   b7078:	bf94      	ite	ls
   b707a:	3330      	addls	r3, #48	; 0x30
   b707c:	3337      	addhi	r3, #55	; 0x37
   b707e:	b2db      	uxtb	r3, r3
  } while(n);
   b7080:	42aa      	cmp	r2, r5
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
   b7082:	f804 3d01 	strb.w	r3, [r4, #-1]!
  } while(n);
   b7086:	d9ef      	bls.n	b7068 <_ZN5Print11printNumberEmh+0x12>

  return write(str);
   b7088:	4621      	mov	r1, r4
   b708a:	f7ff ffcb 	bl	b7024 <_ZN5Print5writeEPKc>
}
   b708e:	b00b      	add	sp, #44	; 0x2c
   b7090:	bd30      	pop	{r4, r5, pc}
	...

000b7094 <_GLOBAL__sub_I_RGB>:
    _Function_base() : _M_manager(nullptr) { }
   b7094:	4b01      	ldr	r3, [pc, #4]	; (b709c <_GLOBAL__sub_I_RGB+0x8>)
   b7096:	2200      	movs	r2, #0
   b7098:	609a      	str	r2, [r3, #8]
{
    RGBClass* const d = static_cast<RGBClass*>(data);
    if (d->changeHandler_) {
        d->changeHandler_(r, g, b);
    }
}
   b709a:	4770      	bx	lr
   b709c:	2003e6dc 	.word	0x2003e6dc

000b70a0 <_ZN8SPIClass6unlockEv.isra.0>:
  }

  void unlock()
  {
#if HAL_PLATFORM_SPI_HAL_THREAD_SAFETY
    hal_spi_release(_spi, nullptr);
   b70a0:	2100      	movs	r1, #0
   b70a2:	f7ff b977 	b.w	b6394 <hal_spi_release>

000b70a6 <_ZN8SPIClass4lockEv.isra.0>:
    return hal_spi_acquire(_spi, nullptr);
   b70a6:	2100      	movs	r1, #0
   b70a8:	f7ff b96c 	b.w	b6384 <hal_spi_acquire>

000b70ac <_ZN8SPIClassC1E19hal_spi_interface_t>:
    }
    return particle::SPISettings(info->clock, info->bit_order, info->data_mode);
}
} // namespace

SPIClass::SPIClass(hal_spi_interface_t spi)
   b70ac:	b510      	push	{r4, lr}
   b70ae:	4604      	mov	r4, r0
   b70b0:	4608      	mov	r0, r1
{
    _spi = spi;
   b70b2:	7021      	strb	r1, [r4, #0]
    hal_spi_init(_spi);
   b70b4:	f7ff f946 	bl	b6344 <hal_spi_init>
    _dividerReference = SPI_CLK_SYSTEM; // 0 indicates the system clock
   b70b8:	2300      	movs	r3, #0
   b70ba:	6063      	str	r3, [r4, #4]
}
   b70bc:	4620      	mov	r0, r4
   b70be:	bd10      	pop	{r4, pc}

000b70c0 <_ZN8SPIClass5beginEv>:

void SPIClass::begin()
{
   b70c0:	b513      	push	{r0, r1, r4, lr}
   b70c2:	4604      	mov	r4, r0
    // TODO: Fetch default pin from HAL
    if (!lock())
   b70c4:	7800      	ldrb	r0, [r0, #0]
   b70c6:	f7ff ffee 	bl	b70a6 <_ZN8SPIClass4lockEv.isra.0>
   b70ca:	b958      	cbnz	r0, b70e4 <_ZN8SPIClass5beginEv+0x24>
   b70cc:	7820      	ldrb	r0, [r4, #0]
    {
        hal_spi_begin(_spi, SPI_DEFAULT_SS);
   b70ce:	9001      	str	r0, [sp, #4]
   b70d0:	f64f 71ff 	movw	r1, #65535	; 0xffff
   b70d4:	f7ff f926 	bl	b6324 <hal_spi_begin>
        unlock();
   b70d8:	9801      	ldr	r0, [sp, #4]
    }
}
   b70da:	b002      	add	sp, #8
   b70dc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   b70e0:	f7ff bfde 	b.w	b70a0 <_ZN8SPIClass6unlockEv.isra.0>
   b70e4:	b002      	add	sp, #8
   b70e6:	bd10      	pop	{r4, pc}

000b70e8 <_ZN8SPIClass14endTransactionEv>:
}

void SPIClass::endTransaction()
{
    // Release peripheral
    unlock();
   b70e8:	7800      	ldrb	r0, [r0, #0]
   b70ea:	f7ff bfd9 	b.w	b70a0 <_ZN8SPIClass6unlockEv.isra.0>
	...

000b70f0 <_ZN8SPIClass19computeClockDividerEjjRhRj>:
void SPIClass::computeClockDivider(unsigned reference, unsigned targetSpeed, uint8_t& divider,
                                   unsigned& clock)
{
    clock = reference;
    uint8_t scale = 0;
    clock >>= 1; // div2 is the first
   b70f0:	0840      	lsrs	r0, r0, #1
{
   b70f2:	b530      	push	{r4, r5, lr}
    clock >>= 1; // div2 is the first
   b70f4:	6018      	str	r0, [r3, #0]
   b70f6:	2400      	movs	r4, #0
    while (clock > targetSpeed && scale < 7)
   b70f8:	6818      	ldr	r0, [r3, #0]
   b70fa:	4288      	cmp	r0, r1
   b70fc:	b2e5      	uxtb	r5, r4
   b70fe:	d906      	bls.n	b710e <_ZN8SPIClass19computeClockDividerEjjRhRj+0x1e>
   b7100:	3401      	adds	r4, #1
   b7102:	2c08      	cmp	r4, #8
   b7104:	d002      	beq.n	b710c <_ZN8SPIClass19computeClockDividerEjjRhRj+0x1c>
    {
        clock >>= 1;
   b7106:	0840      	lsrs	r0, r0, #1
   b7108:	6018      	str	r0, [r3, #0]
    while (clock > targetSpeed && scale < 7)
   b710a:	e7f5      	b.n	b70f8 <_ZN8SPIClass19computeClockDividerEjjRhRj+0x8>
   b710c:	2507      	movs	r5, #7
        scale++;
    }
    divider = clock_divisors[scale];
   b710e:	4b02      	ldr	r3, [pc, #8]	; (b7118 <_ZN8SPIClass19computeClockDividerEjjRhRj+0x28>)
   b7110:	5d5b      	ldrb	r3, [r3, r5]
   b7112:	7013      	strb	r3, [r2, #0]
}
   b7114:	bd30      	pop	{r4, r5, pc}
   b7116:	bf00      	nop
   b7118:	000b90f8 	.word	0x000b90f8

000b711c <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE>:
{
   b711c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   b7120:	4606      	mov	r6, r0
   b7122:	b08f      	sub	sp, #60	; 0x3c
    CHECK(lock());
   b7124:	7800      	ldrb	r0, [r0, #0]
{
   b7126:	460c      	mov	r4, r1
    CHECK(lock());
   b7128:	f7ff ffbd 	bl	b70a6 <_ZN8SPIClass4lockEv.isra.0>
   b712c:	2800      	cmp	r0, #0
   b712e:	db1b      	blt.n	b7168 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x4c>
    querySpiInfo(_spi, &spi_info);
   b7130:	7835      	ldrb	r5, [r6, #0]
    memset(info, 0, sizeof(hal_spi_info_t));
   b7132:	2214      	movs	r2, #20
   b7134:	2100      	movs	r1, #0
   b7136:	a809      	add	r0, sp, #36	; 0x24
   b7138:	f001 fae4 	bl	b8704 <memset>
    info->version = HAL_SPI_INFO_VERSION_1;
   b713c:	230b      	movs	r3, #11
    hal_spi_info(spi, info, nullptr);
   b713e:	2200      	movs	r2, #0
   b7140:	a909      	add	r1, sp, #36	; 0x24
   b7142:	4628      	mov	r0, r5
    info->version = HAL_SPI_INFO_VERSION_1;
   b7144:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
    hal_spi_info(spi, info, nullptr);
   b7148:	f7ff f90c 	bl	b6364 <hal_spi_info>
    if (!info || !info->enabled || info->default_settings)
   b714c:	f89d 302d 	ldrb.w	r3, [sp, #45]	; 0x2d
   b7150:	b113      	cbz	r3, b7158 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x3c>
   b7152:	f89d 502c 	ldrb.w	r5, [sp, #44]	; 0x2c
   b7156:	b155      	cbz	r5, b716e <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x52>
  {
   b7158:	2700      	movs	r7, #0
   b715a:	46b9      	mov	r9, r7
   b715c:	46b8      	mov	r8, r7
   b715e:	2501      	movs	r5, #1
    if (default_ && other.default_)
   b7160:	7923      	ldrb	r3, [r4, #4]
   b7162:	b15d      	cbz	r5, b717c <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x60>
   b7164:	b1c3      	cbz	r3, b7198 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x7c>
    return 0;
   b7166:	2000      	movs	r0, #0
}
   b7168:	b00f      	add	sp, #60	; 0x3c
   b716a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    return particle::SPISettings(info->clock, info->bit_order, info->data_mode);
   b716e:	f8dd 8030 	ldr.w	r8, [sp, #48]	; 0x30
   b7172:	f89d 9034 	ldrb.w	r9, [sp, #52]	; 0x34
   b7176:	f89d 7035 	ldrb.w	r7, [sp, #53]	; 0x35
  }
   b717a:	e7f1      	b.n	b7160 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x44>
    if (default_ == other.default_ &&
   b717c:	2b00      	cmp	r3, #0
   b717e:	d135      	bne.n	b71ec <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xd0>
   b7180:	68a3      	ldr	r3, [r4, #8]
   b7182:	4543      	cmp	r3, r8
   b7184:	d108      	bne.n	b7198 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x7c>
        bitOrder_ == other.bitOrder_ &&
   b7186:	f88d 9020 	strb.w	r9, [sp, #32]
   b718a:	f88d 7021 	strb.w	r7, [sp, #33]	; 0x21
   b718e:	f8bd 2020 	ldrh.w	r2, [sp, #32]
   b7192:	89a3      	ldrh	r3, [r4, #12]
   b7194:	429a      	cmp	r2, r3
   b7196:	d0e6      	beq.n	b7166 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x4a>
            uint8_t divisor = 0;
   b7198:	2300      	movs	r3, #0
            computeClockDivider((unsigned int)spi_info.system_clock, settings.clock_, divisor,
   b719a:	68a1      	ldr	r1, [r4, #8]
            uint8_t divisor = 0;
   b719c:	f88d 300f 	strb.w	r3, [sp, #15]
            computeClockDivider((unsigned int)spi_info.system_clock, settings.clock_, divisor,
   b71a0:	980a      	ldr	r0, [sp, #40]	; 0x28
   b71a2:	ab04      	add	r3, sp, #16
   b71a4:	f10d 020f 	add.w	r2, sp, #15
   b71a8:	f7ff ffa2 	bl	b70f0 <_ZN8SPIClass19computeClockDividerEjjRhRj>
    if (default_ && other.default_)
   b71ac:	7921      	ldrb	r1, [r4, #4]
   b71ae:	b985      	cbnz	r5, b71d2 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xb6>
    if (default_ == other.default_ &&
   b71b0:	b989      	cbnz	r1, b71d6 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xba>
   b71b2:	68a3      	ldr	r3, [r4, #8]
   b71b4:	4543      	cmp	r3, r8
   b71b6:	d30e      	bcc.n	b71d6 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xba>
        bitOrder_ == other.bitOrder_ &&
   b71b8:	f88d 9020 	strb.w	r9, [sp, #32]
   b71bc:	f88d 7021 	strb.w	r7, [sp, #33]	; 0x21
   b71c0:	f8bd 2020 	ldrh.w	r2, [sp, #32]
   b71c4:	89a3      	ldrh	r3, [r4, #12]
   b71c6:	429a      	cmp	r2, r3
   b71c8:	d105      	bne.n	b71d6 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xba>
            if (!(spi_settings <= settings && clock == spi_settings.clock_))
   b71ca:	9b04      	ldr	r3, [sp, #16]
   b71cc:	4543      	cmp	r3, r8
   b71ce:	d102      	bne.n	b71d6 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xba>
   b71d0:	e7c9      	b.n	b7166 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x4a>
    if (default_ && other.default_)
   b71d2:	2900      	cmp	r1, #0
   b71d4:	d1f9      	bne.n	b71ca <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xae>
                hal_spi_set_settings(_spi, settings.default_, divisor, settings.bitOrder_,
   b71d6:	2300      	movs	r3, #0
   b71d8:	9301      	str	r3, [sp, #4]
   b71da:	7b63      	ldrb	r3, [r4, #13]
   b71dc:	9300      	str	r3, [sp, #0]
   b71de:	f89d 200f 	ldrb.w	r2, [sp, #15]
   b71e2:	7b23      	ldrb	r3, [r4, #12]
            hal_spi_set_settings(_spi, settings.default_, 0, 0, 0, nullptr);
   b71e4:	7830      	ldrb	r0, [r6, #0]
   b71e6:	f7ff f8c5 	bl	b6374 <hal_spi_set_settings>
   b71ea:	e7bc      	b.n	b7166 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x4a>
   b71ec:	e9cd 5500 	strd	r5, r5, [sp]
   b71f0:	462b      	mov	r3, r5
   b71f2:	462a      	mov	r2, r5
   b71f4:	2101      	movs	r1, #1
   b71f6:	e7f5      	b.n	b71e4 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xc8>

000b71f8 <_ZN8SPIClass8transferEh>:

    return clock;
}

byte SPIClass::transfer(byte _data)
{
   b71f8:	b508      	push	{r3, lr}
    return static_cast<byte>(hal_spi_transfer(_spi, _data));
   b71fa:	7800      	ldrb	r0, [r0, #0]
   b71fc:	f7ff f89a 	bl	b6334 <hal_spi_transfer>
}
   b7200:	b2c0      	uxtb	r0, r0
   b7202:	bd08      	pop	{r3, pc}

000b7204 <_Z4dtoadhPc>:
#include "string_convert.h"

//These are very crude implementations - will refine later
//------------------------------------------------------------------------------------------

void dtoa (double val, unsigned char prec, char *sout) {
   b7204:	e92d 4ff1 	stmdb	sp!, {r0, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b7208:	ec57 6b10 	vmov	r6, r7, d0
   b720c:	4680      	mov	r8, r0
   b720e:	460c      	mov	r4, r1
    bool negative = val<0;
    if (negative) {
   b7210:	ee10 0a10 	vmov	r0, s0
   b7214:	2200      	movs	r2, #0
   b7216:	2300      	movs	r3, #0
   b7218:	4639      	mov	r1, r7
   b721a:	f001 f877 	bl	b830c <__aeabi_dcmplt>
   b721e:	b128      	cbz	r0, b722c <_Z4dtoadhPc+0x28>
        val = -val;
   b7220:	f107 4300 	add.w	r3, r7, #2147483648	; 0x80000000
   b7224:	461f      	mov	r7, r3
        *sout++ = '-';
   b7226:	232d      	movs	r3, #45	; 0x2d
   b7228:	f804 3b01 	strb.w	r3, [r4], #1
   b722c:	2300      	movs	r3, #0
    }
    long scale = 1;
   b722e:	f04f 0901 	mov.w	r9, #1
    for (uint8_t i=0; i<prec; i++)
        scale *= 10;
   b7232:	220a      	movs	r2, #10
    for (uint8_t i=0; i<prec; i++)
   b7234:	b2d9      	uxtb	r1, r3
   b7236:	4588      	cmp	r8, r1
   b7238:	d903      	bls.n	b7242 <_Z4dtoadhPc+0x3e>
        scale *= 10;
   b723a:	fb02 f909 	mul.w	r9, r2, r9
    for (uint8_t i=0; i<prec; i++)
   b723e:	3301      	adds	r3, #1
   b7240:	e7f8      	b.n	b7234 <_Z4dtoadhPc+0x30>
    val *= scale;   // capture all the significant digits
   b7242:	4648      	mov	r0, r9
   b7244:	f000 fd86 	bl	b7d54 <__aeabi_i2d>
   b7248:	4632      	mov	r2, r6
   b724a:	463b      	mov	r3, r7
   b724c:	f000 fdec 	bl	b7e28 <__aeabi_dmul>
   b7250:	4606      	mov	r6, r0
   b7252:	460f      	mov	r7, r1
    uint64_t fixed = uint64_t(val);
   b7254:	f001 f8ba 	bl	b83cc <__aeabi_d2ulz>
   b7258:	468a      	mov	sl, r1
   b725a:	4605      	mov	r5, r0
   b725c:	468b      	mov	fp, r1
    if ((val-fixed)>=0.5)    // round last digit
   b725e:	f000 fdad 	bl	b7dbc <__aeabi_ul2d>
   b7262:	4602      	mov	r2, r0
   b7264:	460b      	mov	r3, r1
   b7266:	4630      	mov	r0, r6
   b7268:	4639      	mov	r1, r7
   b726a:	f000 fc25 	bl	b7ab8 <__aeabi_dsub>
   b726e:	4b14      	ldr	r3, [pc, #80]	; (b72c0 <_Z4dtoadhPc+0xbc>)
   b7270:	2200      	movs	r2, #0
   b7272:	f001 f85f 	bl	b8334 <__aeabi_dcmpge>
   b7276:	b110      	cbz	r0, b727e <_Z4dtoadhPc+0x7a>
        fixed++;
   b7278:	3501      	adds	r5, #1
   b727a:	f14a 0b00 	adc.w	fp, sl, #0

    unsigned long first = (unsigned long)(fixed / scale);
   b727e:	464a      	mov	r2, r9
   b7280:	4628      	mov	r0, r5
   b7282:	17d3      	asrs	r3, r2, #31
   b7284:	4659      	mov	r1, fp
   b7286:	f001 f889 	bl	b839c <__aeabi_uldivmod>
    unsigned long second = (unsigned long)(fixed % scale);

    ultoa(first, sout, 10, 1);
   b728a:	2301      	movs	r3, #1
   b728c:	4615      	mov	r5, r2
   b728e:	4621      	mov	r1, r4
   b7290:	220a      	movs	r2, #10
   b7292:	f000 fa48 	bl	b7726 <ultoa>
    if (prec) {
   b7296:	f1b8 0f00 	cmp.w	r8, #0
   b729a:	d00e      	beq.n	b72ba <_Z4dtoadhPc+0xb6>
        sout += strlen(sout);
   b729c:	4620      	mov	r0, r4
   b729e:	f001 fa8c 	bl	b87ba <strlen>
        *sout++ = '.';
   b72a2:	232e      	movs	r3, #46	; 0x2e
        sout += strlen(sout);
   b72a4:	1821      	adds	r1, r4, r0
        *sout++ = '.';
   b72a6:	5423      	strb	r3, [r4, r0]
        ultoa(second, sout, 10, prec);
   b72a8:	220a      	movs	r2, #10
   b72aa:	4643      	mov	r3, r8
   b72ac:	3101      	adds	r1, #1
   b72ae:	4628      	mov	r0, r5
    }
}
   b72b0:	b001      	add	sp, #4
   b72b2:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
        ultoa(second, sout, 10, prec);
   b72b6:	f000 ba36 	b.w	b7726 <ultoa>
}
   b72ba:	b001      	add	sp, #4
   b72bc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   b72c0:	3fe00000 	.word	0x3fe00000

000b72c4 <_ZN6StringD1Ev>:
	init();
	char buf[33];
	dtoa(value, decimalPlaces, buf);
        *this = buf;
}
String::~String()
   b72c4:	b510      	push	{r4, lr}
   b72c6:	4604      	mov	r4, r0
{
	free(buffer);
   b72c8:	6800      	ldr	r0, [r0, #0]
   b72ca:	f7ff f99f 	bl	b660c <free>
}
   b72ce:	4620      	mov	r0, r4
   b72d0:	bd10      	pop	{r4, pc}

000b72d2 <_ZN6String10invalidateEv>:
	len = 0;
	flags = 0;
}

void String::invalidate(void)
{
   b72d2:	b510      	push	{r4, lr}
   b72d4:	4604      	mov	r4, r0
	if (buffer) free(buffer);
   b72d6:	6800      	ldr	r0, [r0, #0]
   b72d8:	b108      	cbz	r0, b72de <_ZN6String10invalidateEv+0xc>
   b72da:	f7ff f997 	bl	b660c <free>
	buffer = NULL;
   b72de:	2300      	movs	r3, #0
	capacity = len = 0;
   b72e0:	e9c4 3301 	strd	r3, r3, [r4, #4]
	buffer = NULL;
   b72e4:	6023      	str	r3, [r4, #0]
}
   b72e6:	bd10      	pop	{r4, pc}

000b72e8 <_ZN6String12changeBufferEj>:
	}
	return 0;
}

unsigned char String::changeBuffer(unsigned int maxStrLen)
{
   b72e8:	b538      	push	{r3, r4, r5, lr}
   b72ea:	4604      	mov	r4, r0
   b72ec:	460d      	mov	r5, r1
	char *newbuffer = (char *)realloc(buffer, maxStrLen + 1);
   b72ee:	6800      	ldr	r0, [r0, #0]
   b72f0:	3101      	adds	r1, #1
   b72f2:	f7ff f993 	bl	b661c <realloc>
	if (newbuffer) {
   b72f6:	b110      	cbz	r0, b72fe <_ZN6String12changeBufferEj+0x16>
		buffer = newbuffer;
		capacity = maxStrLen;
   b72f8:	e9c4 0500 	strd	r0, r5, [r4]
		return 1;
   b72fc:	2001      	movs	r0, #1
	}
	return 0;
}
   b72fe:	bd38      	pop	{r3, r4, r5, pc}

000b7300 <_ZN6String7reserveEj>:
{
   b7300:	b510      	push	{r4, lr}
	if (buffer && capacity >= size) return 1;
   b7302:	6803      	ldr	r3, [r0, #0]
{
   b7304:	4604      	mov	r4, r0
	if (buffer && capacity >= size) return 1;
   b7306:	b123      	cbz	r3, b7312 <_ZN6String7reserveEj+0x12>
   b7308:	6843      	ldr	r3, [r0, #4]
   b730a:	428b      	cmp	r3, r1
   b730c:	d301      	bcc.n	b7312 <_ZN6String7reserveEj+0x12>
   b730e:	2001      	movs	r0, #1
}
   b7310:	bd10      	pop	{r4, pc}
	if (changeBuffer(size)) {
   b7312:	4620      	mov	r0, r4
   b7314:	f7ff ffe8 	bl	b72e8 <_ZN6String12changeBufferEj>
   b7318:	2800      	cmp	r0, #0
   b731a:	d0f9      	beq.n	b7310 <_ZN6String7reserveEj+0x10>
		if (len == 0) buffer[0] = 0;
   b731c:	68a3      	ldr	r3, [r4, #8]
   b731e:	2b00      	cmp	r3, #0
   b7320:	d1f5      	bne.n	b730e <_ZN6String7reserveEj+0xe>
   b7322:	6822      	ldr	r2, [r4, #0]
   b7324:	7013      	strb	r3, [r2, #0]
   b7326:	e7f2      	b.n	b730e <_ZN6String7reserveEj+0xe>

000b7328 <_ZN6String4copyEPKcj>:
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
   b7328:	b537      	push	{r0, r1, r2, r4, r5, lr}
   b732a:	460d      	mov	r5, r1
	if (!reserve(length)) {
   b732c:	4611      	mov	r1, r2
   b732e:	9201      	str	r2, [sp, #4]
{
   b7330:	4604      	mov	r4, r0
	if (!reserve(length)) {
   b7332:	f7ff ffe5 	bl	b7300 <_ZN6String7reserveEj>
   b7336:	9a01      	ldr	r2, [sp, #4]
   b7338:	b928      	cbnz	r0, b7346 <_ZN6String4copyEPKcj+0x1e>
		invalidate();
   b733a:	4620      	mov	r0, r4
   b733c:	f7ff ffc9 	bl	b72d2 <_ZN6String10invalidateEv>
	}
	len = length;
	memcpy(buffer, cstr, length);
	buffer[len] = 0;
	return *this;
}
   b7340:	4620      	mov	r0, r4
   b7342:	b003      	add	sp, #12
   b7344:	bd30      	pop	{r4, r5, pc}
	len = length;
   b7346:	60a2      	str	r2, [r4, #8]
	memcpy(buffer, cstr, length);
   b7348:	4629      	mov	r1, r5
   b734a:	6820      	ldr	r0, [r4, #0]
   b734c:	f001 f9cc 	bl	b86e8 <memcpy>
	buffer[len] = 0;
   b7350:	6822      	ldr	r2, [r4, #0]
   b7352:	68a3      	ldr	r3, [r4, #8]
   b7354:	2100      	movs	r1, #0
   b7356:	54d1      	strb	r1, [r2, r3]
	return *this;
   b7358:	e7f2      	b.n	b7340 <_ZN6String4copyEPKcj+0x18>

000b735a <_ZN6StringC1EPK19__FlashStringHelper>:
	buffer = NULL;
   b735a:	2300      	movs	r3, #0
String::String(const __FlashStringHelper *pstr)
   b735c:	b513      	push	{r0, r1, r4, lr}
	capacity = 0;
   b735e:	e9c0 3300 	strd	r3, r3, [r0]
String::String(const __FlashStringHelper *pstr)
   b7362:	4604      	mov	r4, r0
	len = 0;
   b7364:	6083      	str	r3, [r0, #8]
	flags = 0;
   b7366:	7303      	strb	r3, [r0, #12]
	if (cstr) copy(cstr, strlen(cstr));
   b7368:	b141      	cbz	r1, b737c <_ZN6StringC1EPK19__FlashStringHelper+0x22>
	if (cstr) copy(cstr, strlen(cstr));
   b736a:	4608      	mov	r0, r1
   b736c:	9101      	str	r1, [sp, #4]
   b736e:	f001 fa24 	bl	b87ba <strlen>
   b7372:	9901      	ldr	r1, [sp, #4]
   b7374:	4602      	mov	r2, r0
   b7376:	4620      	mov	r0, r4
   b7378:	f7ff ffd6 	bl	b7328 <_ZN6String4copyEPKcj>
}
   b737c:	4620      	mov	r0, r4
   b737e:	b002      	add	sp, #8
   b7380:	bd10      	pop	{r4, pc}

000b7382 <_ZN6StringaSERKS_>:
}
#endif

String & String::operator = (const String &rhs)
{
	if (this == &rhs) return *this;
   b7382:	4288      	cmp	r0, r1
{
   b7384:	b510      	push	{r4, lr}
   b7386:	4604      	mov	r4, r0
	if (this == &rhs) return *this;
   b7388:	d005      	beq.n	b7396 <_ZN6StringaSERKS_+0x14>

	if (rhs.buffer) copy(rhs.buffer, rhs.len);
   b738a:	680b      	ldr	r3, [r1, #0]
   b738c:	b12b      	cbz	r3, b739a <_ZN6StringaSERKS_+0x18>
   b738e:	688a      	ldr	r2, [r1, #8]
   b7390:	4619      	mov	r1, r3
   b7392:	f7ff ffc9 	bl	b7328 <_ZN6String4copyEPKcj>
	else invalidate();

	return *this;
}
   b7396:	4620      	mov	r0, r4
   b7398:	bd10      	pop	{r4, pc}
	else invalidate();
   b739a:	f7ff ff9a 	bl	b72d2 <_ZN6String10invalidateEv>
   b739e:	e7fa      	b.n	b7396 <_ZN6StringaSERKS_+0x14>

000b73a0 <_ZN6StringC1ERKS_>:
String::String(const String &value)
   b73a0:	b510      	push	{r4, lr}
	buffer = NULL;
   b73a2:	2300      	movs	r3, #0
String::String(const String &value)
   b73a4:	4604      	mov	r4, r0
	capacity = 0;
   b73a6:	e9c0 3300 	strd	r3, r3, [r0]
	len = 0;
   b73aa:	6083      	str	r3, [r0, #8]
	flags = 0;
   b73ac:	7303      	strb	r3, [r0, #12]
	*this = value;
   b73ae:	f7ff ffe8 	bl	b7382 <_ZN6StringaSERKS_>
}
   b73b2:	4620      	mov	r0, r4
   b73b4:	bd10      	pop	{r4, pc}

000b73b6 <_ZN6StringaSEPKc>:
	return *this;
}
#endif

String & String::operator = (const char *cstr)
{
   b73b6:	b513      	push	{r0, r1, r4, lr}
   b73b8:	4604      	mov	r4, r0
	if (cstr) copy(cstr, strlen(cstr));
   b73ba:	b159      	cbz	r1, b73d4 <_ZN6StringaSEPKc+0x1e>
   b73bc:	4608      	mov	r0, r1
   b73be:	9101      	str	r1, [sp, #4]
   b73c0:	f001 f9fb 	bl	b87ba <strlen>
   b73c4:	9901      	ldr	r1, [sp, #4]
   b73c6:	4602      	mov	r2, r0
   b73c8:	4620      	mov	r0, r4
   b73ca:	f7ff ffad 	bl	b7328 <_ZN6String4copyEPKcj>
	else invalidate();

	return *this;
}
   b73ce:	4620      	mov	r0, r4
   b73d0:	b002      	add	sp, #8
   b73d2:	bd10      	pop	{r4, pc}
	else invalidate();
   b73d4:	f7ff ff7d 	bl	b72d2 <_ZN6String10invalidateEv>
   b73d8:	e7f9      	b.n	b73ce <_ZN6StringaSEPKc+0x18>

000b73da <_ZN6StringC1Eih>:
String::String(int value, unsigned char base)
   b73da:	b510      	push	{r4, lr}
   b73dc:	4604      	mov	r4, r0
   b73de:	b08a      	sub	sp, #40	; 0x28
	buffer = NULL;
   b73e0:	2300      	movs	r3, #0
	capacity = 0;
   b73e2:	e9c4 3300 	strd	r3, r3, [r4]
	len = 0;
   b73e6:	60a3      	str	r3, [r4, #8]
	flags = 0;
   b73e8:	7323      	strb	r3, [r4, #12]
String::String(int value, unsigned char base)
   b73ea:	4608      	mov	r0, r1
	itoa(value, buf, base);
   b73ec:	a901      	add	r1, sp, #4
   b73ee:	f000 f9bf 	bl	b7770 <itoa>
	*this = buf;
   b73f2:	a901      	add	r1, sp, #4
   b73f4:	4620      	mov	r0, r4
   b73f6:	f7ff ffde 	bl	b73b6 <_ZN6StringaSEPKc>
}
   b73fa:	4620      	mov	r0, r4
   b73fc:	b00a      	add	sp, #40	; 0x28
   b73fe:	bd10      	pop	{r4, pc}

000b7400 <_ZN6StringC1Efi>:
String::String(float value, int decimalPlaces)
   b7400:	b530      	push	{r4, r5, lr}
   b7402:	4604      	mov	r4, r0
	buffer = NULL;
   b7404:	2300      	movs	r3, #0
String::String(float value, int decimalPlaces)
   b7406:	b08b      	sub	sp, #44	; 0x2c
	capacity = 0;
   b7408:	e9c4 3300 	strd	r3, r3, [r4]
	len = 0;
   b740c:	60a3      	str	r3, [r4, #8]
	flags = 0;
   b740e:	7323      	strb	r3, [r4, #12]
String::String(float value, int decimalPlaces)
   b7410:	ee10 0a10 	vmov	r0, s0
	dtoa(value, decimalPlaces, buf);
   b7414:	b2cd      	uxtb	r5, r1
   b7416:	f000 fcaf 	bl	b7d78 <__aeabi_f2d>
   b741a:	ec41 0b10 	vmov	d0, r0, r1
   b741e:	a901      	add	r1, sp, #4
   b7420:	4628      	mov	r0, r5
   b7422:	f7ff feef 	bl	b7204 <_Z4dtoadhPc>
        *this = buf;
   b7426:	a901      	add	r1, sp, #4
   b7428:	4620      	mov	r0, r4
   b742a:	f7ff ffc4 	bl	b73b6 <_ZN6StringaSEPKc>
}
   b742e:	4620      	mov	r0, r4
   b7430:	b00b      	add	sp, #44	; 0x2c
   b7432:	bd30      	pop	{r4, r5, pc}

000b7434 <_ZN6String6concatEPKcj>:
{
	return concat(s.buffer, s.len);
}

unsigned char String::concat(const char *cstr, unsigned int length)
{
   b7434:	b570      	push	{r4, r5, r6, lr}
   b7436:	4605      	mov	r5, r0
	unsigned int newlen = len + length;
	if (!cstr) return 0;
   b7438:	460e      	mov	r6, r1
   b743a:	b909      	cbnz	r1, b7440 <_ZN6String6concatEPKcj+0xc>
   b743c:	2000      	movs	r0, #0
	if (length == 0) return 1;
	if (!reserve(newlen)) return 0;
	strcpy(buffer + len, cstr);
	len = newlen;
	return 1;
}
   b743e:	bd70      	pop	{r4, r5, r6, pc}
	if (length == 0) return 1;
   b7440:	b16a      	cbz	r2, b745e <_ZN6String6concatEPKcj+0x2a>
	unsigned int newlen = len + length;
   b7442:	6884      	ldr	r4, [r0, #8]
   b7444:	4414      	add	r4, r2
	if (!reserve(newlen)) return 0;
   b7446:	4621      	mov	r1, r4
   b7448:	f7ff ff5a 	bl	b7300 <_ZN6String7reserveEj>
   b744c:	2800      	cmp	r0, #0
   b744e:	d0f5      	beq.n	b743c <_ZN6String6concatEPKcj+0x8>
	strcpy(buffer + len, cstr);
   b7450:	6828      	ldr	r0, [r5, #0]
   b7452:	68ab      	ldr	r3, [r5, #8]
   b7454:	4631      	mov	r1, r6
   b7456:	4418      	add	r0, r3
   b7458:	f001 f98a 	bl	b8770 <strcpy>
	len = newlen;
   b745c:	60ac      	str	r4, [r5, #8]
	if (length == 0) return 1;
   b745e:	2001      	movs	r0, #1
   b7460:	e7ed      	b.n	b743e <_ZN6String6concatEPKcj+0xa>

000b7462 <_ZplRK15StringSumHelperRK6String>:
/*********************************************/
/*  Concatenate                              */
/*********************************************/

StringSumHelper & operator + (const StringSumHelper &lhs, const String &rhs)
{
   b7462:	b510      	push	{r4, lr}
	StringSumHelper &a = const_cast<StringSumHelper&>(lhs);
	if (!a.concat(rhs.buffer, rhs.len)) a.invalidate();
   b7464:	688a      	ldr	r2, [r1, #8]
   b7466:	6809      	ldr	r1, [r1, #0]
{
   b7468:	4604      	mov	r4, r0
	if (!a.concat(rhs.buffer, rhs.len)) a.invalidate();
   b746a:	f7ff ffe3 	bl	b7434 <_ZN6String6concatEPKcj>
   b746e:	b910      	cbnz	r0, b7476 <_ZplRK15StringSumHelperRK6String+0x14>
   b7470:	4620      	mov	r0, r4
   b7472:	f7ff ff2e 	bl	b72d2 <_ZN6String10invalidateEv>
	return a;
}
   b7476:	4620      	mov	r0, r4
   b7478:	bd10      	pop	{r4, pc}

000b747a <_ZplRK15StringSumHelperPKc>:

StringSumHelper & operator + (const StringSumHelper &lhs, const char *cstr)
{
   b747a:	b513      	push	{r0, r1, r4, lr}
   b747c:	4604      	mov	r4, r0
	StringSumHelper &a = const_cast<StringSumHelper&>(lhs);
	if (!cstr || !a.concat(cstr, strlen(cstr))) a.invalidate();
   b747e:	b929      	cbnz	r1, b748c <_ZplRK15StringSumHelperPKc+0x12>
   b7480:	4620      	mov	r0, r4
   b7482:	f7ff ff26 	bl	b72d2 <_ZN6String10invalidateEv>
	return a;
}
   b7486:	4620      	mov	r0, r4
   b7488:	b002      	add	sp, #8
   b748a:	bd10      	pop	{r4, pc}
	if (!cstr || !a.concat(cstr, strlen(cstr))) a.invalidate();
   b748c:	4608      	mov	r0, r1
   b748e:	9101      	str	r1, [sp, #4]
   b7490:	f001 f993 	bl	b87ba <strlen>
   b7494:	9901      	ldr	r1, [sp, #4]
   b7496:	4602      	mov	r2, r0
   b7498:	4620      	mov	r0, r4
   b749a:	f7ff ffcb 	bl	b7434 <_ZN6String6concatEPKcj>
   b749e:	2800      	cmp	r0, #0
   b74a0:	d0ee      	beq.n	b7480 <_ZplRK15StringSumHelperPKc+0x6>
   b74a2:	e7f0      	b.n	b7486 <_ZplRK15StringSumHelperPKc+0xc>

000b74a4 <_GLOBAL__sub_I_System>:
} // namespace particle

// particle::Flag<TagT, ValueT>
template<typename TagT, typename ValueT>
inline particle::Flag<TagT, ValueT>::Flag(ValueT val) :
        val_(val) {
   b74a4:	4b05      	ldr	r3, [pc, #20]	; (b74bc <_GLOBAL__sub_I_System+0x18>)
   b74a6:	2202      	movs	r2, #2
   b74a8:	601a      	str	r2, [r3, #0]

class SystemSleepResult {
public:
    SystemSleepResult()
            : wakeupSource_(nullptr),
              error_(SYSTEM_ERROR_NONE) {
   b74aa:	4b05      	ldr	r3, [pc, #20]	; (b74c0 <_GLOBAL__sub_I_System+0x1c>)
    SleepResult() {}
   b74ac:	4a05      	ldr	r2, [pc, #20]	; (b74c4 <_GLOBAL__sub_I_System+0x20>)
   b74ae:	609a      	str	r2, [r3, #8]
              error_(SYSTEM_ERROR_NONE) {
   b74b0:	2000      	movs	r0, #0
   b74b2:	e9c3 0000 	strd	r0, r0, [r3]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
   b74b6:	f7fe bff5 	b.w	b64a4 <set_system_mode>
   b74ba:	bf00      	nop
   b74bc:	2003e6f8 	.word	0x2003e6f8
   b74c0:	2003e6ec 	.word	0x2003e6ec
   b74c4:	ffff0000 	.word	0xffff0000

000b74c8 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT>:
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
            unix_time_cache = unix_time;
    }
}

const char* TimeClass::format_spec = TIME_FORMAT_DEFAULT;
   b74c8:	4b02      	ldr	r3, [pc, #8]	; (b74d4 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0xc>)
   b74ca:	681a      	ldr	r2, [r3, #0]
   b74cc:	4b02      	ldr	r3, [pc, #8]	; (b74d8 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0x10>)
   b74ce:	601a      	str	r2, [r3, #0]
{
  return isValid();
}


TimeClass Time;
   b74d0:	4770      	bx	lr
   b74d2:	bf00      	nop
   b74d4:	2003e584 	.word	0x2003e584
   b74d8:	2003e6fc 	.word	0x2003e6fc

000b74dc <_ZN11USARTSerialD1Ev>:
private:
  hal_usart_interface_t _serial;
  bool _blocking;
public:
  USARTSerial(hal_usart_interface_t serial, const hal_usart_buffer_config_t& config);
  virtual ~USARTSerial() {};
   b74dc:	4770      	bx	lr

000b74de <_ZN11USARTSerial14blockOnOverrunEb>:
    hal_usart_half_duplex(_serial, Enable);
}

void USARTSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   b74de:	7441      	strb	r1, [r0, #17]
}
   b74e0:	4770      	bx	lr

000b74e2 <_ZN11USARTSerial17availableForWriteEv>:


int USARTSerial::availableForWrite(void)
{
   b74e2:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available_data_for_write(_serial));
   b74e4:	7c00      	ldrb	r0, [r0, #16]
   b74e6:	f7fe ff8d 	bl	b6404 <hal_usart_available_data_for_write>
}
   b74ea:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   b74ee:	bd08      	pop	{r3, pc}

000b74f0 <_ZN11USARTSerial9availableEv>:

int USARTSerial::available(void)
{
   b74f0:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available(_serial));
   b74f2:	7c00      	ldrb	r0, [r0, #16]
   b74f4:	f7fe ff5e 	bl	b63b4 <hal_usart_available>
}
   b74f8:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   b74fc:	bd08      	pop	{r3, pc}

000b74fe <_ZN11USARTSerial4peekEv>:

int USARTSerial::peek(void)
{
   b74fe:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_peek(_serial));
   b7500:	7c00      	ldrb	r0, [r0, #16]
   b7502:	f7fe ff67 	bl	b63d4 <hal_usart_peek>
}
   b7506:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   b750a:	bd08      	pop	{r3, pc}

000b750c <_ZN11USARTSerial4readEv>:

int USARTSerial::read(void)
{
   b750c:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_read(_serial));
   b750e:	7c00      	ldrb	r0, [r0, #16]
   b7510:	f7fe ff58 	bl	b63c4 <hal_usart_read>
}
   b7514:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   b7518:	bd08      	pop	{r3, pc}

000b751a <_ZN11USARTSerial5flushEv>:

void USARTSerial::flush()
{
  hal_usart_flush(_serial);
   b751a:	7c00      	ldrb	r0, [r0, #16]
   b751c:	f7fe bf62 	b.w	b63e4 <hal_usart_flush>

000b7520 <_ZN11USARTSerial5writeEh>:
}

size_t USARTSerial::write(uint8_t c)
{
   b7520:	b537      	push	{r0, r1, r2, r4, r5, lr}
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   b7522:	7c45      	ldrb	r5, [r0, #17]
{
   b7524:	4604      	mov	r4, r0
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   b7526:	b12d      	cbz	r5, b7534 <_ZN11USARTSerial5writeEh+0x14>
    // the HAL always blocks.
	  return hal_usart_write(_serial, c);
   b7528:	7c20      	ldrb	r0, [r4, #16]
  }
  return 0;
}
   b752a:	b003      	add	sp, #12
   b752c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
	  return hal_usart_write(_serial, c);
   b7530:	f7fe bf38 	b.w	b63a4 <hal_usart_write>
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   b7534:	7c00      	ldrb	r0, [r0, #16]
   b7536:	9101      	str	r1, [sp, #4]
   b7538:	f7fe ff64 	bl	b6404 <hal_usart_available_data_for_write>
   b753c:	2800      	cmp	r0, #0
   b753e:	9901      	ldr	r1, [sp, #4]
   b7540:	dcf2      	bgt.n	b7528 <_ZN11USARTSerial5writeEh+0x8>
}
   b7542:	4628      	mov	r0, r5
   b7544:	b003      	add	sp, #12
   b7546:	bd30      	pop	{r4, r5, pc}

000b7548 <_ZN11USARTSerialD0Ev>:
   b7548:	b510      	push	{r4, lr}
   b754a:	2114      	movs	r1, #20
   b754c:	4604      	mov	r4, r0
   b754e:	f7fc fda6 	bl	b409e <_ZdlPvj>
   b7552:	4620      	mov	r0, r4
   b7554:	bd10      	pop	{r4, pc}
	...

000b7558 <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t>:
USARTSerial::USARTSerial(hal_usart_interface_t serial, const hal_usart_buffer_config_t& config)
   b7558:	b510      	push	{r4, lr}
   b755a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   b755e:	4604      	mov	r4, r0
   b7560:	4608      	mov	r0, r1
   b7562:	4611      	mov	r1, r2
   b7564:	2200      	movs	r2, #0
   b7566:	e9c4 2301 	strd	r2, r3, [r4, #4]
   b756a:	4b04      	ldr	r3, [pc, #16]	; (b757c <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t+0x24>)
   b756c:	6023      	str	r3, [r4, #0]
  _blocking = true;
   b756e:	2301      	movs	r3, #1
  _serial = serial;
   b7570:	7420      	strb	r0, [r4, #16]
  _blocking = true;
   b7572:	7463      	strb	r3, [r4, #17]
  hal_usart_init_ex(serial, &config, nullptr);
   b7574:	f7fe ff4e 	bl	b6414 <hal_usart_init_ex>
}
   b7578:	4620      	mov	r0, r4
   b757a:	bd10      	pop	{r4, pc}
   b757c:	000b9124 	.word	0x000b9124

000b7580 <_ZN9USBSerial14blockOnOverrunEb>:
  HAL_USB_USART_Flush_Data(_serial);
}

void USBSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   b7580:	7441      	strb	r1, [r0, #17]
}
   b7582:	4770      	bx	lr

000b7584 <__tcf_0>:
}

USBSerial& _fetch_usbserial()
{
  HAL_USB_USART_Config conf = acquireSerialBuffer();
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   b7584:	4770      	bx	lr

000b7586 <_ZN9USBSerialD1Ev>:
#include "usb_hal.h"
#include "system_task.h"
#include "spark_wiring_startup.h"
#include "concurrent_hal.h"

class USBSerial : public Stream
   b7586:	4770      	bx	lr

000b7588 <_ZN9USBSerial4readEv>:
{
   b7588:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
   b758a:	2100      	movs	r1, #0
   b758c:	7c00      	ldrb	r0, [r0, #16]
   b758e:	f7fe ff69 	bl	b6464 <HAL_USB_USART_Receive_Data>
}
   b7592:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   b7596:	bd08      	pop	{r3, pc}

000b7598 <_ZN9USBSerial4peekEv>:
{
   b7598:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, true));
   b759a:	2101      	movs	r1, #1
   b759c:	7c00      	ldrb	r0, [r0, #16]
   b759e:	f7fe ff61 	bl	b6464 <HAL_USB_USART_Receive_Data>
}
   b75a2:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   b75a6:	bd08      	pop	{r3, pc}

000b75a8 <_ZN9USBSerial17availableForWriteEv>:
{
   b75a8:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USB_USART_Available_Data_For_Write(_serial));
   b75aa:	7c00      	ldrb	r0, [r0, #16]
   b75ac:	f7fe ff52 	bl	b6454 <HAL_USB_USART_Available_Data_For_Write>
}
   b75b0:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   b75b4:	bd08      	pop	{r3, pc}

000b75b6 <_ZN9USBSerial9availableEv>:
{
   b75b6:	b508      	push	{r3, lr}
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
   b75b8:	7c00      	ldrb	r0, [r0, #16]
   b75ba:	f7fe ff43 	bl	b6444 <HAL_USB_USART_Available_Data>
}
   b75be:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   b75c2:	bd08      	pop	{r3, pc}

000b75c4 <_ZN9USBSerial5writeEh>:
{
   b75c4:	b513      	push	{r0, r1, r4, lr}
   b75c6:	4604      	mov	r4, r0
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   b75c8:	7c00      	ldrb	r0, [r0, #16]
{
   b75ca:	9101      	str	r1, [sp, #4]
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   b75cc:	f7fe ff42 	bl	b6454 <HAL_USB_USART_Available_Data_For_Write>
   b75d0:	2800      	cmp	r0, #0
   b75d2:	9901      	ldr	r1, [sp, #4]
   b75d4:	dc01      	bgt.n	b75da <_ZN9USBSerial5writeEh+0x16>
   b75d6:	7c60      	ldrb	r0, [r4, #17]
   b75d8:	b120      	cbz	r0, b75e4 <_ZN9USBSerial5writeEh+0x20>
    return std::max(0, (int)HAL_USB_USART_Send_Data(_serial, byte));
   b75da:	7c20      	ldrb	r0, [r4, #16]
   b75dc:	f7fe ff4a 	bl	b6474 <HAL_USB_USART_Send_Data>
   b75e0:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
}
   b75e4:	b002      	add	sp, #8
   b75e6:	bd10      	pop	{r4, pc}

000b75e8 <_ZN9USBSerial5flushEv>:
  HAL_USB_USART_Flush_Data(_serial);
   b75e8:	7c00      	ldrb	r0, [r0, #16]
   b75ea:	f7fe bf4b 	b.w	b6484 <HAL_USB_USART_Flush_Data>

000b75ee <_ZN9USBSerialD0Ev>:
   b75ee:	b510      	push	{r4, lr}
   b75f0:	2114      	movs	r1, #20
   b75f2:	4604      	mov	r4, r0
   b75f4:	f7fc fd53 	bl	b409e <_ZdlPvj>
   b75f8:	4620      	mov	r0, r4
   b75fa:	bd10      	pop	{r4, pc}

000b75fc <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>:
USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
   b75fc:	b510      	push	{r4, lr}
   b75fe:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   b7602:	4604      	mov	r4, r0
   b7604:	4608      	mov	r0, r1
   b7606:	2100      	movs	r1, #0
   b7608:	e9c4 1301 	strd	r1, r3, [r4, #4]
   b760c:	4b04      	ldr	r3, [pc, #16]	; (b7620 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config+0x24>)
   b760e:	6023      	str	r3, [r4, #0]
  _blocking = true;
   b7610:	2301      	movs	r3, #1
  _serial = serial;
   b7612:	7420      	strb	r0, [r4, #16]
  _blocking = true;
   b7614:	7463      	strb	r3, [r4, #17]
  HAL_USB_USART_Init(_serial, &conf);
   b7616:	4611      	mov	r1, r2
   b7618:	f7fe ff04 	bl	b6424 <HAL_USB_USART_Init>
}
   b761c:	4620      	mov	r0, r4
   b761e:	bd10      	pop	{r4, pc}
   b7620:	000b9154 	.word	0x000b9154

000b7624 <_ZN9USBSerial5beginEl>:
    HAL_USB_USART_Begin(_serial, speed, NULL);
   b7624:	7c00      	ldrb	r0, [r0, #16]
   b7626:	2200      	movs	r2, #0
   b7628:	f7fe bf04 	b.w	b6434 <HAL_USB_USART_Begin>

000b762c <_Z19acquireSerialBufferv>:
{
   b762c:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = {};
   b762e:	2214      	movs	r2, #20
{
   b7630:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {};
   b7632:	2100      	movs	r1, #0
   b7634:	f001 f866 	bl	b8704 <memset>
}
   b7638:	4620      	mov	r0, r4
   b763a:	bd10      	pop	{r4, pc}

000b763c <_Z16_fetch_usbserialv>:
{
   b763c:	b510      	push	{r4, lr}
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   b763e:	4c0f      	ldr	r4, [pc, #60]	; (b767c <_Z16_fetch_usbserialv+0x40>)
{
   b7640:	b088      	sub	sp, #32
  HAL_USB_USART_Config conf = acquireSerialBuffer();
   b7642:	a803      	add	r0, sp, #12
   b7644:	f7ff fff2 	bl	b762c <_Z19acquireSerialBufferv>
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   b7648:	7821      	ldrb	r1, [r4, #0]
   b764a:	f3bf 8f5b 	dmb	ish
   b764e:	f011 0101 	ands.w	r1, r1, #1
   b7652:	d10f      	bne.n	b7674 <_Z16_fetch_usbserialv+0x38>
   b7654:	4620      	mov	r0, r4
   b7656:	9101      	str	r1, [sp, #4]
   b7658:	f7fc fd30 	bl	b40bc <__cxa_guard_acquire>
   b765c:	9901      	ldr	r1, [sp, #4]
   b765e:	b148      	cbz	r0, b7674 <_Z16_fetch_usbserialv+0x38>
   b7660:	aa03      	add	r2, sp, #12
   b7662:	4807      	ldr	r0, [pc, #28]	; (b7680 <_Z16_fetch_usbserialv+0x44>)
   b7664:	f7ff ffca 	bl	b75fc <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
   b7668:	4620      	mov	r0, r4
   b766a:	f7fc fd2c 	bl	b40c6 <__cxa_guard_release>
   b766e:	4805      	ldr	r0, [pc, #20]	; (b7684 <_Z16_fetch_usbserialv+0x48>)
   b7670:	f001 f834 	bl	b86dc <atexit>
	return _usbserial;
}
   b7674:	4802      	ldr	r0, [pc, #8]	; (b7680 <_Z16_fetch_usbserialv+0x44>)
   b7676:	b008      	add	sp, #32
   b7678:	bd10      	pop	{r4, pc}
   b767a:	bf00      	nop
   b767c:	2003e700 	.word	0x2003e700
   b7680:	2003e704 	.word	0x2003e704
   b7684:	000b7585 	.word	0x000b7585

000b7688 <_ZN5spark9WiFiClass5readyEv>:
    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
    }

    bool ready(void) {
        return network_ready(*this, 0, NULL);
   b7688:	2200      	movs	r2, #0
   b768a:	6840      	ldr	r0, [r0, #4]
   b768c:	4611      	mov	r1, r2
   b768e:	f7fe bf6d 	b.w	b656c <network_ready>

000b7692 <_ZN5spark9WiFiClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   b7692:	2200      	movs	r2, #0
   b7694:	6840      	ldr	r0, [r0, #4]
   b7696:	4611      	mov	r1, r2
   b7698:	f7fe bf88 	b.w	b65ac <network_listening>

000b769c <_ZN5spark9WiFiClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
   b769c:	2200      	movs	r2, #0
   b769e:	6840      	ldr	r0, [r0, #4]
   b76a0:	4611      	mov	r1, r2
   b76a2:	f7fe bf93 	b.w	b65cc <network_get_listen_timeout>

000b76a6 <_ZN5spark9WiFiClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
   b76a6:	6840      	ldr	r0, [r0, #4]
   b76a8:	2200      	movs	r2, #0
   b76aa:	f7fe bf87 	b.w	b65bc <network_set_listen_timeout>

000b76ae <_ZN5spark9WiFiClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
   b76ae:	6840      	ldr	r0, [r0, #4]
   b76b0:	2200      	movs	r2, #0
   b76b2:	f081 0101 	eor.w	r1, r1, #1
   b76b6:	f7fe bf71 	b.w	b659c <network_listen>

000b76ba <_ZN5spark9WiFiClass3offEv>:
        network_off(*this, 0, 0, NULL);
   b76ba:	2300      	movs	r3, #0
   b76bc:	6840      	ldr	r0, [r0, #4]
   b76be:	461a      	mov	r2, r3
   b76c0:	4619      	mov	r1, r3
   b76c2:	f7fe bf63 	b.w	b658c <network_off>

000b76c6 <_ZN5spark9WiFiClass2onEv>:
        network_on(*this, 0, 0, NULL);
   b76c6:	2300      	movs	r3, #0
   b76c8:	6840      	ldr	r0, [r0, #4]
   b76ca:	461a      	mov	r2, r3
   b76cc:	4619      	mov	r1, r3
   b76ce:	f7fe bf55 	b.w	b657c <network_on>

000b76d2 <_ZN5spark9WiFiClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
   b76d2:	2200      	movs	r2, #0
   b76d4:	6840      	ldr	r0, [r0, #4]
   b76d6:	4611      	mov	r1, r2
   b76d8:	f7fe bf38 	b.w	b654c <network_connecting>

000b76dc <_ZN5spark9WiFiClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   b76dc:	6840      	ldr	r0, [r0, #4]
   b76de:	2200      	movs	r2, #0
   b76e0:	2102      	movs	r1, #2
   b76e2:	f7fe bf3b 	b.w	b655c <network_disconnect>

000b76e6 <_ZN5spark9WiFiClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
   b76e6:	2300      	movs	r3, #0
   b76e8:	6840      	ldr	r0, [r0, #4]
   b76ea:	461a      	mov	r2, r3
   b76ec:	f7fe bf26 	b.w	b653c <network_connect>

000b76f0 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t>:
   b76f0:	4b02      	ldr	r3, [pc, #8]	; (b76fc <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0xc>)
   b76f2:	2204      	movs	r2, #4
   b76f4:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_WIFI_STA) {
   b76f6:	4a02      	ldr	r2, [pc, #8]	; (b7700 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0x10>)
   b76f8:	601a      	str	r2, [r3, #0]
the same way.
*****************************************************************************/

    WiFiClass WiFi;
    // NetworkClass& Network = WiFi;
}
   b76fa:	4770      	bx	lr
   b76fc:	2003e718 	.word	0x2003e718
   b7700:	000b9184 	.word	0x000b9184

000b7704 <_Z11str_reversePc>:

//------------------------------------------------------------------------------------------
#define BUFSIZE (sizeof(long) * 8 + 1)

//utility function used by ultoa()
__attribute__((weak)) void str_reverse(char* buffer){
   b7704:	b510      	push	{r4, lr}
   b7706:	4604      	mov	r4, r0
	char *i, *j;
	char c;
	i=buffer;
	j=buffer + strlen(buffer)-1;
   b7708:	f001 f857 	bl	b87ba <strlen>
   b770c:	3801      	subs	r0, #1
   b770e:	1823      	adds	r3, r4, r0
   b7710:	4620      	mov	r0, r4
	while(i<j){
   b7712:	4283      	cmp	r3, r0
   b7714:	d906      	bls.n	b7724 <_Z11str_reversePc+0x20>
		c = *i;
   b7716:	7802      	ldrb	r2, [r0, #0]
		*i = *j;
   b7718:	7819      	ldrb	r1, [r3, #0]
   b771a:	f800 1b01 	strb.w	r1, [r0], #1
		*j = c;
   b771e:	f803 2901 	strb.w	r2, [r3], #-1
	while(i<j){
   b7722:	e7f6      	b.n	b7712 <_Z11str_reversePc+0xe>
		++i;
		--j;
	}
}
   b7724:	bd10      	pop	{r4, pc}

000b7726 <ultoa>:
      memcpy(head, ++tail, i);
      return str;
}

//convert unsigned long to string
__attribute__((weak)) char* ultoa(unsigned long a, char* buffer, int radix, char pad){
   b7726:	b570      	push	{r4, r5, r6, lr}
   b7728:	460c      	mov	r4, r1
	if(radix<2 || radix>36){
   b772a:	1e91      	subs	r1, r2, #2
   b772c:	2922      	cmp	r1, #34	; 0x22
   b772e:	d81d      	bhi.n	b776c <ultoa+0x46>
		return NULL;
	}
	char* ptr=buffer;
   b7730:	4625      	mov	r5, r4

	div_t result;
	while(a){
   b7732:	b930      	cbnz	r0, b7742 <ultoa+0x1c>
                *ptr += 'a'-10;
            }
            ++ptr;
            a = result.quot;
	}
        while (ptr < buffer+pad)
   b7734:	4423      	add	r3, r4
            *ptr++ = '0';
   b7736:	2230      	movs	r2, #48	; 0x30
        while (ptr < buffer+pad)
   b7738:	429d      	cmp	r5, r3
   b773a:	d210      	bcs.n	b775e <ultoa+0x38>
            *ptr++ = '0';
   b773c:	f805 2b01 	strb.w	r2, [r5], #1
        while (ptr < buffer+pad)
   b7740:	e7fa      	b.n	b7738 <ultoa+0x12>
            result.quot = a/radix;
   b7742:	fbb0 f6f2 	udiv	r6, r0, r2
            result.rem = a%radix;
   b7746:	fb02 0016 	mls	r0, r2, r6, r0
            *ptr = result.rem;
   b774a:	b2c1      	uxtb	r1, r0
            if(result.rem<10){
   b774c:	2809      	cmp	r0, #9
                *ptr += '0';
   b774e:	bf94      	ite	ls
   b7750:	3130      	addls	r1, #48	; 0x30
                *ptr += 'a'-10;
   b7752:	3157      	addhi	r1, #87	; 0x57
   b7754:	b2c9      	uxtb	r1, r1
   b7756:	f805 1b01 	strb.w	r1, [r5], #1
            a = result.quot;
   b775a:	4630      	mov	r0, r6
	while(a){
   b775c:	e7e9      	b.n	b7732 <ultoa+0xc>

	*ptr = '\0';
   b775e:	2300      	movs	r3, #0
	str_reverse(buffer);
   b7760:	4620      	mov	r0, r4
	*ptr = '\0';
   b7762:	702b      	strb	r3, [r5, #0]
	str_reverse(buffer);
   b7764:	f7ff ffce 	bl	b7704 <_Z11str_reversePc>
	return buffer;
   b7768:	4620      	mov	r0, r4
}
   b776a:	bd70      	pop	{r4, r5, r6, pc}
		return NULL;
   b776c:	2000      	movs	r0, #0
   b776e:	e7fc      	b.n	b776a <ultoa+0x44>

000b7770 <itoa>:

__attribute__((weak)) char* itoa(int a, char* buffer, int radix){
   b7770:	b538      	push	{r3, r4, r5, lr}
	if(a<0){
   b7772:	1e03      	subs	r3, r0, #0
__attribute__((weak)) char* itoa(int a, char* buffer, int radix){
   b7774:	460c      	mov	r4, r1
   b7776:	4615      	mov	r5, r2
	if(a<0){
   b7778:	da0e      	bge.n	b7798 <itoa+0x28>
		*buffer = '-';
		unsigned v = a==INT_MIN ? ((unsigned)INT_MAX+1) : -a;
   b777a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
		*buffer = '-';
   b777e:	f04f 022d 	mov.w	r2, #45	; 0x2d
		unsigned v = a==INT_MIN ? ((unsigned)INT_MAX+1) : -a;
   b7782:	bf14      	ite	ne
   b7784:	4258      	negne	r0, r3
   b7786:	4618      	moveq	r0, r3
		ultoa((unsigned)v, buffer + 1, radix);
   b7788:	2301      	movs	r3, #1
		*buffer = '-';
   b778a:	700a      	strb	r2, [r1, #0]
		ultoa((unsigned)v, buffer + 1, radix);
   b778c:	462a      	mov	r2, r5
   b778e:	4419      	add	r1, r3
	}else{
		ultoa(a, buffer, radix);
   b7790:	f7ff ffc9 	bl	b7726 <ultoa>
	}
	return buffer;
}
   b7794:	4620      	mov	r0, r4
   b7796:	bd38      	pop	{r3, r4, r5, pc}
		ultoa(a, buffer, radix);
   b7798:	2301      	movs	r3, #1
   b779a:	e7f9      	b.n	b7790 <itoa+0x20>

000b779c <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_>:

void module_user_init_hook()
{
#if HAL_PLATFORM_NEWLIB
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
        _impure_ptr = r;
   b779c:	4b01      	ldr	r3, [pc, #4]	; (b77a4 <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_+0x8>)
   b779e:	6018      	str	r0, [r3, #0]
    }, nullptr);
   b77a0:	4770      	bx	lr
   b77a2:	bf00      	nop
   b77a4:	2003e588 	.word	0x2003e588

000b77a8 <serialEventRun>:
{
   b77a8:	b508      	push	{r3, lr}
    if (serialEvent && Serial.available()>0)
   b77aa:	4b0b      	ldr	r3, [pc, #44]	; (b77d8 <serialEventRun+0x30>)
   b77ac:	b143      	cbz	r3, b77c0 <serialEventRun+0x18>
   b77ae:	f7ff ff45 	bl	b763c <_Z16_fetch_usbserialv>
   b77b2:	6803      	ldr	r3, [r0, #0]
   b77b4:	691b      	ldr	r3, [r3, #16]
   b77b6:	4798      	blx	r3
   b77b8:	2800      	cmp	r0, #0
   b77ba:	dd01      	ble.n	b77c0 <serialEventRun+0x18>
        serialEvent();
   b77bc:	f3af 8000 	nop.w
    if (serialEvent1 && Serial1.available()>0)
   b77c0:	4b06      	ldr	r3, [pc, #24]	; (b77dc <serialEventRun+0x34>)
   b77c2:	b143      	cbz	r3, b77d6 <serialEventRun+0x2e>
   b77c4:	f000 f94a 	bl	b7a5c <_Z22__fetch_global_Serial1v>
   b77c8:	6803      	ldr	r3, [r0, #0]
   b77ca:	691b      	ldr	r3, [r3, #16]
   b77cc:	4798      	blx	r3
   b77ce:	2800      	cmp	r0, #0
   b77d0:	dd01      	ble.n	b77d6 <serialEventRun+0x2e>
        serialEvent1();
   b77d2:	f3af 8000 	nop.w
}
   b77d6:	bd08      	pop	{r3, pc}
	...

000b77e0 <_post_loop>:
{
   b77e0:	b508      	push	{r3, lr}
	serialEventRun();
   b77e2:	f7ff ffe1 	bl	b77a8 <serialEventRun>
		return !thread || !thread->isRunning();
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
   b77e6:	f7fe fd0d 	bl	b6204 <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
   b77ea:	4b01      	ldr	r3, [pc, #4]	; (b77f0 <_post_loop+0x10>)
   b77ec:	6018      	str	r0, [r3, #0]
}
   b77ee:	bd08      	pop	{r3, pc}
   b77f0:	2003e728 	.word	0x2003e728

000b77f4 <_Z33system_initialize_user_backup_ramv>:
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
   b77f4:	4805      	ldr	r0, [pc, #20]	; (b780c <_Z33system_initialize_user_backup_ramv+0x18>)
   b77f6:	4a06      	ldr	r2, [pc, #24]	; (b7810 <_Z33system_initialize_user_backup_ramv+0x1c>)
   b77f8:	4906      	ldr	r1, [pc, #24]	; (b7814 <_Z33system_initialize_user_backup_ramv+0x20>)
{
   b77fa:	b508      	push	{r3, lr}
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
   b77fc:	1a12      	subs	r2, r2, r0
   b77fe:	f000 ff73 	bl	b86e8 <memcpy>
    __backup_sram_signature = signature;
   b7802:	4b05      	ldr	r3, [pc, #20]	; (b7818 <_Z33system_initialize_user_backup_ramv+0x24>)
   b7804:	4a05      	ldr	r2, [pc, #20]	; (b781c <_Z33system_initialize_user_backup_ramv+0x28>)
   b7806:	601a      	str	r2, [r3, #0]
}
   b7808:	bd08      	pop	{r3, pc}
   b780a:	bf00      	nop
   b780c:	2003f400 	.word	0x2003f400
   b7810:	2003f404 	.word	0x2003f404
   b7814:	000b927c 	.word	0x000b927c
   b7818:	2003f400 	.word	0x2003f400
   b781c:	9a271c1e 	.word	0x9a271c1e

000b7820 <_Z27ctrl_request_custom_handlerP12ctrl_request>:
void __attribute((weak)) ctrl_request_custom_handler(ctrl_request* req) {
   b7820:	b507      	push	{r0, r1, r2, lr}
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   b7822:	2300      	movs	r3, #0
   b7824:	9300      	str	r3, [sp, #0]
   b7826:	461a      	mov	r2, r3
   b7828:	f06f 0177 	mvn.w	r1, #119	; 0x77
   b782c:	f7fe fe64 	bl	b64f8 <system_ctrl_set_result>
}
   b7830:	b003      	add	sp, #12
   b7832:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000b7838 <_ZL20ctrl_request_handlerP12ctrl_request>:
static void ctrl_request_handler(ctrl_request* req) {
   b7838:	b507      	push	{r0, r1, r2, lr}
    switch (req->type) {
   b783a:	8843      	ldrh	r3, [r0, #2]
   b783c:	2b0a      	cmp	r3, #10
   b783e:	d008      	beq.n	b7852 <_ZL20ctrl_request_handlerP12ctrl_request+0x1a>
   b7840:	2b50      	cmp	r3, #80	; 0x50
   b7842:	d10b      	bne.n	b785c <_ZL20ctrl_request_handlerP12ctrl_request+0x24>
        if (log_process_ctrl_request_callback) {
   b7844:	4b09      	ldr	r3, [pc, #36]	; (b786c <_ZL20ctrl_request_handlerP12ctrl_request+0x34>)
   b7846:	681b      	ldr	r3, [r3, #0]
   b7848:	b14b      	cbz	r3, b785e <_ZL20ctrl_request_handlerP12ctrl_request+0x26>
}
   b784a:	b003      	add	sp, #12
   b784c:	f85d eb04 	ldr.w	lr, [sp], #4
            log_process_ctrl_request_callback(req);
   b7850:	4718      	bx	r3
        ctrl_request_custom_handler(req);
   b7852:	f7ff ffe5 	bl	b7820 <_Z27ctrl_request_custom_handlerP12ctrl_request>
}
   b7856:	b003      	add	sp, #12
   b7858:	f85d fb04 	ldr.w	pc, [sp], #4
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   b785c:	2300      	movs	r3, #0
   b785e:	9300      	str	r3, [sp, #0]
   b7860:	461a      	mov	r2, r3
   b7862:	f06f 0177 	mvn.w	r1, #119	; 0x77
   b7866:	f7fe fe47 	bl	b64f8 <system_ctrl_set_result>
}
   b786a:	e7f4      	b.n	b7856 <_ZL20ctrl_request_handlerP12ctrl_request+0x1e>
   b786c:	2003e724 	.word	0x2003e724

000b7870 <module_user_init_hook>:
{
   b7870:	b510      	push	{r4, lr}
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
   b7872:	4812      	ldr	r0, [pc, #72]	; (b78bc <module_user_init_hook+0x4c>)
   b7874:	2100      	movs	r1, #0
   b7876:	f7fe fef1 	bl	b665c <newlib_impure_ptr_callback>
#endif // HAL_PLATFORM_NEWLIB

#if HAL_PLATFORM_BACKUP_RAM
    backup_ram_was_valid_ = __backup_sram_signature == signature;
   b787a:	4b11      	ldr	r3, [pc, #68]	; (b78c0 <module_user_init_hook+0x50>)
   b787c:	681a      	ldr	r2, [r3, #0]
   b787e:	4b11      	ldr	r3, [pc, #68]	; (b78c4 <module_user_init_hook+0x54>)
   b7880:	429a      	cmp	r2, r3
   b7882:	4b11      	ldr	r3, [pc, #68]	; (b78c8 <module_user_init_hook+0x58>)
   b7884:	bf0c      	ite	eq
   b7886:	2201      	moveq	r2, #1
   b7888:	2200      	movne	r2, #0
   b788a:	701a      	strb	r2, [r3, #0]
    if (!backup_ram_was_valid_) {
   b788c:	d001      	beq.n	b7892 <module_user_init_hook+0x22>
        system_initialize_user_backup_ram();
   b788e:	f7ff ffb1 	bl	b77f4 <_Z33system_initialize_user_backup_ramv>
    }
#endif

#if HAL_PLATFORM_RNG
    // Initialize the default stdlib PRNG using hardware RNG as a seed
    const uint32_t seed = HAL_RNG_GetRandomNumber();
   b7892:	f7fe fca7 	bl	b61e4 <HAL_RNG_GetRandomNumber>
   b7896:	4604      	mov	r4, r0
    srand(seed);
   b7898:	f000 ff3c 	bl	b8714 <srand>

    // If the user defines random_seed_from_cloud, call it with a seed value
    // generated by a hardware RNG as well.
    if (random_seed_from_cloud) {
   b789c:	4b0b      	ldr	r3, [pc, #44]	; (b78cc <module_user_init_hook+0x5c>)
   b789e:	b113      	cbz	r3, b78a6 <module_user_init_hook+0x36>
        random_seed_from_cloud(seed);
   b78a0:	4620      	mov	r0, r4
   b78a2:	f3af 8000 	nop.w
    }
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);
   b78a6:	2100      	movs	r1, #0
   b78a8:	4808      	ldr	r0, [pc, #32]	; (b78cc <module_user_init_hook+0x5c>)
   b78aa:	f7fe fe3f 	bl	b652c <spark_set_random_seed_from_cloud_handler>

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
}
   b78ae:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
   b78b2:	4807      	ldr	r0, [pc, #28]	; (b78d0 <module_user_init_hook+0x60>)
   b78b4:	2100      	movs	r1, #0
   b78b6:	f7fe be15 	b.w	b64e4 <system_ctrl_set_app_request_handler>
   b78ba:	bf00      	nop
   b78bc:	000b779d 	.word	0x000b779d
   b78c0:	2003f400 	.word	0x2003f400
   b78c4:	9a271c1e 	.word	0x9a271c1e
   b78c8:	2003e720 	.word	0x2003e720
   b78cc:	00000000 	.word	0x00000000
   b78d0:	000b7839 	.word	0x000b7839

000b78d4 <pinAvailable>:
/*
 * @brief Perform safety check on desired pin to see if it's already
 * being used.  Return 0 if used, otherwise return 1 if available.
 */
bool pinAvailable(uint16_t pin) {
  if (pin >= TOTAL_PINS) {
   b78d4:	2823      	cmp	r0, #35	; 0x23
bool pinAvailable(uint16_t pin) {
   b78d6:	b513      	push	{r0, r1, r4, lr}
  if (pin >= TOTAL_PINS) {
   b78d8:	d902      	bls.n	b78e0 <pinAvailable+0xc>
    return false;
   b78da:	2000      	movs	r0, #0
    return false; // 'pin' is used
  }
#endif

  return true; // 'pin' is available
}
   b78dc:	b002      	add	sp, #8
   b78de:	bd10      	pop	{r4, pc}
  if((pin == SCK || pin == MOSI || pin == MISO) && hal_spi_is_enabled(SPI.interface()) == true)
   b78e0:	f1a0 030b 	sub.w	r3, r0, #11
   b78e4:	2b02      	cmp	r3, #2
   b78e6:	d81a      	bhi.n	b791e <pinAvailable+0x4a>

template <hal_spi_interface_t Interface>
class SpiProxy {
public:
    static SPIClass& instance() {
        static SPIClass instance(Interface);
   b78e8:	4c17      	ldr	r4, [pc, #92]	; (b7948 <pinAvailable+0x74>)
   b78ea:	7821      	ldrb	r1, [r4, #0]
   b78ec:	f3bf 8f5b 	dmb	ish
   b78f0:	f011 0101 	ands.w	r1, r1, #1
   b78f4:	d10b      	bne.n	b790e <pinAvailable+0x3a>
   b78f6:	4620      	mov	r0, r4
   b78f8:	9101      	str	r1, [sp, #4]
   b78fa:	f7fc fbdf 	bl	b40bc <__cxa_guard_acquire>
   b78fe:	9901      	ldr	r1, [sp, #4]
   b7900:	b128      	cbz	r0, b790e <pinAvailable+0x3a>
   b7902:	4812      	ldr	r0, [pc, #72]	; (b794c <pinAvailable+0x78>)
   b7904:	f7ff fbd2 	bl	b70ac <_ZN8SPIClassC1E19hal_spi_interface_t>
   b7908:	4620      	mov	r0, r4
   b790a:	f7fc fbdc 	bl	b40c6 <__cxa_guard_release>
   b790e:	4b0f      	ldr	r3, [pc, #60]	; (b794c <pinAvailable+0x78>)
   b7910:	7818      	ldrb	r0, [r3, #0]
   b7912:	f7fe fd1f 	bl	b6354 <hal_spi_is_enabled>
   b7916:	2800      	cmp	r0, #0
   b7918:	d1df      	bne.n	b78da <pinAvailable+0x6>
  return true; // 'pin' is available
   b791a:	2001      	movs	r0, #1
   b791c:	e7de      	b.n	b78dc <pinAvailable+0x8>
  if((pin == SCL || pin == SDA) && hal_i2c_is_enabled(Wire.interface(), nullptr) == true)
   b791e:	2801      	cmp	r0, #1
   b7920:	d809      	bhi.n	b7936 <pinAvailable+0x62>
   b7922:	f000 f85b 	bl	b79dc <_Z19__fetch_global_Wirev>
   b7926:	2100      	movs	r1, #0
   b7928:	7c00      	ldrb	r0, [r0, #16]
   b792a:	f7fe fccb 	bl	b62c4 <hal_i2c_is_enabled>
  if((pin == RX || pin == TX) && hal_usart_is_enabled(Serial1.interface()) == true)
   b792e:	f080 0001 	eor.w	r0, r0, #1
   b7932:	b2c0      	uxtb	r0, r0
   b7934:	e7d2      	b.n	b78dc <pinAvailable+0x8>
   b7936:	3809      	subs	r0, #9
   b7938:	2801      	cmp	r0, #1
   b793a:	d8ee      	bhi.n	b791a <pinAvailable+0x46>
   b793c:	f000 f88e 	bl	b7a5c <_Z22__fetch_global_Serial1v>
   b7940:	7c00      	ldrb	r0, [r0, #16]
   b7942:	f7fe fd57 	bl	b63f4 <hal_usart_is_enabled>
   b7946:	e7f2      	b.n	b792e <pinAvailable+0x5a>
   b7948:	2003e6b8 	.word	0x2003e6b8
   b794c:	2003e6bc 	.word	0x2003e6bc

000b7950 <pinMode>:
  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   b7950:	2823      	cmp	r0, #35	; 0x23
{
   b7952:	b538      	push	{r3, r4, r5, lr}
   b7954:	4604      	mov	r4, r0
   b7956:	460d      	mov	r5, r1
  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   b7958:	d80a      	bhi.n	b7970 <pinMode+0x20>
   b795a:	29ff      	cmp	r1, #255	; 0xff
   b795c:	d008      	beq.n	b7970 <pinMode+0x20>
  if( !pinAvailable(pin) ) {
   b795e:	f7ff ffb9 	bl	b78d4 <pinAvailable>
   b7962:	b128      	cbz	r0, b7970 <pinMode+0x20>
  HAL_Pin_Mode(pin, setMode);
   b7964:	4629      	mov	r1, r5
   b7966:	4620      	mov	r0, r4
}
   b7968:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  HAL_Pin_Mode(pin, setMode);
   b796c:	f7fe bc52 	b.w	b6214 <HAL_Pin_Mode>
}
   b7970:	bd38      	pop	{r3, r4, r5, pc}

000b7972 <digitalWrite>:

/*
 * @brief Sets a GPIO pin to HIGH or LOW.
 */
void digitalWrite(pin_t pin, uint8_t value)
{
   b7972:	b538      	push	{r3, r4, r5, lr}
   b7974:	4604      	mov	r4, r0
   b7976:	460d      	mov	r5, r1
    PinMode mode = HAL_Get_Pin_Mode(pin);
   b7978:	f7fe fc54 	bl	b6224 <HAL_Get_Pin_Mode>
    if (mode==PIN_MODE_NONE || is_input_mode(mode))
   b797c:	28ff      	cmp	r0, #255	; 0xff
   b797e:	d010      	beq.n	b79a2 <digitalWrite+0x30>
            mode == INPUT_PULLDOWN ||
   b7980:	2806      	cmp	r0, #6
   b7982:	d804      	bhi.n	b798e <digitalWrite+0x1c>
   b7984:	234d      	movs	r3, #77	; 0x4d
   b7986:	fa23 f000 	lsr.w	r0, r3, r0
   b798a:	07c3      	lsls	r3, r0, #31
   b798c:	d409      	bmi.n	b79a2 <digitalWrite+0x30>
        return;
  // Safety check
  if( !pinAvailable(pin) ) {
   b798e:	4620      	mov	r0, r4
   b7990:	f7ff ffa0 	bl	b78d4 <pinAvailable>
   b7994:	b128      	cbz	r0, b79a2 <digitalWrite+0x30>
    return;
  }

  HAL_GPIO_Write(pin, value);
   b7996:	4629      	mov	r1, r5
   b7998:	4620      	mov	r0, r4
}
   b799a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  HAL_GPIO_Write(pin, value);
   b799e:	f7fe bc49 	b.w	b6234 <HAL_GPIO_Write>
}
   b79a2:	bd38      	pop	{r3, r4, r5, pc}

000b79a4 <__tcf_0>:
}
#endif

TwoWire& __fetch_global_Wire()
{
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   b79a4:	4770      	bx	lr
	...

000b79a8 <_Z17acquireWireBufferv>:
{
   b79a8:	b538      	push	{r3, r4, r5, lr}
	hal_i2c_config_t config = {
   b79aa:	4b0a      	ldr	r3, [pc, #40]	; (b79d4 <_Z17acquireWireBufferv+0x2c>)
   b79ac:	6003      	str	r3, [r0, #0]
   b79ae:	2301      	movs	r3, #1
{
   b79b0:	4604      	mov	r4, r0
	hal_i2c_config_t config = {
   b79b2:	6143      	str	r3, [r0, #20]
		.rx_buffer = new (std::nothrow) uint8_t[i2c_buffer_size],
   b79b4:	4908      	ldr	r1, [pc, #32]	; (b79d8 <_Z17acquireWireBufferv+0x30>)
   b79b6:	2020      	movs	r0, #32
   b79b8:	f000 f874 	bl	b7aa4 <_ZnajRKSt9nothrow_t>
	};
   b79bc:	2520      	movs	r5, #32
   b79be:	6060      	str	r0, [r4, #4]
		.tx_buffer = new (std::nothrow) uint8_t[i2c_buffer_size],
   b79c0:	4905      	ldr	r1, [pc, #20]	; (b79d8 <_Z17acquireWireBufferv+0x30>)
	};
   b79c2:	60a5      	str	r5, [r4, #8]
		.tx_buffer = new (std::nothrow) uint8_t[i2c_buffer_size],
   b79c4:	4628      	mov	r0, r5
   b79c6:	f000 f86d 	bl	b7aa4 <_ZnajRKSt9nothrow_t>
	};
   b79ca:	e9c4 0503 	strd	r0, r5, [r4, #12]
}
   b79ce:	4620      	mov	r0, r4
   b79d0:	bd38      	pop	{r3, r4, r5, pc}
   b79d2:	bf00      	nop
   b79d4:	00010018 	.word	0x00010018
   b79d8:	000b91b8 	.word	0x000b91b8

000b79dc <_Z19__fetch_global_Wirev>:
{
   b79dc:	b530      	push	{r4, r5, lr}
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   b79de:	4d0e      	ldr	r5, [pc, #56]	; (b7a18 <_Z19__fetch_global_Wirev+0x3c>)
   b79e0:	7829      	ldrb	r1, [r5, #0]
   b79e2:	f3bf 8f5b 	dmb	ish
   b79e6:	f011 0401 	ands.w	r4, r1, #1
{
   b79ea:	b087      	sub	sp, #28
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   b79ec:	d111      	bne.n	b7a12 <_Z19__fetch_global_Wirev+0x36>
   b79ee:	4628      	mov	r0, r5
   b79f0:	f7fc fb64 	bl	b40bc <__cxa_guard_acquire>
   b79f4:	b168      	cbz	r0, b7a12 <_Z19__fetch_global_Wirev+0x36>
   b79f6:	4668      	mov	r0, sp
   b79f8:	f7ff ffd6 	bl	b79a8 <_Z17acquireWireBufferv>
   b79fc:	466a      	mov	r2, sp
   b79fe:	4621      	mov	r1, r4
   b7a00:	4806      	ldr	r0, [pc, #24]	; (b7a1c <_Z19__fetch_global_Wirev+0x40>)
   b7a02:	f7ff f96f 	bl	b6ce4 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>
   b7a06:	4628      	mov	r0, r5
   b7a08:	f7fc fb5d 	bl	b40c6 <__cxa_guard_release>
   b7a0c:	4804      	ldr	r0, [pc, #16]	; (b7a20 <_Z19__fetch_global_Wirev+0x44>)
   b7a0e:	f000 fe65 	bl	b86dc <atexit>
	return wire;
}
   b7a12:	4802      	ldr	r0, [pc, #8]	; (b7a1c <_Z19__fetch_global_Wirev+0x40>)
   b7a14:	b007      	add	sp, #28
   b7a16:	bd30      	pop	{r4, r5, pc}
   b7a18:	2003e72c 	.word	0x2003e72c
   b7a1c:	2003e730 	.word	0x2003e730
   b7a20:	000b79a5 	.word	0x000b79a5

000b7a24 <__tcf_0>:
}
#endif

USARTSerial& __fetch_global_Serial1()
{
    static USARTSerial serial1(HAL_USART_SERIAL1, acquireSerial1Buffer());
   b7a24:	4770      	bx	lr
	...

000b7a28 <_Z20acquireSerial1Bufferv>:
{
   b7a28:	b538      	push	{r3, r4, r5, lr}
   b7a2a:	4604      	mov	r4, r0
    hal_usart_buffer_config_t config = {
   b7a2c:	2514      	movs	r5, #20
   b7a2e:	462a      	mov	r2, r5
   b7a30:	2100      	movs	r1, #0
   b7a32:	f000 fe67 	bl	b8704 <memset>
   b7a36:	8025      	strh	r5, [r4, #0]
   b7a38:	2540      	movs	r5, #64	; 0x40
        .rx_buffer = new (std::nothrow) uint8_t[bufferSize],
   b7a3a:	4907      	ldr	r1, [pc, #28]	; (b7a58 <_Z20acquireSerial1Bufferv+0x30>)
    hal_usart_buffer_config_t config = {
   b7a3c:	8125      	strh	r5, [r4, #8]
        .rx_buffer = new (std::nothrow) uint8_t[bufferSize],
   b7a3e:	4628      	mov	r0, r5
    hal_usart_buffer_config_t config = {
   b7a40:	8225      	strh	r5, [r4, #16]
        .rx_buffer = new (std::nothrow) uint8_t[bufferSize],
   b7a42:	f000 f82f 	bl	b7aa4 <_ZnajRKSt9nothrow_t>
        .tx_buffer = new (std::nothrow) uint8_t[bufferSize],
   b7a46:	4904      	ldr	r1, [pc, #16]	; (b7a58 <_Z20acquireSerial1Bufferv+0x30>)
    };
   b7a48:	6060      	str	r0, [r4, #4]
        .tx_buffer = new (std::nothrow) uint8_t[bufferSize],
   b7a4a:	4628      	mov	r0, r5
   b7a4c:	f000 f82a 	bl	b7aa4 <_ZnajRKSt9nothrow_t>
    };
   b7a50:	60e0      	str	r0, [r4, #12]
}
   b7a52:	4620      	mov	r0, r4
   b7a54:	bd38      	pop	{r3, r4, r5, pc}
   b7a56:	bf00      	nop
   b7a58:	000b91b8 	.word	0x000b91b8

000b7a5c <_Z22__fetch_global_Serial1v>:
{
   b7a5c:	b530      	push	{r4, r5, lr}
    static USARTSerial serial1(HAL_USART_SERIAL1, acquireSerial1Buffer());
   b7a5e:	4d0e      	ldr	r5, [pc, #56]	; (b7a98 <_Z22__fetch_global_Serial1v+0x3c>)
   b7a60:	7829      	ldrb	r1, [r5, #0]
   b7a62:	f3bf 8f5b 	dmb	ish
   b7a66:	f011 0401 	ands.w	r4, r1, #1
{
   b7a6a:	b087      	sub	sp, #28
    static USARTSerial serial1(HAL_USART_SERIAL1, acquireSerial1Buffer());
   b7a6c:	d111      	bne.n	b7a92 <_Z22__fetch_global_Serial1v+0x36>
   b7a6e:	4628      	mov	r0, r5
   b7a70:	f7fc fb24 	bl	b40bc <__cxa_guard_acquire>
   b7a74:	b168      	cbz	r0, b7a92 <_Z22__fetch_global_Serial1v+0x36>
   b7a76:	a801      	add	r0, sp, #4
   b7a78:	f7ff ffd6 	bl	b7a28 <_Z20acquireSerial1Bufferv>
   b7a7c:	aa01      	add	r2, sp, #4
   b7a7e:	4621      	mov	r1, r4
   b7a80:	4806      	ldr	r0, [pc, #24]	; (b7a9c <_Z22__fetch_global_Serial1v+0x40>)
   b7a82:	f7ff fd69 	bl	b7558 <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t>
   b7a86:	4628      	mov	r0, r5
   b7a88:	f7fc fb1d 	bl	b40c6 <__cxa_guard_release>
   b7a8c:	4804      	ldr	r0, [pc, #16]	; (b7aa0 <_Z22__fetch_global_Serial1v+0x44>)
   b7a8e:	f000 fe25 	bl	b86dc <atexit>
    return serial1;
}
   b7a92:	4802      	ldr	r0, [pc, #8]	; (b7a9c <_Z22__fetch_global_Serial1v+0x40>)
   b7a94:	b007      	add	sp, #28
   b7a96:	bd30      	pop	{r4, r5, pc}
   b7a98:	2003e744 	.word	0x2003e744
   b7a9c:	2003e748 	.word	0x2003e748
   b7aa0:	000b7a25 	.word	0x000b7a25

000b7aa4 <_ZnajRKSt9nothrow_t>:
   b7aa4:	f7fc baf9 	b.w	b409a <_Znaj>

000b7aa8 <_ZSt25__throw_bad_function_callv>:
   b7aa8:	b508      	push	{r3, lr}
   b7aaa:	f7fe fdbf 	bl	b662c <abort>
	...

000b7ab0 <__aeabi_drsub>:
   b7ab0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
   b7ab4:	e002      	b.n	b7abc <__adddf3>
   b7ab6:	bf00      	nop

000b7ab8 <__aeabi_dsub>:
   b7ab8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

000b7abc <__adddf3>:
   b7abc:	b530      	push	{r4, r5, lr}
   b7abe:	ea4f 0441 	mov.w	r4, r1, lsl #1
   b7ac2:	ea4f 0543 	mov.w	r5, r3, lsl #1
   b7ac6:	ea94 0f05 	teq	r4, r5
   b7aca:	bf08      	it	eq
   b7acc:	ea90 0f02 	teqeq	r0, r2
   b7ad0:	bf1f      	itttt	ne
   b7ad2:	ea54 0c00 	orrsne.w	ip, r4, r0
   b7ad6:	ea55 0c02 	orrsne.w	ip, r5, r2
   b7ada:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
   b7ade:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   b7ae2:	f000 80e2 	beq.w	b7caa <__adddf3+0x1ee>
   b7ae6:	ea4f 5454 	mov.w	r4, r4, lsr #21
   b7aea:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
   b7aee:	bfb8      	it	lt
   b7af0:	426d      	neglt	r5, r5
   b7af2:	dd0c      	ble.n	b7b0e <__adddf3+0x52>
   b7af4:	442c      	add	r4, r5
   b7af6:	ea80 0202 	eor.w	r2, r0, r2
   b7afa:	ea81 0303 	eor.w	r3, r1, r3
   b7afe:	ea82 0000 	eor.w	r0, r2, r0
   b7b02:	ea83 0101 	eor.w	r1, r3, r1
   b7b06:	ea80 0202 	eor.w	r2, r0, r2
   b7b0a:	ea81 0303 	eor.w	r3, r1, r3
   b7b0e:	2d36      	cmp	r5, #54	; 0x36
   b7b10:	bf88      	it	hi
   b7b12:	bd30      	pophi	{r4, r5, pc}
   b7b14:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   b7b18:	ea4f 3101 	mov.w	r1, r1, lsl #12
   b7b1c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
   b7b20:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
   b7b24:	d002      	beq.n	b7b2c <__adddf3+0x70>
   b7b26:	4240      	negs	r0, r0
   b7b28:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   b7b2c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
   b7b30:	ea4f 3303 	mov.w	r3, r3, lsl #12
   b7b34:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
   b7b38:	d002      	beq.n	b7b40 <__adddf3+0x84>
   b7b3a:	4252      	negs	r2, r2
   b7b3c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   b7b40:	ea94 0f05 	teq	r4, r5
   b7b44:	f000 80a7 	beq.w	b7c96 <__adddf3+0x1da>
   b7b48:	f1a4 0401 	sub.w	r4, r4, #1
   b7b4c:	f1d5 0e20 	rsbs	lr, r5, #32
   b7b50:	db0d      	blt.n	b7b6e <__adddf3+0xb2>
   b7b52:	fa02 fc0e 	lsl.w	ip, r2, lr
   b7b56:	fa22 f205 	lsr.w	r2, r2, r5
   b7b5a:	1880      	adds	r0, r0, r2
   b7b5c:	f141 0100 	adc.w	r1, r1, #0
   b7b60:	fa03 f20e 	lsl.w	r2, r3, lr
   b7b64:	1880      	adds	r0, r0, r2
   b7b66:	fa43 f305 	asr.w	r3, r3, r5
   b7b6a:	4159      	adcs	r1, r3
   b7b6c:	e00e      	b.n	b7b8c <__adddf3+0xd0>
   b7b6e:	f1a5 0520 	sub.w	r5, r5, #32
   b7b72:	f10e 0e20 	add.w	lr, lr, #32
   b7b76:	2a01      	cmp	r2, #1
   b7b78:	fa03 fc0e 	lsl.w	ip, r3, lr
   b7b7c:	bf28      	it	cs
   b7b7e:	f04c 0c02 	orrcs.w	ip, ip, #2
   b7b82:	fa43 f305 	asr.w	r3, r3, r5
   b7b86:	18c0      	adds	r0, r0, r3
   b7b88:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
   b7b8c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   b7b90:	d507      	bpl.n	b7ba2 <__adddf3+0xe6>
   b7b92:	f04f 0e00 	mov.w	lr, #0
   b7b96:	f1dc 0c00 	rsbs	ip, ip, #0
   b7b9a:	eb7e 0000 	sbcs.w	r0, lr, r0
   b7b9e:	eb6e 0101 	sbc.w	r1, lr, r1
   b7ba2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
   b7ba6:	d31b      	bcc.n	b7be0 <__adddf3+0x124>
   b7ba8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
   b7bac:	d30c      	bcc.n	b7bc8 <__adddf3+0x10c>
   b7bae:	0849      	lsrs	r1, r1, #1
   b7bb0:	ea5f 0030 	movs.w	r0, r0, rrx
   b7bb4:	ea4f 0c3c 	mov.w	ip, ip, rrx
   b7bb8:	f104 0401 	add.w	r4, r4, #1
   b7bbc:	ea4f 5244 	mov.w	r2, r4, lsl #21
   b7bc0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
   b7bc4:	f080 809a 	bcs.w	b7cfc <__adddf3+0x240>
   b7bc8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
   b7bcc:	bf08      	it	eq
   b7bce:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   b7bd2:	f150 0000 	adcs.w	r0, r0, #0
   b7bd6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   b7bda:	ea41 0105 	orr.w	r1, r1, r5
   b7bde:	bd30      	pop	{r4, r5, pc}
   b7be0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
   b7be4:	4140      	adcs	r0, r0
   b7be6:	eb41 0101 	adc.w	r1, r1, r1
   b7bea:	3c01      	subs	r4, #1
   b7bec:	bf28      	it	cs
   b7bee:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
   b7bf2:	d2e9      	bcs.n	b7bc8 <__adddf3+0x10c>
   b7bf4:	f091 0f00 	teq	r1, #0
   b7bf8:	bf04      	itt	eq
   b7bfa:	4601      	moveq	r1, r0
   b7bfc:	2000      	moveq	r0, #0
   b7bfe:	fab1 f381 	clz	r3, r1
   b7c02:	bf08      	it	eq
   b7c04:	3320      	addeq	r3, #32
   b7c06:	f1a3 030b 	sub.w	r3, r3, #11
   b7c0a:	f1b3 0220 	subs.w	r2, r3, #32
   b7c0e:	da0c      	bge.n	b7c2a <__adddf3+0x16e>
   b7c10:	320c      	adds	r2, #12
   b7c12:	dd08      	ble.n	b7c26 <__adddf3+0x16a>
   b7c14:	f102 0c14 	add.w	ip, r2, #20
   b7c18:	f1c2 020c 	rsb	r2, r2, #12
   b7c1c:	fa01 f00c 	lsl.w	r0, r1, ip
   b7c20:	fa21 f102 	lsr.w	r1, r1, r2
   b7c24:	e00c      	b.n	b7c40 <__adddf3+0x184>
   b7c26:	f102 0214 	add.w	r2, r2, #20
   b7c2a:	bfd8      	it	le
   b7c2c:	f1c2 0c20 	rsble	ip, r2, #32
   b7c30:	fa01 f102 	lsl.w	r1, r1, r2
   b7c34:	fa20 fc0c 	lsr.w	ip, r0, ip
   b7c38:	bfdc      	itt	le
   b7c3a:	ea41 010c 	orrle.w	r1, r1, ip
   b7c3e:	4090      	lslle	r0, r2
   b7c40:	1ae4      	subs	r4, r4, r3
   b7c42:	bfa2      	ittt	ge
   b7c44:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
   b7c48:	4329      	orrge	r1, r5
   b7c4a:	bd30      	popge	{r4, r5, pc}
   b7c4c:	ea6f 0404 	mvn.w	r4, r4
   b7c50:	3c1f      	subs	r4, #31
   b7c52:	da1c      	bge.n	b7c8e <__adddf3+0x1d2>
   b7c54:	340c      	adds	r4, #12
   b7c56:	dc0e      	bgt.n	b7c76 <__adddf3+0x1ba>
   b7c58:	f104 0414 	add.w	r4, r4, #20
   b7c5c:	f1c4 0220 	rsb	r2, r4, #32
   b7c60:	fa20 f004 	lsr.w	r0, r0, r4
   b7c64:	fa01 f302 	lsl.w	r3, r1, r2
   b7c68:	ea40 0003 	orr.w	r0, r0, r3
   b7c6c:	fa21 f304 	lsr.w	r3, r1, r4
   b7c70:	ea45 0103 	orr.w	r1, r5, r3
   b7c74:	bd30      	pop	{r4, r5, pc}
   b7c76:	f1c4 040c 	rsb	r4, r4, #12
   b7c7a:	f1c4 0220 	rsb	r2, r4, #32
   b7c7e:	fa20 f002 	lsr.w	r0, r0, r2
   b7c82:	fa01 f304 	lsl.w	r3, r1, r4
   b7c86:	ea40 0003 	orr.w	r0, r0, r3
   b7c8a:	4629      	mov	r1, r5
   b7c8c:	bd30      	pop	{r4, r5, pc}
   b7c8e:	fa21 f004 	lsr.w	r0, r1, r4
   b7c92:	4629      	mov	r1, r5
   b7c94:	bd30      	pop	{r4, r5, pc}
   b7c96:	f094 0f00 	teq	r4, #0
   b7c9a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
   b7c9e:	bf06      	itte	eq
   b7ca0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
   b7ca4:	3401      	addeq	r4, #1
   b7ca6:	3d01      	subne	r5, #1
   b7ca8:	e74e      	b.n	b7b48 <__adddf3+0x8c>
   b7caa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   b7cae:	bf18      	it	ne
   b7cb0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   b7cb4:	d029      	beq.n	b7d0a <__adddf3+0x24e>
   b7cb6:	ea94 0f05 	teq	r4, r5
   b7cba:	bf08      	it	eq
   b7cbc:	ea90 0f02 	teqeq	r0, r2
   b7cc0:	d005      	beq.n	b7cce <__adddf3+0x212>
   b7cc2:	ea54 0c00 	orrs.w	ip, r4, r0
   b7cc6:	bf04      	itt	eq
   b7cc8:	4619      	moveq	r1, r3
   b7cca:	4610      	moveq	r0, r2
   b7ccc:	bd30      	pop	{r4, r5, pc}
   b7cce:	ea91 0f03 	teq	r1, r3
   b7cd2:	bf1e      	ittt	ne
   b7cd4:	2100      	movne	r1, #0
   b7cd6:	2000      	movne	r0, #0
   b7cd8:	bd30      	popne	{r4, r5, pc}
   b7cda:	ea5f 5c54 	movs.w	ip, r4, lsr #21
   b7cde:	d105      	bne.n	b7cec <__adddf3+0x230>
   b7ce0:	0040      	lsls	r0, r0, #1
   b7ce2:	4149      	adcs	r1, r1
   b7ce4:	bf28      	it	cs
   b7ce6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
   b7cea:	bd30      	pop	{r4, r5, pc}
   b7cec:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
   b7cf0:	bf3c      	itt	cc
   b7cf2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
   b7cf6:	bd30      	popcc	{r4, r5, pc}
   b7cf8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   b7cfc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
   b7d00:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   b7d04:	f04f 0000 	mov.w	r0, #0
   b7d08:	bd30      	pop	{r4, r5, pc}
   b7d0a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   b7d0e:	bf1a      	itte	ne
   b7d10:	4619      	movne	r1, r3
   b7d12:	4610      	movne	r0, r2
   b7d14:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
   b7d18:	bf1c      	itt	ne
   b7d1a:	460b      	movne	r3, r1
   b7d1c:	4602      	movne	r2, r0
   b7d1e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   b7d22:	bf06      	itte	eq
   b7d24:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
   b7d28:	ea91 0f03 	teqeq	r1, r3
   b7d2c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
   b7d30:	bd30      	pop	{r4, r5, pc}
   b7d32:	bf00      	nop

000b7d34 <__aeabi_ui2d>:
   b7d34:	f090 0f00 	teq	r0, #0
   b7d38:	bf04      	itt	eq
   b7d3a:	2100      	moveq	r1, #0
   b7d3c:	4770      	bxeq	lr
   b7d3e:	b530      	push	{r4, r5, lr}
   b7d40:	f44f 6480 	mov.w	r4, #1024	; 0x400
   b7d44:	f104 0432 	add.w	r4, r4, #50	; 0x32
   b7d48:	f04f 0500 	mov.w	r5, #0
   b7d4c:	f04f 0100 	mov.w	r1, #0
   b7d50:	e750      	b.n	b7bf4 <__adddf3+0x138>
   b7d52:	bf00      	nop

000b7d54 <__aeabi_i2d>:
   b7d54:	f090 0f00 	teq	r0, #0
   b7d58:	bf04      	itt	eq
   b7d5a:	2100      	moveq	r1, #0
   b7d5c:	4770      	bxeq	lr
   b7d5e:	b530      	push	{r4, r5, lr}
   b7d60:	f44f 6480 	mov.w	r4, #1024	; 0x400
   b7d64:	f104 0432 	add.w	r4, r4, #50	; 0x32
   b7d68:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
   b7d6c:	bf48      	it	mi
   b7d6e:	4240      	negmi	r0, r0
   b7d70:	f04f 0100 	mov.w	r1, #0
   b7d74:	e73e      	b.n	b7bf4 <__adddf3+0x138>
   b7d76:	bf00      	nop

000b7d78 <__aeabi_f2d>:
   b7d78:	0042      	lsls	r2, r0, #1
   b7d7a:	ea4f 01e2 	mov.w	r1, r2, asr #3
   b7d7e:	ea4f 0131 	mov.w	r1, r1, rrx
   b7d82:	ea4f 7002 	mov.w	r0, r2, lsl #28
   b7d86:	bf1f      	itttt	ne
   b7d88:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
   b7d8c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
   b7d90:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
   b7d94:	4770      	bxne	lr
   b7d96:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
   b7d9a:	bf08      	it	eq
   b7d9c:	4770      	bxeq	lr
   b7d9e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
   b7da2:	bf04      	itt	eq
   b7da4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
   b7da8:	4770      	bxeq	lr
   b7daa:	b530      	push	{r4, r5, lr}
   b7dac:	f44f 7460 	mov.w	r4, #896	; 0x380
   b7db0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   b7db4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   b7db8:	e71c      	b.n	b7bf4 <__adddf3+0x138>
   b7dba:	bf00      	nop

000b7dbc <__aeabi_ul2d>:
   b7dbc:	ea50 0201 	orrs.w	r2, r0, r1
   b7dc0:	bf08      	it	eq
   b7dc2:	4770      	bxeq	lr
   b7dc4:	b530      	push	{r4, r5, lr}
   b7dc6:	f04f 0500 	mov.w	r5, #0
   b7dca:	e00a      	b.n	b7de2 <__aeabi_l2d+0x16>

000b7dcc <__aeabi_l2d>:
   b7dcc:	ea50 0201 	orrs.w	r2, r0, r1
   b7dd0:	bf08      	it	eq
   b7dd2:	4770      	bxeq	lr
   b7dd4:	b530      	push	{r4, r5, lr}
   b7dd6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
   b7dda:	d502      	bpl.n	b7de2 <__aeabi_l2d+0x16>
   b7ddc:	4240      	negs	r0, r0
   b7dde:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   b7de2:	f44f 6480 	mov.w	r4, #1024	; 0x400
   b7de6:	f104 0432 	add.w	r4, r4, #50	; 0x32
   b7dea:	ea5f 5c91 	movs.w	ip, r1, lsr #22
   b7dee:	f43f aed8 	beq.w	b7ba2 <__adddf3+0xe6>
   b7df2:	f04f 0203 	mov.w	r2, #3
   b7df6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   b7dfa:	bf18      	it	ne
   b7dfc:	3203      	addne	r2, #3
   b7dfe:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   b7e02:	bf18      	it	ne
   b7e04:	3203      	addne	r2, #3
   b7e06:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
   b7e0a:	f1c2 0320 	rsb	r3, r2, #32
   b7e0e:	fa00 fc03 	lsl.w	ip, r0, r3
   b7e12:	fa20 f002 	lsr.w	r0, r0, r2
   b7e16:	fa01 fe03 	lsl.w	lr, r1, r3
   b7e1a:	ea40 000e 	orr.w	r0, r0, lr
   b7e1e:	fa21 f102 	lsr.w	r1, r1, r2
   b7e22:	4414      	add	r4, r2
   b7e24:	e6bd      	b.n	b7ba2 <__adddf3+0xe6>
   b7e26:	bf00      	nop

000b7e28 <__aeabi_dmul>:
   b7e28:	b570      	push	{r4, r5, r6, lr}
   b7e2a:	f04f 0cff 	mov.w	ip, #255	; 0xff
   b7e2e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   b7e32:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   b7e36:	bf1d      	ittte	ne
   b7e38:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   b7e3c:	ea94 0f0c 	teqne	r4, ip
   b7e40:	ea95 0f0c 	teqne	r5, ip
   b7e44:	f000 f8de 	bleq	b8004 <__aeabi_dmul+0x1dc>
   b7e48:	442c      	add	r4, r5
   b7e4a:	ea81 0603 	eor.w	r6, r1, r3
   b7e4e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
   b7e52:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
   b7e56:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
   b7e5a:	bf18      	it	ne
   b7e5c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
   b7e60:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   b7e64:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   b7e68:	d038      	beq.n	b7edc <__aeabi_dmul+0xb4>
   b7e6a:	fba0 ce02 	umull	ip, lr, r0, r2
   b7e6e:	f04f 0500 	mov.w	r5, #0
   b7e72:	fbe1 e502 	umlal	lr, r5, r1, r2
   b7e76:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
   b7e7a:	fbe0 e503 	umlal	lr, r5, r0, r3
   b7e7e:	f04f 0600 	mov.w	r6, #0
   b7e82:	fbe1 5603 	umlal	r5, r6, r1, r3
   b7e86:	f09c 0f00 	teq	ip, #0
   b7e8a:	bf18      	it	ne
   b7e8c:	f04e 0e01 	orrne.w	lr, lr, #1
   b7e90:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
   b7e94:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
   b7e98:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
   b7e9c:	d204      	bcs.n	b7ea8 <__aeabi_dmul+0x80>
   b7e9e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
   b7ea2:	416d      	adcs	r5, r5
   b7ea4:	eb46 0606 	adc.w	r6, r6, r6
   b7ea8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
   b7eac:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
   b7eb0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
   b7eb4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
   b7eb8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
   b7ebc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   b7ec0:	bf88      	it	hi
   b7ec2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   b7ec6:	d81e      	bhi.n	b7f06 <__aeabi_dmul+0xde>
   b7ec8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
   b7ecc:	bf08      	it	eq
   b7ece:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
   b7ed2:	f150 0000 	adcs.w	r0, r0, #0
   b7ed6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   b7eda:	bd70      	pop	{r4, r5, r6, pc}
   b7edc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
   b7ee0:	ea46 0101 	orr.w	r1, r6, r1
   b7ee4:	ea40 0002 	orr.w	r0, r0, r2
   b7ee8:	ea81 0103 	eor.w	r1, r1, r3
   b7eec:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
   b7ef0:	bfc2      	ittt	gt
   b7ef2:	ebd4 050c 	rsbsgt	r5, r4, ip
   b7ef6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   b7efa:	bd70      	popgt	{r4, r5, r6, pc}
   b7efc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   b7f00:	f04f 0e00 	mov.w	lr, #0
   b7f04:	3c01      	subs	r4, #1
   b7f06:	f300 80ab 	bgt.w	b8060 <__aeabi_dmul+0x238>
   b7f0a:	f114 0f36 	cmn.w	r4, #54	; 0x36
   b7f0e:	bfde      	ittt	le
   b7f10:	2000      	movle	r0, #0
   b7f12:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
   b7f16:	bd70      	pople	{r4, r5, r6, pc}
   b7f18:	f1c4 0400 	rsb	r4, r4, #0
   b7f1c:	3c20      	subs	r4, #32
   b7f1e:	da35      	bge.n	b7f8c <__aeabi_dmul+0x164>
   b7f20:	340c      	adds	r4, #12
   b7f22:	dc1b      	bgt.n	b7f5c <__aeabi_dmul+0x134>
   b7f24:	f104 0414 	add.w	r4, r4, #20
   b7f28:	f1c4 0520 	rsb	r5, r4, #32
   b7f2c:	fa00 f305 	lsl.w	r3, r0, r5
   b7f30:	fa20 f004 	lsr.w	r0, r0, r4
   b7f34:	fa01 f205 	lsl.w	r2, r1, r5
   b7f38:	ea40 0002 	orr.w	r0, r0, r2
   b7f3c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
   b7f40:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   b7f44:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   b7f48:	fa21 f604 	lsr.w	r6, r1, r4
   b7f4c:	eb42 0106 	adc.w	r1, r2, r6
   b7f50:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   b7f54:	bf08      	it	eq
   b7f56:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   b7f5a:	bd70      	pop	{r4, r5, r6, pc}
   b7f5c:	f1c4 040c 	rsb	r4, r4, #12
   b7f60:	f1c4 0520 	rsb	r5, r4, #32
   b7f64:	fa00 f304 	lsl.w	r3, r0, r4
   b7f68:	fa20 f005 	lsr.w	r0, r0, r5
   b7f6c:	fa01 f204 	lsl.w	r2, r1, r4
   b7f70:	ea40 0002 	orr.w	r0, r0, r2
   b7f74:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   b7f78:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   b7f7c:	f141 0100 	adc.w	r1, r1, #0
   b7f80:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   b7f84:	bf08      	it	eq
   b7f86:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   b7f8a:	bd70      	pop	{r4, r5, r6, pc}
   b7f8c:	f1c4 0520 	rsb	r5, r4, #32
   b7f90:	fa00 f205 	lsl.w	r2, r0, r5
   b7f94:	ea4e 0e02 	orr.w	lr, lr, r2
   b7f98:	fa20 f304 	lsr.w	r3, r0, r4
   b7f9c:	fa01 f205 	lsl.w	r2, r1, r5
   b7fa0:	ea43 0302 	orr.w	r3, r3, r2
   b7fa4:	fa21 f004 	lsr.w	r0, r1, r4
   b7fa8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   b7fac:	fa21 f204 	lsr.w	r2, r1, r4
   b7fb0:	ea20 0002 	bic.w	r0, r0, r2
   b7fb4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
   b7fb8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   b7fbc:	bf08      	it	eq
   b7fbe:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   b7fc2:	bd70      	pop	{r4, r5, r6, pc}
   b7fc4:	f094 0f00 	teq	r4, #0
   b7fc8:	d10f      	bne.n	b7fea <__aeabi_dmul+0x1c2>
   b7fca:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
   b7fce:	0040      	lsls	r0, r0, #1
   b7fd0:	eb41 0101 	adc.w	r1, r1, r1
   b7fd4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   b7fd8:	bf08      	it	eq
   b7fda:	3c01      	subeq	r4, #1
   b7fdc:	d0f7      	beq.n	b7fce <__aeabi_dmul+0x1a6>
   b7fde:	ea41 0106 	orr.w	r1, r1, r6
   b7fe2:	f095 0f00 	teq	r5, #0
   b7fe6:	bf18      	it	ne
   b7fe8:	4770      	bxne	lr
   b7fea:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
   b7fee:	0052      	lsls	r2, r2, #1
   b7ff0:	eb43 0303 	adc.w	r3, r3, r3
   b7ff4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
   b7ff8:	bf08      	it	eq
   b7ffa:	3d01      	subeq	r5, #1
   b7ffc:	d0f7      	beq.n	b7fee <__aeabi_dmul+0x1c6>
   b7ffe:	ea43 0306 	orr.w	r3, r3, r6
   b8002:	4770      	bx	lr
   b8004:	ea94 0f0c 	teq	r4, ip
   b8008:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   b800c:	bf18      	it	ne
   b800e:	ea95 0f0c 	teqne	r5, ip
   b8012:	d00c      	beq.n	b802e <__aeabi_dmul+0x206>
   b8014:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   b8018:	bf18      	it	ne
   b801a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   b801e:	d1d1      	bne.n	b7fc4 <__aeabi_dmul+0x19c>
   b8020:	ea81 0103 	eor.w	r1, r1, r3
   b8024:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   b8028:	f04f 0000 	mov.w	r0, #0
   b802c:	bd70      	pop	{r4, r5, r6, pc}
   b802e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   b8032:	bf06      	itte	eq
   b8034:	4610      	moveq	r0, r2
   b8036:	4619      	moveq	r1, r3
   b8038:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   b803c:	d019      	beq.n	b8072 <__aeabi_dmul+0x24a>
   b803e:	ea94 0f0c 	teq	r4, ip
   b8042:	d102      	bne.n	b804a <__aeabi_dmul+0x222>
   b8044:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
   b8048:	d113      	bne.n	b8072 <__aeabi_dmul+0x24a>
   b804a:	ea95 0f0c 	teq	r5, ip
   b804e:	d105      	bne.n	b805c <__aeabi_dmul+0x234>
   b8050:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
   b8054:	bf1c      	itt	ne
   b8056:	4610      	movne	r0, r2
   b8058:	4619      	movne	r1, r3
   b805a:	d10a      	bne.n	b8072 <__aeabi_dmul+0x24a>
   b805c:	ea81 0103 	eor.w	r1, r1, r3
   b8060:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   b8064:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   b8068:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   b806c:	f04f 0000 	mov.w	r0, #0
   b8070:	bd70      	pop	{r4, r5, r6, pc}
   b8072:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   b8076:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
   b807a:	bd70      	pop	{r4, r5, r6, pc}

000b807c <__aeabi_ddiv>:
   b807c:	b570      	push	{r4, r5, r6, lr}
   b807e:	f04f 0cff 	mov.w	ip, #255	; 0xff
   b8082:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   b8086:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   b808a:	bf1d      	ittte	ne
   b808c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   b8090:	ea94 0f0c 	teqne	r4, ip
   b8094:	ea95 0f0c 	teqne	r5, ip
   b8098:	f000 f8a7 	bleq	b81ea <__aeabi_ddiv+0x16e>
   b809c:	eba4 0405 	sub.w	r4, r4, r5
   b80a0:	ea81 0e03 	eor.w	lr, r1, r3
   b80a4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   b80a8:	ea4f 3101 	mov.w	r1, r1, lsl #12
   b80ac:	f000 8088 	beq.w	b81c0 <__aeabi_ddiv+0x144>
   b80b0:	ea4f 3303 	mov.w	r3, r3, lsl #12
   b80b4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
   b80b8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
   b80bc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
   b80c0:	ea4f 2202 	mov.w	r2, r2, lsl #8
   b80c4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
   b80c8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
   b80cc:	ea4f 2600 	mov.w	r6, r0, lsl #8
   b80d0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
   b80d4:	429d      	cmp	r5, r3
   b80d6:	bf08      	it	eq
   b80d8:	4296      	cmpeq	r6, r2
   b80da:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
   b80de:	f504 7440 	add.w	r4, r4, #768	; 0x300
   b80e2:	d202      	bcs.n	b80ea <__aeabi_ddiv+0x6e>
   b80e4:	085b      	lsrs	r3, r3, #1
   b80e6:	ea4f 0232 	mov.w	r2, r2, rrx
   b80ea:	1ab6      	subs	r6, r6, r2
   b80ec:	eb65 0503 	sbc.w	r5, r5, r3
   b80f0:	085b      	lsrs	r3, r3, #1
   b80f2:	ea4f 0232 	mov.w	r2, r2, rrx
   b80f6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
   b80fa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
   b80fe:	ebb6 0e02 	subs.w	lr, r6, r2
   b8102:	eb75 0e03 	sbcs.w	lr, r5, r3
   b8106:	bf22      	ittt	cs
   b8108:	1ab6      	subcs	r6, r6, r2
   b810a:	4675      	movcs	r5, lr
   b810c:	ea40 000c 	orrcs.w	r0, r0, ip
   b8110:	085b      	lsrs	r3, r3, #1
   b8112:	ea4f 0232 	mov.w	r2, r2, rrx
   b8116:	ebb6 0e02 	subs.w	lr, r6, r2
   b811a:	eb75 0e03 	sbcs.w	lr, r5, r3
   b811e:	bf22      	ittt	cs
   b8120:	1ab6      	subcs	r6, r6, r2
   b8122:	4675      	movcs	r5, lr
   b8124:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
   b8128:	085b      	lsrs	r3, r3, #1
   b812a:	ea4f 0232 	mov.w	r2, r2, rrx
   b812e:	ebb6 0e02 	subs.w	lr, r6, r2
   b8132:	eb75 0e03 	sbcs.w	lr, r5, r3
   b8136:	bf22      	ittt	cs
   b8138:	1ab6      	subcs	r6, r6, r2
   b813a:	4675      	movcs	r5, lr
   b813c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
   b8140:	085b      	lsrs	r3, r3, #1
   b8142:	ea4f 0232 	mov.w	r2, r2, rrx
   b8146:	ebb6 0e02 	subs.w	lr, r6, r2
   b814a:	eb75 0e03 	sbcs.w	lr, r5, r3
   b814e:	bf22      	ittt	cs
   b8150:	1ab6      	subcs	r6, r6, r2
   b8152:	4675      	movcs	r5, lr
   b8154:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
   b8158:	ea55 0e06 	orrs.w	lr, r5, r6
   b815c:	d018      	beq.n	b8190 <__aeabi_ddiv+0x114>
   b815e:	ea4f 1505 	mov.w	r5, r5, lsl #4
   b8162:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
   b8166:	ea4f 1606 	mov.w	r6, r6, lsl #4
   b816a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
   b816e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
   b8172:	ea4f 02c2 	mov.w	r2, r2, lsl #3
   b8176:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
   b817a:	d1c0      	bne.n	b80fe <__aeabi_ddiv+0x82>
   b817c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   b8180:	d10b      	bne.n	b819a <__aeabi_ddiv+0x11e>
   b8182:	ea41 0100 	orr.w	r1, r1, r0
   b8186:	f04f 0000 	mov.w	r0, #0
   b818a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
   b818e:	e7b6      	b.n	b80fe <__aeabi_ddiv+0x82>
   b8190:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   b8194:	bf04      	itt	eq
   b8196:	4301      	orreq	r1, r0
   b8198:	2000      	moveq	r0, #0
   b819a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   b819e:	bf88      	it	hi
   b81a0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   b81a4:	f63f aeaf 	bhi.w	b7f06 <__aeabi_dmul+0xde>
   b81a8:	ebb5 0c03 	subs.w	ip, r5, r3
   b81ac:	bf04      	itt	eq
   b81ae:	ebb6 0c02 	subseq.w	ip, r6, r2
   b81b2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   b81b6:	f150 0000 	adcs.w	r0, r0, #0
   b81ba:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   b81be:	bd70      	pop	{r4, r5, r6, pc}
   b81c0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
   b81c4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
   b81c8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
   b81cc:	bfc2      	ittt	gt
   b81ce:	ebd4 050c 	rsbsgt	r5, r4, ip
   b81d2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   b81d6:	bd70      	popgt	{r4, r5, r6, pc}
   b81d8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   b81dc:	f04f 0e00 	mov.w	lr, #0
   b81e0:	3c01      	subs	r4, #1
   b81e2:	e690      	b.n	b7f06 <__aeabi_dmul+0xde>
   b81e4:	ea45 0e06 	orr.w	lr, r5, r6
   b81e8:	e68d      	b.n	b7f06 <__aeabi_dmul+0xde>
   b81ea:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   b81ee:	ea94 0f0c 	teq	r4, ip
   b81f2:	bf08      	it	eq
   b81f4:	ea95 0f0c 	teqeq	r5, ip
   b81f8:	f43f af3b 	beq.w	b8072 <__aeabi_dmul+0x24a>
   b81fc:	ea94 0f0c 	teq	r4, ip
   b8200:	d10a      	bne.n	b8218 <__aeabi_ddiv+0x19c>
   b8202:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   b8206:	f47f af34 	bne.w	b8072 <__aeabi_dmul+0x24a>
   b820a:	ea95 0f0c 	teq	r5, ip
   b820e:	f47f af25 	bne.w	b805c <__aeabi_dmul+0x234>
   b8212:	4610      	mov	r0, r2
   b8214:	4619      	mov	r1, r3
   b8216:	e72c      	b.n	b8072 <__aeabi_dmul+0x24a>
   b8218:	ea95 0f0c 	teq	r5, ip
   b821c:	d106      	bne.n	b822c <__aeabi_ddiv+0x1b0>
   b821e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   b8222:	f43f aefd 	beq.w	b8020 <__aeabi_dmul+0x1f8>
   b8226:	4610      	mov	r0, r2
   b8228:	4619      	mov	r1, r3
   b822a:	e722      	b.n	b8072 <__aeabi_dmul+0x24a>
   b822c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   b8230:	bf18      	it	ne
   b8232:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   b8236:	f47f aec5 	bne.w	b7fc4 <__aeabi_dmul+0x19c>
   b823a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
   b823e:	f47f af0d 	bne.w	b805c <__aeabi_dmul+0x234>
   b8242:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
   b8246:	f47f aeeb 	bne.w	b8020 <__aeabi_dmul+0x1f8>
   b824a:	e712      	b.n	b8072 <__aeabi_dmul+0x24a>

000b824c <__gedf2>:
   b824c:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
   b8250:	e006      	b.n	b8260 <__cmpdf2+0x4>
   b8252:	bf00      	nop

000b8254 <__ledf2>:
   b8254:	f04f 0c01 	mov.w	ip, #1
   b8258:	e002      	b.n	b8260 <__cmpdf2+0x4>
   b825a:	bf00      	nop

000b825c <__cmpdf2>:
   b825c:	f04f 0c01 	mov.w	ip, #1
   b8260:	f84d cd04 	str.w	ip, [sp, #-4]!
   b8264:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   b8268:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   b826c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   b8270:	bf18      	it	ne
   b8272:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
   b8276:	d01b      	beq.n	b82b0 <__cmpdf2+0x54>
   b8278:	b001      	add	sp, #4
   b827a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
   b827e:	bf0c      	ite	eq
   b8280:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
   b8284:	ea91 0f03 	teqne	r1, r3
   b8288:	bf02      	ittt	eq
   b828a:	ea90 0f02 	teqeq	r0, r2
   b828e:	2000      	moveq	r0, #0
   b8290:	4770      	bxeq	lr
   b8292:	f110 0f00 	cmn.w	r0, #0
   b8296:	ea91 0f03 	teq	r1, r3
   b829a:	bf58      	it	pl
   b829c:	4299      	cmppl	r1, r3
   b829e:	bf08      	it	eq
   b82a0:	4290      	cmpeq	r0, r2
   b82a2:	bf2c      	ite	cs
   b82a4:	17d8      	asrcs	r0, r3, #31
   b82a6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
   b82aa:	f040 0001 	orr.w	r0, r0, #1
   b82ae:	4770      	bx	lr
   b82b0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   b82b4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   b82b8:	d102      	bne.n	b82c0 <__cmpdf2+0x64>
   b82ba:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
   b82be:	d107      	bne.n	b82d0 <__cmpdf2+0x74>
   b82c0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   b82c4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   b82c8:	d1d6      	bne.n	b8278 <__cmpdf2+0x1c>
   b82ca:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
   b82ce:	d0d3      	beq.n	b8278 <__cmpdf2+0x1c>
   b82d0:	f85d 0b04 	ldr.w	r0, [sp], #4
   b82d4:	4770      	bx	lr
   b82d6:	bf00      	nop

000b82d8 <__aeabi_cdrcmple>:
   b82d8:	4684      	mov	ip, r0
   b82da:	4610      	mov	r0, r2
   b82dc:	4662      	mov	r2, ip
   b82de:	468c      	mov	ip, r1
   b82e0:	4619      	mov	r1, r3
   b82e2:	4663      	mov	r3, ip
   b82e4:	e000      	b.n	b82e8 <__aeabi_cdcmpeq>
   b82e6:	bf00      	nop

000b82e8 <__aeabi_cdcmpeq>:
   b82e8:	b501      	push	{r0, lr}
   b82ea:	f7ff ffb7 	bl	b825c <__cmpdf2>
   b82ee:	2800      	cmp	r0, #0
   b82f0:	bf48      	it	mi
   b82f2:	f110 0f00 	cmnmi.w	r0, #0
   b82f6:	bd01      	pop	{r0, pc}

000b82f8 <__aeabi_dcmpeq>:
   b82f8:	f84d ed08 	str.w	lr, [sp, #-8]!
   b82fc:	f7ff fff4 	bl	b82e8 <__aeabi_cdcmpeq>
   b8300:	bf0c      	ite	eq
   b8302:	2001      	moveq	r0, #1
   b8304:	2000      	movne	r0, #0
   b8306:	f85d fb08 	ldr.w	pc, [sp], #8
   b830a:	bf00      	nop

000b830c <__aeabi_dcmplt>:
   b830c:	f84d ed08 	str.w	lr, [sp, #-8]!
   b8310:	f7ff ffea 	bl	b82e8 <__aeabi_cdcmpeq>
   b8314:	bf34      	ite	cc
   b8316:	2001      	movcc	r0, #1
   b8318:	2000      	movcs	r0, #0
   b831a:	f85d fb08 	ldr.w	pc, [sp], #8
   b831e:	bf00      	nop

000b8320 <__aeabi_dcmple>:
   b8320:	f84d ed08 	str.w	lr, [sp, #-8]!
   b8324:	f7ff ffe0 	bl	b82e8 <__aeabi_cdcmpeq>
   b8328:	bf94      	ite	ls
   b832a:	2001      	movls	r0, #1
   b832c:	2000      	movhi	r0, #0
   b832e:	f85d fb08 	ldr.w	pc, [sp], #8
   b8332:	bf00      	nop

000b8334 <__aeabi_dcmpge>:
   b8334:	f84d ed08 	str.w	lr, [sp, #-8]!
   b8338:	f7ff ffce 	bl	b82d8 <__aeabi_cdrcmple>
   b833c:	bf94      	ite	ls
   b833e:	2001      	movls	r0, #1
   b8340:	2000      	movhi	r0, #0
   b8342:	f85d fb08 	ldr.w	pc, [sp], #8
   b8346:	bf00      	nop

000b8348 <__aeabi_dcmpgt>:
   b8348:	f84d ed08 	str.w	lr, [sp, #-8]!
   b834c:	f7ff ffc4 	bl	b82d8 <__aeabi_cdrcmple>
   b8350:	bf34      	ite	cc
   b8352:	2001      	movcc	r0, #1
   b8354:	2000      	movcs	r0, #0
   b8356:	f85d fb08 	ldr.w	pc, [sp], #8
   b835a:	bf00      	nop

000b835c <__aeabi_d2uiz>:
   b835c:	004a      	lsls	r2, r1, #1
   b835e:	d211      	bcs.n	b8384 <__aeabi_d2uiz+0x28>
   b8360:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
   b8364:	d211      	bcs.n	b838a <__aeabi_d2uiz+0x2e>
   b8366:	d50d      	bpl.n	b8384 <__aeabi_d2uiz+0x28>
   b8368:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
   b836c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
   b8370:	d40e      	bmi.n	b8390 <__aeabi_d2uiz+0x34>
   b8372:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   b8376:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   b837a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
   b837e:	fa23 f002 	lsr.w	r0, r3, r2
   b8382:	4770      	bx	lr
   b8384:	f04f 0000 	mov.w	r0, #0
   b8388:	4770      	bx	lr
   b838a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
   b838e:	d102      	bne.n	b8396 <__aeabi_d2uiz+0x3a>
   b8390:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   b8394:	4770      	bx	lr
   b8396:	f04f 0000 	mov.w	r0, #0
   b839a:	4770      	bx	lr

000b839c <__aeabi_uldivmod>:
   b839c:	b953      	cbnz	r3, b83b4 <__aeabi_uldivmod+0x18>
   b839e:	b94a      	cbnz	r2, b83b4 <__aeabi_uldivmod+0x18>
   b83a0:	2900      	cmp	r1, #0
   b83a2:	bf08      	it	eq
   b83a4:	2800      	cmpeq	r0, #0
   b83a6:	bf1c      	itt	ne
   b83a8:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
   b83ac:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
   b83b0:	f000 b992 	b.w	b86d8 <__aeabi_idiv0>
   b83b4:	f1ad 0c08 	sub.w	ip, sp, #8
   b83b8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
   b83bc:	f000 f824 	bl	b8408 <__udivmoddi4>
   b83c0:	f8dd e004 	ldr.w	lr, [sp, #4]
   b83c4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   b83c8:	b004      	add	sp, #16
   b83ca:	4770      	bx	lr

000b83cc <__aeabi_d2ulz>:
   b83cc:	b5d0      	push	{r4, r6, r7, lr}
   b83ce:	4b0c      	ldr	r3, [pc, #48]	; (b8400 <__aeabi_d2ulz+0x34>)
   b83d0:	2200      	movs	r2, #0
   b83d2:	4606      	mov	r6, r0
   b83d4:	460f      	mov	r7, r1
   b83d6:	f7ff fd27 	bl	b7e28 <__aeabi_dmul>
   b83da:	f7ff ffbf 	bl	b835c <__aeabi_d2uiz>
   b83de:	4604      	mov	r4, r0
   b83e0:	f7ff fca8 	bl	b7d34 <__aeabi_ui2d>
   b83e4:	4b07      	ldr	r3, [pc, #28]	; (b8404 <__aeabi_d2ulz+0x38>)
   b83e6:	2200      	movs	r2, #0
   b83e8:	f7ff fd1e 	bl	b7e28 <__aeabi_dmul>
   b83ec:	4602      	mov	r2, r0
   b83ee:	460b      	mov	r3, r1
   b83f0:	4630      	mov	r0, r6
   b83f2:	4639      	mov	r1, r7
   b83f4:	f7ff fb60 	bl	b7ab8 <__aeabi_dsub>
   b83f8:	f7ff ffb0 	bl	b835c <__aeabi_d2uiz>
   b83fc:	4621      	mov	r1, r4
   b83fe:	bdd0      	pop	{r4, r6, r7, pc}
   b8400:	3df00000 	.word	0x3df00000
   b8404:	41f00000 	.word	0x41f00000

000b8408 <__udivmoddi4>:
   b8408:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   b840c:	9d08      	ldr	r5, [sp, #32]
   b840e:	4604      	mov	r4, r0
   b8410:	468e      	mov	lr, r1
   b8412:	2b00      	cmp	r3, #0
   b8414:	d14d      	bne.n	b84b2 <__udivmoddi4+0xaa>
   b8416:	428a      	cmp	r2, r1
   b8418:	4694      	mov	ip, r2
   b841a:	d969      	bls.n	b84f0 <__udivmoddi4+0xe8>
   b841c:	fab2 f282 	clz	r2, r2
   b8420:	b152      	cbz	r2, b8438 <__udivmoddi4+0x30>
   b8422:	fa01 f302 	lsl.w	r3, r1, r2
   b8426:	f1c2 0120 	rsb	r1, r2, #32
   b842a:	fa20 f101 	lsr.w	r1, r0, r1
   b842e:	fa0c fc02 	lsl.w	ip, ip, r2
   b8432:	ea41 0e03 	orr.w	lr, r1, r3
   b8436:	4094      	lsls	r4, r2
   b8438:	ea4f 481c 	mov.w	r8, ip, lsr #16
   b843c:	0c21      	lsrs	r1, r4, #16
   b843e:	fbbe f6f8 	udiv	r6, lr, r8
   b8442:	fa1f f78c 	uxth.w	r7, ip
   b8446:	fb08 e316 	mls	r3, r8, r6, lr
   b844a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
   b844e:	fb06 f107 	mul.w	r1, r6, r7
   b8452:	4299      	cmp	r1, r3
   b8454:	d90a      	bls.n	b846c <__udivmoddi4+0x64>
   b8456:	eb1c 0303 	adds.w	r3, ip, r3
   b845a:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
   b845e:	f080 811f 	bcs.w	b86a0 <__udivmoddi4+0x298>
   b8462:	4299      	cmp	r1, r3
   b8464:	f240 811c 	bls.w	b86a0 <__udivmoddi4+0x298>
   b8468:	3e02      	subs	r6, #2
   b846a:	4463      	add	r3, ip
   b846c:	1a5b      	subs	r3, r3, r1
   b846e:	b2a4      	uxth	r4, r4
   b8470:	fbb3 f0f8 	udiv	r0, r3, r8
   b8474:	fb08 3310 	mls	r3, r8, r0, r3
   b8478:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
   b847c:	fb00 f707 	mul.w	r7, r0, r7
   b8480:	42a7      	cmp	r7, r4
   b8482:	d90a      	bls.n	b849a <__udivmoddi4+0x92>
   b8484:	eb1c 0404 	adds.w	r4, ip, r4
   b8488:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
   b848c:	f080 810a 	bcs.w	b86a4 <__udivmoddi4+0x29c>
   b8490:	42a7      	cmp	r7, r4
   b8492:	f240 8107 	bls.w	b86a4 <__udivmoddi4+0x29c>
   b8496:	4464      	add	r4, ip
   b8498:	3802      	subs	r0, #2
   b849a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
   b849e:	1be4      	subs	r4, r4, r7
   b84a0:	2600      	movs	r6, #0
   b84a2:	b11d      	cbz	r5, b84ac <__udivmoddi4+0xa4>
   b84a4:	40d4      	lsrs	r4, r2
   b84a6:	2300      	movs	r3, #0
   b84a8:	e9c5 4300 	strd	r4, r3, [r5]
   b84ac:	4631      	mov	r1, r6
   b84ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   b84b2:	428b      	cmp	r3, r1
   b84b4:	d909      	bls.n	b84ca <__udivmoddi4+0xc2>
   b84b6:	2d00      	cmp	r5, #0
   b84b8:	f000 80ef 	beq.w	b869a <__udivmoddi4+0x292>
   b84bc:	2600      	movs	r6, #0
   b84be:	e9c5 0100 	strd	r0, r1, [r5]
   b84c2:	4630      	mov	r0, r6
   b84c4:	4631      	mov	r1, r6
   b84c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   b84ca:	fab3 f683 	clz	r6, r3
   b84ce:	2e00      	cmp	r6, #0
   b84d0:	d14a      	bne.n	b8568 <__udivmoddi4+0x160>
   b84d2:	428b      	cmp	r3, r1
   b84d4:	d302      	bcc.n	b84dc <__udivmoddi4+0xd4>
   b84d6:	4282      	cmp	r2, r0
   b84d8:	f200 80f9 	bhi.w	b86ce <__udivmoddi4+0x2c6>
   b84dc:	1a84      	subs	r4, r0, r2
   b84de:	eb61 0303 	sbc.w	r3, r1, r3
   b84e2:	2001      	movs	r0, #1
   b84e4:	469e      	mov	lr, r3
   b84e6:	2d00      	cmp	r5, #0
   b84e8:	d0e0      	beq.n	b84ac <__udivmoddi4+0xa4>
   b84ea:	e9c5 4e00 	strd	r4, lr, [r5]
   b84ee:	e7dd      	b.n	b84ac <__udivmoddi4+0xa4>
   b84f0:	b902      	cbnz	r2, b84f4 <__udivmoddi4+0xec>
   b84f2:	deff      	udf	#255	; 0xff
   b84f4:	fab2 f282 	clz	r2, r2
   b84f8:	2a00      	cmp	r2, #0
   b84fa:	f040 8092 	bne.w	b8622 <__udivmoddi4+0x21a>
   b84fe:	eba1 010c 	sub.w	r1, r1, ip
   b8502:	ea4f 471c 	mov.w	r7, ip, lsr #16
   b8506:	fa1f fe8c 	uxth.w	lr, ip
   b850a:	2601      	movs	r6, #1
   b850c:	0c20      	lsrs	r0, r4, #16
   b850e:	fbb1 f3f7 	udiv	r3, r1, r7
   b8512:	fb07 1113 	mls	r1, r7, r3, r1
   b8516:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
   b851a:	fb0e f003 	mul.w	r0, lr, r3
   b851e:	4288      	cmp	r0, r1
   b8520:	d908      	bls.n	b8534 <__udivmoddi4+0x12c>
   b8522:	eb1c 0101 	adds.w	r1, ip, r1
   b8526:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
   b852a:	d202      	bcs.n	b8532 <__udivmoddi4+0x12a>
   b852c:	4288      	cmp	r0, r1
   b852e:	f200 80cb 	bhi.w	b86c8 <__udivmoddi4+0x2c0>
   b8532:	4643      	mov	r3, r8
   b8534:	1a09      	subs	r1, r1, r0
   b8536:	b2a4      	uxth	r4, r4
   b8538:	fbb1 f0f7 	udiv	r0, r1, r7
   b853c:	fb07 1110 	mls	r1, r7, r0, r1
   b8540:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
   b8544:	fb0e fe00 	mul.w	lr, lr, r0
   b8548:	45a6      	cmp	lr, r4
   b854a:	d908      	bls.n	b855e <__udivmoddi4+0x156>
   b854c:	eb1c 0404 	adds.w	r4, ip, r4
   b8550:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
   b8554:	d202      	bcs.n	b855c <__udivmoddi4+0x154>
   b8556:	45a6      	cmp	lr, r4
   b8558:	f200 80bb 	bhi.w	b86d2 <__udivmoddi4+0x2ca>
   b855c:	4608      	mov	r0, r1
   b855e:	eba4 040e 	sub.w	r4, r4, lr
   b8562:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
   b8566:	e79c      	b.n	b84a2 <__udivmoddi4+0x9a>
   b8568:	f1c6 0720 	rsb	r7, r6, #32
   b856c:	40b3      	lsls	r3, r6
   b856e:	fa22 fc07 	lsr.w	ip, r2, r7
   b8572:	ea4c 0c03 	orr.w	ip, ip, r3
   b8576:	fa20 f407 	lsr.w	r4, r0, r7
   b857a:	fa01 f306 	lsl.w	r3, r1, r6
   b857e:	431c      	orrs	r4, r3
   b8580:	40f9      	lsrs	r1, r7
   b8582:	ea4f 491c 	mov.w	r9, ip, lsr #16
   b8586:	fa00 f306 	lsl.w	r3, r0, r6
   b858a:	fbb1 f8f9 	udiv	r8, r1, r9
   b858e:	0c20      	lsrs	r0, r4, #16
   b8590:	fa1f fe8c 	uxth.w	lr, ip
   b8594:	fb09 1118 	mls	r1, r9, r8, r1
   b8598:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
   b859c:	fb08 f00e 	mul.w	r0, r8, lr
   b85a0:	4288      	cmp	r0, r1
   b85a2:	fa02 f206 	lsl.w	r2, r2, r6
   b85a6:	d90b      	bls.n	b85c0 <__udivmoddi4+0x1b8>
   b85a8:	eb1c 0101 	adds.w	r1, ip, r1
   b85ac:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
   b85b0:	f080 8088 	bcs.w	b86c4 <__udivmoddi4+0x2bc>
   b85b4:	4288      	cmp	r0, r1
   b85b6:	f240 8085 	bls.w	b86c4 <__udivmoddi4+0x2bc>
   b85ba:	f1a8 0802 	sub.w	r8, r8, #2
   b85be:	4461      	add	r1, ip
   b85c0:	1a09      	subs	r1, r1, r0
   b85c2:	b2a4      	uxth	r4, r4
   b85c4:	fbb1 f0f9 	udiv	r0, r1, r9
   b85c8:	fb09 1110 	mls	r1, r9, r0, r1
   b85cc:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
   b85d0:	fb00 fe0e 	mul.w	lr, r0, lr
   b85d4:	458e      	cmp	lr, r1
   b85d6:	d908      	bls.n	b85ea <__udivmoddi4+0x1e2>
   b85d8:	eb1c 0101 	adds.w	r1, ip, r1
   b85dc:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
   b85e0:	d26c      	bcs.n	b86bc <__udivmoddi4+0x2b4>
   b85e2:	458e      	cmp	lr, r1
   b85e4:	d96a      	bls.n	b86bc <__udivmoddi4+0x2b4>
   b85e6:	3802      	subs	r0, #2
   b85e8:	4461      	add	r1, ip
   b85ea:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
   b85ee:	fba0 9402 	umull	r9, r4, r0, r2
   b85f2:	eba1 010e 	sub.w	r1, r1, lr
   b85f6:	42a1      	cmp	r1, r4
   b85f8:	46c8      	mov	r8, r9
   b85fa:	46a6      	mov	lr, r4
   b85fc:	d356      	bcc.n	b86ac <__udivmoddi4+0x2a4>
   b85fe:	d053      	beq.n	b86a8 <__udivmoddi4+0x2a0>
   b8600:	b15d      	cbz	r5, b861a <__udivmoddi4+0x212>
   b8602:	ebb3 0208 	subs.w	r2, r3, r8
   b8606:	eb61 010e 	sbc.w	r1, r1, lr
   b860a:	fa01 f707 	lsl.w	r7, r1, r7
   b860e:	fa22 f306 	lsr.w	r3, r2, r6
   b8612:	40f1      	lsrs	r1, r6
   b8614:	431f      	orrs	r7, r3
   b8616:	e9c5 7100 	strd	r7, r1, [r5]
   b861a:	2600      	movs	r6, #0
   b861c:	4631      	mov	r1, r6
   b861e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   b8622:	f1c2 0320 	rsb	r3, r2, #32
   b8626:	40d8      	lsrs	r0, r3
   b8628:	fa0c fc02 	lsl.w	ip, ip, r2
   b862c:	fa21 f303 	lsr.w	r3, r1, r3
   b8630:	4091      	lsls	r1, r2
   b8632:	4301      	orrs	r1, r0
   b8634:	ea4f 471c 	mov.w	r7, ip, lsr #16
   b8638:	fa1f fe8c 	uxth.w	lr, ip
   b863c:	fbb3 f0f7 	udiv	r0, r3, r7
   b8640:	fb07 3610 	mls	r6, r7, r0, r3
   b8644:	0c0b      	lsrs	r3, r1, #16
   b8646:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
   b864a:	fb00 f60e 	mul.w	r6, r0, lr
   b864e:	429e      	cmp	r6, r3
   b8650:	fa04 f402 	lsl.w	r4, r4, r2
   b8654:	d908      	bls.n	b8668 <__udivmoddi4+0x260>
   b8656:	eb1c 0303 	adds.w	r3, ip, r3
   b865a:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
   b865e:	d22f      	bcs.n	b86c0 <__udivmoddi4+0x2b8>
   b8660:	429e      	cmp	r6, r3
   b8662:	d92d      	bls.n	b86c0 <__udivmoddi4+0x2b8>
   b8664:	3802      	subs	r0, #2
   b8666:	4463      	add	r3, ip
   b8668:	1b9b      	subs	r3, r3, r6
   b866a:	b289      	uxth	r1, r1
   b866c:	fbb3 f6f7 	udiv	r6, r3, r7
   b8670:	fb07 3316 	mls	r3, r7, r6, r3
   b8674:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
   b8678:	fb06 f30e 	mul.w	r3, r6, lr
   b867c:	428b      	cmp	r3, r1
   b867e:	d908      	bls.n	b8692 <__udivmoddi4+0x28a>
   b8680:	eb1c 0101 	adds.w	r1, ip, r1
   b8684:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
   b8688:	d216      	bcs.n	b86b8 <__udivmoddi4+0x2b0>
   b868a:	428b      	cmp	r3, r1
   b868c:	d914      	bls.n	b86b8 <__udivmoddi4+0x2b0>
   b868e:	3e02      	subs	r6, #2
   b8690:	4461      	add	r1, ip
   b8692:	1ac9      	subs	r1, r1, r3
   b8694:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
   b8698:	e738      	b.n	b850c <__udivmoddi4+0x104>
   b869a:	462e      	mov	r6, r5
   b869c:	4628      	mov	r0, r5
   b869e:	e705      	b.n	b84ac <__udivmoddi4+0xa4>
   b86a0:	4606      	mov	r6, r0
   b86a2:	e6e3      	b.n	b846c <__udivmoddi4+0x64>
   b86a4:	4618      	mov	r0, r3
   b86a6:	e6f8      	b.n	b849a <__udivmoddi4+0x92>
   b86a8:	454b      	cmp	r3, r9
   b86aa:	d2a9      	bcs.n	b8600 <__udivmoddi4+0x1f8>
   b86ac:	ebb9 0802 	subs.w	r8, r9, r2
   b86b0:	eb64 0e0c 	sbc.w	lr, r4, ip
   b86b4:	3801      	subs	r0, #1
   b86b6:	e7a3      	b.n	b8600 <__udivmoddi4+0x1f8>
   b86b8:	4646      	mov	r6, r8
   b86ba:	e7ea      	b.n	b8692 <__udivmoddi4+0x28a>
   b86bc:	4620      	mov	r0, r4
   b86be:	e794      	b.n	b85ea <__udivmoddi4+0x1e2>
   b86c0:	4640      	mov	r0, r8
   b86c2:	e7d1      	b.n	b8668 <__udivmoddi4+0x260>
   b86c4:	46d0      	mov	r8, sl
   b86c6:	e77b      	b.n	b85c0 <__udivmoddi4+0x1b8>
   b86c8:	3b02      	subs	r3, #2
   b86ca:	4461      	add	r1, ip
   b86cc:	e732      	b.n	b8534 <__udivmoddi4+0x12c>
   b86ce:	4630      	mov	r0, r6
   b86d0:	e709      	b.n	b84e6 <__udivmoddi4+0xde>
   b86d2:	4464      	add	r4, ip
   b86d4:	3802      	subs	r0, #2
   b86d6:	e742      	b.n	b855e <__udivmoddi4+0x156>

000b86d8 <__aeabi_idiv0>:
   b86d8:	4770      	bx	lr
   b86da:	bf00      	nop

000b86dc <atexit>:
   b86dc:	2300      	movs	r3, #0
   b86de:	4601      	mov	r1, r0
   b86e0:	461a      	mov	r2, r3
   b86e2:	4618      	mov	r0, r3
   b86e4:	f000 b872 	b.w	b87cc <__register_exitproc>

000b86e8 <memcpy>:
   b86e8:	440a      	add	r2, r1
   b86ea:	4291      	cmp	r1, r2
   b86ec:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
   b86f0:	d100      	bne.n	b86f4 <memcpy+0xc>
   b86f2:	4770      	bx	lr
   b86f4:	b510      	push	{r4, lr}
   b86f6:	f811 4b01 	ldrb.w	r4, [r1], #1
   b86fa:	f803 4f01 	strb.w	r4, [r3, #1]!
   b86fe:	4291      	cmp	r1, r2
   b8700:	d1f9      	bne.n	b86f6 <memcpy+0xe>
   b8702:	bd10      	pop	{r4, pc}

000b8704 <memset>:
   b8704:	4402      	add	r2, r0
   b8706:	4603      	mov	r3, r0
   b8708:	4293      	cmp	r3, r2
   b870a:	d100      	bne.n	b870e <memset+0xa>
   b870c:	4770      	bx	lr
   b870e:	f803 1b01 	strb.w	r1, [r3], #1
   b8712:	e7f9      	b.n	b8708 <memset+0x4>

000b8714 <srand>:
   b8714:	b538      	push	{r3, r4, r5, lr}
   b8716:	4b10      	ldr	r3, [pc, #64]	; (b8758 <srand+0x44>)
   b8718:	681d      	ldr	r5, [r3, #0]
   b871a:	6bab      	ldr	r3, [r5, #56]	; 0x38
   b871c:	4604      	mov	r4, r0
   b871e:	b9b3      	cbnz	r3, b874e <srand+0x3a>
   b8720:	2018      	movs	r0, #24
   b8722:	f7fd ff6b 	bl	b65fc <malloc>
   b8726:	4602      	mov	r2, r0
   b8728:	63a8      	str	r0, [r5, #56]	; 0x38
   b872a:	b920      	cbnz	r0, b8736 <srand+0x22>
   b872c:	4b0b      	ldr	r3, [pc, #44]	; (b875c <srand+0x48>)
   b872e:	480c      	ldr	r0, [pc, #48]	; (b8760 <srand+0x4c>)
   b8730:	2142      	movs	r1, #66	; 0x42
   b8732:	f7fd ff8b 	bl	b664c <__assert_func>
   b8736:	490b      	ldr	r1, [pc, #44]	; (b8764 <srand+0x50>)
   b8738:	4b0b      	ldr	r3, [pc, #44]	; (b8768 <srand+0x54>)
   b873a:	e9c0 1300 	strd	r1, r3, [r0]
   b873e:	4b0b      	ldr	r3, [pc, #44]	; (b876c <srand+0x58>)
   b8740:	6083      	str	r3, [r0, #8]
   b8742:	230b      	movs	r3, #11
   b8744:	8183      	strh	r3, [r0, #12]
   b8746:	2100      	movs	r1, #0
   b8748:	2001      	movs	r0, #1
   b874a:	e9c2 0104 	strd	r0, r1, [r2, #16]
   b874e:	6bab      	ldr	r3, [r5, #56]	; 0x38
   b8750:	2200      	movs	r2, #0
   b8752:	611c      	str	r4, [r3, #16]
   b8754:	615a      	str	r2, [r3, #20]
   b8756:	bd38      	pop	{r3, r4, r5, pc}
   b8758:	2003e588 	.word	0x2003e588
   b875c:	000b91b9 	.word	0x000b91b9
   b8760:	000b91d0 	.word	0x000b91d0
   b8764:	abcd330e 	.word	0xabcd330e
   b8768:	e66d1234 	.word	0xe66d1234
   b876c:	0005deec 	.word	0x0005deec

000b8770 <strcpy>:
   b8770:	4603      	mov	r3, r0
   b8772:	f811 2b01 	ldrb.w	r2, [r1], #1
   b8776:	f803 2b01 	strb.w	r2, [r3], #1
   b877a:	2a00      	cmp	r2, #0
   b877c:	d1f9      	bne.n	b8772 <strcpy+0x2>
   b877e:	4770      	bx	lr

000b8780 <strdup>:
   b8780:	4b02      	ldr	r3, [pc, #8]	; (b878c <strdup+0xc>)
   b8782:	4601      	mov	r1, r0
   b8784:	6818      	ldr	r0, [r3, #0]
   b8786:	f000 b803 	b.w	b8790 <_strdup_r>
   b878a:	bf00      	nop
   b878c:	2003e588 	.word	0x2003e588

000b8790 <_strdup_r>:
   b8790:	b537      	push	{r0, r1, r2, r4, r5, lr}
   b8792:	4604      	mov	r4, r0
   b8794:	4608      	mov	r0, r1
   b8796:	460d      	mov	r5, r1
   b8798:	f000 f80f 	bl	b87ba <strlen>
   b879c:	1c42      	adds	r2, r0, #1
   b879e:	4611      	mov	r1, r2
   b87a0:	4620      	mov	r0, r4
   b87a2:	9201      	str	r2, [sp, #4]
   b87a4:	f7fd ff4a 	bl	b663c <_malloc_r>
   b87a8:	4604      	mov	r4, r0
   b87aa:	b118      	cbz	r0, b87b4 <_strdup_r+0x24>
   b87ac:	9a01      	ldr	r2, [sp, #4]
   b87ae:	4629      	mov	r1, r5
   b87b0:	f7ff ff9a 	bl	b86e8 <memcpy>
   b87b4:	4620      	mov	r0, r4
   b87b6:	b003      	add	sp, #12
   b87b8:	bd30      	pop	{r4, r5, pc}

000b87ba <strlen>:
   b87ba:	4603      	mov	r3, r0
   b87bc:	f813 2b01 	ldrb.w	r2, [r3], #1
   b87c0:	2a00      	cmp	r2, #0
   b87c2:	d1fb      	bne.n	b87bc <strlen+0x2>
   b87c4:	1a18      	subs	r0, r3, r0
   b87c6:	3801      	subs	r0, #1
   b87c8:	4770      	bx	lr
	...

000b87cc <__register_exitproc>:
   b87cc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   b87d0:	f8df 80b8 	ldr.w	r8, [pc, #184]	; b888c <__register_exitproc+0xc0>
   b87d4:	4606      	mov	r6, r0
   b87d6:	f8d8 0000 	ldr.w	r0, [r8]
   b87da:	461f      	mov	r7, r3
   b87dc:	460d      	mov	r5, r1
   b87de:	4691      	mov	r9, r2
   b87e0:	f000 f856 	bl	b8890 <__retarget_lock_acquire_recursive>
   b87e4:	4b25      	ldr	r3, [pc, #148]	; (b887c <__register_exitproc+0xb0>)
   b87e6:	681c      	ldr	r4, [r3, #0]
   b87e8:	b934      	cbnz	r4, b87f8 <__register_exitproc+0x2c>
   b87ea:	4c25      	ldr	r4, [pc, #148]	; (b8880 <__register_exitproc+0xb4>)
   b87ec:	601c      	str	r4, [r3, #0]
   b87ee:	4b25      	ldr	r3, [pc, #148]	; (b8884 <__register_exitproc+0xb8>)
   b87f0:	b113      	cbz	r3, b87f8 <__register_exitproc+0x2c>
   b87f2:	681b      	ldr	r3, [r3, #0]
   b87f4:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
   b87f8:	6863      	ldr	r3, [r4, #4]
   b87fa:	2b1f      	cmp	r3, #31
   b87fc:	dd07      	ble.n	b880e <__register_exitproc+0x42>
   b87fe:	f8d8 0000 	ldr.w	r0, [r8]
   b8802:	f000 f847 	bl	b8894 <__retarget_lock_release_recursive>
   b8806:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   b880a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   b880e:	b34e      	cbz	r6, b8864 <__register_exitproc+0x98>
   b8810:	f8d4 0088 	ldr.w	r0, [r4, #136]	; 0x88
   b8814:	b988      	cbnz	r0, b883a <__register_exitproc+0x6e>
   b8816:	4b1c      	ldr	r3, [pc, #112]	; (b8888 <__register_exitproc+0xbc>)
   b8818:	b923      	cbnz	r3, b8824 <__register_exitproc+0x58>
   b881a:	f8d8 0000 	ldr.w	r0, [r8]
   b881e:	f000 f838 	bl	b8892 <__retarget_lock_release>
   b8822:	e7f0      	b.n	b8806 <__register_exitproc+0x3a>
   b8824:	f44f 7084 	mov.w	r0, #264	; 0x108
   b8828:	f7fd fee8 	bl	b65fc <malloc>
   b882c:	2800      	cmp	r0, #0
   b882e:	d0f4      	beq.n	b881a <__register_exitproc+0x4e>
   b8830:	2300      	movs	r3, #0
   b8832:	e9c0 3340 	strd	r3, r3, [r0, #256]	; 0x100
   b8836:	f8c4 0088 	str.w	r0, [r4, #136]	; 0x88
   b883a:	6863      	ldr	r3, [r4, #4]
   b883c:	f840 9023 	str.w	r9, [r0, r3, lsl #2]
   b8840:	2201      	movs	r2, #1
   b8842:	409a      	lsls	r2, r3
   b8844:	eb00 0183 	add.w	r1, r0, r3, lsl #2
   b8848:	f8d0 3100 	ldr.w	r3, [r0, #256]	; 0x100
   b884c:	4313      	orrs	r3, r2
   b884e:	f8c0 3100 	str.w	r3, [r0, #256]	; 0x100
   b8852:	2e02      	cmp	r6, #2
   b8854:	f8c1 7080 	str.w	r7, [r1, #128]	; 0x80
   b8858:	bf02      	ittt	eq
   b885a:	f8d0 3104 	ldreq.w	r3, [r0, #260]	; 0x104
   b885e:	4313      	orreq	r3, r2
   b8860:	f8c0 3104 	streq.w	r3, [r0, #260]	; 0x104
   b8864:	6863      	ldr	r3, [r4, #4]
   b8866:	f8d8 0000 	ldr.w	r0, [r8]
   b886a:	1c5a      	adds	r2, r3, #1
   b886c:	3302      	adds	r3, #2
   b886e:	6062      	str	r2, [r4, #4]
   b8870:	f844 5023 	str.w	r5, [r4, r3, lsl #2]
   b8874:	f000 f80e 	bl	b8894 <__retarget_lock_release_recursive>
   b8878:	2000      	movs	r0, #0
   b887a:	e7c6      	b.n	b880a <__register_exitproc+0x3e>
   b887c:	2003e7e8 	.word	0x2003e7e8
   b8880:	2003e75c 	.word	0x2003e75c
   b8884:	00000000 	.word	0x00000000
   b8888:	000b65fd 	.word	0x000b65fd
   b888c:	2003e5ec 	.word	0x2003e5ec

000b8890 <__retarget_lock_acquire_recursive>:
   b8890:	4770      	bx	lr

000b8892 <__retarget_lock_release>:
   b8892:	4770      	bx	lr

000b8894 <__retarget_lock_release_recursive>:
   b8894:	4770      	bx	lr

000b8896 <link_code_end>:
	...

000b8898 <dynalib_user>:
   b8898:	4021 000b 405d 000b 4085 000b 4089 000b     !@..]@...@...@..
   b88a8:	0000 0000 6143 6c6c 6f20 206e 7570 6572     ....Call on pure
   b88b8:	7620 7269 7574 6c61 2000 2026 5a00 6e6f      virtual. & .Zon
   b88c8:	7365 435f 203a 4300 756f 746e 7265 6920     es_C: .Counter i
   b88d8:	2073 6e6f 696c 656e 4900 6120 206d 6572     s online.I am re
   b88e8:	6461 0079 0030 6f43 6e75 6574 3a72 0020     ady.0.Counter: .
   b88f8:	6e45 7274 2079 4500 6978 2074                Entry .Exit .

000b8905 <_ZL4font>:
   b8905:	0000 0000 3e00 4f5b 3e5b 6b3e 6b4f 1c3e     .....>[O[>>kOk>.
   b8915:	7c3e 1c3e 3c18 3c7e 1c18 7d57 1c57 5e1c     >|>..<~<..W}W..^
   b8925:	5e7f 001c 3c18 0018 e7ff e7c3 00ff 2418     .^...<.........$
   b8935:	0018 e7ff e7db 30ff 3a48 0e06 2926 2979     .......0H:..&)y)
   b8945:	4026 057f 0705 7f40 2505 5a3f e73c 5a3c     &@....@..%?Z<.<Z
   b8955:	3e7f 1c1c 0808 1c1c 7f3e 2214 227f 5f14     .>......>.."."._
   b8965:	005f 5f5f 0906 017f 007f 8966 6a95 6060     _.__......f..j``
   b8975:	6060 9460 ffa2 94a2 0408 047e 1008 7e20     ```.......~... ~
   b8985:	1020 0808 1c2a 0808 2a1c 0808 101e 1010      ...*....*......
   b8995:	0c10 0c1e 0c1e 3830 383e 0630 3e0e 060e     ......08>80..>..
   b89a5:	0000 0000 0000 5f00 0000 0700 0700 1400     ......._........
   b89b5:	147f 147f 2a24 2a7f 2312 0813 6264 4936     ....$*.*.#..db6I
   b89c5:	2056 0050 0708 0003 1c00 4122 0000 2241     V P......."A..A"
   b89d5:	001c 1c2a 1c7f 082a 3e08 0808 8000 3070     ..*...*..>....p0
   b89e5:	0800 0808 0808 0000 6060 2000 0810 0204     ........``. ....
   b89f5:	513e 4549 003e 7f42 0040 4972 4949 2146     >QIE>.B.@.rIIIF!
   b8a05:	4941 334d 1418 7f12 2710 4545 3945 4a3c     AIM3.....'EEE9<J
   b8a15:	4949 4131 1121 0709 4936 4949 4636 4949     II1A!...6III6FII
   b8a25:	1e29 0000 0014 0000 3440 0000 0800 2214     ).......@4....."
   b8a35:	1441 1414 1414 4100 1422 0208 5901 0609     A......A"....Y..
   b8a45:	413e 595d 7c4e 1112 7c12 497f 4949 3e36     >A]YN|...|.III6>
   b8a55:	4141 2241 417f 4141 7f3e 4949 4149 097f     AAA".AAA>.IIIA..
   b8a65:	0909 3e01 4141 7351 087f 0808 007f 7f41     ...>AAQs......A.
   b8a75:	0041 4020 3f41 7f01 1408 4122 407f 4040     A. @A?...."A.@@@
   b8a85:	7f40 1c02 7f02 047f 1008 3e7f 4141 3e41     @..........>AAA>
   b8a95:	097f 0909 3e06 5141 5e21 097f 2919 2646     .....>AQ!^...)F&
   b8aa5:	4949 3249 0103 017f 3f03 4040 3f40 201f     III2.....?@@@?. 
   b8ab5:	2040 3f1f 3840 3f40 1463 1408 0363 7804     @ .?@8@?c...c..x
   b8ac5:	0304 5961 4d49 0043 417f 4141 0402 1008     ..aYIMC..AAA....
   b8ad5:	0020 4141 7f41 0204 0201 4004 4040 4040      .AAA......@@@@@
   b8ae5:	0300 0807 2000 5454 4078 287f 4444 3838     ..... TTx@.(DD88
   b8af5:	4444 2844 4438 2844 387f 5454 1854 0800     DDD(8DD(.8TTT...
   b8b05:	097e 1802 a4a4 789c 087f 0404 0078 7d44     ~......x....x.D}
   b8b15:	0040 4020 3d40 7f00 2810 0044 4100 407f     @. @@=...(D..A.@
   b8b25:	7c00 7804 7804 087c 0404 3878 4444 3844     .|.x.x|...x8DDD8
   b8b35:	18fc 2424 1818 2424 fc18 087c 0404 4808     ..$$..$$..|....H
   b8b45:	5454 2454 0404 443f 3c24 4040 7c20 201c     TTT$..?D$<@@ |. 
   b8b55:	2040 3c1c 3040 3c40 2844 2810 4c44 9090     @ .<@0@<D(.(DL..
   b8b65:	7c90 6444 4c54 0044 3608 0041 0000 0077     .|DdTLD..6A...w.
   b8b75:	0000 3641 0008 0102 0402 3c02 2326 3c26     ..A6.......<&#&<
   b8b85:	a11e 61a1 3a12 4040 7a20 5438 5554 2159     ...a.:@@ z8TTUY!
   b8b95:	5555 4179 5422 7854 2142 5455 4078 5420     UUyA"TTxB!UTx@ T
   b8ba5:	7955 0c40 521e 1272 5539 5555 3959 5454     Uy@..Rr.9UUUY9TT
   b8bb5:	5954 5539 5454 0058 4500 417c 0200 7d45     TY9UTTX..E|A..E}
   b8bc5:	0042 4501 407c 127d 1211 f07d 2528 f028     B..E|@}...}.(%(.
   b8bd5:	547c 4555 2000 5454 547c 0a7c 7f09 3249     |TUE. TT|T|...I2
   b8be5:	4949 3249 443a 4444 323a 484a 3048 413a     III2:DDD:2JHH0:A
   b8bf5:	2141 3a7a 4042 7820 9d00 a0a0 3d7d 4242     A!z:B@ x....}=BB
   b8c05:	3d42 403d 4040 3c3d ff24 2424 7e48 4349     B==@@@=<$.$$H~IC
   b8c15:	2b66 fc2f 2b2f 09ff f629 c020 7e88 0309     f+/./+..). ..~..
   b8c25:	5420 7954 0041 4400 417d 4830 4a48 3832      TTyA..D}A0HHJ28
   b8c35:	4040 7a22 7a00 0a0a 7d72 190d 7d31 2926     @@"z.z..r}..1}&)
   b8c45:	2f29 2628 2929 2629 4830 404d 3820 0808     )/(&)))&0HM@ 8..
   b8c55:	0808 0808 0808 2f38 c810 baac 102f 3428     ......8/..../.(4
   b8c65:	00fa 7b00 0000 1408 142a 2222 2a14 0814     ...{....*."".*..
   b8c75:	0055 0055 aa55 aa55 aa55 55ff 55ff 00ff     U.U.U.U.U..U.U..
   b8c85:	0000 00ff 1010 ff10 1400 1414 00ff 1010     ................
   b8c95:	00ff 10ff f010 f010 1414 fc14 1400 f714     ................
   b8ca5:	ff00 0000 00ff 14ff f414 fc04 1414 1017     ................
   b8cb5:	101f 1f10 1f10 1414 1f14 1000 1010 00f0     ................
   b8cc5:	0000 1f00 1010 1010 101f 1010 f010 0010     ................
   b8cd5:	0000 10ff 1010 1010 1010 1010 10ff 0000     ................
   b8ce5:	ff00 0014 ff00 ff00 0000 101f 0017 fc00     ................
   b8cf5:	f404 1414 1017 1417 f414 f404 0000 00ff     ................
   b8d05:	14f7 1414 1414 1414 00f7 14f7 1414 1417     ................
   b8d15:	1010 101f 141f 1414 14f4 1010 10f0 00f0     ................
   b8d25:	1f00 1f10 0000 1f00 0014 0000 14fc 0000     ................
   b8d35:	10f0 10f0 ff10 ff10 1414 ff14 1014 1010     ................
   b8d45:	001f 0000 f000 ff10 ffff ffff f0f0 f0f0     ................
   b8d55:	fff0 ffff 0000 0000 ff00 0fff 0f0f 0f0f     ................
   b8d65:	4438 3844 fc44 4a4a 344a 027e 0602 0206     8DD8D.JJJ4~.....
   b8d75:	027e 027e 5563 4149 3863 4444 043c 7e40     ~.~.cUIAc8DD<.@~
   b8d85:	1e20 0620 7e02 0202 a599 a5e7 1c99 492a      . ..~........*I
   b8d95:	1c2a 724c 7201 304c 4d4a 304d 4830 4878     *.Lr.rL0JMM00HxH
   b8da5:	bc30 5a62 3d46 493e 4949 7e00 0101 7e01     0.bZF=>III.~...~
   b8db5:	2a2a 2a2a 442a 5f44 4444 5140 444a 4040     *****DD_DD@QJD@@
   b8dc5:	4a44 4051 0000 01ff e003 ff80 0000 0808     DJQ@............
   b8dd5:	6b6b 3608 3612 3624 0f06 0f09 0006 1800     kk.6.6$6........
   b8de5:	0018 0000 1010 3000 ff40 0101 1f00 0101     .......0@.......
   b8df5:	001e 1d19 1217 3c00 3c3c 003c 0000 0000     .......<<<<.....
   b8e05:	0000                                         ...

000b8e08 <_ZTV12Adafruit_GFX>:
	...
   b8e18:	4f15 000b 6ff9 000b 40a5 000b 49c3 000b     .O...o...@...I..
   b8e28:	49c5 000b 49f7 000b 49d3 000b 49e5 000b     .I...I...I...I..
   b8e38:	4905 000b 49c3 000b 4bef 000b 4bed 000b     .I...I...K...K..
   b8e48:	4a0f 000b 4a4d 000b 4a87 000b 4acd 000b     .J..MJ...J...J..
   b8e58:	4ae9 000b 4b6d 000b                         .J..mK..

000b8e60 <_ZTV15Adafruit_SPITFT>:
	...
   b8e70:	4f15 000b 6ff9 000b 57a7 000b 523b 000b     .O...o...W..;R..
   b8e80:	5769 000b 535b 000b 5615 000b 55bb 000b     iW..[S...V...U..
   b8e90:	4905 000b 5267 000b 4bef 000b 56e3 000b     .I..gR...K...V..
   b8ea0:	553f 000b 54bf 000b 53fb 000b 4acd 000b     ?U...T...S...J..
   b8eb0:	4ae9 000b 4b6d 000b 40a5 000b 40a5 000b     .J..mK...@...@..

000b8ec0 <_ZL11cmd_240x240>:
   b8ec0:	0109 9680 8011 3aff 5581 360a 0801 042a     .......:.U.6..*.
   b8ed0:	0000 f000 042b 0000 f000 8021 130a 0a80     ....+.....!.....
   b8ee0:	8029 00ff                                   )...

000b8ee4 <_ZTV15Adafruit_ST7789>:
	...
   b8eec:	586d 000b 58d5 000b 4f15 000b 6ff9 000b     mX...X...O...o..
   b8efc:	57a7 000b 523b 000b 5769 000b 535b 000b     .W..;R..iW..[S..
   b8f0c:	5615 000b 55bb 000b 4905 000b 5267 000b     .V...U...I..gR..
   b8f1c:	586f 000b 56e3 000b 553f 000b 54bf 000b     oX...V..?U...T..
   b8f2c:	53fb 000b 4acd 000b 4ae9 000b 4b6d 000b     .S...J...J..mK..
   b8f3c:	59a1 000b 59c1 000b                         .Y...Y..

000b8f44 <_ZTV15Adafruit_ST77xx>:
	...
   b8f4c:	592d 000b 5a13 000b 4f15 000b 6ff9 000b     -Y...Z...O...o..
   b8f5c:	57a7 000b 523b 000b 5769 000b 535b 000b     .W..;R..iW..[S..
   b8f6c:	5615 000b 55bb 000b 4905 000b 5267 000b     .V...U...I..gR..
   b8f7c:	592f 000b 56e3 000b 553f 000b 54bf 000b     /Y...V..?U...T..
   b8f8c:	53fb 000b 4acd 000b 4ae9 000b 4b6d 000b     .S...J...J..mK..
   b8f9c:	59a1 000b 59c1 000b                         .Y...Y..

000b8fa4 <_ZTV7VL53L1X>:
	...
   b8fac:	5b67 000b 5b47 000b 5b31 000b 5aed 000b     g[..G[..1[...Z..
   b8fbc:	5b23 000b 5b09 000b 5aef 000b               #[...[...Z..

000b8fc8 <_ZL29VL51L1X_DEFAULT_CONFIGURATION>:
   b8fc8:	0100 0101 0002 0802 0800 0110 0001 0000     ................
   b8fd8:	ff00 0f00 0000 0000 2000 000b 0200 210a     ......... .....!
   b8fe8:	0000 0005 0000 c800 0000 ff38 0001 0008     ..........8.....
   b8ff8:	0100 0fdb f101 010d 0068 0880 00b8 0000     ........h.......
   b9008:	0f00 0089 0000 0000 0000 0f01 0e0d 000e     ................
   b9018:	0200 ffc7 009b 0000 0001 0000               ............

000b9024 <_ZTVSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE>:
	...
   b902c:	66e1 000b 66e7 000b 6725 000b 66f5 000b     .f...f..%g...f..
   b903c:	66e3 000b                                   .f..

000b9040 <_ZTVN5spark13EthernetClassE>:
	...
   b9048:	6c6f 000b 6c65 000b 6c5b 000b 6c51 000b     ol..el..[l..Ql..
   b9058:	6c45 000b 6c39 000b 6ed5 000b 6edd 000b     El..9l...n...n..
   b9068:	6c2d 000b 6c25 000b 6c1b 000b 6c11 000b     -l..%l...l...l..
   b9078:	6f0d 000b                                   .o..

000b907c <_ZTV7TwoWire>:
	...
   b9084:	6c8d 000b 6cd7 000b 6caf 000b 6c8f 000b     .l...l...l...l..
   b9094:	6cb7 000b 6cbf 000b 6cc7 000b 6ccf 000b     .l...l...l...l..

000b90a4 <_ZTV9IPAddress>:
	...
   b90ac:	6da5 000b 6d95 000b 6d97 000b 7061 0070     .m...m...m..app.

000b90bc <_ZTVN5spark12NetworkClassE>:
	...
   b90c4:	6e95 000b 6e9f 000b 6ea9 000b 6eb3 000b     .n...n...n...n..
   b90d4:	6ebd 000b 6ec9 000b 6ed5 000b 6edd 000b     .n...n...n...n..
   b90e4:	6ee5 000b 6ef1 000b 6ef9 000b 6f03 000b     .n...n...n...o..
   b90f4:	6f0d 000b                                   .o..

000b90f8 <_ZN12_GLOBAL__N_1L14clock_divisorsE>:
   b90f8:	0800 1810 2820 3830 5925 252d 2d6d 6425     .... (08%Y-%m-%d
   b9108:	2554 3a48 4d25 253a 2553 007a 7361 7463     T%H:%M:%S%z.asct
   b9118:	6d69 0065                                   ime.

000b911c <_ZTV11USARTSerial>:
	...
   b9124:	74dd 000b 7549 000b 7521 000b 6ff9 000b     .t..Iu..!u...o..
   b9134:	74f1 000b 750d 000b 74ff 000b 751b 000b     .t...u...t...u..
   b9144:	74df 000b 74e3 000b                         .t...t..

000b914c <_ZTV9USBSerial>:
	...
   b9154:	7587 000b 75ef 000b 75c5 000b 6ff9 000b     .u...u...u...o..
   b9164:	75b7 000b 7589 000b 7599 000b 75e9 000b     .u...u...u...u..
   b9174:	75a9 000b 7581 000b                         .u...u..

000b917c <_ZTVN5spark9WiFiClassE>:
	...
   b9184:	76e7 000b 76dd 000b 76d3 000b 7689 000b     .v...v...v...v..
   b9194:	76c7 000b 76bb 000b 6ed5 000b 6edd 000b     .v...v...n...n..
   b91a4:	76af 000b 76a7 000b 769d 000b 7693 000b     .v...v...v...v..
   b91b4:	6f0d 000b                                   .o..

000b91b8 <_ZSt7nothrow>:
   b91b8:	5200 4545 544e 6d20 6c61 6f6c 2063 7573     .REENT malloc su
   b91c8:	6363 6565 6564 0064 742f 706d 6a2f 6e65     cceeded./tmp/jen
   b91d8:	696b 736e 472d 4343 312d 2d30 6970 6570     kins-GCC-10-pipe
   b91e8:	696c 656e 342d 5f38 3032 3032 3131 3432     line-48_20201124
   b91f8:	315f 3036 3136 3038 3336 2f39 7273 2f63     _1606180639/src/
   b9208:	656e 6c77 6269 6e2f 7765 696c 2f62 696c     newlib/newlib/li
   b9218:	6362 732f 6474 696c 2f62 6172 646e 632e     bc/stdlib/rand.c
	...

000b9229 <link_const_variable_data_end>:
   b9229:	00          	.byte	0x00
	...

000b922c <link_constructors_location>:
   b922c:	000b48c5 	.word	0x000b48c5
   b9230:	000b66d1 	.word	0x000b66d1
   b9234:	000b6c79 	.word	0x000b6c79
   b9238:	000b6e85 	.word	0x000b6e85
   b923c:	000b6fe5 	.word	0x000b6fe5
   b9240:	000b7095 	.word	0x000b7095
   b9244:	000b74a5 	.word	0x000b74a5
   b9248:	000b74c9 	.word	0x000b74c9
   b924c:	000b76f1 	.word	0x000b76f1
